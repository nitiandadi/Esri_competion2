import{bF as w,bG as b,uA as V,bM as I,bz as q}from"./MapView-d4248bee.js";import{s as A,d as P}from"./cimAnalyzer-69a577a3.js";import{GeometryStyle as x,CIMSymbolRasterizer as D}from"./CIMSymbolRasterizer-ad1a5676.js";import"./index-9ba3f23e.js";import"./fontUtils-2b8978ff.js";import"./BidiEngine-836b7ef6.js";import"./GeometryUtils-53652037.js";import"./enums-4b2a86a0.js";import"./alignmentUtils-ae955d28.js";import"./definitions-19bfb61c.js";import"./number-b10bd8f5.js";import"./Rect-ea14f53a.js";import"./CIMResourceManager-a3b92d05.js";import"./Rasterizer-fd736c96.js";import"./_commonjsHelpers-2f3e7994.js";import"./rasterizingUtils-5a0afdfb.js";import"./imageutils-00b31d29.js";const g=new D(null,!0),m=w(b.size),F=w(b.maxSize),E=w(b.lineWidth),L=1;function k(e){const t=e==null?void 0:e.size;return typeof t=="number"?{width:t,height:t}:{width:t!=null&&typeof t=="object"&&"width"in t?t.width:null,height:t!=null&&typeof t=="object"&&"height"in t?t.height:null}}async function ot(e,t={}){var G;const{node:M,opacity:v,symbolConfig:h}=t,j=typeof h=="object"&&"isSquareFill"in h&&h.isSquareFill,S=t.cimOptions||t,o=S.geometryType||V((G=e==null?void 0:e.data)==null?void 0:G.symbol),i=k(t),{feature:z,fieldMap:C}=S;if(i.width==null||i.height==null){const r=await A.resolveSymbolOverrides(e.data,z,null,C,o);if(!r)return null;(e=e.clone()).data={type:"CIMSymbolReference",symbol:r},e.data.primitiveOverrides=void 0;const y=[];P.fetchResources(r,g.resourceManager,y),y.length>0&&await Promise.all(y);const n=P.getEnvelope(r,null,g.resourceManager),d=n==null?void 0:n.width,f=n==null?void 0:n.height;i.width=o==="esriGeometryPolygon"?m:o==="esriGeometryPolyline"?E:d!=null&&isFinite(d)?Math.min(d,F):m,i.height=o==="esriGeometryPolygon"?m:f!=null&&isFinite(f)?Math.max(Math.min(f,F),L):m}const p=await g.rasterizeCIMSymbolAsync(e,z,i,j||o!=="esriGeometryPolygon"?x.Preview:x.Legend,C,o);if(!p)return null;const{width:O,height:R}=p,l=document.createElement("canvas");l.width=O,l.height=R,l.getContext("2d").putImageData(p,0,0);const c=I(i.width),u=I(i.height),s=new Image(c,u);s.src=l.toDataURL(),v!=null&&(s.style.opacity=`${v}`);let a=s;if(t.effectView!=null){const r={shape:{type:"image",x:0,y:0,width:c,height:u,src:s.src},fill:null,stroke:null,offset:[0,0]};a=q([[r]],[c,u],{effectView:t.effectView})}return M&&a&&M.appendChild(a),a}export{ot as previewCIMSymbol};
