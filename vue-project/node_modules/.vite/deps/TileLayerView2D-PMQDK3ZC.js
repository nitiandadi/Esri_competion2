import {
  n as n2,
  o,
  t
} from "./chunk-PMFBEROT.js";
import {
  P,
  S,
  a as a2
} from "./chunk-UCTQXBZY.js";
import {
  n
} from "./chunk-QXHTILBL.js";
import "./chunk-L4QCZ5IV.js";
import "./chunk-VF6NHVYX.js";
import "./chunk-7BLRSDCT.js";
import {
  ae
} from "./chunk-URZUJFLK.js";
import "./chunk-YTHRKEFA.js";
import "./chunk-BZHMRRCA.js";
import "./chunk-3DGJISU2.js";
import "./chunk-B3G3IDDC.js";
import "./chunk-PZFCQGRH.js";
import "./chunk-BXMNCRGS.js";
import "./chunk-CXZVU2FA.js";
import "./chunk-6OTYIG36.js";
import "./chunk-5JO7O74F.js";
import "./chunk-3EZVDPMQ.js";
import "./chunk-OAO74KEG.js";
import {
  i as i2
} from "./chunk-O3BUMSRA.js";
import {
  f,
  u
} from "./chunk-QLNXKYD4.js";
import "./chunk-FYUZA5OZ.js";
import "./chunk-ZUM343MO.js";
import "./chunk-YFO2JKEL.js";
import "./chunk-22JWL5DZ.js";
import "./chunk-MPH4JD6M.js";
import "./chunk-CSXCA65Q.js";
import "./chunk-ABGFNHDH.js";
import "./chunk-FNX4STT3.js";
import "./chunk-MUKO5DYY.js";
import "./chunk-RSRGRQCE.js";
import "./chunk-KS5WYVQD.js";
import "./chunk-HCWIAQV3.js";
import "./chunk-B4YFY6OM.js";
import "./chunk-B5NSOHW4.js";
import "./chunk-DEBYWO5M.js";
import "./chunk-37BTU2M3.js";
import "./chunk-BS6YMIVT.js";
import "./chunk-E4XXNNS2.js";
import "./chunk-XTS6M5HJ.js";
import "./chunk-LH33CNCX.js";
import "./chunk-BEFJ4DTX.js";
import "./chunk-QXR6CWAU.js";
import "./chunk-XF6VFSZY.js";
import "./chunk-46UYDOF4.js";
import "./chunk-372CNO3V.js";
import "./chunk-BZHNKPDE.js";
import "./chunk-WZIJLPDJ.js";
import "./chunk-QE6RY3R6.js";
import "./chunk-7QI3NXOO.js";
import "./chunk-B4N37FMV.js";
import "./chunk-VGTB7JUJ.js";
import "./chunk-QARJUBJV.js";
import "./chunk-UNZAS473.js";
import "./chunk-M3JCSQZU.js";
import "./chunk-QKNKBGUI.js";
import "./chunk-KKWP7B7A.js";
import "./chunk-34RKANBE.js";
import "./chunk-NPWYQ752.js";
import "./chunk-Y5X2DTPS.js";
import "./chunk-YNAIRSAG.js";
import "./chunk-PYN2S3CJ.js";
import "./chunk-AETXSJBI.js";
import "./chunk-NH5FBVDR.js";
import "./chunk-S7QT5QV2.js";
import "./chunk-DJBFAFOP.js";
import "./chunk-QCYWXXBM.js";
import "./chunk-CCKR7UFK.js";
import "./chunk-DNXRTHCH.js";
import "./chunk-OGEJGMAT.js";
import "./chunk-7BJCYBN2.js";
import "./chunk-VQUDNY75.js";
import "./chunk-QDIJO3T2.js";
import "./chunk-MLSUYO53.js";
import "./chunk-6WFGRBCZ.js";
import "./chunk-XNKMMOMK.js";
import "./chunk-DZUX232E.js";
import "./chunk-GPDPMYIV.js";
import "./chunk-VVXG6GJ2.js";
import "./chunk-TZ6ULSSY.js";
import "./chunk-Y5D76CBW.js";
import "./chunk-X6QOURMW.js";
import {
  r
} from "./chunk-DBAHFVCB.js";
import {
  y as y2
} from "./chunk-E4NB2TTC.js";
import "./chunk-U4SHM5SM.js";
import {
  h
} from "./chunk-KS2FU363.js";
import "./chunk-UPHB5F2K.js";
import "./chunk-SXVHYYSN.js";
import "./chunk-A7TOAPHC.js";
import {
  e as e2
} from "./chunk-EPKCQJY3.js";
import {
  i
} from "./chunk-K5VZNBYA.js";
import "./chunk-3JVZYYA3.js";
import "./chunk-MWIMWDJV.js";
import "./chunk-6D47PMZF.js";
import "./chunk-2KKFAUOD.js";
import "./chunk-M2DTCG2D.js";
import "./chunk-AVTBKAM2.js";
import "./chunk-T5EL7TIL.js";
import "./chunk-IJT6XLR5.js";
import "./chunk-VOUOLBXG.js";
import "./chunk-KGJHWKNE.js";
import "./chunk-X7NPMCZZ.js";
import "./chunk-CFTD44JM.js";
import "./chunk-MI7FJDLG.js";
import "./chunk-E4FSIE7C.js";
import "./chunk-HERKGCCA.js";
import "./chunk-SB6UPWEY.js";
import "./chunk-XTUZNPIG.js";
import "./chunk-6VXAAN5J.js";
import "./chunk-5X34WYS6.js";
import "./chunk-7B4WWJ6P.js";
import "./chunk-IN3HJEU7.js";
import "./chunk-KQSNRPAM.js";
import "./chunk-XS5XP6X5.js";
import "./chunk-RD6VLGGM.js";
import "./chunk-PVSQPGR7.js";
import "./chunk-2YEIG5KK.js";
import "./chunk-7HK5OJHH.js";
import "./chunk-7WIVOZQ6.js";
import "./chunk-RZLXFQKV.js";
import "./chunk-UBZEFQ76.js";
import "./chunk-D5KVII6M.js";
import "./chunk-G3ZCYHOR.js";
import "./chunk-PDQWP33P.js";
import "./chunk-5Z6OHN6Z.js";
import "./chunk-TKZTELJQ.js";
import "./chunk-BLEGKDS6.js";
import "./chunk-BHKUW5DD.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-ZUCPDNAU.js";
import "./chunk-HNMSCBZJ.js";
import "./chunk-OIMP53SC.js";
import "./chunk-43D3HGVY.js";
import "./chunk-DZGHLWSV.js";
import "./chunk-P4V73ZOM.js";
import "./chunk-6UZRMITW.js";
import "./chunk-HSDJ4PR2.js";
import {
  l
} from "./chunk-Y44VKGHM.js";
import "./chunk-WPXKVF3K.js";
import "./chunk-EXVE3AJP.js";
import "./chunk-Y74QPJ3T.js";
import "./chunk-OVUZXV2P.js";
import "./chunk-VTZGYKHD.js";
import "./chunk-MI3ZQEJV.js";
import "./chunk-HRIBADXS.js";
import "./chunk-GPWY2LRL.js";
import "./chunk-3ZZKMNU2.js";
import "./chunk-SXUQWH7K.js";
import "./chunk-WAUZFAX7.js";
import "./chunk-3JPUCMWK.js";
import "./chunk-GCXFCVSM.js";
import "./chunk-CU2KO5NT.js";
import "./chunk-EXL23DF3.js";
import "./chunk-ECM7B2HV.js";
import "./chunk-L5JOPRWD.js";
import "./chunk-JYFMP3PO.js";
import "./chunk-CBAVHWPY.js";
import "./chunk-OJCBSPLX.js";
import "./chunk-EMRZKKP3.js";
import "./chunk-VWOAL3VX.js";
import "./chunk-SQBJ6KPL.js";
import "./chunk-MKMLHQNH.js";
import "./chunk-PHPHIDTF.js";
import "./chunk-P6SQPYDS.js";
import "./chunk-SFT755VT.js";
import "./chunk-GWFG4NRK.js";
import "./chunk-YXFIF2O5.js";
import "./chunk-E4MAG7OK.js";
import "./chunk-YVQV6YXG.js";
import "./chunk-3KALZGFA.js";
import "./chunk-M47YTHQ5.js";
import "./chunk-OJKTPYH5.js";
import "./chunk-PEP3ZFMY.js";
import "./chunk-3U7SS7RC.js";
import "./chunk-UHF3OUQV.js";
import "./chunk-6U5BQYRW.js";
import "./chunk-LUOENZ4F.js";
import "./chunk-QGRPG4XS.js";
import "./chunk-M73MMEC7.js";
import {
  E
} from "./chunk-A5CTLI5A.js";
import "./chunk-WUBKNERF.js";
import "./chunk-VACYSSCT.js";
import "./chunk-4HXSKBAW.js";
import "./chunk-FFQG5TD2.js";
import "./chunk-DDRAFOUW.js";
import "./chunk-F4DUNBGT.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-GLDJLPWH.js";
import "./chunk-GMLVDTS4.js";
import "./chunk-G7CHVXDR.js";
import "./chunk-OAZLVZFS.js";
import "./chunk-CPSZPA6H.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-Y54MR3BP.js";
import "./chunk-6VTYOWNK.js";
import "./chunk-JY6H6KI3.js";
import {
  j
} from "./chunk-TTCQP5LX.js";
import {
  s
} from "./chunk-C2WY74GI.js";
import "./chunk-MCOYI7PX.js";
import "./chunk-EL4OGCJC.js";
import "./chunk-XPATKIHO.js";
import "./chunk-MKHZ5X6F.js";
import "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/views/2d/layers/TileLayerView2D.js
var T = [0, 0];
var v = class extends i2(t(f(u))) {
  constructor() {
    super(...arguments), this._fetchQueue = null, this._highlightGraphics = new i(), this._highlightView = null, this._popupHighlightHelper = null, this._tileStrategy = null, this.layer = null;
  }
  get resampling() {
    return !("resampling" in this.layer) || false !== this.layer.resampling;
  }
  update(e3) {
    var _a;
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume(), (_a = this._highlightView) == null ? void 0 : _a.processUpdate(e3);
  }
  attach() {
    const e3 = "tileServers" in this.layer ? this.layer.tileServers : null;
    if (this._tileInfoView = new h(this.layer.tileInfo, this.layer.fullExtent), this._fetchQueue = new y2({ tileInfoView: this._tileInfoView, concurrency: e3 && 10 * e3.length || 10, process: (e4, i3) => this.fetchTile(e4, i3) }), this._tileStrategy = new r({ cachePolicy: "keep", resampling: this.resampling, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), P(this, this.layer)) {
      const e4 = this._highlightView = new ae({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new n(this.view.featuresTilingScheme), defaultPointSymbolEnabled: false });
      this.container.addChild(this._highlightView.container), this._popupHighlightHelper = new S({ createFetchPopupFeaturesQueryGeometry: (e5, i3) => a2(e5, i3, this.view), highlightGraphics: this._highlightGraphics, highlightGraphicUpdated: (i3, t2) => {
        e4.graphicUpdateHandler({ graphic: i3, property: t2 });
      }, layerView: this, updatingHandles: this.updatingHandles });
    }
    this.requestUpdate(), this.addAttachHandles(l(() => this.resampling, () => {
      this.doRefresh();
    })), super.attach();
  }
  detach() {
    var _a;
    super.detach(), this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), (_a = this._popupHighlightHelper) == null ? void 0 : _a.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = this._popupHighlightHelper = null;
  }
  async fetchPopupFeatures(e3, i3) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.fetchPopupFeatures(e3, i3) : [];
  }
  highlight(e3) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.highlight(e3) : { remove() {
    } };
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e3) {
    var _a;
    return E((_a = this.layer.tileInfo) == null ? void 0 : _a.spatialReference, e3);
  }
  async doRefresh() {
    !this.attached || this.updateRequested || this.suspended || (this._fetchQueue.reset(), this._tileStrategy.tiles.forEach((e3) => this._enqueueTileFetch(e3)));
  }
  isUpdating() {
    var _a;
    return ((_a = this._fetchQueue) == null ? void 0 : _a.updating) ?? false;
  }
  acquireTile(e3) {
    const i3 = this._bitmapView.createTile(e3), t2 = i3.bitmap;
    return [t2.x, t2.y] = this._tileInfoView.getTileCoords(T, i3.key), t2.resolution = this._tileInfoView.getTileResolution(i3.key), [t2.width, t2.height] = this._tileInfoView.tileInfo.size, this._enqueueTileFetch(i3), this._bitmapView.addChild(i3), this.requestUpdate(), i3;
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  async fetchTile(e3, i3 = {}) {
    const r2 = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: s2, resamplingLevel: o2 = 0 } = i3;
    if (!r2)
      try {
        return await this._fetchImage(e3, s2);
      } catch (a3) {
        if (!j(a3) && !this.resampling)
          return o(this._tileInfoView.tileInfo.size);
        if (o2 < 3) {
          const t2 = this._tileInfoView.getTileParentId(e3.id);
          if (t2) {
            const r3 = new e2(t2), s3 = await this.fetchTile(r3, { ...i3, resamplingLevel: o2 + 1 });
            return n2(this._tileInfoView, s3, r3, e3);
          }
        }
        throw a3;
      }
    const l2 = new e2(0, 0, 0, 0);
    let h2;
    try {
      if (await r2.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, l2, { signal: s2 }), l2.level !== e3.level && !this.resampling)
        return o(this._tileInfoView.tileInfo.size);
      h2 = await this._fetchImage(l2, s2);
    } catch (a3) {
      if (j(a3))
        throw a3;
      h2 = await this._fetchImage(e3, s2);
    }
    return this.resampling ? n2(this._tileInfoView, h2, l2, e3) : h2;
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const i3 = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = i3, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (r2) {
        j(r2) || s.getLogger(this.declaredClass).error(r2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, i3) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: i3 });
  }
};
e([y()], v.prototype, "_fetchQueue", void 0), e([y()], v.prototype, "resampling", null), v = e([a("esri.views.2d.layers.TileLayerView2D")], v);
var I = v;
export {
  I as default
};
//# sourceMappingURL=TileLayerView2D-PMQDK3ZC.js.map
