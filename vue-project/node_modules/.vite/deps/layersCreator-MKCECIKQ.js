import {
  m
} from "./chunk-2NR2KW7W.js";
import {
  a
} from "./chunk-FVDRNGFB.js";
import "./chunk-B2TSVD6J.js";
import "./chunk-BRB2RXM6.js";
import "./chunk-RPEYGJNK.js";
import "./chunk-QUU4FGR5.js";
import {
  t
} from "./chunk-MSSVX4MF.js";
import "./chunk-6PRVLRT2.js";
import "./chunk-RSFKYEWD.js";
import {
  x
} from "./chunk-GKH6NL2K.js";
import "./chunk-HZKQDRDV.js";
import "./chunk-FAK3SJAD.js";
import "./chunk-T5PSDOZP.js";
import "./chunk-REIXEATJ.js";
import "./chunk-YEFLZ2OV.js";
import "./chunk-X6SQQQR4.js";
import "./chunk-TNQLNDIQ.js";
import "./chunk-PSN7WPOI.js";
import "./chunk-FA3YUERM.js";
import "./chunk-LVRAFE6T.js";
import "./chunk-LSUFI7PR.js";
import "./chunk-JT54I3AY.js";
import "./chunk-TNTTCGVB.js";
import "./chunk-DC3QI5ZE.js";
import "./chunk-EGHLQERQ.js";
import "./chunk-6YBCJ6DZ.js";
import "./chunk-5CMPUNQG.js";
import "./chunk-QJXSE36Y.js";
import "./chunk-WV4G3ROK.js";
import "./chunk-M3KO43BW.js";
import {
  j
} from "./chunk-SZO7ZKE4.js";
import "./chunk-7OAHPHOV.js";
import "./chunk-I2U7UK6N.js";
import "./chunk-CPUYSXBP.js";
import "./chunk-MJFFZ3MM.js";
import "./chunk-B6GJAETG.js";
import "./chunk-FC74MT6E.js";
import "./chunk-H2ENCYR3.js";
import "./chunk-SVHG5VY2.js";
import "./chunk-FQ7L63IU.js";
import "./chunk-6K5VVUVI.js";
import "./chunk-S47644HM.js";
import "./chunk-QXPN4D5D.js";
import "./chunk-DLM7WQKI.js";
import "./chunk-7GTATSRF.js";
import "./chunk-MTJ2HM2W.js";
import "./chunk-PXVSWY3C.js";
import {
  E
} from "./chunk-QLY5H3XF.js";
import "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import "./chunk-WHB7G7RI.js";
import "./chunk-DFKQJ226.js";

// node_modules/@arcgis/core/portal/support/featureCollectionUtils.js
function e(e2) {
  return t2(e2, "notes");
}
function r(e2) {
  return t2(e2, "markup");
}
function n(e2) {
  return t2(e2, "route");
}
function t2(e2, r2) {
  return !(!e2.layerType || "ArcGISFeatureLayer" !== e2.layerType) && e2.featureCollectionType === r2;
}

// node_modules/@arcgis/core/layers/support/layersCreator.js
async function c(e2, a2, y) {
  if (!a2)
    return;
  const t3 = [];
  for (const r2 of a2) {
    const e3 = d(r2, y);
    "GroupLayer" === r2.layerType ? t3.push(M(e3, r2, y)) : t3.push(e3);
  }
  const i = await E(t3);
  for (const r2 of i)
    r2.value && e2.add(r2.value);
}
var l = { ArcGISDimensionLayer: "DimensionLayer", ArcGISFeatureLayer: "FeatureLayer", ArcGISImageServiceLayer: "ImageryLayer", ArcGISMapServiceLayer: "MapImageLayer", PointCloudLayer: "PointCloudLayer", ArcGISSceneServiceLayer: "SceneLayer", IntegratedMeshLayer: "IntegratedMeshLayer", OGCFeatureLayer: "OGCFeatureLayer", BuildingSceneLayer: "BuildingSceneLayer", ArcGISTiledElevationServiceLayer: "ElevationLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", ArcGISTiledMapServiceLayer: "TileLayer", GroupLayer: "GroupLayer", GeoJSON: "GeoJSONLayer", WebTiledLayer: "WebTileLayer", CSV: "CSVLayer", VectorTileLayer: "VectorTileLayer", WFS: "WFSLayer", WMS: "WMSLayer", DefaultTileLayer: "TileLayer", KML: "KMLLayer", RasterDataLayer: "UnsupportedLayer", Voxel: "VoxelLayer", LineOfSightLayer: "LineOfSightLayer" };
var s = { ArcGISTiledElevationServiceLayer: "ElevationLayer", DefaultTileLayer: "ElevationLayer", RasterDataElevationLayer: "UnsupportedLayer" };
var p = { ArcGISTiledMapServiceLayer: "TileLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", OpenStreetMap: "OpenStreetMapLayer", WebTiledLayer: "WebTileLayer", VectorTileLayer: "VectorTileLayer", ArcGISImageServiceLayer: "UnsupportedLayer", WMS: "UnsupportedLayer", ArcGISMapServiceLayer: "UnsupportedLayer", ArcGISSceneServiceLayer: "SceneLayer", DefaultTileLayer: "TileLayer" };
var S = { ArcGISAnnotationLayer: "UnsupportedLayer", ArcGISDimensionLayer: "UnsupportedLayer", ArcGISFeatureLayer: "FeatureLayer", ArcGISImageServiceLayer: "ImageryLayer", ArcGISImageServiceVectorLayer: "ImageryLayer", ArcGISMapServiceLayer: "MapImageLayer", ArcGISStreamLayer: "StreamLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", ArcGISTiledMapServiceLayer: "TileLayer", BingMapsAerial: "BingMapsLayer", BingMapsRoad: "BingMapsLayer", BingMapsHybrid: "BingMapsLayer", CSV: "CSVLayer", DefaultTileLayer: "TileLayer", GeoRSS: "GeoRSSLayer", GeoJSON: "GeoJSONLayer", GroupLayer: "GroupLayer", KML: "KMLLayer", MediaLayer: "MediaLayer", OGCFeatureLayer: "OGCFeatureLayer", OrientedImageryLayer: "OrientedImageryLayer", SubtypeGroupLayer: "SubtypeGroupLayer", VectorTileLayer: "VectorTileLayer", WFS: "WFSLayer", WMS: "WMSLayer", WebTiledLayer: "WebTileLayer" };
var u = { ArcGISFeatureLayer: "FeatureLayer" };
var I = { ArcGISImageServiceLayer: "ImageryLayer", ArcGISImageServiceVectorLayer: "ImageryLayer", ArcGISMapServiceLayer: "MapImageLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", ArcGISTiledMapServiceLayer: "TileLayer", OpenStreetMap: "OpenStreetMapLayer", VectorTileLayer: "VectorTileLayer", WebTiledLayer: "WebTileLayer", BingMapsAerial: "BingMapsLayer", BingMapsRoad: "BingMapsLayer", BingMapsHybrid: "BingMapsLayer", WMS: "WMSLayer", DefaultTileLayer: "TileLayer" };
async function d(e2, r2) {
  return m2(await T(e2, r2), e2, r2);
}
async function m2(e2, r2, a2) {
  const y = new e2();
  return y.read(r2, a2.context), "group" === y.type && g(r2) && await A(y, r2, a2.context), await t(y, a2.context), y;
}
async function T(e2, r2) {
  var _a;
  const o = r2.context, c2 = f(o);
  let l2 = e2.layerType || e2.type;
  !l2 && r2 && r2.defaultLayerType && (l2 = r2.defaultLayerType);
  const s2 = c2[l2];
  let p2 = s2 ? a[s2] : a.UnknownLayer;
  if (G(e2)) {
    const r3 = o == null ? void 0 : o.portal;
    if (e2.itemId) {
      const t3 = new x({ id: e2.itemId, portal: r3 });
      await t3.load();
      const i = (await m(t3)).className || "UnknownLayer";
      p2 = a[i];
    }
  } else
    "ArcGISFeatureLayer" === l2 ? e(e2) || r(e2) ? p2 = a.MapNotesLayer : n(e2) ? p2 = a.RouteLayer : g(e2) && (p2 = a.GroupLayer) : e2.wmtsInfo && e2.wmtsInfo.url && e2.wmtsInfo.layerIdentifier ? p2 = a.WMTSLayer : "WFS" === l2 && "2.0.0" !== ((_a = e2.wfsInfo) == null ? void 0 : _a.version) && (p2 = a.UnsupportedLayer);
  return p2();
}
function g(e2) {
  var _a, _b;
  if ("ArcGISFeatureLayer" !== e2.layerType || G(e2))
    return false;
  return (((_b = (_a = e2.featureCollection) == null ? void 0 : _a.layers) == null ? void 0 : _b.length) ?? 0) > 1;
}
function G(e2) {
  return "Feature Collection" === e2.type;
}
function f(e2) {
  let r2;
  if ("web-scene" === e2.origin)
    switch (e2.layerContainerType) {
      case "basemap":
        r2 = p;
        break;
      case "ground":
        r2 = s;
        break;
      default:
        r2 = l;
    }
  else
    switch (e2.layerContainerType) {
      case "basemap":
        r2 = I;
        break;
      case "tables":
        r2 = u;
        break;
      default:
        r2 = S;
    }
  return r2;
}
async function M(r2, a2, y) {
  const t3 = new j(), i = c(t3, Array.isArray(a2.layers) ? a2.layers : [], y), L = await r2;
  if (await i, "group" === L.type)
    return L.layers.addMany(t3), L;
}
async function A(e2, r2, y) {
  var _a;
  const t3 = a.FeatureLayer, i = await t3(), L = r2.featureCollection, n2 = L == null ? void 0 : L.showLegend, o = (_a = L == null ? void 0 : L.layers) == null ? void 0 : _a.map((a2, t4) => {
    var _a2;
    const L2 = new i();
    L2.read(a2, y);
    const o2 = { ...y, ignoreDefaults: true };
    return L2.read({ id: `${e2.id}-sublayer-${t4}`, visibility: ((_a2 = r2.visibleLayers) == null ? void 0 : _a2.includes(t4)) ?? true }, o2), null != n2 && L2.read({ showLegend: n2 }, o2), L2;
  });
  e2.layers.addMany(o ?? []);
}
export {
  c as populateOperationalLayers
};
//# sourceMappingURL=layersCreator-MKCECIKQ.js.map
