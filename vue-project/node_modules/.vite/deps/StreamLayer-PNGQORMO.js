import {
  p as p6
} from "./chunk-2HL3WCZQ.js";
import {
  n as n3,
  p as p7
} from "./chunk-YXIPNXU3.js";
import "./chunk-FCDGNIOF.js";
import "./chunk-FAQPWMFY.js";
import {
  s as s3
} from "./chunk-KAJ7UKNO.js";
import {
  C,
  i
} from "./chunk-ARRABRN2.js";
import "./chunk-XKQGIVQO.js";
import {
  a as a2
} from "./chunk-XJBZ6UIM.js";
import "./chunk-2LQUYG3Y.js";
import {
  o as o4
} from "./chunk-Y26PAPAL.js";
import {
  p as p5
} from "./chunk-TQCDA7Z6.js";
import {
  _
} from "./chunk-VRZTCZFJ.js";
import {
  p as p2
} from "./chunk-AZFJJ5Y2.js";
import {
  n
} from "./chunk-EJKIE4MZ.js";
import "./chunk-YZ3HZMEM.js";
import "./chunk-5XBZ477A.js";
import {
  t as t2
} from "./chunk-YUXNJDFN.js";
import "./chunk-TKZTELJQ.js";
import {
  c as c2
} from "./chunk-CPJE5ZZA.js";
import {
  D,
  I,
  c,
  f as f2,
  l as l2,
  m,
  p
} from "./chunk-LJFFMEVT.js";
import "./chunk-5IWWLTWU.js";
import {
  O
} from "./chunk-74KT22JL.js";
import {
  t
} from "./chunk-DE73MUZI.js";
import "./chunk-BQHZXXFC.js";
import {
  b
} from "./chunk-4JB2KWLF.js";
import "./chunk-3MAMOMOP.js";
import {
  x as x2
} from "./chunk-QPSL5BDS.js";
import "./chunk-37HBRPHL.js";
import "./chunk-AIOICOJJ.js";
import "./chunk-7WIVOZQ6.js";
import "./chunk-OXCMSIKI.js";
import "./chunk-HWGER6NN.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-ZXEHLMMH.js";
import "./chunk-BHKUW5DD.js";
import "./chunk-G3ZCYHOR.js";
import "./chunk-TKLFTPA5.js";
import "./chunk-5W2WWLX7.js";
import {
  n as n2,
  o as o3,
  p as p4
} from "./chunk-U6PCZE74.js";
import {
  T as T2
} from "./chunk-WLWGIFGY.js";
import "./chunk-IZJW67TO.js";
import "./chunk-Q4UXP7RG.js";
import "./chunk-JZSNGIOH.js";
import "./chunk-EXHPOUUQ.js";
import "./chunk-6PNW7TCI.js";
import "./chunk-6UZRMITW.js";
import "./chunk-HSDJ4PR2.js";
import "./chunk-QP5ZWBKN.js";
import {
  p as p3
} from "./chunk-QAGMOCSO.js";
import "./chunk-EPZLAQP3.js";
import "./chunk-VSUGA5AN.js";
import "./chunk-E3JHIVZP.js";
import "./chunk-3ACAMBZX.js";
import "./chunk-G3A2XEXX.js";
import "./chunk-JKBONAYS.js";
import "./chunk-YSJ4W32U.js";
import "./chunk-3EIJOCWD.js";
import "./chunk-HRIBADXS.js";
import "./chunk-CSFUQCFV.js";
import {
  M
} from "./chunk-ZUIHAM2A.js";
import "./chunk-SABBLK7S.js";
import "./chunk-2G4WAYFD.js";
import "./chunk-PK5IA5PH.js";
import "./chunk-7FGYV4GW.js";
import "./chunk-CXHYHUY6.js";
import "./chunk-CXBJMCKT.js";
import "./chunk-ULOJUU6K.js";
import "./chunk-3CXPBSW5.js";
import "./chunk-PLL74BYO.js";
import "./chunk-AMV7VELH.js";
import "./chunk-UZTIVDTR.js";
import "./chunk-33RBBVRO.js";
import "./chunk-VWOAL3VX.js";
import "./chunk-II3EAW7L.js";
import {
  U
} from "./chunk-JU2WP2RZ.js";
import "./chunk-NI6ENKKR.js";
import "./chunk-6XDV3BWZ.js";
import {
  k
} from "./chunk-CH2BQDQT.js";
import "./chunk-OTDDRQS2.js";
import {
  F,
  x as x3
} from "./chunk-W3UIP6CW.js";
import "./chunk-CHJGFW3N.js";
import "./chunk-25GQOVW6.js";
import "./chunk-QLGPYDHY.js";
import "./chunk-IMKS3PQX.js";
import "./chunk-5WYME2YP.js";
import "./chunk-PEP3ZFMY.js";
import {
  x
} from "./chunk-FZCZQIVS.js";
import "./chunk-JYX5X6UR.js";
import {
  y as y2
} from "./chunk-MQUNEV3K.js";
import "./chunk-WVICJPEU.js";
import "./chunk-TZBBKXOW.js";
import "./chunk-VOSZ2G24.js";
import "./chunk-YMGINT43.js";
import {
  o as o2
} from "./chunk-2WLZX6A7.js";
import "./chunk-M7CMZTD6.js";
import "./chunk-ERJGVLTB.js";
import {
  f2 as f,
  w2
} from "./chunk-T5VSOT6T.js";
import "./chunk-OHZM2VYI.js";
import "./chunk-FSB7TIRN.js";
import "./chunk-UIMO4FGN.js";
import "./chunk-NXJOIK2O.js";
import "./chunk-DDRAFOUW.js";
import "./chunk-F4DUNBGT.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-E4M4B5ZQ.js";
import "./chunk-JATK7CEQ.js";
import {
  o
} from "./chunk-74TXAD7S.js";
import "./chunk-HIRLBWV3.js";
import {
  l
} from "./chunk-AFQAO5F4.js";
import {
  a2 as a,
  e,
  r as r2,
  u2 as u,
  y3 as y
} from "./chunk-OA5ES74L.js";
import "./chunk-6VTYOWNK.js";
import {
  T
} from "./chunk-RLEMMDH4.js";
import {
  w
} from "./chunk-6ZUWLK7F.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-YVZY5LDV.js";
import "./chunk-H32MMKAJ.js";
import "./chunk-MKHZ5X6F.js";
import {
  r
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/layers/support/PurgeOptions.js
var t3;
var i2 = t3 = class extends l {
  constructor() {
    super(...arguments), this.age = null, this.ageReceived = null, this.displayCount = null, this.maxObservations = 1;
  }
  clone() {
    return new t3({ age: this.age, ageReceived: this.ageReceived, displayCount: this.displayCount, maxObservations: this.maxObservations });
  }
};
e([y({ type: Number, json: { write: true } })], i2.prototype, "age", void 0), e([y({ type: Number, json: { write: true } })], i2.prototype, "ageReceived", void 0), e([y({ type: Number, json: { write: true } })], i2.prototype, "displayCount", void 0), e([y({ type: Number, json: { write: true } })], i2.prototype, "maxObservations", void 0), i2 = t3 = e([a("esri.layers.support.PurgeOptions")], i2);
var p8 = i2;

// node_modules/@arcgis/core/layers/StreamLayer.js
var Y = s3();
function Z(e2, t4) {
  return new s2("layer:unsupported", `Layer (${e2.title}, ${e2.id}) of type '${e2.declaredClass}' ${t4}`, { layer: e2 });
}
var ee = class extends n3(p7(n(a2(t2(p2(p6(c2(_(O(o4(b))))))))))) {
  constructor(...e2) {
    super(...e2), this.copyright = null, this.definitionExpression = null, this.displayField = null, this.elevationInfo = null, this.fields = null, this.fieldsIndex = null, this.geometryDefinition = null, this.geometryType = null, this.labelsVisible = true, this.labelingInfo = null, this.legendEnabled = true, this.maxReconnectionAttempts = 0, this.maxReconnectionInterval = 20, this.maxScale = 0, this.minScale = 0, this.objectIdField = null, this.operationalLayerType = "ArcGISStreamLayer", this.popupEnabled = true, this.popupTemplate = null, this.purgeOptions = new p8(), this.screenSizePerspectiveEnabled = true, this.sourceJSON = null, this.spatialReference = f.WGS84, this.type = "stream", this.url = null, this.updateInterval = 300, this.webSocketUrl = null;
  }
  normalizeCtorArgs(e2, t4) {
    return "string" == typeof e2 ? { url: e2, ...t4 } : e2;
  }
  load(e2) {
    if (!("WebSocket" in globalThis))
      return this.addResolvingPromise(Promise.reject(new s2("stream-layer:websocket-unsupported", "WebSocket is not supported in this browser. StreamLayer will not have real-time connection with the stream service."))), Promise.resolve(this);
    const t4 = r(e2) ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Stream Service", "Feed"] }, e2).catch(w).then(() => this._fetchService(t4))), Promise.resolve(this);
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  set renderer(e2) {
    F(e2, this.fieldsIndex), this._set("renderer", e2);
  }
  readRenderer(e2, t4, s4) {
    const n4 = (t4 = t4.layerDefinition || t4).drawingInfo && t4.drawingInfo.renderer || void 0;
    if (n4) {
      const e3 = o3(n4, t4, s4) || void 0;
      return e3 || s.getLogger(this.declaredClass).error("Failed to create renderer", { rendererDefinition: t4.drawingInfo.renderer, layer: this, context: s4 }), e3;
    }
    if (t4.defaultSymbol)
      return t4.types && t4.types.length ? new T2({ defaultSymbol: te(t4.defaultSymbol, t4, s4), field: t4.typeIdField, uniqueValueInfos: t4.types.map((e3) => ({ id: e3.id, symbol: te(e3.symbol, e3, s4) })) }) : new p3({ symbol: te(t4.defaultSymbol, t4, s4) });
  }
  async connect(e2) {
    const [{ createConnection: t4 }] = await Promise.all([import("./createConnection-JBLMEZXI.js"), this.load()]), r3 = this.geometryType ? o2.toJSON(this.geometryType) : null, { customParameters: o5 = null, definitionExpression: i3 = null, geometryDefinition: s4 = null, maxReconnectionAttempts: n4 = 0, maxReconnectionInterval: p9 = 20, spatialReference: a3 = this.spatialReference } = e2 || this.createConnectionParameters(), l3 = t4(this.parsedUrl, this.spatialReference, a3, r3, { geometry: s4, where: i3 }, n4, p9, o5 ?? void 0), d = r2([this.on("send-message-to-socket", (e3) => l3.sendMessageToSocket(e3)), this.on("send-message-to-client", (e3) => l3.sendMessageToClient(e3))]);
    return l3.once("destroy", d.remove), l3;
  }
  createConnectionParameters() {
    return { spatialReference: this.spatialReference, customParameters: this.customParameters, definitionExpression: this.definitionExpression, geometryDefinition: this.geometryDefinition, maxReconnectionAttempts: this.maxReconnectionAttempts, maxReconnectionInterval: this.maxReconnectionInterval };
  }
  createPopupTemplate(e2) {
    return p5(this, e2);
  }
  createQuery() {
    const e2 = new x();
    return e2.returnGeometry = true, e2.outFields = ["*"], e2.where = this.definitionExpression || "1=1", e2;
  }
  getFieldDomain(e2, t4) {
    if (!this.fields)
      return null;
    let r3 = null;
    return this.fields.some((t5) => (t5.name === e2 && (r3 = t5.domain), !!r3)), r3;
  }
  getField(e2) {
    return this.fieldsIndex.get(e2);
  }
  serviceSupportsSpatialReference(e2) {
    return true;
  }
  sendMessageToSocket(e2) {
    this.emit("send-message-to-socket", e2);
  }
  sendMessageToClient(e2) {
    this.emit("send-message-to-client", e2);
  }
  write(e2, t4) {
    const r3 = t4 == null ? void 0 : t4.messages;
    return this.webSocketUrl ? (r3 == null ? void 0 : r3.push(Z(this, "using a custom websocket connection cannot be written to web scenes and web maps")), null) : this.parsedUrl ? super.write(e2, t4) : (r3 == null ? void 0 : r3.push(Z(this, "using a client-side only connection without a url cannot be written to web scenes and web maps")), null);
  }
  async _fetchService(e2) {
    var _a, _b, _c;
    if (!!!this.webSocketUrl && this.parsedUrl) {
      if (!this.sourceJSON) {
        const { data: t4 } = await U(this.parsedUrl.path, { query: { f: "json", ...this.customParameters, ...this.parsedUrl.query }, responseType: "json", signal: e2 });
        this.sourceJSON = t4;
      }
    } else {
      if (!((_a = this.timeInfo) == null ? void 0 : _a.trackIdField))
        throw new s2("stream-layer:missing-metadata", "The stream layer trackIdField must be specified.");
      if (!this.objectIdField) {
        const e3 = (_b = this.fields.find((e4) => "oid" === e4.type)) == null ? void 0 : _b.name;
        if (!e3)
          throw new s2("stream-layer:missing-metadata", "The stream layer objectIdField must be specified.");
        this.objectIdField = e3;
      }
      if (!this.fields)
        throw new s2("stream-layer:missing-metadata", "The stream layer fields must be specified.");
      if (this.fields.some((e3) => e3.name === this.objectIdField) || this.fields.push(new y2({ name: this.objectIdField, alias: this.objectIdField, type: "oid" })), !this.geometryType)
        throw new s2("stream-layer:missing-metadata", "The stream layer geometryType must be specified.");
      this.webSocketUrl && (this.url = this.webSocketUrl);
    }
    return this.read(this.sourceJSON, { origin: "service", portalItem: this.portalItem, portal: (_c = this.portalItem) == null ? void 0 : _c.portal, url: this.parsedUrl }), F(this.renderer, this.fieldsIndex), x3(this.timeInfo, this.fieldsIndex), this.objectIdField || (this.objectIdField = "__esri_stream_id__"), t(this, { origin: "service" });
  }
};
e([y({ type: String })], ee.prototype, "copyright", void 0), e([y({ readOnly: true })], ee.prototype, "defaultPopupTemplate", null), e([y({ type: String, json: { name: "layerDefinition.definitionExpression", write: { enabled: true, allowNull: true } } })], ee.prototype, "definitionExpression", void 0), e([y({ type: String })], ee.prototype, "displayField", void 0), e([y({ type: x2 })], ee.prototype, "elevationInfo", void 0), e([y(Y.fields)], ee.prototype, "fields", void 0), e([y(Y.fieldsIndex)], ee.prototype, "fieldsIndex", void 0), e([y({ type: w2 })], ee.prototype, "geometryDefinition", void 0), e([y({ type: o2.apiValues, json: { read: { reader: o2.read } } })], ee.prototype, "geometryType", void 0), e([y(m)], ee.prototype, "labelsVisible", void 0), e([y({ type: [C], json: { read: { source: "layerDefinition.drawingInfo.labelingInfo", reader: i }, write: { target: "layerDefinition.drawingInfo.labelingInfo" } } })], ee.prototype, "labelingInfo", void 0), e([y(c)], ee.prototype, "legendEnabled", void 0), e([y({ type: ["show", "hide"] })], ee.prototype, "listMode", void 0), e([y({ type: T })], ee.prototype, "maxReconnectionAttempts", void 0), e([y({ type: T })], ee.prototype, "maxReconnectionInterval", void 0), e([y(D)], ee.prototype, "maxScale", void 0), e([y(I)], ee.prototype, "minScale", void 0), e([y({ type: String })], ee.prototype, "objectIdField", void 0), e([y({ value: "ArcGISStreamLayer", type: ["ArcGISStreamLayer"] })], ee.prototype, "operationalLayerType", void 0), e([y(p)], ee.prototype, "popupEnabled", void 0), e([y({ type: k, json: { read: { source: "popupInfo" }, write: { target: "popupInfo" } } })], ee.prototype, "popupTemplate", void 0), e([y({ type: p8 })], ee.prototype, "purgeOptions", void 0), e([y({ types: p4, json: { origins: { service: { write: { target: "drawingInfo.renderer", enabled: false } }, "web-scene": { name: "layerDefinition.drawingInfo.renderer", types: n2, write: true } }, write: { target: "layerDefinition.drawingInfo.renderer" } } })], ee.prototype, "renderer", null), e([o("service", "renderer", ["drawingInfo.renderer", "defaultSymbol"]), o("renderer", ["layerDefinition.drawingInfo.renderer", "layerDefinition.defaultSymbol"])], ee.prototype, "readRenderer", null), e([y(l2)], ee.prototype, "screenSizePerspectiveEnabled", void 0), e([y()], ee.prototype, "sourceJSON", void 0), e([y({ type: f, json: { origins: { service: { read: { source: "spatialReference" } } } } })], ee.prototype, "spatialReference", void 0), e([y({ json: { read: false } })], ee.prototype, "type", void 0), e([y(f2)], ee.prototype, "url", void 0), e([y({ type: Number })], ee.prototype, "updateInterval", void 0), e([y({ type: String })], ee.prototype, "webSocketUrl", void 0), ee = e([a("esri.layers.StreamLayer")], ee);
var te = u({ types: M });
var re = ee;
export {
  re as default
};
//# sourceMappingURL=StreamLayer-PNGQORMO.js.map
