import {
  n as n2,
  o,
  t
} from "./chunk-XPDJMRGT.js";
import {
  P,
  S,
  a as a2
} from "./chunk-TO3ZY23Z.js";
import {
  n
} from "./chunk-L22HV6UV.js";
import "./chunk-2GSYZJ4O.js";
import "./chunk-BVS3NILK.js";
import "./chunk-DLJ7JTHR.js";
import {
  ae
} from "./chunk-5I3MQMKK.js";
import "./chunk-ZK7UMXRA.js";
import "./chunk-X52AT6Y2.js";
import "./chunk-LSZKZXKW.js";
import "./chunk-WPQ2ZKAK.js";
import "./chunk-J7OMJ47S.js";
import "./chunk-VLSIPNEZ.js";
import "./chunk-4FSIMQ5G.js";
import "./chunk-5MOZZS3P.js";
import "./chunk-7XVHXPW5.js";
import {
  i as i2
} from "./chunk-J5CNSFEW.js";
import {
  f,
  u
} from "./chunk-F6PAWSTX.js";
import "./chunk-NBN7PDMJ.js";
import "./chunk-6CHYNNZQ.js";
import "./chunk-OFMRQG54.js";
import "./chunk-GR3QAE4S.js";
import "./chunk-XBPKFV6W.js";
import "./chunk-R2U7D6P2.js";
import "./chunk-7FAY4Z4C.js";
import "./chunk-J6VS6FXY.js";
import "./chunk-3H5NJQM5.js";
import "./chunk-7JT5C6ZX.js";
import "./chunk-AZEN5UFW.js";
import "./chunk-T4KF4XXH.js";
import "./chunk-F7QXAEAV.js";
import "./chunk-VV2CU7S7.js";
import "./chunk-FYA3X5C5.js";
import "./chunk-YA2ZN33B.js";
import "./chunk-DKDRIIV4.js";
import "./chunk-5SYMUP5B.js";
import "./chunk-R3MRUDAD.js";
import "./chunk-R6XKQWZ7.js";
import "./chunk-FUIUGV4X.js";
import "./chunk-LYEEAWXU.js";
import "./chunk-6SCM5LCL.js";
import "./chunk-223SE4BY.js";
import "./chunk-63WRUMNA.js";
import "./chunk-O2JKCGK6.js";
import "./chunk-WAPZ634R.js";
import "./chunk-OIQIEWHK.js";
import "./chunk-6YWY2BIN.js";
import "./chunk-HUKDJ3MH.js";
import "./chunk-2B52LX6T.js";
import "./chunk-53FPJYCC.js";
import "./chunk-MSPZCZRZ.js";
import "./chunk-RURSJOSG.js";
import "./chunk-75NMPQ6B.js";
import "./chunk-3L7LAMFR.js";
import "./chunk-2JIMWZPW.js";
import "./chunk-UR7T2PHF.js";
import "./chunk-7FRYP2QO.js";
import "./chunk-23AC3IC7.js";
import "./chunk-GKD7ZY5C.js";
import "./chunk-ITU2WGYR.js";
import "./chunk-5U6MVA3N.js";
import "./chunk-UHA44FM7.js";
import "./chunk-FSOPJKVB.js";
import "./chunk-L5V3AZEL.js";
import "./chunk-TQAOUM4T.js";
import "./chunk-TFWV44LH.js";
import "./chunk-RRNRSHX3.js";
import "./chunk-IEBU4QQL.js";
import "./chunk-4M3AMTD4.js";
import "./chunk-MXRYGWSY.js";
import "./chunk-33DQ3DIB.js";
import "./chunk-KVNI5TTW.js";
import "./chunk-U34LDFXK.js";
import "./chunk-V2OTMPXZ.js";
import "./chunk-OEIEPNC6.js";
import "./chunk-RPLKMGIJ.js";
import "./chunk-L6HCXW4T.js";
import "./chunk-5VDXKCKM.js";
import "./chunk-XAGRIALY.js";
import {
  r
} from "./chunk-6NPCB5RV.js";
import {
  y as y2
} from "./chunk-DDAW6PTY.js";
import {
  h
} from "./chunk-PNAN35AP.js";
import "./chunk-HNKLBBNC.js";
import "./chunk-D2UI2BQN.js";
import "./chunk-5MV6T7MH.js";
import "./chunk-U3IHIDSP.js";
import {
  e as e2
} from "./chunk-34FJTA26.js";
import {
  i
} from "./chunk-XU3CQCW6.js";
import "./chunk-DUEDINK5.js";
import "./chunk-MZ267CZB.js";
import "./chunk-3DBV4JBL.js";
import "./chunk-CJ2YD4VU.js";
import "./chunk-PRXITTX7.js";
import "./chunk-JGIZLXNQ.js";
import "./chunk-PXPM76YN.js";
import "./chunk-YWFASVWM.js";
import "./chunk-GUVJ2XOH.js";
import "./chunk-NWZTRS6O.js";
import "./chunk-77E52HT5.js";
import "./chunk-26N6FACI.js";
import "./chunk-6XE2FUT4.js";
import "./chunk-2WS4DQ5K.js";
import "./chunk-HBVUBDHI.js";
import "./chunk-CP43AUSV.js";
import "./chunk-5JG6YWQJ.js";
import "./chunk-7Q77X7UJ.js";
import "./chunk-NOYTM57S.js";
import "./chunk-OPQ632ST.js";
import "./chunk-U6GC73UT.js";
import "./chunk-QS7JATZ7.js";
import "./chunk-6N2I7LNE.js";
import "./chunk-66ZWVXB2.js";
import "./chunk-E4ZXXRPV.js";
import "./chunk-AJY7W6KP.js";
import "./chunk-YIJX6PSI.js";
import "./chunk-NCSDM2FH.js";
import "./chunk-GHN5ZUCM.js";
import "./chunk-CNIE5HLE.js";
import "./chunk-N5RJDK35.js";
import "./chunk-LC5BGIRA.js";
import "./chunk-ST7DNJJS.js";
import "./chunk-VB6BMHUU.js";
import "./chunk-H66NMTBW.js";
import "./chunk-K7L4V6NL.js";
import "./chunk-UZL5FYFX.js";
import "./chunk-HM62IZSE.js";
import "./chunk-CCAF47ZU.js";
import "./chunk-HFRO4PG3.js";
import "./chunk-BRWDGS6Y.js";
import "./chunk-UNUPXPO6.js";
import "./chunk-OF6BJKPA.js";
import "./chunk-PELFA5QO.js";
import "./chunk-2CREJO6O.js";
import "./chunk-FAK3SJAD.js";
import "./chunk-FFJQJQND.js";
import "./chunk-YMSHUIGU.js";
import "./chunk-EPJSBV4J.js";
import "./chunk-RCZJUTGU.js";
import "./chunk-REIXEATJ.js";
import "./chunk-YEFLZ2OV.js";
import "./chunk-XP5MC636.js";
import "./chunk-CCNZLEW5.js";
import "./chunk-FGXNBIU5.js";
import "./chunk-TM5UW7VI.js";
import "./chunk-WVLEGBEW.js";
import {
  l
} from "./chunk-FXMJJBXP.js";
import "./chunk-6YBCJ6DZ.js";
import "./chunk-MS6YQPPG.js";
import "./chunk-CRF4O3Y3.js";
import "./chunk-ONU3G4LF.js";
import "./chunk-KSENJC5Z.js";
import "./chunk-BHQVXYUV.js";
import "./chunk-P26WTKBK.js";
import "./chunk-WAN4YZSB.js";
import "./chunk-DKH5QOVM.js";
import "./chunk-YZRPNTZZ.js";
import "./chunk-EVKJKYHI.js";
import "./chunk-TNQLNDIQ.js";
import "./chunk-FA3YUERM.js";
import "./chunk-LVRAFE6T.js";
import "./chunk-Y3KJPDCE.js";
import "./chunk-LSUFI7PR.js";
import "./chunk-5CMPUNQG.js";
import "./chunk-YT74S35I.js";
import "./chunk-U5I7FQWJ.js";
import "./chunk-M3KO43BW.js";
import "./chunk-BQXNXAP2.js";
import "./chunk-JT54I3AY.js";
import "./chunk-TNTTCGVB.js";
import "./chunk-DC3QI5ZE.js";
import "./chunk-EGHLQERQ.js";
import "./chunk-CNEENAOZ.js";
import "./chunk-7OAHPHOV.js";
import "./chunk-SZO7ZKE4.js";
import "./chunk-YMLMMCYX.js";
import "./chunk-I2U7UK6N.js";
import "./chunk-UADQEL54.js";
import "./chunk-FQ7L63IU.js";
import "./chunk-6K5VVUVI.js";
import "./chunk-YHZVWABO.js";
import "./chunk-WATRS3LJ.js";
import "./chunk-CPUYSXBP.js";
import "./chunk-MJFFZ3MM.js";
import "./chunk-7FMLQXIT.js";
import "./chunk-B6GJAETG.js";
import "./chunk-FC74MT6E.js";
import {
  E
} from "./chunk-H2ENCYR3.js";
import "./chunk-SVHG5VY2.js";
import "./chunk-S47644HM.js";
import "./chunk-QXPN4D5D.js";
import "./chunk-DLM7WQKI.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-7GTATSRF.js";
import "./chunk-MTJ2HM2W.js";
import "./chunk-PXVSWY3C.js";
import {
  j
} from "./chunk-QLY5H3XF.js";
import {
  s
} from "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import "./chunk-WHB7G7RI.js";
import "./chunk-DFKQJ226.js";

// node_modules/@arcgis/core/views/2d/layers/TileLayerView2D.js
var T = [0, 0];
var v = class extends i2(t(f(u))) {
  constructor() {
    super(...arguments), this._fetchQueue = null, this._highlightGraphics = new i(), this._highlightView = null, this._popupHighlightHelper = null, this._tileStrategy = null, this.layer = null;
  }
  get resampling() {
    return !("resampling" in this.layer) || false !== this.layer.resampling;
  }
  update(e3) {
    var _a;
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume(), (_a = this._highlightView) == null ? void 0 : _a.processUpdate(e3);
  }
  attach() {
    const e3 = "tileServers" in this.layer ? this.layer.tileServers : null;
    if (this._tileInfoView = new h(this.layer.tileInfo, this.layer.fullExtent), this._fetchQueue = new y2({ tileInfoView: this._tileInfoView, concurrency: e3 && 10 * e3.length || 10, process: (e4, i3) => this.fetchTile(e4, i3) }), this._tileStrategy = new r({ cachePolicy: "keep", resampling: this.resampling, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), P(this, this.layer)) {
      const e4 = this._highlightView = new ae({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new n(this.view.featuresTilingScheme), defaultPointSymbolEnabled: false });
      this.container.addChild(this._highlightView.container), this._popupHighlightHelper = new S({ createFetchPopupFeaturesQueryGeometry: (e5, i3) => a2(e5, i3, this.view), highlightGraphics: this._highlightGraphics, highlightGraphicUpdated: (i3, t2) => {
        e4.graphicUpdateHandler({ graphic: i3, property: t2 });
      }, layerView: this, updatingHandles: this.updatingHandles });
    }
    this.requestUpdate(), this.addAttachHandles(l(() => this.resampling, () => {
      this.doRefresh();
    })), super.attach();
  }
  detach() {
    var _a;
    super.detach(), this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), (_a = this._popupHighlightHelper) == null ? void 0 : _a.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = this._popupHighlightHelper = null;
  }
  async fetchPopupFeatures(e3, i3) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.fetchPopupFeatures(e3, i3) : [];
  }
  highlight(e3) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.highlight(e3) : { remove() {
    } };
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e3) {
    var _a;
    return E((_a = this.layer.tileInfo) == null ? void 0 : _a.spatialReference, e3);
  }
  async doRefresh() {
    !this.attached || this.updateRequested || this.suspended || (this._fetchQueue.reset(), this._tileStrategy.tiles.forEach((e3) => this._enqueueTileFetch(e3)));
  }
  isUpdating() {
    var _a;
    return ((_a = this._fetchQueue) == null ? void 0 : _a.updating) ?? false;
  }
  acquireTile(e3) {
    const i3 = this._bitmapView.createTile(e3), t2 = i3.bitmap;
    return [t2.x, t2.y] = this._tileInfoView.getTileCoords(T, i3.key), t2.resolution = this._tileInfoView.getTileResolution(i3.key), [t2.width, t2.height] = this._tileInfoView.tileInfo.size, this._enqueueTileFetch(i3), this._bitmapView.addChild(i3), this.requestUpdate(), i3;
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  async fetchTile(e3, i3 = {}) {
    const r2 = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: s2, resamplingLevel: o2 = 0 } = i3;
    if (!r2)
      try {
        return await this._fetchImage(e3, s2);
      } catch (a3) {
        if (!j(a3) && !this.resampling)
          return o(this._tileInfoView.tileInfo.size);
        if (o2 < 3) {
          const t2 = this._tileInfoView.getTileParentId(e3.id);
          if (t2) {
            const r3 = new e2(t2), s3 = await this.fetchTile(r3, { ...i3, resamplingLevel: o2 + 1 });
            return n2(this._tileInfoView, s3, r3, e3);
          }
        }
        throw a3;
      }
    const l2 = new e2(0, 0, 0, 0);
    let h2;
    try {
      if (await r2.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, l2, { signal: s2 }), l2.level !== e3.level && !this.resampling)
        return o(this._tileInfoView.tileInfo.size);
      h2 = await this._fetchImage(l2, s2);
    } catch (a3) {
      if (j(a3))
        throw a3;
      h2 = await this._fetchImage(e3, s2);
    }
    return this.resampling ? n2(this._tileInfoView, h2, l2, e3) : h2;
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const i3 = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = i3, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (r2) {
        j(r2) || s.getLogger(this.declaredClass).error(r2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, i3) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: i3 });
  }
};
e([y()], v.prototype, "_fetchQueue", void 0), e([y()], v.prototype, "resampling", null), v = e([a("esri.views.2d.layers.TileLayerView2D")], v);
var I = v;
export {
  I as default
};
//# sourceMappingURL=TileLayerView2D-HBTIRVEE.js.map
