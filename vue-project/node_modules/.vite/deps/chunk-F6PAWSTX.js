import {
  h
} from "./chunk-XBPKFV6W.js";
import {
  c
} from "./chunk-5VDXKCKM.js";
import {
  a as a3
} from "./chunk-PELFA5QO.js";
import {
  a as a2,
  l as l3,
  w as w2
} from "./chunk-FXMJJBXP.js";
import {
  n as n2
} from "./chunk-P26WTKBK.js";
import {
  m
} from "./chunk-5CMPUNQG.js";
import {
  s as s3
} from "./chunk-7OAHPHOV.js";
import {
  j
} from "./chunk-SZO7ZKE4.js";
import {
  n
} from "./chunk-FQ7L63IU.js";
import {
  v as v3
} from "./chunk-B6GJAETG.js";
import {
  v2
} from "./chunk-FC74MT6E.js";
import {
  p3 as p,
  w2 as w
} from "./chunk-H2ENCYR3.js";
import {
  l as l2
} from "./chunk-DLM7WQKI.js";
import {
  a2 as a,
  e,
  v2 as v,
  y3 as y
} from "./chunk-7GTATSRF.js";
import {
  s,
  s2
} from "./chunk-UG2OEDEE.js";
import {
  l
} from "./chunk-WHB7G7RI.js";

// node_modules/@arcgis/core/views/layers/support/ClipArea.js
var t = class extends l2 {
  get version() {
    return this.commitVersionProperties(), (this._get("version") || 0) + 1;
  }
};
e([y({ readOnly: true })], t.prototype, "version", null), t = e([a("esri.views.layers.support.ClipArea")], t);
var p2 = t;

// node_modules/@arcgis/core/views/layers/support/ClipRect.js
var s4;
var i = s4 = class extends p2 {
  constructor(t2) {
    super(t2), this.type = "rect", this.left = null, this.right = null, this.top = null, this.bottom = null;
  }
  clone() {
    return new s4({ left: this.left, right: this.right, top: this.top, bottom: this.bottom });
  }
  commitVersionProperties() {
    this.commitProperty("left"), this.commitProperty("right"), this.commitProperty("top"), this.commitProperty("bottom");
  }
};
e([y({ type: [Number, String], json: { write: true } })], i.prototype, "left", void 0), e([y({ type: [Number, String], json: { write: true } })], i.prototype, "right", void 0), e([y({ type: [Number, String], json: { write: true } })], i.prototype, "top", void 0), e([y({ type: [Number, String], json: { write: true } })], i.prototype, "bottom", void 0), i = s4 = e([a("esri.views.layers.support.ClipRect")], i);
var p3 = i;

// node_modules/@arcgis/core/views/layers/support/Geometry.js
var y2;
var c2 = { base: p, key: "type", typeMap: { extent: w, polygon: v2 } };
var n3 = y2 = class extends p2 {
  constructor(r) {
    super(r), this.type = "geometry", this.geometry = null;
  }
  clone() {
    var _a;
    return new y2({ geometry: ((_a = this.geometry) == null ? void 0 : _a.clone()) ?? null });
  }
  commitVersionProperties() {
    this.commitProperty("geometry");
  }
};
e([y({ types: c2, json: { read: v3, write: true } })], n3.prototype, "geometry", void 0), n3 = y2 = e([a("esri.views.layers.support.Geometry")], n3);
var a4 = n3;

// node_modules/@arcgis/core/views/layers/support/Path.js
var e2 = class extends p2 {
  constructor(r) {
    super(r), this.type = "path", this.path = [];
  }
  commitVersionProperties() {
    this.commitProperty("path");
  }
};
e([y({ type: [[[Number]]], json: { write: true } })], e2.prototype, "path", void 0), e2 = e([a("esri.views.layers.support.Path")], e2);
var p4 = e2;

// node_modules/@arcgis/core/views/2d/layers/LayerView2D.js
var y3 = j.ofType({ key: "type", base: null, typeMap: { rect: p3, path: p4, geometry: a4 } });
var f = (t2) => {
  let l4 = class extends t2 {
    constructor() {
      super(...arguments), this.attached = false, this.clips = new y3(), this.lastUpdateId = -1, this.moving = false, this.updateRequested = false, this.visibleAtCurrentScale = false, this.highlightOptions = null;
    }
    initialize() {
      var _a, _b, _c;
      const e3 = ((_a = this.view) == null ? void 0 : _a.spatialReferenceLocked) ?? true, t3 = (_b = this.view) == null ? void 0 : _b.spatialReference;
      t3 && e3 && !this.spatialReferenceSupported ? this.addResolvingPromise(Promise.reject(new s2("layerview:spatial-reference-incompatible", "The spatial reference of this layer does not meet the requirements of the view", { layer: this.layer }))) : (this.container || (this.container = new h()), this.container.fadeTransitionEnabled = true, this.container.visible = false, this.container.endTransitions(), this.addHandles([l3(() => this.suspended, (e4) => {
        this.container && (this.container.visible = !e4), this.view && !e4 && this.updateRequested && this.view.requestUpdate();
      }, w2), l3(() => {
        var _a2;
        return ((_a2 = this.layer) == null ? void 0 : _a2.opacity) ?? 1;
      }, (e4) => {
        this.container && (this.container.opacity = e4);
      }, w2), l3(() => this.layer && "blendMode" in this.layer ? this.layer.blendMode : "normal", (e4) => {
        this.container && (this.container.blendMode = e4);
      }, w2), l3(() => this.layer && "effect" in this.layer ? this.layer.effect : null, (e4) => {
        this.container && (this.container.effect = e4);
      }, w2), l3(() => this.highlightOptions, (e4) => this.container.highlightOptions = e4, w2), a2(() => this.clips, "change", () => {
        this.container && (this.container.clips = this.clips);
      }, w2), l3(() => {
        var _a2;
        return { scale: (_a2 = this.view) == null ? void 0 : _a2.scale, scaleRange: this.layer && "effectiveScaleRange" in this.layer ? this.layer.effectiveScaleRange : null };
      }, ({ scale: e4 }) => {
        const t4 = null != e4 && this.isVisibleAtScale(e4);
        t4 !== this.visibleAtCurrentScale && this._set("visibleAtCurrentScale", t4);
      }, w2)], "constructor"), ((_c = this.view) == null ? void 0 : _c.whenLayerView) ? this.view.whenLayerView(this.layer).then((e4) => {
        e4 === this && this.processAttach();
      }, () => {
      }) : this.when().then(() => {
        this.processAttach();
      }, () => {
      }));
    }
    destroy() {
      this.processDetach(), this.updateRequested = false;
    }
    get spatialReferenceSupported() {
      var _a;
      const e3 = (_a = this.view) == null ? void 0 : _a.spatialReference;
      return null == e3 || this.supportsSpatialReference(e3);
    }
    get updating() {
      var _a;
      return this.spatialReferenceSupported && (!this.attached || !this.suspended && (this.updateRequested || this.isUpdating()) || !!((_a = this.updatingHandles) == null ? void 0 : _a.updating));
    }
    processAttach() {
      this.isResolved() && !this.attached && !this.destroyed && this.spatialReferenceSupported && (this.attach(), this.attached = true, this.requestUpdate());
    }
    processDetach() {
      this.attached && (this.attached = false, this.removeHandles("attach"), this.detach(), this.updateRequested = false);
    }
    isVisibleAtScale(e3) {
      const t3 = this.layer && "effectiveScaleRange" in this.layer ? this.layer.effectiveScaleRange : null;
      if (!t3)
        return true;
      const { minScale: s5, maxScale: i2 } = t3;
      return (0 === s5 || e3 <= s5) && (0 === i2 || e3 >= i2);
    }
    requestUpdate() {
      this.destroyed || this.updateRequested || (this.updateRequested = true, this.suspended || this.view.requestUpdate());
    }
    processUpdate(e3) {
      !this.isFulfilled() || this.isResolved() ? (this._set("updateParameters", e3), this.updateRequested && !this.suspended && (this.updateRequested = false, this.update(e3))) : this.updateRequested = false;
    }
    hitTest(e3, t3) {
      return Promise.resolve(null);
    }
    supportsSpatialReference(e3) {
      return true;
    }
    canResume() {
      return !!this.spatialReferenceSupported && (!!super.canResume() && this.visibleAtCurrentScale);
    }
    getSuspendInfo() {
      const e3 = super.getSuspendInfo(), t3 = !this.spatialReferenceSupported, s5 = this.visibleAtCurrentScale;
      return t3 && (e3.spatialReferenceNotSupported = t3), s5 && (e3.outsideScaleRange = s5), e3;
    }
    addAttachHandles(e3) {
      this.addHandles(e3, "attach");
    }
  };
  return e([y()], l4.prototype, "attached", void 0), e([y({ type: y3, set(e3) {
    const t3 = n2(e3, this._get("clips"), y3);
    this._set("clips", t3);
  } })], l4.prototype, "clips", void 0), e([y()], l4.prototype, "container", void 0), e([y()], l4.prototype, "moving", void 0), e([y({ readOnly: true })], l4.prototype, "spatialReferenceSupported", null), e([y({ readOnly: true })], l4.prototype, "updateParameters", void 0), e([y()], l4.prototype, "updateRequested", void 0), e([y()], l4.prototype, "updating", null), e([y()], l4.prototype, "view", void 0), e([y({ readOnly: true })], l4.prototype, "visibleAtCurrentScale", void 0), e([y({ type: c })], l4.prototype, "highlightOptions", void 0), l4 = e([a("esri.views.2d.layers.LayerView2D")], l4), l4;
};

// node_modules/@arcgis/core/views/layers/LayerView.js
var d = class extends a3(s3(m(n.EventedMixin(v)))) {
  constructor(e3) {
    super(e3), this.layer = null, this.parent = null;
  }
  initialize() {
    this.when().catch((e3) => {
      if ("layerview:create-error" !== e3.name) {
        const t2 = this.layer && this.layer.id || "no id", r = this.layer && this.layer.title || "no title";
        s.getLogger(this.declaredClass).error("#resolve()", `Failed to resolve layer view (layer title: '${r}', id: '${t2}')`, e3);
      }
    });
  }
  get fullOpacity() {
    return l(this.get("layer.opacity"), 1) * l(this.get("parent.fullOpacity"), 1);
  }
  get suspended() {
    return !this.canResume();
  }
  get suspendInfo() {
    return this.getSuspendInfo();
  }
  get legendEnabled() {
    var _a;
    return !this.suspended && true === ((_a = this.layer) == null ? void 0 : _a.legendEnabled);
  }
  get updating() {
    var _a;
    return !(!((_a = this.updatingHandles) == null ? void 0 : _a.updating) && !this.isUpdating());
  }
  get updatingProgress() {
    return this.updating ? 0 : 1;
  }
  get visible() {
    var _a;
    return true === ((_a = this.layer) == null ? void 0 : _a.visible);
  }
  set visible(e3) {
    this._overrideIfSome("visible", e3);
  }
  canResume() {
    var _a, _b, _c;
    return this.visible && ((_a = this.layer) == null ? void 0 : _a.loaded) && !((_b = this.parent) == null ? void 0 : _b.suspended) && ((_c = this.view) == null ? void 0 : _c.ready) || false;
  }
  getSuspendInfo() {
    const e3 = this.parent && this.parent.suspended ? this.parent.suspendInfo : {}, t2 = this;
    return t2.view && t2.view.ready || (e3.viewNotReady = true), this.layer && this.layer.loaded || (e3.layerNotLoaded = true), this.visible || (e3.layerInvisible = true), e3;
  }
  isUpdating() {
    return false;
  }
};
e([y()], d.prototype, "fullOpacity", null), e([y()], d.prototype, "layer", void 0), e([y()], d.prototype, "parent", void 0), e([y({ readOnly: true })], d.prototype, "suspended", null), e([y({ readOnly: true })], d.prototype, "suspendInfo", null), e([y({ readOnly: true })], d.prototype, "legendEnabled", null), e([y({ type: Boolean, readOnly: true })], d.prototype, "updating", null), e([y({ readOnly: true })], d.prototype, "updatingProgress", null), e([y()], d.prototype, "visible", null), e([y()], d.prototype, "view", void 0), d = e([a("esri.views.layers.LayerView")], d);
var u = d;

export {
  f,
  u
};
//# sourceMappingURL=chunk-F6PAWSTX.js.map
