import {
  T,
  n
} from "./chunk-VOSZ2G24.js";
import {
  E
} from "./chunk-6ZUWLK7F.js";
import {
  e,
  r,
  t
} from "./chunk-HVCAHUYB.js";

// node_modules/@arcgis/core/support/timeUtils.js
function m(e2) {
  return void 0 !== e2.timeInfo;
}
async function s(o, s2) {
  var _a;
  if (0 === o.length)
    return T.allTime;
  const f2 = o.filter(m);
  await Promise.all(f2.map((e2) => e2.load({ signal: s2 })));
  const a2 = [], u = [];
  for (const e2 of f2)
    "feature" !== (e2 == null ? void 0 : e2.type) && "map-image" !== (e2 == null ? void 0 : e2.type) || !((_a = e2.timeInfo) == null ? void 0 : _a.hasLiveData) ? u.push(e2) : a2.push(e2);
  const l = (e2) => t(e2) || e2.isAllTime, c = u.map((e2) => {
    var _a2;
    return (_a2 = e2.timeInfo) == null ? void 0 : _a2.fullTimeExtent;
  });
  if (c.some(l))
    return T.allTime;
  const p = a2.map(async (e2) => {
    var _a2;
    const { timeExtent: n2 } = await e2.fetchRecomputedExtents({ signal: s2 });
    return n2 || e((_a2 = e2.timeInfo) == null ? void 0 : _a2.fullTimeExtent);
  }), T2 = (await E(p)).map((e2) => e2.value);
  if (T2.some(l))
    return T.allTime;
  return [...T2, ...c].filter(r).reduce((e2, t2) => e2.union(t2));
}
function f(t2) {
  if (!t2)
    return t2;
  const { start: i, end: r2 } = t2;
  return new T({ start: r(i) ? n(i, -i.getTimezoneOffset(), "minutes") : i, end: r(r2) ? n(r2, -r2.getTimezoneOffset(), "minutes") : r2 });
}
function a(t2) {
  if (!t2)
    return t2;
  const { start: i, end: r2 } = t2;
  return new T({ start: r(i) ? n(i, i.getTimezoneOffset(), "minutes") : i, end: r(r2) ? n(r2, r2.getTimezoneOffset(), "minutes") : r2 });
}

export {
  s,
  f,
  a
};
//# sourceMappingURL=chunk-5IWWLTWU.js.map
