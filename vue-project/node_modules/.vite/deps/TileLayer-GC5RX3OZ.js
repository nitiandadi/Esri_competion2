import {
  E,
  Z,
  y as y2
} from "./chunk-T2FDM5U5.js";
import "./chunk-3L7LAMFR.js";
import {
  s as s3
} from "./chunk-7KU5YGEW.js";
import "./chunk-J4UOPY6H.js";
import "./chunk-STWTMZUP.js";
import "./chunk-KNZN23EY.js";
import {
  e as e2
} from "./chunk-V7BOUFVB.js";
import "./chunk-TE3PC254.js";
import "./chunk-3IDKVHSA.js";
import "./chunk-5OPLKRAS.js";
import {
  l
} from "./chunk-DLEEZ5CX.js";
import "./chunk-BRSYQXRG.js";
import "./chunk-PZ3NLWD3.js";
import "./chunk-6HL7UH4H.js";
import "./chunk-2JB37XX2.js";
import "./chunk-FQONAW2G.js";
import "./chunk-7Q77X7UJ.js";
import "./chunk-WL7ITUMO.js";
import "./chunk-CP43AUSV.js";
import "./chunk-D4SYZIFV.js";
import "./chunk-NOYTM57S.js";
import "./chunk-OPQ632ST.js";
import "./chunk-U6GC73UT.js";
import "./chunk-6ZICJ4HF.js";
import "./chunk-6N2I7LNE.js";
import "./chunk-C5E4KZMK.js";
import {
  i
} from "./chunk-52DUL4NM.js";
import {
  p as p2
} from "./chunk-NNXHBH3J.js";
import "./chunk-4YR3FESC.js";
import "./chunk-UWJ3NERY.js";
import "./chunk-VEBWU4PY.js";
import "./chunk-AJY7W6KP.js";
import "./chunk-OO5RYTED.js";
import {
  o as o2
} from "./chunk-VV4LINSF.js";
import "./chunk-FDEQGLCU.js";
import "./chunk-MEYRAFYY.js";
import "./chunk-LSZOFED5.js";
import "./chunk-GHN5ZUCM.js";
import "./chunk-B4X5M3MB.js";
import "./chunk-CNIE5HLE.js";
import "./chunk-J6WWDJVY.js";
import {
  _
} from "./chunk-KJ3RR72T.js";
import {
  p
} from "./chunk-ITOWSLB4.js";
import {
  n
} from "./chunk-WIR7P2UT.js";
import "./chunk-4YJQ46TP.js";
import "./chunk-LC5BGIRA.js";
import "./chunk-ST7DNJJS.js";
import {
  t
} from "./chunk-N44T6V5D.js";
import {
  c
} from "./chunk-NCRISAUE.js";
import {
  f as f2
} from "./chunk-RDMK4OP2.js";
import {
  O
} from "./chunk-3MIQEU54.js";
import "./chunk-37ZA7E6R.js";
import "./chunk-46X6GKZ5.js";
import "./chunk-QUU4FGR5.js";
import "./chunk-2DDJXYOO.js";
import "./chunk-HM62IZSE.js";
import "./chunk-X2F6PX2U.js";
import "./chunk-HFRO4PG3.js";
import "./chunk-6PRVLRT2.js";
import {
  b
} from "./chunk-RSFKYEWD.js";
import "./chunk-GKH6NL2K.js";
import "./chunk-G6COWIFJ.js";
import "./chunk-QF2PMVYK.js";
import "./chunk-WZMBTZP2.js";
import "./chunk-UNUPXPO6.js";
import "./chunk-OF6BJKPA.js";
import "./chunk-BRWDGS6Y.js";
import "./chunk-L6EWR437.js";
import {
  a as a2
} from "./chunk-PELFA5QO.js";
import {
  d,
  g,
  m
} from "./chunk-HZKQDRDV.js";
import "./chunk-FAK3SJAD.js";
import "./chunk-2CREJO6O.js";
import "./chunk-POTXVYUT.js";
import "./chunk-YMSHUIGU.js";
import "./chunk-T5PSDOZP.js";
import "./chunk-REIXEATJ.js";
import "./chunk-CCAF47ZU.js";
import "./chunk-YEFLZ2OV.js";
import "./chunk-W42YI6TX.js";
import "./chunk-ICG3HFWD.js";
import "./chunk-CCNZLEW5.js";
import "./chunk-FGXNBIU5.js";
import "./chunk-EPJSBV4J.js";
import "./chunk-MYKXVBXI.js";
import "./chunk-TM5UW7VI.js";
import "./chunk-WVLEGBEW.js";
import "./chunk-NUSLMJR5.js";
import "./chunk-QX5IKXT7.js";
import "./chunk-ONU3G4LF.js";
import "./chunk-P26WTKBK.js";
import "./chunk-WAN4YZSB.js";
import "./chunk-OKST3HK4.js";
import "./chunk-BHQVXYUV.js";
import "./chunk-DKH5QOVM.js";
import "./chunk-X6SQQQR4.js";
import "./chunk-TNQLNDIQ.js";
import "./chunk-PSN7WPOI.js";
import "./chunk-FA3YUERM.js";
import "./chunk-LVRAFE6T.js";
import "./chunk-Y3KJPDCE.js";
import "./chunk-LSUFI7PR.js";
import "./chunk-BQXNXAP2.js";
import "./chunk-JT54I3AY.js";
import "./chunk-TNTTCGVB.js";
import "./chunk-DC3QI5ZE.js";
import "./chunk-EGHLQERQ.js";
import "./chunk-FXMJJBXP.js";
import "./chunk-6YBCJ6DZ.js";
import "./chunk-5CMPUNQG.js";
import {
  U
} from "./chunk-QJXSE36Y.js";
import "./chunk-WV4G3ROK.js";
import {
  A,
  F,
  L
} from "./chunk-M3KO43BW.js";
import "./chunk-JT4JPYB6.js";
import "./chunk-SZO7ZKE4.js";
import "./chunk-7OAHPHOV.js";
import "./chunk-YMLMMCYX.js";
import "./chunk-I2U7UK6N.js";
import "./chunk-6TTVNN6M.js";
import "./chunk-3UXY2S4E.js";
import "./chunk-CPUYSXBP.js";
import "./chunk-MJFFZ3MM.js";
import "./chunk-7FMLQXIT.js";
import "./chunk-B6GJAETG.js";
import "./chunk-FC74MT6E.js";
import {
  f2 as f,
  r as r2
} from "./chunk-H2ENCYR3.js";
import {
  o
} from "./chunk-SVHG5VY2.js";
import "./chunk-UADQEL54.js";
import "./chunk-FQ7L63IU.js";
import "./chunk-6K5VVUVI.js";
import {
  s as s2
} from "./chunk-S47644HM.js";
import "./chunk-QXPN4D5D.js";
import "./chunk-DLM7WQKI.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-7GTATSRF.js";
import "./chunk-MTJ2HM2W.js";
import "./chunk-PXVSWY3C.js";
import {
  w
} from "./chunk-QLY5H3XF.js";
import {
  s2 as s
} from "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import {
  r
} from "./chunk-WHB7G7RI.js";
import "./chunk-DFKQJ226.js";

// node_modules/@arcgis/core/layers/TileLayer.js
var B = ["Canvas/World_Dark_Gray_Base", "Canvas/World_Dark_Gray_Reference", "Canvas/World_Light_Gray_Base", "Canvas/World_Light_Gray_Reference", "Elevation/World_Hillshade", "Elevation/World_Hillshade_Dark", "Ocean/World_Ocean_Base", "Ocean/World_Ocean_Reference", "Ocean_Basemap", "Reference/World_Boundaries_and_Places", "Reference/World_Boundaries_and_Places_Alternate", "Reference/World_Transportation", "World_Imagery", "World_Street_Map", "World_Topo_Map"];
var C = class extends n(E(t(c(_(s3(y2(p2(O(a2(p(i(o2(b))))))))))))) {
  constructor(...e3) {
    super(...e3), this.listMode = "show", this.isReference = null, this.operationalLayerType = "ArcGISTiledMapServiceLayer", this.resampling = true, this.sourceJSON = null, this.spatialReference = null, this.path = null, this.sublayers = null, this.type = "tile", this.url = null;
  }
  normalizeCtorArgs(e3, r3) {
    return "string" == typeof e3 ? { url: e3, ...r3 } : e3;
  }
  load(e3) {
    const r3 = r(e3) ? e3.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e3).catch(w).then(() => this._fetchService(r3))), Promise.resolve(this);
  }
  get attributionDataUrl() {
    var _a;
    const e3 = (_a = this.parsedUrl) == null ? void 0 : _a.path.toLowerCase();
    return e3 ? this._getDefaultAttribution(this._getMapName(e3)) : null;
  }
  readSpatialReference(e3, r3) {
    return (e3 = e3 || r3.tileInfo && r3.tileInfo.spatialReference) && f.fromJSON(e3);
  }
  writeSublayers(e3, r3, t2, s4) {
    if (!this.loaded || !e3)
      return;
    const i2 = e3.slice().reverse().flatten(({ sublayers: e4 }) => e4 && e4.toArray().reverse()).toArray(), o3 = [], a3 = { writeSublayerStructure: false, ...s4 };
    i2.forEach((e4) => {
      const r4 = e4.write({}, a3);
      o3.push(r4);
    });
    o3.some((e4) => Object.keys(e4).length > 1) && (r3.layers = o3);
  }
  get tileServers() {
    var _a;
    return this._getDefaultTileServers((_a = this.parsedUrl) == null ? void 0 : _a.path);
  }
  castTileServers(e3) {
    return Array.isArray(e3) ? e3.map((e4) => L(e4).path) : null;
  }
  fetchTile(e3, t2, s4, i2 = {}) {
    const { signal: o3 } = i2, a3 = this.getTileUrl(e3, t2, s4), l2 = { responseType: "image", signal: o3, query: { ...this.refreshParameters } };
    return U(a3, l2).then((e4) => e4.data);
  }
  async fetchImageBitmapTile(e3, t2, s4, i2 = {}) {
    const { signal: o3 } = i2, a3 = this.getTileUrl(e3, t2, s4), l2 = { responseType: "blob", signal: o3, query: { ...this.refreshParameters } }, { data: n2 } = await U(a3, l2);
    return e2(n2, a3);
  }
  getTileUrl(e3, r3, t2) {
    var _a, _b;
    const s4 = !this.tilemapCache && this.supportsBlankTile, i2 = A({ ...(_a = this.parsedUrl) == null ? void 0 : _a.query, blankTile: !s4 && null, ...this.customParameters, token: this.apiKey }), o3 = this.tileServers;
    return `${o3 && o3.length ? o3[r3 % o3.length] : (_b = this.parsedUrl) == null ? void 0 : _b.path}/tile/${e3}/${r3}/${t2}${i2 ? "?" + i2 : ""}`;
  }
  loadAll() {
    return l(this, (e3) => {
      e3(this.allSublayers);
    });
  }
  _fetchService(e3) {
    return new Promise((s4, i2) => {
      if (this.sourceJSON) {
        if (null != this.sourceJSON.bandCount && null != this.sourceJSON.pixelSizeX)
          throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
        return void s4({ data: this.sourceJSON });
      }
      if (!this.parsedUrl)
        throw new s("tile-layer:undefined-url", "layer's url is not defined");
      const a3 = d(this.parsedUrl.path);
      if (r(a3) && "ImageServer" === a3.serverType)
        throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
      U(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, responseType: "json", signal: e3 }).then(s4, i2);
    }).then((r3) => {
      let t2 = this.url;
      if (r3.ssl && (t2 = this.url = t2.replace(/^http:/i, "https:")), this.sourceJSON = r3.data, this.read(r3.data, { origin: "service", url: this.parsedUrl }), 10.1 === this.version && !g(t2))
        return this._fetchServerVersion(t2, e3).then((e4) => {
          this.read({ currentVersion: e4 });
        }).catch(() => {
        });
    });
  }
  _fetchServerVersion(e3, s4) {
    if (!m(e3))
      return Promise.reject();
    const i2 = e3.replace(/(.*\/rest)\/.*/i, "$1") + "/info";
    return U(i2, { query: { f: "json", ...this.customParameters, token: this.apiKey }, responseType: "json", signal: s4 }).then((e4) => {
      if (e4.data && e4.data.currentVersion)
        return e4.data.currentVersion;
      throw new s("tile-layer:version-not-available");
    });
  }
  _getMapName(e3) {
    const r3 = e3.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);
    return r3 ? r3[2] : void 0;
  }
  _getDefaultAttribution(e3) {
    if (null == e3)
      return null;
    let r3;
    e3 = e3.toLowerCase();
    for (let t2 = 0, s4 = B.length; t2 < s4; t2++)
      if (r3 = B[t2], r3.toLowerCase().includes(e3))
        return F("//static.arcgis.com/attribution/" + r3);
    return null;
  }
  _getDefaultTileServers(e3) {
    if (null == e3)
      return [];
    const r3 = -1 !== e3.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i), t2 = -1 !== e3.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);
    return r3 || t2 ? [e3, e3.replace(r3 ? /server\.arcgisonline/i : /services\.arcgisonline/i, r3 ? "services.arcgisonline" : "server.arcgisonline")] : [];
  }
  get hasOverriddenFetchTile() {
    return !this.fetchTile.__isDefault__;
  }
};
e([y({ readOnly: true })], C.prototype, "attributionDataUrl", null), e([y({ type: ["show", "hide", "hide-children"] })], C.prototype, "listMode", void 0), e([y({ json: { read: true, write: true } })], C.prototype, "blendMode", void 0), e([y({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], C.prototype, "isReference", void 0), e([y({ readOnly: true, type: ["ArcGISTiledMapServiceLayer"] })], C.prototype, "operationalLayerType", void 0), e([y({ type: Boolean })], C.prototype, "resampling", void 0), e([y()], C.prototype, "sourceJSON", void 0), e([y({ type: f })], C.prototype, "spatialReference", void 0), e([o("spatialReference", ["spatialReference", "tileInfo"])], C.prototype, "readSpatialReference", null), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], C.prototype, "path", void 0), e([y({ readOnly: true })], C.prototype, "sublayers", void 0), e([r2("sublayers", { layers: { type: [Z] } })], C.prototype, "writeSublayers", null), e([y({ json: { read: false, write: false } })], C.prototype, "popupEnabled", void 0), e([y()], C.prototype, "tileServers", null), e([s2("tileServers")], C.prototype, "castTileServers", null), e([y({ readOnly: true, json: { read: false } })], C.prototype, "type", void 0), e([y(f2)], C.prototype, "url", void 0), C = e([a("esri.layers.TileLayer")], C), C.prototype.fetchTile.__isDefault__ = true;
var D = C;
export {
  D as default
};
//# sourceMappingURL=TileLayer-GC5RX3OZ.js.map
