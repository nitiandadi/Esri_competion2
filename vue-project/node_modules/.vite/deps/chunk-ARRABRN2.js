import {
  _,
  f,
  g,
  u as u2,
  w as w2,
  x
} from "./chunk-XKQGIVQO.js";
import {
  S,
  l as l2,
  o as o3,
  r as r2,
  s as s4,
  t,
  y as y2
} from "./chunk-7WIVOZQ6.js";
import {
  a as a2
} from "./chunk-JKBONAYS.js";
import {
  u
} from "./chunk-YSJ4W32U.js";
import {
  C,
  S2,
  m as m2,
  w
} from "./chunk-ZUIHAM2A.js";
import {
  m,
  y as y3
} from "./chunk-FSB7TIRN.js";
import {
  o as o2
} from "./chunk-F4DUNBGT.js";
import {
  r
} from "./chunk-JATK7CEQ.js";
import {
  o
} from "./chunk-74TXAD7S.js";
import {
  s as s3
} from "./chunk-HIRLBWV3.js";
import {
  l
} from "./chunk-AFQAO5F4.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-OA5ES74L.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-YVZY5LDV.js";
import {
  p
} from "./chunk-H32MMKAJ.js";

// node_modules/@arcgis/core/layers/support/LabelExpressionInfo.js
var l3;
var n = l3 = class extends l {
  constructor() {
    super(...arguments), this.expression = null, this.title = null, this.value = null;
  }
  readExpression(r3, e2) {
    return e2.value ? w2(e2.value) : r3;
  }
  writeExpression(r3, e2, s6) {
    null != this.value && (r3 = w2(this.value)), null != r3 && (e2[s6] = r3);
  }
  clone() {
    return new l3({ expression: this.expression, title: this.title, value: this.value });
  }
};
e([y({ type: String, json: { write: { writerEnsuresNonNull: true } } })], n.prototype, "expression", void 0), e([o("expression", ["expression", "value"])], n.prototype, "readExpression", null), e([r("expression")], n.prototype, "writeExpression", null), e([y({ type: String, json: { write: true, origins: { "web-scene": { write: false } } } })], n.prototype, "title", void 0), e([y({ json: { read: false, write: false } })], n.prototype, "value", void 0), n = l3 = e([a("esri.layers.support.LabelExpressionInfo")], n);
var a3 = n;

// node_modules/@arcgis/core/symbols/support/defaults.js
var c = y3.fromJSON(l2);
var u3 = m.fromJSON(o3);
var a4 = S2.fromJSON(S);
var y4 = m2.fromJSON(t);
var N = y3.fromJSON(r2);
var O = m.fromJSON(s4);
var j = S2.fromJSON(y2);

// node_modules/@arcgis/core/layers/support/LabelClass.js
var h;
var P = new s3({ esriServerPointLabelPlacementAboveCenter: "above-center", esriServerPointLabelPlacementAboveLeft: "above-left", esriServerPointLabelPlacementAboveRight: "above-right", esriServerPointLabelPlacementBelowCenter: "below-center", esriServerPointLabelPlacementBelowLeft: "below-left", esriServerPointLabelPlacementBelowRight: "below-right", esriServerPointLabelPlacementCenterCenter: "center-center", esriServerPointLabelPlacementCenterLeft: "center-left", esriServerPointLabelPlacementCenterRight: "center-right", esriServerLinePlacementAboveAfter: "above-after", esriServerLinePlacementAboveAlong: "above-along", esriServerLinePlacementAboveBefore: "above-before", esriServerLinePlacementAboveStart: "above-start", esriServerLinePlacementAboveEnd: "above-end", esriServerLinePlacementBelowAfter: "below-after", esriServerLinePlacementBelowAlong: "below-along", esriServerLinePlacementBelowBefore: "below-before", esriServerLinePlacementBelowStart: "below-start", esriServerLinePlacementBelowEnd: "below-end", esriServerLinePlacementCenterAfter: "center-after", esriServerLinePlacementCenterAlong: "center-along", esriServerLinePlacementCenterBefore: "center-before", esriServerLinePlacementCenterStart: "center-start", esriServerLinePlacementCenterEnd: "center-end", esriServerPolygonPlacementAlwaysHorizontal: "always-horizontal" }, { ignoreUnknown: true });
function x2(e2, r3, t3) {
  return { enabled: !u(t3 == null ? void 0 : t3.layer) };
}
function L(e2) {
  var _a;
  return !e2 || "service" !== e2.origin && !("map-image" === ((_a = e2.layer) == null ? void 0 : _a.type));
}
function g2(e2) {
  return "map-image" === (e2 == null ? void 0 : e2.type);
}
function E(e2) {
  var _a, _b;
  return !!g2(e2) && !!((_b = (_a = e2.capabilities) == null ? void 0 : _a.exportMap) == null ? void 0 : _b.supportsArcadeExpressionForLabeling);
}
function j2(e2) {
  return L(e2) || E(e2 == null ? void 0 : e2.layer);
}
var A = h = class extends l {
  static evaluateWhere(e2, r3) {
    const t3 = (e3, r4, t4) => {
      switch (r4) {
        case "=":
          return e3 == t4;
        case "<>":
          return e3 != t4;
        case ">":
          return e3 > t4;
        case ">=":
          return e3 >= t4;
        case "<":
          return e3 < t4;
        case "<=":
          return e3 <= t4;
      }
      return false;
    };
    try {
      if (null == e2)
        return true;
      const o4 = e2.split(" ");
      if (3 === o4.length)
        return t3(r3[o4[0]], o4[1], o4[2]);
      if (7 === o4.length) {
        const e3 = t3(r3[o4[0]], o4[1], o4[2]), i2 = o4[3], n3 = t3(r3[o4[4]], o4[5], o4[6]);
        switch (i2) {
          case "AND":
            return e3 && n3;
          case "OR":
            return e3 || n3;
        }
      }
      return false;
    } catch (o4) {
      console.log("Error.: can't parse = " + e2);
    }
  }
  constructor(e2) {
    super(e2), this.type = "label", this.name = null, this.allowOverrun = false, this.deconflictionStrategy = "static", this.labelExpression = null, this.labelExpressionInfo = null, this.labelPlacement = null, this.labelPosition = "curved", this.maxScale = 0, this.minScale = 0, this.repeatLabel = true, this.repeatLabelDistance = null, this.symbol = y4, this.useCodedValues = void 0, this.where = null;
  }
  readLabelExpression(e2, r3) {
    const t3 = r3.labelExpressionInfo;
    if (!t3 || !t3.value && !t3.expression)
      return e2;
  }
  writeLabelExpression(e2, r3, t3) {
    if (this.labelExpressionInfo) {
      if (null != this.labelExpressionInfo.value)
        e2 = u2(this.labelExpressionInfo.value);
      else if (null != this.labelExpressionInfo.expression) {
        const r4 = _(this.labelExpressionInfo.expression);
        r4 && (e2 = "[" + r4 + "]");
      }
    }
    null != e2 && (r3[t3] = e2);
  }
  writeLabelExpressionInfo(e2, r3, t3, o4) {
    if (null == e2 && null != this.labelExpression && L(o4))
      e2 = new a3({ expression: this.getLabelExpressionArcade() });
    else if (!e2)
      return;
    const i2 = e2.toJSON(o4);
    i2.expression && (r3[t3] = i2);
  }
  writeMaxScale(e2, r3) {
    (e2 || this.minScale) && (r3.maxScale = e2);
  }
  writeMinScale(e2, r3) {
    (e2 || this.maxScale) && (r3.minScale = e2);
  }
  getLabelExpression() {
    return x(this);
  }
  getLabelExpressionArcade() {
    return f(this);
  }
  getLabelExpressionSingleField() {
    return g(this);
  }
  hash() {
    return JSON.stringify(this);
  }
  clone() {
    return new h({ allowOverrun: this.allowOverrun, deconflictionStrategy: this.deconflictionStrategy, labelExpression: this.labelExpression, labelExpressionInfo: p(this.labelExpressionInfo), labelPosition: this.labelPosition, labelPlacement: this.labelPlacement, maxScale: this.maxScale, minScale: this.minScale, name: this.name, repeatLabel: this.repeatLabel, repeatLabelDistance: this.repeatLabelDistance, symbol: p(this.symbol), where: this.where, useCodedValues: this.useCodedValues });
  }
};
e([y({ type: String, json: { write: true } })], A.prototype, "name", void 0), e([y({ type: Boolean, json: { write: true, default: false, origins: { "web-scene": { write: false }, "portal-item": { default: false, write: { overridePolicy: x2 } } } } })], A.prototype, "allowOverrun", void 0), e([y({ type: String, json: { write: true, default: "static", origins: { "web-scene": { write: false }, "portal-item": { default: "static", write: { overridePolicy: x2 } } } } })], A.prototype, "deconflictionStrategy", void 0), e([y({ type: String, json: { write: { overridePolicy(e2, r3, t3) {
  return this.labelExpressionInfo && "service" === (t3 == null ? void 0 : t3.origin) && E(t3.layer) ? { enabled: false } : { allowNull: true };
} } } })], A.prototype, "labelExpression", void 0), e([o("labelExpression")], A.prototype, "readLabelExpression", null), e([r("labelExpression")], A.prototype, "writeLabelExpression", null), e([y({ type: a3, json: { write: { overridePolicy: (e2, r3, t3) => j2(t3) ? { allowNull: true } : { enabled: false } } } })], A.prototype, "labelExpressionInfo", void 0), e([r("labelExpressionInfo")], A.prototype, "writeLabelExpressionInfo", null), e([y({ type: P.apiValues, json: { type: P.jsonValues, read: P.read, write: P.write } })], A.prototype, "labelPlacement", void 0), e([y({ type: ["curved", "parallel"], json: { write: true, origins: { "web-map": { write: false }, "web-scene": { write: false }, "portal-item": { write: false } } } })], A.prototype, "labelPosition", void 0), e([y({ type: Number })], A.prototype, "maxScale", void 0), e([r("maxScale")], A.prototype, "writeMaxScale", null), e([y({ type: Number })], A.prototype, "minScale", void 0), e([r("minScale")], A.prototype, "writeMinScale", null), e([y({ type: Boolean, json: { write: true, origins: { "web-scene": { write: false }, "portal-item": { write: { overridePolicy: x2 } } } } })], A.prototype, "repeatLabel", void 0), e([y({ type: Number, cast: o2, json: { write: true, origins: { "web-scene": { write: false }, "portal-item": { write: { overridePolicy: x2 } } } } })], A.prototype, "repeatLabelDistance", void 0), e([y({ types: C, json: { origins: { "web-scene": { types: w, write: a2, default: null } }, write: a2, default: null } })], A.prototype, "symbol", void 0), e([y({ type: Boolean, json: { write: true } })], A.prototype, "useCodedValues", void 0), e([y({ type: String, json: { write: true } })], A.prototype, "where", void 0), A = h = e([a("esri.layers.support.LabelClass")], A);
var C2 = A;

// node_modules/@arcgis/core/layers/support/labelingInfo.js
var n2 = s.getLogger("esri.layers.support.labelingInfo");
var l4 = /\[([^\[\]]+)\]/gi;
function i(e2, r3, o4) {
  return e2 ? e2.map((e3) => {
    const n3 = new C2();
    if (n3.read(e3, o4), n3.labelExpression) {
      const e4 = r3.fields || r3.layerDefinition && r3.layerDefinition.fields || this.fields;
      n3.labelExpression = n3.labelExpression.replace(l4, (r4, o5) => `[${s5(o5, e4)}]`);
    }
    return n3;
  }) : null;
}
function s5(e2, r3) {
  if (!r3)
    return e2;
  const o4 = e2.toLowerCase();
  for (let t3 = 0; t3 < r3.length; t3++) {
    const e3 = r3[t3].name;
    if (e3.toLowerCase() === o4)
      return e3;
  }
  return e2;
}
var a5 = { esriGeometryPoint: ["above-right", "above-center", "above-left", "center-center", "center-left", "center-right", "below-center", "below-left", "below-right"], esriGeometryPolygon: ["always-horizontal"], esriGeometryPolyline: ["center-along"], esriGeometryMultipoint: null };
function c2(e2, o4) {
  const t3 = p(e2);
  return t3.some((e3) => f2(e3, o4)) ? [] : t3;
}
function f2(r3, o4) {
  const t3 = r3.labelPlacement, l5 = a5[o4];
  if (!r3.symbol)
    return n2.warn("No ILabelClass symbol specified."), true;
  if (!l5)
    return n2.error(new s2("labeling:unsupported-geometry-type", `Unable to create labels for layer, geometry type '${o4}' is not supported`)), true;
  if (!l5.includes(t3)) {
    const e2 = l5[0];
    t3 && n2.warn(`Found invalid label placement type ${t3} for ${o4}. Defaulting to ${e2}`), r3.labelPlacement = e2;
  }
  return false;
}

export {
  c,
  u3 as u,
  a4 as a,
  N,
  O,
  j,
  C2 as C,
  i,
  c2
};
//# sourceMappingURL=chunk-ARRABRN2.js.map
