import {
  f2 as f
} from "./chunk-A5CTLI5A.js";
import {
  s,
  s2
} from "./chunk-C2WY74GI.js";
import {
  r
} from "./chunk-HVCAHUYB.js";

// node_modules/@arcgis/core/support/arcadeOnDemand.js
var s3 = s.getLogger("esri.support.arcadeOnDemand");
var c;
function i() {
  return c || (c = (async () => {
    const e = await import("./arcadeUtils-S4AZ7ZVE.js");
    return { arcade: e.arcade, arcadeUtils: e, Dictionary: e.Dictionary, Feature: e.arcadeFeature };
  })()), c;
}
var n = (e, r2, t) => u.create(e, r2, t, null, ["$feature"]);
var o = (e, r2, t) => u.create(e, r2, t, null, ["$feature", "$view"]);
var p = (e, r2, t, a) => u.create(e, r2, t, a, ["$feature", "$view"]);
var u = class {
  constructor(e, r2, t, a, s4, c2, i2) {
    this.script = e, this.evaluate = a;
    const n2 = Array.isArray(c2) ? c2 : c2.fields;
    this.fields = n2, this._syntaxTree = t, this._arcade = r2, this._arcadeFeature = s4, this._spatialReference = i2, this._referencesGeometry = r2.scriptTouchesGeometry(this._syntaxTree), this._referencesScale = this._arcade.referencesMember(this._syntaxTree, "scale");
  }
  static async create(r2, c2, n2, o2, l, p2) {
    const { arcade: m, Feature: f2, Dictionary: d } = await i(), y = f.fromJSON(c2);
    let h;
    try {
      h = m.parseScript(r2, p2);
    } catch (A) {
      return s3.error(new s2("arcade-bad-expression", "Failed to parse arcade script", { script: r2, error: A })), null;
    }
    const w = l.reduce((e, r3) => ({ ...e, [r3]: null }), {});
    let g = null;
    r(o2) && (g = new d(o2), g.immutable = true, w.$config = null);
    const _ = m.scriptUsesGeometryEngine(h), F = _ && m.enableGeometrySupport(), S = m.scriptUsesFeatureSet(h) && m.enableFeatureSetSupport(), $ = m.scriptIsAsync(h), b = $ && m.enableAsyncSupport(), v = { vars: w, spatialReference: y, useAsync: !!b };
    await Promise.all([F, S, b]);
    const j = /* @__PURE__ */ new Set();
    await m.loadDependentModules(j, h, null, $, _);
    const G = new d();
    G.immutable = false, G.setField("scale", 0);
    const R = m.compileScript(h, v), x = (e) => ("$view" in e && e.$view && (G.setField("scale", "object" == typeof e.$view ? e.$view.scale : void 0), e.$view = G), g && (e.$config = g), R({ vars: e, spatialReference: y }));
    return new u(r2, m, h, x, new f2(), n2, y);
  }
  repurposeFeature(e) {
    return e.geometry && !e.geometry.spatialReference && (e.geometry.spatialReference = this._spatialReference), this._arcadeFeature.repurposeFromGraphicLikeObject(e.geometry, e.attributes, { fields: this.fields }), this._arcadeFeature;
  }
  referencesGeometry() {
    return this._referencesGeometry;
  }
  referencesScale() {
    return this._referencesScale;
  }
};

export {
  i,
  n,
  o,
  p,
  u
};
//# sourceMappingURL=chunk-E4MAG7OK.js.map
