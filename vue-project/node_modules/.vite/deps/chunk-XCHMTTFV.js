import {
  n,
  t
} from "./chunk-MJIX5E4D.js";
import {
  i
} from "./chunk-JT54I3AY.js";

// node_modules/@arcgis/core/geometry/support/meshUtils/deduplicate.js
function r(r2, s, u) {
  const c = Array.isArray(r2), a = c ? r2.length / s : r2.byteLength / (4 * s), h = c ? r2 : new Uint32Array(r2, 0, a * s), y = (u == null ? void 0 : u.minReduction) ?? 0, g = (u == null ? void 0 : u.originalIndices) || null, A = g ? g.length : 0, w = (u == null ? void 0 : u.componentOffsets) || null;
  let m = 0;
  if (w)
    for (let t2 = 0; t2 < w.length - 1; t2++) {
      const n2 = w[t2 + 1] - w[t2];
      n2 > m && (m = n2);
    }
  else
    m = a;
  const b = Math.floor(1.1 * m) + 1;
  (null == f || f.length < 2 * b) && (f = new Uint32Array(i(2 * b)));
  for (let t2 = 0; t2 < 2 * b; t2++)
    f[t2] = 0;
  let U = 0;
  const d = !!w && !!g, p = d ? A : a;
  let M = t(a / 3);
  const j = new Uint32Array(A), q = 1.96;
  let I = 0 !== y ? Math.ceil(4 * q * q / (y * y) * y * (1 - y)) : p, k = 1, v = w ? w[1] : p;
  for (let t2 = 0; t2 < p; t2++) {
    if (t2 === I) {
      const n3 = 1 - U / t2;
      if (n3 + q * Math.sqrt(n3 * (1 - n3) / t2) < y)
        return null;
      I *= 2;
    }
    if (t2 === v) {
      for (let t3 = 0; t3 < 2 * b; t3++)
        f[t3] = 0;
      if (g)
        for (let t3 = w[k - 1]; t3 < w[k]; t3++)
          j[t3] = M[g[t3]];
      v = w[++k];
    }
    const n2 = d ? g[t2] : t2, e = n2 * s, r3 = o(h, e, s);
    let i3 = r3 % b, u2 = U;
    for (; 0 !== f[2 * i3 + 1]; ) {
      if (f[2 * i3] === r3) {
        const t3 = f[2 * i3 + 1] - 1;
        if (l(h, e, t3 * s, s)) {
          u2 = M[t3];
          break;
        }
      }
      i3++, i3 >= b && (i3 -= b);
    }
    u2 === U && (f[2 * i3] = r3, f[2 * i3 + 1] = n2 + 1, U++), M[n2] = u2;
  }
  if (0 !== y && 1 - U / a < y)
    return null;
  if (d) {
    for (let t2 = w[k - 1]; t2 < j.length; t2++)
      j[t2] = M[g[t2]];
    M = n(j);
  }
  const x = c ? new Array(U) : new Uint32Array(U * s);
  U = 0;
  for (let t2 = 0; t2 < p; t2++)
    if (M[t2] === U) {
      i2(h, (d ? g[t2] : t2) * s, x, U * s, s), U++;
    }
  if (g && !d) {
    const t2 = new Uint32Array(A);
    for (let n2 = 0; n2 < t2.length; n2++)
      t2[n2] = M[g[n2]];
    M = n(t2);
  }
  return { buffer: Array.isArray(x) ? x : x.buffer, indices: M, uniqueCount: U };
}
function l(t2, n2, e, r2) {
  for (let l2 = 0; l2 < r2; l2++)
    if (t2[n2 + l2] !== t2[e + l2])
      return false;
  return true;
}
function i2(t2, n2, e, r2, l2) {
  for (let i3 = 0; i3 < l2; i3++)
    e[r2 + i3] = t2[n2 + i3];
}
function o(t2, n2, e) {
  let r2 = 0;
  for (let l2 = 0; l2 < e; l2++)
    r2 = t2[n2 + l2] + r2 | 0, r2 = r2 + (r2 << 11) + (r2 >>> 2) | 0;
  return r2 >>> 0;
}
var f = null;

export {
  r
};
//# sourceMappingURL=chunk-XCHMTTFV.js.map
