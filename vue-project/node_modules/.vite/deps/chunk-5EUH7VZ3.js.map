{
  "version": 3,
  "sources": ["../../@stencil/core/internal/app-data/index.js", "../../@stencil/core/internal/client/index.js"],
  "sourcesContent": ["const BUILD = {\r\n    allRenderFn: false,\r\n    cmpDidLoad: true,\r\n    cmpDidUnload: false,\r\n    cmpDidUpdate: true,\r\n    cmpDidRender: true,\r\n    cmpWillLoad: true,\r\n    cmpWillUpdate: true,\r\n    cmpWillRender: true,\r\n    connectedCallback: true,\r\n    disconnectedCallback: true,\r\n    element: true,\r\n    event: true,\r\n    hasRenderFn: true,\r\n    lifecycle: true,\r\n    hostListener: true,\r\n    hostListenerTargetWindow: true,\r\n    hostListenerTargetDocument: true,\r\n    hostListenerTargetBody: true,\r\n    hostListenerTargetParent: false,\r\n    hostListenerTarget: true,\r\n    member: true,\r\n    method: true,\r\n    mode: true,\r\n    observeAttribute: true,\r\n    prop: true,\r\n    propMutable: true,\r\n    reflect: true,\r\n    scoped: true,\r\n    shadowDom: true,\r\n    slot: true,\r\n    cssAnnotations: true,\r\n    state: true,\r\n    style: true,\r\n    svg: true,\r\n    updatable: true,\r\n    vdomAttribute: true,\r\n    vdomXlink: true,\r\n    vdomClass: true,\r\n    vdomFunctional: true,\r\n    vdomKey: true,\r\n    vdomListener: true,\r\n    vdomRef: true,\r\n    vdomPropOrAttr: true,\r\n    vdomRender: true,\r\n    vdomStyle: true,\r\n    vdomText: true,\r\n    watchCallback: true,\r\n    taskQueue: true,\r\n    hotModuleReplacement: false,\r\n    isDebug: false,\r\n    isDev: false,\r\n    isTesting: false,\r\n    hydrateServerSide: false,\r\n    hydrateClientSide: false,\r\n    lifecycleDOMEvents: false,\r\n    lazyLoad: false,\r\n    profile: false,\r\n    slotRelocation: true,\r\n    appendChildSlotFix: false,\r\n    cloneNodeFix: false,\r\n    hydratedAttribute: false,\r\n    hydratedClass: true,\r\n    safari10: false,\r\n    scriptDataOpts: false,\r\n    scopedSlotTextContentFix: false,\r\n    shadowDomShim: false,\r\n    slotChildNodesFix: false,\r\n    invisiblePrehydration: true,\r\n    propBoolean: true,\r\n    propNumber: true,\r\n    propString: true,\r\n    cssVarShim: false,\r\n    constructableCSS: true,\r\n    cmpShouldUpdate: true,\r\n    devTools: false,\r\n    dynamicImportShim: false,\r\n    shadowDelegatesFocus: true,\r\n    initializeNextTick: false,\r\n    asyncLoading: false,\r\n    asyncQueue: false,\r\n    transformTagName: false,\r\n    attachStyles: true,\r\n};\r\nconst Env = {};\r\nconst NAMESPACE = /* default */ 'app';\r\n\r\nexport { BUILD, Env, NAMESPACE };\r\n", "/**\r\n * Virtual DOM patching algorithm based on Snabbdom by\r\n * Simon Friis Vindum (@paldepind)\r\n * Licensed under the MIT License\r\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\r\n *\r\n * Modified for Stencil's renderer and slot projection\r\n */\r\nlet scopeId;\r\nlet contentRef;\r\nlet hostTagName;\r\nlet customError;\r\nlet i = 0;\r\nlet useNativeShadowDom = false;\r\nlet checkSlotFallbackVisibility = false;\r\nlet checkSlotRelocate = false;\r\nlet isSvgMode = false;\r\nlet renderingRef = null;\r\nlet queueCongestion = 0;\r\nlet queuePending = false;\r\n/*\r\n Stencil Client Platform v2.20.0 | MIT Licensed | https://stenciljs.com\r\n */\r\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\r\nconst Build = {\r\n    isDev: BUILD.isDev ? true : false,\r\n    isBrowser: true,\r\n    isServer: false,\r\n    isTesting: BUILD.isTesting ? true : false,\r\n};\r\nconst Context = {};\r\nconst getAssetPath = (path) => {\r\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\r\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\r\n};\r\nconst setAssetPath = (path) => (plt.$resourcesUrl$ = path);\r\nconst createTime = (fnName, tagName = '') => {\r\n    if (BUILD.profile && performance.mark) {\r\n        const key = `st:${fnName}:${tagName}:${i++}`;\r\n        // Start\r\n        performance.mark(key);\r\n        // End\r\n        return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\r\n    }\r\n    else {\r\n        return () => {\r\n            return;\r\n        };\r\n    }\r\n};\r\nconst uniqueTime = (key, measureText) => {\r\n    if (BUILD.profile && performance.mark) {\r\n        if (performance.getEntriesByName(key).length === 0) {\r\n            performance.mark(key);\r\n        }\r\n        return () => {\r\n            if (performance.getEntriesByName(measureText).length === 0) {\r\n                performance.measure(measureText, key);\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        return () => {\r\n            return;\r\n        };\r\n    }\r\n};\r\nconst inspect = (ref) => {\r\n    const hostRef = getHostRef(ref);\r\n    if (!hostRef) {\r\n        return undefined;\r\n    }\r\n    const flags = hostRef.$flags$;\r\n    const hostElement = hostRef.$hostElement$;\r\n    return {\r\n        renderCount: hostRef.$renderCount$,\r\n        flags: {\r\n            hasRendered: !!(flags & 2 /* HOST_FLAGS.hasRendered */),\r\n            hasConnected: !!(flags & 1 /* HOST_FLAGS.hasConnected */),\r\n            isWaitingForChildren: !!(flags & 4 /* HOST_FLAGS.isWaitingForChildren */),\r\n            isConstructingInstance: !!(flags & 8 /* HOST_FLAGS.isConstructingInstance */),\r\n            isQueuedForUpdate: !!(flags & 16 /* HOST_FLAGS.isQueuedForUpdate */),\r\n            hasInitializedComponent: !!(flags & 32 /* HOST_FLAGS.hasInitializedComponent */),\r\n            hasLoadedComponent: !!(flags & 64 /* HOST_FLAGS.hasLoadedComponent */),\r\n            isWatchReady: !!(flags & 128 /* HOST_FLAGS.isWatchReady */),\r\n            isListenReady: !!(flags & 256 /* HOST_FLAGS.isListenReady */),\r\n            needsRerender: !!(flags & 512 /* HOST_FLAGS.needsRerender */),\r\n        },\r\n        instanceValues: hostRef.$instanceValues$,\r\n        ancestorComponent: hostRef.$ancestorComponent$,\r\n        hostElement,\r\n        lazyInstance: hostRef.$lazyInstance$,\r\n        vnode: hostRef.$vnode$,\r\n        modeName: hostRef.$modeName$,\r\n        onReadyPromise: hostRef.$onReadyPromise$,\r\n        onReadyResolve: hostRef.$onReadyResolve$,\r\n        onInstancePromise: hostRef.$onInstancePromise$,\r\n        onInstanceResolve: hostRef.$onInstanceResolve$,\r\n        onRenderResolve: hostRef.$onRenderResolve$,\r\n        queuedListeners: hostRef.$queuedListeners$,\r\n        rmListeners: hostRef.$rmListeners$,\r\n        ['s-id']: hostElement['s-id'],\r\n        ['s-cr']: hostElement['s-cr'],\r\n        ['s-lr']: hostElement['s-lr'],\r\n        ['s-p']: hostElement['s-p'],\r\n        ['s-rc']: hostElement['s-rc'],\r\n        ['s-sc']: hostElement['s-sc'],\r\n    };\r\n};\r\nconst installDevTools = () => {\r\n    if (BUILD.devTools) {\r\n        const stencil = (win.stencil = win.stencil || {});\r\n        const originalInspect = stencil.inspect;\r\n        stencil.inspect = (ref) => {\r\n            let result = inspect(ref);\r\n            if (!result && typeof originalInspect === 'function') {\r\n                result = originalInspect(ref);\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n};\r\nconst CONTENT_REF_ID = 'r';\r\nconst ORG_LOCATION_ID = 'o';\r\nconst SLOT_NODE_ID = 's';\r\nconst TEXT_NODE_ID = 't';\r\nconst HYDRATE_ID = 's-id';\r\nconst HYDRATED_STYLE_ID = 'sty-id';\r\nconst HYDRATE_CHILD_ID = 'c-id';\r\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\r\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\r\n/**\r\n * Default style mode id\r\n */\r\n/**\r\n * Reusable empty obj/array\r\n * Don't add values to these!!\r\n */\r\nconst EMPTY_OBJ = {};\r\n/**\r\n * Namespaces\r\n */\r\nconst SVG_NS = 'http://www.w3.org/2000/svg';\r\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\r\nconst isDef = (v) => v != null;\r\nconst isComplexType = (o) => {\r\n    // https://jsperf.com/typeof-fn-object/5\r\n    o = typeof o;\r\n    return o === 'object' || o === 'function';\r\n};\r\n/**\r\n * Production h() function based on Preact by\r\n * Jason Miller (@developit)\r\n * Licensed under the MIT License\r\n * https://github.com/developit/preact/blob/master/LICENSE\r\n *\r\n * Modified for Stencil's compiler and vdom\r\n */\r\n// const stack: any[] = [];\r\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\r\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\r\nconst h = (nodeName, vnodeData, ...children) => {\r\n    let child = null;\r\n    let key = null;\r\n    let slotName = null;\r\n    let simple = false;\r\n    let lastSimple = false;\r\n    const vNodeChildren = [];\r\n    const walk = (c) => {\r\n        for (let i = 0; i < c.length; i++) {\r\n            child = c[i];\r\n            if (Array.isArray(child)) {\r\n                walk(child);\r\n            }\r\n            else if (child != null && typeof child !== 'boolean') {\r\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\r\n                    child = String(child);\r\n                }\r\n                else if (BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\r\n                    consoleDevError(`vNode passed as children has unexpected type.\r\nMake sure it's using the correct h() function.\r\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\r\n                }\r\n                if (simple && lastSimple) {\r\n                    // If the previous child was simple (string), we merge both\r\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\r\n                }\r\n                else {\r\n                    // Append a new vNode, if it's text, we create a text vNode\r\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\r\n                }\r\n                lastSimple = simple;\r\n            }\r\n        }\r\n    };\r\n    walk(children);\r\n    if (vnodeData) {\r\n        if (BUILD.isDev && nodeName === 'input') {\r\n            validateInputProperties(vnodeData);\r\n        }\r\n        // normalize class / classname attributes\r\n        if (BUILD.vdomKey && vnodeData.key) {\r\n            key = vnodeData.key;\r\n        }\r\n        if (BUILD.slotRelocation && vnodeData.name) {\r\n            slotName = vnodeData.name;\r\n        }\r\n        if (BUILD.vdomClass) {\r\n            const classData = vnodeData.className || vnodeData.class;\r\n            if (classData) {\r\n                vnodeData.class =\r\n                    typeof classData !== 'object'\r\n                        ? classData\r\n                        : Object.keys(classData)\r\n                            .filter((k) => classData[k])\r\n                            .join(' ');\r\n            }\r\n        }\r\n    }\r\n    if (BUILD.isDev && vNodeChildren.some(isHost)) {\r\n        consoleDevError(`The <Host> must be the single root component. Make sure:\r\n- You are NOT using hostData() and <Host> in the same component.\r\n- <Host> is used once, and it's the single root component of the render() function.`);\r\n    }\r\n    if (BUILD.vdomFunctional && typeof nodeName === 'function') {\r\n        // nodeName is a functional component\r\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\r\n    }\r\n    const vnode = newVNode(nodeName, null);\r\n    vnode.$attrs$ = vnodeData;\r\n    if (vNodeChildren.length > 0) {\r\n        vnode.$children$ = vNodeChildren;\r\n    }\r\n    if (BUILD.vdomKey) {\r\n        vnode.$key$ = key;\r\n    }\r\n    if (BUILD.slotRelocation) {\r\n        vnode.$name$ = slotName;\r\n    }\r\n    return vnode;\r\n};\r\nconst newVNode = (tag, text) => {\r\n    const vnode = {\r\n        $flags$: 0,\r\n        $tag$: tag,\r\n        $text$: text,\r\n        $elm$: null,\r\n        $children$: null,\r\n    };\r\n    if (BUILD.vdomAttribute) {\r\n        vnode.$attrs$ = null;\r\n    }\r\n    if (BUILD.vdomKey) {\r\n        vnode.$key$ = null;\r\n    }\r\n    if (BUILD.slotRelocation) {\r\n        vnode.$name$ = null;\r\n    }\r\n    return vnode;\r\n};\r\nconst Host = {};\r\nconst isHost = (node) => node && node.$tag$ === Host;\r\nconst vdomFnUtils = {\r\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\r\n    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),\r\n};\r\nconst convertToPublic = (node) => ({\r\n    vattrs: node.$attrs$,\r\n    vchildren: node.$children$,\r\n    vkey: node.$key$,\r\n    vname: node.$name$,\r\n    vtag: node.$tag$,\r\n    vtext: node.$text$,\r\n});\r\nconst convertToPrivate = (node) => {\r\n    if (typeof node.vtag === 'function') {\r\n        const vnodeData = Object.assign({}, node.vattrs);\r\n        if (node.vkey) {\r\n            vnodeData.key = node.vkey;\r\n        }\r\n        if (node.vname) {\r\n            vnodeData.name = node.vname;\r\n        }\r\n        return h(node.vtag, vnodeData, ...(node.vchildren || []));\r\n    }\r\n    const vnode = newVNode(node.vtag, node.vtext);\r\n    vnode.$attrs$ = node.vattrs;\r\n    vnode.$children$ = node.vchildren;\r\n    vnode.$key$ = node.vkey;\r\n    vnode.$name$ = node.vname;\r\n    return vnode;\r\n};\r\n/**\r\n * Validates the ordering of attributes on an input element\r\n * @param inputElm the element to validate\r\n */\r\nconst validateInputProperties = (inputElm) => {\r\n    const props = Object.keys(inputElm);\r\n    const value = props.indexOf('value');\r\n    if (value === -1) {\r\n        return;\r\n    }\r\n    const typeIndex = props.indexOf('type');\r\n    const minIndex = props.indexOf('min');\r\n    const maxIndex = props.indexOf('max');\r\n    const stepIndex = props.indexOf('step');\r\n    if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\r\n        consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\r\n    }\r\n};\r\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\r\n    const endHydrate = createTime('hydrateClient', tagName);\r\n    const shadowRoot = hostElm.shadowRoot;\r\n    const childRenderNodes = [];\r\n    const slotNodes = [];\r\n    const shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;\r\n    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));\r\n    if (!plt.$orgLocNodes$) {\r\n        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));\r\n    }\r\n    hostElm[HYDRATE_ID] = hostId;\r\n    hostElm.removeAttribute(HYDRATE_ID);\r\n    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\r\n    childRenderNodes.map((c) => {\r\n        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\r\n        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\r\n        const node = c.$elm$;\r\n        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\r\n            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\r\n        }\r\n        if (!shadowRoot) {\r\n            node['s-hn'] = tagName;\r\n            if (orgLocationNode) {\r\n                node['s-ol'] = orgLocationNode;\r\n                node['s-ol']['s-nr'] = node;\r\n            }\r\n        }\r\n        plt.$orgLocNodes$.delete(orgLocationId);\r\n    });\r\n    if (BUILD.shadowDom && shadowRoot) {\r\n        shadowRootNodes.map((shadowRootNode) => {\r\n            if (shadowRootNode) {\r\n                shadowRoot.appendChild(shadowRootNode);\r\n            }\r\n        });\r\n    }\r\n    endHydrate();\r\n};\r\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\r\n    let childNodeType;\r\n    let childIdSplt;\r\n    let childVNode;\r\n    let i;\r\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\r\n        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\r\n        if (childNodeType) {\r\n            // got the node data from the element's attribute\r\n            // `${hostId}.${nodeId}.${depth}.${index}`\r\n            childIdSplt = childNodeType.split('.');\r\n            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\r\n                childVNode = {\r\n                    $flags$: 0,\r\n                    $hostId$: childIdSplt[0],\r\n                    $nodeId$: childIdSplt[1],\r\n                    $depth$: childIdSplt[2],\r\n                    $index$: childIdSplt[3],\r\n                    $tag$: node.tagName.toLowerCase(),\r\n                    $elm$: node,\r\n                    $attrs$: null,\r\n                    $children$: null,\r\n                    $key$: null,\r\n                    $name$: null,\r\n                    $text$: null,\r\n                };\r\n                childRenderNodes.push(childVNode);\r\n                node.removeAttribute(HYDRATE_CHILD_ID);\r\n                // this is a new child vnode\r\n                // so ensure its parent vnode has the vchildren array\r\n                if (!parentVNode.$children$) {\r\n                    parentVNode.$children$ = [];\r\n                }\r\n                // add our child vnode to a specific index of the vnode's children\r\n                parentVNode.$children$[childVNode.$index$] = childVNode;\r\n                // this is now the new parent vnode for all the next child checks\r\n                parentVNode = childVNode;\r\n                if (shadowRootNodes && childVNode.$depth$ === '0') {\r\n                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\r\n                }\r\n            }\r\n        }\r\n        // recursively drill down, end to start so we can remove nodes\r\n        for (i = node.childNodes.length - 1; i >= 0; i--) {\r\n            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\r\n        }\r\n        if (node.shadowRoot) {\r\n            // keep drilling down through the shadow root nodes\r\n            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\r\n                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\r\n            }\r\n        }\r\n    }\r\n    else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\r\n        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\r\n        childIdSplt = node.nodeValue.split('.');\r\n        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\r\n            // comment node for either the host id or a 0 host id\r\n            childNodeType = childIdSplt[0];\r\n            childVNode = {\r\n                $flags$: 0,\r\n                $hostId$: childIdSplt[1],\r\n                $nodeId$: childIdSplt[2],\r\n                $depth$: childIdSplt[3],\r\n                $index$: childIdSplt[4],\r\n                $elm$: node,\r\n                $attrs$: null,\r\n                $children$: null,\r\n                $key$: null,\r\n                $name$: null,\r\n                $tag$: null,\r\n                $text$: null,\r\n            };\r\n            if (childNodeType === TEXT_NODE_ID) {\r\n                childVNode.$elm$ = node.nextSibling;\r\n                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* NODE_TYPE.TextNode */) {\r\n                    childVNode.$text$ = childVNode.$elm$.textContent;\r\n                    childRenderNodes.push(childVNode);\r\n                    // remove the text comment since it's no longer needed\r\n                    node.remove();\r\n                    if (!parentVNode.$children$) {\r\n                        parentVNode.$children$ = [];\r\n                    }\r\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\r\n                    if (shadowRootNodes && childVNode.$depth$ === '0') {\r\n                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\r\n                    }\r\n                }\r\n            }\r\n            else if (childVNode.$hostId$ === hostId) {\r\n                // this comment node is specifcally for this host id\r\n                if (childNodeType === SLOT_NODE_ID) {\r\n                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\r\n                    childVNode.$tag$ = 'slot';\r\n                    if (childIdSplt[5]) {\r\n                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];\r\n                    }\r\n                    else {\r\n                        node['s-sn'] = '';\r\n                    }\r\n                    node['s-sr'] = true;\r\n                    if (BUILD.shadowDom && shadowRootNodes) {\r\n                        // browser support shadowRoot and this is a shadow dom component\r\n                        // create an actual slot element\r\n                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);\r\n                        if (childVNode.$name$) {\r\n                            // add the slot name attribute\r\n                            childVNode.$elm$.setAttribute('name', childVNode.$name$);\r\n                        }\r\n                        // insert the new slot element before the slot comment\r\n                        node.parentNode.insertBefore(childVNode.$elm$, node);\r\n                        // remove the slot comment since it's not needed for shadow\r\n                        node.remove();\r\n                        if (childVNode.$depth$ === '0') {\r\n                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\r\n                        }\r\n                    }\r\n                    slotNodes.push(childVNode);\r\n                    if (!parentVNode.$children$) {\r\n                        parentVNode.$children$ = [];\r\n                    }\r\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\r\n                }\r\n                else if (childNodeType === CONTENT_REF_ID) {\r\n                    // `${CONTENT_REF_ID}.${hostId}`;\r\n                    if (BUILD.shadowDom && shadowRootNodes) {\r\n                        // remove the content ref comment since it's not needed for shadow\r\n                        node.remove();\r\n                    }\r\n                    else if (BUILD.slotRelocation) {\r\n                        hostElm['s-cr'] = node;\r\n                        node['s-cn'] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (parentVNode && parentVNode.$tag$ === 'style') {\r\n        const vnode = newVNode(null, node.textContent);\r\n        vnode.$elm$ = node;\r\n        vnode.$index$ = '0';\r\n        parentVNode.$children$ = [vnode];\r\n    }\r\n};\r\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\r\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\r\n        let i = 0;\r\n        for (; i < node.childNodes.length; i++) {\r\n            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\r\n        }\r\n        if (node.shadowRoot) {\r\n            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\r\n                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\r\n            }\r\n        }\r\n    }\r\n    else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\r\n        const childIdSplt = node.nodeValue.split('.');\r\n        if (childIdSplt[0] === ORG_LOCATION_ID) {\r\n            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\r\n            node.nodeValue = '';\r\n            // useful to know if the original location is\r\n            // the root light-dom of a shadow dom component\r\n            node['s-en'] = childIdSplt[3];\r\n        }\r\n    }\r\n};\r\n// Private\r\nconst computeMode = (elm) => modeResolutionChain.map((h) => h(elm)).find((m) => !!m);\r\n// Public\r\nconst setMode = (handler) => modeResolutionChain.push(handler);\r\nconst getMode = (ref) => getHostRef(ref).$modeName$;\r\n/**\r\n * Parse a new property value for a given property type.\r\n *\r\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\r\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\r\n *   1. `any`, the type given to `propValue` in the function signature\r\n *   2. the type stored from `propType`.\r\n *\r\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\r\n *\r\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\r\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\r\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\r\n * ```tsx\r\n * <my-cmp prop-val={0}></my-cmp>\r\n * ```\r\n *\r\n * HTML prop values on the other hand, will always a string\r\n *\r\n * @param propValue the new value to coerce to some type\r\n * @param propType the type of the prop, expressed as a binary number\r\n * @returns the parsed/coerced value\r\n */\r\nconst parsePropertyValue = (propValue, propType) => {\r\n    // ensure this value is of the correct prop type\r\n    if (propValue != null && !isComplexType(propValue)) {\r\n        if (BUILD.propBoolean && propType & 4 /* MEMBER_FLAGS.Boolean */) {\r\n            // per the HTML spec, any string value means it is a boolean true value\r\n            // but we'll cheat here and say that the string \"false\" is the boolean false\r\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\r\n        }\r\n        if (BUILD.propNumber && propType & 2 /* MEMBER_FLAGS.Number */) {\r\n            // force it to be a number\r\n            return parseFloat(propValue);\r\n        }\r\n        if (BUILD.propString && propType & 1 /* MEMBER_FLAGS.String */) {\r\n            // could have been passed as a number or boolean\r\n            // but we still want it as a string\r\n            return String(propValue);\r\n        }\r\n        // redundant return here for better minification\r\n        return propValue;\r\n    }\r\n    // not sure exactly what type we want\r\n    // so no need to change to a different type\r\n    return propValue;\r\n};\r\nconst getElement = (ref) => (BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref);\r\nconst createEvent = (ref, name, flags) => {\r\n    const elm = getElement(ref);\r\n    return {\r\n        emit: (detail) => {\r\n            if (BUILD.isDev && !elm.isConnected) {\r\n                consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\r\n            }\r\n            return emitEvent(elm, name, {\r\n                bubbles: !!(flags & 4 /* EVENT_FLAGS.Bubbles */),\r\n                composed: !!(flags & 2 /* EVENT_FLAGS.Composed */),\r\n                cancelable: !!(flags & 1 /* EVENT_FLAGS.Cancellable */),\r\n                detail,\r\n            });\r\n        },\r\n    };\r\n};\r\n/**\r\n * Helper function to create & dispatch a custom Event on a provided target\r\n * @param elm the target of the Event\r\n * @param name the name to give the custom Event\r\n * @param opts options for configuring a custom Event\r\n * @returns the custom Event\r\n */\r\nconst emitEvent = (elm, name, opts) => {\r\n    const ev = plt.ce(name, opts);\r\n    elm.dispatchEvent(ev);\r\n    return ev;\r\n};\r\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\r\nconst registerStyle = (scopeId, cssText, allowCS) => {\r\n    let style = styles.get(scopeId);\r\n    if (supportsConstructableStylesheets && allowCS) {\r\n        style = (style || new CSSStyleSheet());\r\n        if (typeof style === 'string') {\r\n            style = cssText;\r\n        }\r\n        else {\r\n            style.replaceSync(cssText);\r\n        }\r\n    }\r\n    else {\r\n        style = cssText;\r\n    }\r\n    styles.set(scopeId, style);\r\n};\r\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\r\n    let scopeId = getScopeId(cmpMeta, mode);\r\n    const style = styles.get(scopeId);\r\n    if (!BUILD.attachStyles) {\r\n        return scopeId;\r\n    }\r\n    // if an element is NOT connected then getRootNode() will return the wrong root node\r\n    // so the fallback is to always use the document for the root node in those cases\r\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\r\n    if (style) {\r\n        if (typeof style === 'string') {\r\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\r\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\r\n            let styleElm;\r\n            if (!appliedStyles) {\r\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\r\n            }\r\n            if (!appliedStyles.has(scopeId)) {\r\n                if (BUILD.hydrateClientSide &&\r\n                    styleContainerNode.host &&\r\n                    (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\r\n                    // This is only happening on native shadow-dom, do not needs CSS var shim\r\n                    styleElm.innerHTML = style;\r\n                }\r\n                else {\r\n                    if (BUILD.cssVarShim && plt.$cssShim$) {\r\n                        styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10 /* CMP_FLAGS.needsScopedEncapsulation */));\r\n                        const newScopeId = styleElm['s-sc'];\r\n                        if (newScopeId) {\r\n                            scopeId = newScopeId;\r\n                            // we don't want to add this styleID to the appliedStyles Set\r\n                            // since the cssVarShim might need to apply several different\r\n                            // stylesheets for the same component\r\n                            appliedStyles = null;\r\n                        }\r\n                    }\r\n                    else {\r\n                        styleElm = doc.createElement('style');\r\n                        styleElm.innerHTML = style;\r\n                    }\r\n                    if (BUILD.hydrateServerSide || BUILD.hotModuleReplacement) {\r\n                        styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\r\n                    }\r\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\r\n                }\r\n                if (appliedStyles) {\r\n                    appliedStyles.add(scopeId);\r\n                }\r\n            }\r\n        }\r\n        else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\r\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\r\n        }\r\n    }\r\n    return scopeId;\r\n};\r\nconst attachStyles = (hostRef) => {\r\n    const cmpMeta = hostRef.$cmpMeta$;\r\n    const elm = hostRef.$hostElement$;\r\n    const flags = cmpMeta.$flags$;\r\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\r\n    const scopeId = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\r\n    if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\r\n        // only required when we're NOT using native shadow dom (slot)\r\n        // or this browser doesn't support native shadow dom\r\n        // and this host element was NOT created with SSR\r\n        // let's pick out the inner content for slot projection\r\n        // create a node to represent where the original\r\n        // content was first placed, which is useful later on\r\n        // DOM WRITE!!\r\n        elm['s-sc'] = scopeId;\r\n        elm.classList.add(scopeId + '-h');\r\n        if (BUILD.scoped && flags & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\r\n            elm.classList.add(scopeId + '-s');\r\n        }\r\n    }\r\n    endAttachStyles();\r\n};\r\nconst getScopeId = (cmp, mode) => 'sc-' + (BUILD.mode && mode && cmp.$flags$ & 32 /* CMP_FLAGS.hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\r\nconst convertScopedToShadow = (css) => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\r\n/**\r\n * Production setAccessor() function based on Preact by\r\n * Jason Miller (@developit)\r\n * Licensed under the MIT License\r\n * https://github.com/developit/preact/blob/master/LICENSE\r\n *\r\n * Modified for Stencil's compiler and vdom\r\n */\r\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\r\n    if (oldValue !== newValue) {\r\n        let isProp = isMemberInElement(elm, memberName);\r\n        let ln = memberName.toLowerCase();\r\n        if (BUILD.vdomClass && memberName === 'class') {\r\n            const classList = elm.classList;\r\n            const oldClasses = parseClassList(oldValue);\r\n            const newClasses = parseClassList(newValue);\r\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\r\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\r\n        }\r\n        else if (BUILD.vdomStyle && memberName === 'style') {\r\n            // update style attribute, css properties and values\r\n            if (BUILD.updatable) {\r\n                for (const prop in oldValue) {\r\n                    if (!newValue || newValue[prop] == null) {\r\n                        if (!BUILD.hydrateServerSide && prop.includes('-')) {\r\n                            elm.style.removeProperty(prop);\r\n                        }\r\n                        else {\r\n                            elm.style[prop] = '';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (const prop in newValue) {\r\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\r\n                    if (!BUILD.hydrateServerSide && prop.includes('-')) {\r\n                        elm.style.setProperty(prop, newValue[prop]);\r\n                    }\r\n                    else {\r\n                        elm.style[prop] = newValue[prop];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (BUILD.vdomKey && memberName === 'key')\r\n            ;\r\n        else if (BUILD.vdomRef && memberName === 'ref') {\r\n            // minifier will clean this up\r\n            if (newValue) {\r\n                newValue(elm);\r\n            }\r\n        }\r\n        else if (BUILD.vdomListener &&\r\n            (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) &&\r\n            memberName[0] === 'o' &&\r\n            memberName[1] === 'n') {\r\n            // Event Handlers\r\n            // so if the member name starts with \"on\" and the 3rd characters is\r\n            // a capital letter, and it's not already a member on the element,\r\n            // then we're assuming it's an event listener\r\n            if (memberName[2] === '-') {\r\n                // on- prefixed events\r\n                // allows to be explicit about the dom event to listen without any magic\r\n                // under the hood:\r\n                // <my-cmp on-click> // listens for \"click\"\r\n                // <my-cmp on-Click> // listens for \"Click\"\r\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\r\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\r\n                memberName = memberName.slice(3);\r\n            }\r\n            else if (isMemberInElement(win, ln)) {\r\n                // standard event\r\n                // the JSX attribute could have been \"onMouseOver\" and the\r\n                // member name \"onmouseover\" is on the window's prototype\r\n                // so let's add the listener \"mouseover\", which is all lowercased\r\n                memberName = ln.slice(2);\r\n            }\r\n            else {\r\n                // custom event\r\n                // the JSX attribute could have been \"onMyCustomEvent\"\r\n                // so let's trim off the \"on\" prefix and lowercase the first character\r\n                // and add the listener \"myCustomEvent\"\r\n                // except for the first character, we keep the event name case\r\n                memberName = ln[2] + memberName.slice(3);\r\n            }\r\n            if (oldValue) {\r\n                plt.rel(elm, memberName, oldValue, false);\r\n            }\r\n            if (newValue) {\r\n                plt.ael(elm, memberName, newValue, false);\r\n            }\r\n        }\r\n        else if (BUILD.vdomPropOrAttr) {\r\n            // Set property if it exists and it's not a SVG\r\n            const isComplex = isComplexType(newValue);\r\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\r\n                try {\r\n                    if (!elm.tagName.includes('-')) {\r\n                        const n = newValue == null ? '' : newValue;\r\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\r\n                        if (memberName === 'list') {\r\n                            isProp = false;\r\n                        }\r\n                        else if (oldValue == null || elm[memberName] != n) {\r\n                            elm[memberName] = n;\r\n                        }\r\n                    }\r\n                    else {\r\n                        elm[memberName] = newValue;\r\n                    }\r\n                }\r\n                catch (e) { }\r\n            }\r\n            /**\r\n             * Need to manually update attribute if:\r\n             * - memberName is not an attribute\r\n             * - if we are rendering the host element in order to reflect attribute\r\n             * - if it's a SVG, since properties might not work in <svg>\r\n             * - if the newValue is null/undefined or 'false'.\r\n             */\r\n            let xlink = false;\r\n            if (BUILD.vdomXlink) {\r\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\r\n                    memberName = ln;\r\n                    xlink = true;\r\n                }\r\n            }\r\n            if (newValue == null || newValue === false) {\r\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\r\n                    if (BUILD.vdomXlink && xlink) {\r\n                        elm.removeAttributeNS(XLINK_NS, memberName);\r\n                    }\r\n                    else {\r\n                        elm.removeAttribute(memberName);\r\n                    }\r\n                }\r\n            }\r\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\r\n                newValue = newValue === true ? '' : newValue;\r\n                if (BUILD.vdomXlink && xlink) {\r\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\r\n                }\r\n                else {\r\n                    elm.setAttribute(memberName, newValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nconst parseClassListRegex = /\\s/;\r\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\r\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\r\n    // if the element passed in is a shadow root, which is a document fragment\r\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\r\n    // if it's not a shadow root, then we add attrs/props to the same element\r\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\r\n        ? newVnode.$elm$.host\r\n        : newVnode.$elm$;\r\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\r\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\r\n    if (BUILD.updatable) {\r\n        // remove attributes no longer present on the vnode by setting them to undefined\r\n        for (memberName in oldVnodeAttrs) {\r\n            if (!(memberName in newVnodeAttrs)) {\r\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\r\n            }\r\n        }\r\n    }\r\n    // add new & update changed attributes\r\n    for (memberName in newVnodeAttrs) {\r\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\r\n    }\r\n};\r\n/**\r\n * Create a DOM Node corresponding to one of the children of a given VNode.\r\n *\r\n * @param oldParentVNode the parent VNode from the previous render\r\n * @param newParentVNode the parent VNode from the current render\r\n * @param childIndex the index of the VNode, in the _new_ parent node's\r\n * children, for which we will create a new DOM node\r\n * @param parentElm the parent DOM node which our new node will be a child of\r\n * @returns the newly created node\r\n */\r\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\r\n    // tslint:disable-next-line: prefer-const\r\n    const newVNode = newParentVNode.$children$[childIndex];\r\n    let i = 0;\r\n    let elm;\r\n    let childNode;\r\n    let oldVNode;\r\n    if (BUILD.slotRelocation && !useNativeShadowDom) {\r\n        // remember for later we need to check to relocate nodes\r\n        checkSlotRelocate = true;\r\n        if (newVNode.$tag$ === 'slot') {\r\n            if (scopeId) {\r\n                // scoped css needs to add its scoped id to the parent element\r\n                parentElm.classList.add(scopeId + '-s');\r\n            }\r\n            newVNode.$flags$ |= newVNode.$children$\r\n                ? // slot element has fallback content\r\n                    2 /* VNODE_FLAGS.isSlotFallback */\r\n                : // slot element does not have fallback content\r\n                    1 /* VNODE_FLAGS.isSlotReference */;\r\n        }\r\n    }\r\n    if (BUILD.isDev && newVNode.$elm$) {\r\n        consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\r\n    }\r\n    if (BUILD.vdomText && newVNode.$text$ !== null) {\r\n        // create text node\r\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\r\n    }\r\n    else if (BUILD.slotRelocation && newVNode.$flags$ & 1 /* VNODE_FLAGS.isSlotReference */) {\r\n        // create a slot reference node\r\n        elm = newVNode.$elm$ =\r\n            BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\r\n    }\r\n    else {\r\n        if (BUILD.svg && !isSvgMode) {\r\n            isSvgMode = newVNode.$tag$ === 'svg';\r\n        }\r\n        // create element\r\n        elm = newVNode.$elm$ = (BUILD.svg\r\n            ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */\r\n                ? 'slot-fb'\r\n                : newVNode.$tag$)\r\n            : doc.createElement(BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */\r\n                ? 'slot-fb'\r\n                : newVNode.$tag$));\r\n        if (BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\r\n            isSvgMode = false;\r\n        }\r\n        // add css classes, attrs, props, listeners, etc.\r\n        if (BUILD.vdomAttribute) {\r\n            updateElement(null, newVNode, isSvgMode);\r\n        }\r\n        if ((BUILD.shadowDom || BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\r\n            // if there is a scopeId and this is the initial render\r\n            // then let's add the scopeId as a css class\r\n            elm.classList.add((elm['s-si'] = scopeId));\r\n        }\r\n        if (newVNode.$children$) {\r\n            for (i = 0; i < newVNode.$children$.length; ++i) {\r\n                // create the node\r\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\r\n                // return node could have been null\r\n                if (childNode) {\r\n                    // append our new node\r\n                    elm.appendChild(childNode);\r\n                }\r\n            }\r\n        }\r\n        if (BUILD.svg) {\r\n            if (newVNode.$tag$ === 'svg') {\r\n                // Only reset the SVG context when we're exiting <svg> element\r\n                isSvgMode = false;\r\n            }\r\n            else if (elm.tagName === 'foreignObject') {\r\n                // Reenter SVG context when we're exiting <foreignObject> element\r\n                isSvgMode = true;\r\n            }\r\n        }\r\n    }\r\n    if (BUILD.slotRelocation) {\r\n        elm['s-hn'] = hostTagName;\r\n        if (newVNode.$flags$ & (2 /* VNODE_FLAGS.isSlotFallback */ | 1 /* VNODE_FLAGS.isSlotReference */)) {\r\n            // remember the content reference comment\r\n            elm['s-sr'] = true;\r\n            // remember the content reference comment\r\n            elm['s-cr'] = contentRef;\r\n            // remember the slot name, or empty string for default slot\r\n            elm['s-sn'] = newVNode.$name$ || '';\r\n            // check if we've got an old vnode for this slot\r\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\r\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\r\n                // we've got an old slot vnode and the wrapper is being replaced\r\n                // so let's move the old slot content back to it's original location\r\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\r\n            }\r\n        }\r\n    }\r\n    return elm;\r\n};\r\nconst putBackInOriginalLocation = (parentElm, recursive) => {\r\n    plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\r\n    const oldSlotChildNodes = parentElm.childNodes;\r\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\r\n        const childNode = oldSlotChildNodes[i];\r\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\r\n            // // this child node in the old element is from another component\r\n            // // remove this node from the old slot's parent\r\n            // childNode.remove();\r\n            // and relocate it back to it's original location\r\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\r\n            // remove the old original location comment entirely\r\n            // later on the patch function will know what to do\r\n            // and move this to the correct spot in need be\r\n            childNode['s-ol'].remove();\r\n            childNode['s-ol'] = undefined;\r\n            checkSlotRelocate = true;\r\n        }\r\n        if (recursive) {\r\n            putBackInOriginalLocation(childNode, recursive);\r\n        }\r\n    }\r\n    plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\r\n};\r\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\r\n    let containerElm = ((BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\r\n    let childNode;\r\n    if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\r\n        containerElm = containerElm.shadowRoot;\r\n    }\r\n    for (; startIdx <= endIdx; ++startIdx) {\r\n        if (vnodes[startIdx]) {\r\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\r\n            if (childNode) {\r\n                vnodes[startIdx].$elm$ = childNode;\r\n                containerElm.insertBefore(childNode, BUILD.slotRelocation ? referenceNode(before) : before);\r\n            }\r\n        }\r\n    }\r\n};\r\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\r\n    for (; startIdx <= endIdx; ++startIdx) {\r\n        if ((vnode = vnodes[startIdx])) {\r\n            elm = vnode.$elm$;\r\n            callNodeRefs(vnode);\r\n            if (BUILD.slotRelocation) {\r\n                // we're removing this element\r\n                // so it's possible we need to show slot fallback content now\r\n                checkSlotFallbackVisibility = true;\r\n                if (elm['s-ol']) {\r\n                    // remove the original location comment\r\n                    elm['s-ol'].remove();\r\n                }\r\n                else {\r\n                    // it's possible that child nodes of the node\r\n                    // that's being removed are slot nodes\r\n                    putBackInOriginalLocation(elm, true);\r\n                }\r\n            }\r\n            // remove the vnode's element from the dom\r\n            elm.remove();\r\n        }\r\n    }\r\n};\r\n/**\r\n * Reconcile the children of a new VNode with the children of an old VNode by\r\n * traversing the two collections of children, identifying nodes that are\r\n * conserved or changed, calling out to `patch` to make any necessary\r\n * updates to the DOM, and rearranging DOM nodes as needed.\r\n *\r\n * The algorithm for reconciling children works by analyzing two 'windows' onto\r\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\r\n * 'windows' by storing start and end indices and references to the\r\n * corresponding array entries. Initially the two 'windows' are basically equal\r\n * to the entire array, but we progressively narrow the windows until there are\r\n * no children left to update by doing the following:\r\n *\r\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\r\n *    that if we have an initial array like the following we'll end up dealing\r\n *    only with a window bounded by the highlighted elements:\r\n *\r\n *    [null, null, VNode1 , ... , VNode2, null, null]\r\n *                 ^^^^^^         ^^^^^^\r\n *\r\n * 2. Check to see if the elements at the head and tail positions are equal\r\n *    across the windows. This will basically detect elements which haven't\r\n *    been added, removed, or changed position, i.e. if you had the following\r\n *    VNode elements (represented as HTML):\r\n *\r\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\r\n *    newVNode: `<div><p><span>THERE</span></p></div>`\r\n *\r\n *    Then when comparing the children of the `<div>` tag we check the equality\r\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\r\n *    same tag in the same position, we'd be able to avoid completely\r\n *    re-rendering the subtree under them with a new DOM element and would just\r\n *    call out to `patch` to handle reconciling their children and so on.\r\n *\r\n * 3. Check, for both windows, to see if the element at the beginning of the\r\n *    window corresponds to the element at the end of the other window. This is\r\n *    a heuristic which will let us identify _some_ situations in which\r\n *    elements have changed position, for instance it _should_ detect that the\r\n *    children nodes themselves have not changed but merely moved in the\r\n *    following example:\r\n *\r\n *    oldVNode: `<div><element-one /><element-two /></div>`\r\n *    newVNode: `<div><element-two /><element-one /></div>`\r\n *\r\n *    If we find cases like this then we also need to move the concrete DOM\r\n *    elements corresponding to the moved children to write the re-order to the\r\n *    DOM.\r\n *\r\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\r\n *    nodes in the old children which have the same key as the first element in\r\n *    our window on the new children. If we find such a node we handle calling\r\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\r\n *    what we find.\r\n *\r\n * Finally, once we've narrowed our 'windows' to the point that either of them\r\n * collapse (i.e. they have length 0) we then handle any remaining VNode\r\n * insertion or deletion that needs to happen to get a DOM state that correctly\r\n * reflects the new child VNodes. If, for instance, after our window on the old\r\n * children has collapsed we still have more nodes on the new children that\r\n * we haven't dealt with yet then we need to add them, or if the new children\r\n * collapse but we still have unhandled _old_ children then we need to make\r\n * sure the corresponding DOM nodes are removed.\r\n *\r\n * @param parentElm the node into which the parent VNode is rendered\r\n * @param oldCh the old children of the parent node\r\n * @param newVNode the new VNode which will replace the parent\r\n * @param newCh the new children of the parent node\r\n */\r\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\r\n    let oldStartIdx = 0;\r\n    let newStartIdx = 0;\r\n    let idxInOld = 0;\r\n    let i = 0;\r\n    let oldEndIdx = oldCh.length - 1;\r\n    let oldStartVnode = oldCh[0];\r\n    let oldEndVnode = oldCh[oldEndIdx];\r\n    let newEndIdx = newCh.length - 1;\r\n    let newStartVnode = newCh[0];\r\n    let newEndVnode = newCh[newEndIdx];\r\n    let node;\r\n    let elmToMove;\r\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\r\n        if (oldStartVnode == null) {\r\n            // VNode might have been moved left\r\n            oldStartVnode = oldCh[++oldStartIdx];\r\n        }\r\n        else if (oldEndVnode == null) {\r\n            oldEndVnode = oldCh[--oldEndIdx];\r\n        }\r\n        else if (newStartVnode == null) {\r\n            newStartVnode = newCh[++newStartIdx];\r\n        }\r\n        else if (newEndVnode == null) {\r\n            newEndVnode = newCh[--newEndIdx];\r\n        }\r\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\r\n            // if the start nodes are the same then we should patch the new VNode\r\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\r\n            // indices to reflect that. We don't need to move any DOM Nodes around\r\n            // since things are matched up in order.\r\n            patch(oldStartVnode, newStartVnode);\r\n            oldStartVnode = oldCh[++oldStartIdx];\r\n            newStartVnode = newCh[++newStartIdx];\r\n        }\r\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\r\n            // likewise, if the end nodes are the same we patch new onto old and\r\n            // decrement our end indices, and also likewise in this case we don't\r\n            // need to move any DOM Nodes.\r\n            patch(oldEndVnode, newEndVnode);\r\n            oldEndVnode = oldCh[--oldEndIdx];\r\n            newEndVnode = newCh[--newEndIdx];\r\n        }\r\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\r\n            // case: \"Vnode moved right\"\r\n            //\r\n            // We've found that the last node in our window on the new children is\r\n            // the same VNode as the _first_ node in our window on the old children\r\n            // we're dealing with now. Visually, this is the layout of these two\r\n            // nodes:\r\n            //\r\n            // newCh: [..., newStartVnode , ... , newEndVnode , ...]\r\n            //                                    ^^^^^^^^^^^\r\n            // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\r\n            //              ^^^^^^^^^^^^^\r\n            //\r\n            // In this situation we need to patch `newEndVnode` onto `oldStartVnode`\r\n            // and move the DOM element for `oldStartVnode`.\r\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\r\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\r\n            }\r\n            patch(oldStartVnode, newEndVnode);\r\n            // We need to move the element for `oldStartVnode` into a position which\r\n            // will be appropriate for `newEndVnode`. For this we can use\r\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\r\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\r\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\r\n            //\r\n            // <old-start-node />\r\n            // <some-intervening-node />\r\n            // <old-end-node />\r\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\r\n            // <next-sibling />\r\n            //\r\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\r\n            // the node for `oldStartVnode` at the end of the children of\r\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\r\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\r\n            // append it to the children of the parent element.\r\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\r\n            oldStartVnode = oldCh[++oldStartIdx];\r\n            newEndVnode = newCh[--newEndIdx];\r\n        }\r\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\r\n            // case: \"Vnode moved left\"\r\n            //\r\n            // We've found that the first node in our window on the new children is\r\n            // the same VNode as the _last_ node in our window on the old children.\r\n            // Visually, this is the layout of these two nodes:\r\n            //\r\n            // newCh: [..., newStartVnode , ... , newEndVnode , ...]\r\n            //              ^^^^^^^^^^^^^\r\n            // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\r\n            //                                    ^^^^^^^^^^^\r\n            //\r\n            // In this situation we need to patch `newStartVnode` onto `oldEndVnode`\r\n            // (which will handle updating any changed attributes, reconciling their\r\n            // children etc) but we also need to move the DOM node to which\r\n            // `oldEndVnode` corresponds.\r\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\r\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\r\n            }\r\n            patch(oldEndVnode, newStartVnode);\r\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\r\n            // the same node, so since we're here we know that they are not. Thus we\r\n            // can move the element for `oldEndVnode` _before_ the element for\r\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\r\n            // future.\r\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\r\n            oldEndVnode = oldCh[--oldEndIdx];\r\n            newStartVnode = newCh[++newStartIdx];\r\n        }\r\n        else {\r\n            // Here we do some checks to match up old and new nodes based on the\r\n            // `$key$` attribute, which is set by putting a `key=\"my-key\"` attribute\r\n            // in the JSX for a DOM element in the implementation of a Stencil\r\n            // component.\r\n            //\r\n            // First we check to see if there are any nodes in the array of old\r\n            // children which have the same key as the first node in the new\r\n            // children.\r\n            idxInOld = -1;\r\n            if (BUILD.vdomKey) {\r\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\r\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\r\n                        idxInOld = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (BUILD.vdomKey && idxInOld >= 0) {\r\n                // We found a node in the old children which matches up with the first\r\n                // node in the new children! So let's deal with that\r\n                elmToMove = oldCh[idxInOld];\r\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\r\n                    // the tag doesn't match so we'll need a new DOM element\r\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\r\n                }\r\n                else {\r\n                    patch(elmToMove, newStartVnode);\r\n                    // invalidate the matching old node so that we won't try to update it\r\n                    // again later on\r\n                    oldCh[idxInOld] = undefined;\r\n                    node = elmToMove.$elm$;\r\n                }\r\n                newStartVnode = newCh[++newStartIdx];\r\n            }\r\n            else {\r\n                // We either didn't find an element in the old children that matches\r\n                // the key of the first new child OR the build is not using `key`\r\n                // attributes at all. In either case we need to create a new element\r\n                // for the new node.\r\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\r\n                newStartVnode = newCh[++newStartIdx];\r\n            }\r\n            if (node) {\r\n                // if we created a new node then handle inserting it to the DOM\r\n                if (BUILD.slotRelocation) {\r\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\r\n                }\r\n                else {\r\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (oldStartIdx > oldEndIdx) {\r\n        // we have some more new nodes to add which don't match up with old nodes\r\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\r\n    }\r\n    else if (BUILD.updatable && newStartIdx > newEndIdx) {\r\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\r\n        // in the new array, so lets remove them (which entails cleaning up the\r\n        // relevant DOM nodes)\r\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\r\n    }\r\n};\r\n/**\r\n * Compare two VNodes to determine if they are the same\r\n *\r\n * **NB**: This function is an equality _heuristic_ based on the available\r\n * information set on the two VNodes and can be misleading under certain\r\n * circumstances. In particular, if the two nodes do not have `key` attrs\r\n * (available under `$key$` on VNodes) then the function falls back on merely\r\n * checking that they have the same tag.\r\n *\r\n * So, in other words, if `key` attrs are not set on VNodes which may be\r\n * changing order within a `children` array or something along those lines then\r\n * we could obtain a false positive and then have to do needless re-rendering.\r\n *\r\n * @param leftVNode the first VNode to check\r\n * @param rightVNode the second VNode to check\r\n * @returns whether they're equal or not\r\n */\r\nconst isSameVnode = (leftVNode, rightVNode) => {\r\n    // compare if two vnode to see if they're \"technically\" the same\r\n    // need to have the same element tag, and same key to be the same\r\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\r\n        if (BUILD.slotRelocation && leftVNode.$tag$ === 'slot') {\r\n            return leftVNode.$name$ === rightVNode.$name$;\r\n        }\r\n        // this will be set if components in the build have `key` attrs set on them\r\n        if (BUILD.vdomKey) {\r\n            return leftVNode.$key$ === rightVNode.$key$;\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nconst referenceNode = (node) => {\r\n    // this node was relocated to a new location in the dom\r\n    // because of some other component's slot\r\n    // but we still have an html comment in place of where\r\n    // it's original location was according to it's original vdom\r\n    return (node && node['s-ol']) || node;\r\n};\r\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\r\n/**\r\n * Handle reconciling an outdated VNode with a new one which corresponds to\r\n * it. This function handles flushing updates to the DOM and reconciling the\r\n * children of the two nodes (if any).\r\n *\r\n * @param oldVNode an old VNode whose DOM element and children we want to update\r\n * @param newVNode a new VNode representing an updated version of the old one\r\n */\r\nconst patch = (oldVNode, newVNode) => {\r\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\r\n    const oldChildren = oldVNode.$children$;\r\n    const newChildren = newVNode.$children$;\r\n    const tag = newVNode.$tag$;\r\n    const text = newVNode.$text$;\r\n    let defaultHolder;\r\n    if (!BUILD.vdomText || text === null) {\r\n        if (BUILD.svg) {\r\n            // test if we're rendering an svg element, or still rendering nodes inside of one\r\n            // only add this to the when the compiler sees we're using an svg somewhere\r\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\r\n        }\r\n        if (BUILD.vdomAttribute || BUILD.reflect) {\r\n            if (BUILD.slot && tag === 'slot')\r\n                ;\r\n            else {\r\n                // either this is the first render of an element OR it's an update\r\n                // AND we already know it's possible it could have changed\r\n                // this updates the element's css classes, attrs, props, listeners, etc.\r\n                updateElement(oldVNode, newVNode, isSvgMode);\r\n            }\r\n        }\r\n        if (BUILD.updatable && oldChildren !== null && newChildren !== null) {\r\n            // looks like there's child vnodes for both the old and new vnodes\r\n            // so we need to call `updateChildren` to reconcile them\r\n            updateChildren(elm, oldChildren, newVNode, newChildren);\r\n        }\r\n        else if (newChildren !== null) {\r\n            // no old child vnodes, but there are new child vnodes to add\r\n            if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {\r\n                // the old vnode was text, so be sure to clear it out\r\n                elm.textContent = '';\r\n            }\r\n            // add the new vnode children\r\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\r\n        }\r\n        else if (BUILD.updatable && oldChildren !== null) {\r\n            // no new child vnodes, but there are old child vnodes to remove\r\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\r\n        }\r\n        if (BUILD.svg && isSvgMode && tag === 'svg') {\r\n            isSvgMode = false;\r\n        }\r\n    }\r\n    else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\r\n        // this element has slotted content\r\n        defaultHolder.parentNode.textContent = text;\r\n    }\r\n    else if (BUILD.vdomText && oldVNode.$text$ !== text) {\r\n        // update the text content for the text only vnode\r\n        // and also only if the text is different than before\r\n        elm.data = text;\r\n    }\r\n};\r\nconst updateFallbackSlotVisibility = (elm) => {\r\n    // tslint:disable-next-line: prefer-const\r\n    const childNodes = elm.childNodes;\r\n    let childNode;\r\n    let i;\r\n    let ilen;\r\n    let j;\r\n    let slotNameAttr;\r\n    let nodeType;\r\n    for (i = 0, ilen = childNodes.length; i < ilen; i++) {\r\n        childNode = childNodes[i];\r\n        if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\r\n            if (childNode['s-sr']) {\r\n                // this is a slot fallback node\r\n                // get the slot name for this slot reference node\r\n                slotNameAttr = childNode['s-sn'];\r\n                // by default always show a fallback slot node\r\n                // then hide it if there are other slots in the light dom\r\n                childNode.hidden = false;\r\n                for (j = 0; j < ilen; j++) {\r\n                    nodeType = childNodes[j].nodeType;\r\n                    if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\r\n                        // this sibling node is from a different component OR is a named fallback slot node\r\n                        if (nodeType === 1 /* NODE_TYPE.ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\r\n                            childNode.hidden = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // this is a default fallback slot node\r\n                        // any element or text node (with content)\r\n                        // should hide the default fallback slot node\r\n                        if (nodeType === 1 /* NODE_TYPE.ElementNode */ ||\r\n                            (nodeType === 3 /* NODE_TYPE.TextNode */ && childNodes[j].textContent.trim() !== '')) {\r\n                            childNode.hidden = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // keep drilling down\r\n            updateFallbackSlotVisibility(childNode);\r\n        }\r\n    }\r\n};\r\nconst relocateNodes = [];\r\nconst relocateSlotContent = (elm) => {\r\n    // tslint:disable-next-line: prefer-const\r\n    let childNode;\r\n    let node;\r\n    let hostContentNodes;\r\n    let slotNameAttr;\r\n    let relocateNodeData;\r\n    let j;\r\n    let i = 0;\r\n    const childNodes = elm.childNodes;\r\n    const ilen = childNodes.length;\r\n    for (; i < ilen; i++) {\r\n        childNode = childNodes[i];\r\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\r\n            // first got the content reference comment node\r\n            // then we got it's parent, which is where all the host content is in now\r\n            hostContentNodes = node.parentNode.childNodes;\r\n            slotNameAttr = childNode['s-sn'];\r\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\r\n                node = hostContentNodes[j];\r\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\r\n                    // let's do some relocating to its new home\r\n                    // but never relocate a content reference node\r\n                    // that is suppose to always represent the original content location\r\n                    if (isNodeLocatedInSlot(node, slotNameAttr)) {\r\n                        // it's possible we've already decided to relocate this node\r\n                        relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\r\n                        // made some changes to slots\r\n                        // let's make sure we also double check\r\n                        // fallbacks are correctly hidden or shown\r\n                        checkSlotFallbackVisibility = true;\r\n                        node['s-sn'] = node['s-sn'] || slotNameAttr;\r\n                        if (relocateNodeData) {\r\n                            // previously we never found a slot home for this node\r\n                            // but turns out we did, so let's remember it now\r\n                            relocateNodeData.$slotRefNode$ = childNode;\r\n                        }\r\n                        else {\r\n                            // add to our list of nodes to relocate\r\n                            relocateNodes.push({\r\n                                $slotRefNode$: childNode,\r\n                                $nodeToRelocate$: node,\r\n                            });\r\n                        }\r\n                        if (node['s-sr']) {\r\n                            relocateNodes.map((relocateNode) => {\r\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\r\n                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\r\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\r\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\r\n                        // so far this element does not have a slot home, not setting slotRefNode on purpose\r\n                        // if we never find a home for this element then we'll need to hide it\r\n                        relocateNodes.push({\r\n                            $nodeToRelocate$: node,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\r\n            relocateSlotContent(childNode);\r\n        }\r\n    }\r\n};\r\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\r\n    if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\r\n        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\r\n            return true;\r\n        }\r\n        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    if (nodeToRelocate['s-sn'] === slotNameAttr) {\r\n        return true;\r\n    }\r\n    return slotNameAttr === '';\r\n};\r\nconst callNodeRefs = (vNode) => {\r\n    if (BUILD.vdomRef) {\r\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\r\n        vNode.$children$ && vNode.$children$.map(callNodeRefs);\r\n    }\r\n};\r\nconst renderVdom = (hostRef, renderFnResults) => {\r\n    const hostElm = hostRef.$hostElement$;\r\n    const cmpMeta = hostRef.$cmpMeta$;\r\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\r\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\r\n    hostTagName = hostElm.tagName;\r\n    // <Host> runtime check\r\n    if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\r\n        throw new Error(`The <Host> must be the single root component.\r\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\r\n\r\nThe render() function should look like this instead:\r\n\r\nrender() {\r\n  // Do not return an array\r\n  return (\r\n    <Host>{content}</Host>\r\n  );\r\n}\r\n  `);\r\n    }\r\n    if (BUILD.reflect && cmpMeta.$attrsToReflect$) {\r\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\r\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\r\n    }\r\n    rootVnode.$tag$ = null;\r\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\r\n    hostRef.$vnode$ = rootVnode;\r\n    rootVnode.$elm$ = oldVNode.$elm$ = (BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm);\r\n    if (BUILD.scoped || BUILD.shadowDom) {\r\n        scopeId = hostElm['s-sc'];\r\n    }\r\n    if (BUILD.slotRelocation) {\r\n        contentRef = hostElm['s-cr'];\r\n        useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) !== 0;\r\n        // always reset\r\n        checkSlotFallbackVisibility = false;\r\n    }\r\n    // synchronous patch\r\n    patch(oldVNode, rootVnode);\r\n    if (BUILD.slotRelocation) {\r\n        // while we're moving nodes around existing nodes, temporarily disable\r\n        // the disconnectCallback from working\r\n        plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\r\n        if (checkSlotRelocate) {\r\n            relocateSlotContent(rootVnode.$elm$);\r\n            let relocateData;\r\n            let nodeToRelocate;\r\n            let orgLocationNode;\r\n            let parentNodeRef;\r\n            let insertBeforeNode;\r\n            let refNode;\r\n            let i = 0;\r\n            for (; i < relocateNodes.length; i++) {\r\n                relocateData = relocateNodes[i];\r\n                nodeToRelocate = relocateData.$nodeToRelocate$;\r\n                if (!nodeToRelocate['s-ol']) {\r\n                    // add a reference node marking this node's original location\r\n                    // keep a reference to this node for later lookups\r\n                    orgLocationNode =\r\n                        BUILD.isDebug || BUILD.hydrateServerSide\r\n                            ? originalLocationDebugNode(nodeToRelocate)\r\n                            : doc.createTextNode('');\r\n                    orgLocationNode['s-nr'] = nodeToRelocate;\r\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\r\n                }\r\n            }\r\n            for (i = 0; i < relocateNodes.length; i++) {\r\n                relocateData = relocateNodes[i];\r\n                nodeToRelocate = relocateData.$nodeToRelocate$;\r\n                if (relocateData.$slotRefNode$) {\r\n                    // by default we're just going to insert it directly\r\n                    // after the slot reference node\r\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\r\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\r\n                    orgLocationNode = nodeToRelocate['s-ol'];\r\n                    while ((orgLocationNode = orgLocationNode.previousSibling)) {\r\n                        refNode = orgLocationNode['s-nr'];\r\n                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\r\n                            refNode = refNode.nextSibling;\r\n                            if (!refNode || !refNode['s-nr']) {\r\n                                insertBeforeNode = refNode;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||\r\n                        nodeToRelocate.nextSibling !== insertBeforeNode) {\r\n                        // we've checked that it's worth while to relocate\r\n                        // since that the node to relocate\r\n                        // has a different next sibling or parent relocated\r\n                        if (nodeToRelocate !== insertBeforeNode) {\r\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\r\n                                // probably a component in the index.html that doesn't have it's hostname set\r\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\r\n                            }\r\n                            // add it back to the dom but in its new home\r\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // this node doesn't have a slot home to go to, so let's hide it\r\n                    if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\r\n                        nodeToRelocate.hidden = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (checkSlotFallbackVisibility) {\r\n            updateFallbackSlotVisibility(rootVnode.$elm$);\r\n        }\r\n        // done moving nodes around\r\n        // allow the disconnect callback to work again\r\n        plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\r\n        // always reset\r\n        relocateNodes.length = 0;\r\n    }\r\n};\r\n// slot comment debug nodes only created with the `--debug` flag\r\n// otherwise these nodes are text nodes w/out content\r\nconst slotReferenceDebugNode = (slotVNode) => doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : ''}> (host=${hostTagName.toLowerCase()})`);\r\nconst originalLocationDebugNode = (nodeToRelocate) => doc.createComment(`org-location for ` +\r\n    (nodeToRelocate.localName\r\n        ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})`\r\n        : `[${nodeToRelocate.textContent}]`));\r\nconst attachToAncestor = (hostRef, ancestorComponent) => {\r\n    if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\r\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\r\n    }\r\n};\r\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\r\n    if (BUILD.taskQueue && BUILD.updatable) {\r\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\r\n    }\r\n    if (BUILD.asyncLoading && hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\r\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\r\n        return;\r\n    }\r\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\r\n    // there is no ancestor component or the ancestor component\r\n    // has already fired off its lifecycle update then\r\n    // fire off the initial update\r\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\r\n    return BUILD.taskQueue ? writeTask(dispatch) : dispatch();\r\n};\r\nconst dispatchHooks = (hostRef, isInitialLoad) => {\r\n    const elm = hostRef.$hostElement$;\r\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\r\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\r\n    let promise;\r\n    if (isInitialLoad) {\r\n        if (BUILD.lazyLoad && BUILD.hostListener) {\r\n            hostRef.$flags$ |= 256 /* HOST_FLAGS.isListenReady */;\r\n            if (hostRef.$queuedListeners$) {\r\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\r\n                hostRef.$queuedListeners$ = null;\r\n            }\r\n        }\r\n        emitLifecycleEvent(elm, 'componentWillLoad');\r\n        if (BUILD.cmpWillLoad) {\r\n            promise = safeCall(instance, 'componentWillLoad');\r\n        }\r\n    }\r\n    else {\r\n        emitLifecycleEvent(elm, 'componentWillUpdate');\r\n        if (BUILD.cmpWillUpdate) {\r\n            promise = safeCall(instance, 'componentWillUpdate');\r\n        }\r\n    }\r\n    emitLifecycleEvent(elm, 'componentWillRender');\r\n    if (BUILD.cmpWillRender) {\r\n        promise = then(promise, () => safeCall(instance, 'componentWillRender'));\r\n    }\r\n    endSchedule();\r\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\r\n};\r\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\r\n    // updateComponent\r\n    const elm = hostRef.$hostElement$;\r\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\r\n    const rc = elm['s-rc'];\r\n    if (BUILD.style && isInitialLoad) {\r\n        // DOM WRITE!\r\n        attachStyles(hostRef);\r\n    }\r\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\r\n    if (BUILD.isDev) {\r\n        hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\r\n    }\r\n    if (BUILD.hydrateServerSide) {\r\n        await callRender(hostRef, instance, elm);\r\n    }\r\n    else {\r\n        callRender(hostRef, instance, elm);\r\n    }\r\n    if (BUILD.cssVarShim && plt.$cssShim$) {\r\n        plt.$cssShim$.updateHost(elm);\r\n    }\r\n    if (BUILD.isDev) {\r\n        hostRef.$renderCount$++;\r\n        hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\r\n    }\r\n    if (BUILD.hydrateServerSide) {\r\n        try {\r\n            // manually connected child components during server-side hydrate\r\n            serverSideConnected(elm);\r\n            if (isInitialLoad) {\r\n                // using only during server-side hydrate\r\n                if (hostRef.$cmpMeta$.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\r\n                    elm['s-en'] = '';\r\n                }\r\n                else if (hostRef.$cmpMeta$.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\r\n                    elm['s-en'] = 'c';\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            consoleError(e, elm);\r\n        }\r\n    }\r\n    if (BUILD.asyncLoading && rc) {\r\n        // ok, so turns out there are some child host elements\r\n        // waiting on this parent element to load\r\n        // let's fire off all update callbacks waiting\r\n        rc.map((cb) => cb());\r\n        elm['s-rc'] = undefined;\r\n    }\r\n    endRender();\r\n    endUpdate();\r\n    if (BUILD.asyncLoading) {\r\n        const childrenPromises = elm['s-p'];\r\n        const postUpdate = () => postUpdateComponent(hostRef);\r\n        if (childrenPromises.length === 0) {\r\n            postUpdate();\r\n        }\r\n        else {\r\n            Promise.all(childrenPromises).then(postUpdate);\r\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\r\n            childrenPromises.length = 0;\r\n        }\r\n    }\r\n    else {\r\n        postUpdateComponent(hostRef);\r\n    }\r\n};\r\nconst callRender = (hostRef, instance, elm) => {\r\n    // in order for bundlers to correctly treeshake the BUILD object\r\n    // we need to ensure BUILD is not deoptimized within a try/catch\r\n    // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\r\n    const allRenderFn = BUILD.allRenderFn ? true : false;\r\n    const lazyLoad = BUILD.lazyLoad ? true : false;\r\n    const taskQueue = BUILD.taskQueue ? true : false;\r\n    const updatable = BUILD.updatable ? true : false;\r\n    try {\r\n        renderingRef = instance;\r\n        instance = allRenderFn ? instance.render() : instance.render && instance.render();\r\n        if (updatable && taskQueue) {\r\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\r\n        }\r\n        if (updatable || lazyLoad) {\r\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\r\n        }\r\n        if (BUILD.hasRenderFn || BUILD.reflect) {\r\n            if (BUILD.vdomRender || BUILD.reflect) {\r\n                // looks like we've got child nodes to render into this host element\r\n                // or we need to update the css class/attrs on the host element\r\n                // DOM WRITE!\r\n                if (BUILD.hydrateServerSide) {\r\n                    return Promise.resolve(instance).then((value) => renderVdom(hostRef, value));\r\n                }\r\n                else {\r\n                    renderVdom(hostRef, instance);\r\n                }\r\n            }\r\n            else {\r\n                elm.textContent = instance;\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        consoleError(e, hostRef.$hostElement$);\r\n    }\r\n    renderingRef = null;\r\n    return null;\r\n};\r\nconst getRenderingRef = () => renderingRef;\r\nconst postUpdateComponent = (hostRef) => {\r\n    const tagName = hostRef.$cmpMeta$.$tagName$;\r\n    const elm = hostRef.$hostElement$;\r\n    const endPostUpdate = createTime('postUpdate', tagName);\r\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\r\n    const ancestorComponent = hostRef.$ancestorComponent$;\r\n    if (BUILD.cmpDidRender) {\r\n        if (BUILD.isDev) {\r\n            hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\r\n        }\r\n        safeCall(instance, 'componentDidRender');\r\n        if (BUILD.isDev) {\r\n            hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\r\n        }\r\n    }\r\n    emitLifecycleEvent(elm, 'componentDidRender');\r\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\r\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\r\n        if (BUILD.asyncLoading && BUILD.cssAnnotations) {\r\n            // DOM WRITE!\r\n            addHydratedFlag(elm);\r\n        }\r\n        if (BUILD.cmpDidLoad) {\r\n            if (BUILD.isDev) {\r\n                hostRef.$flags$ |= 2048 /* HOST_FLAGS.devOnDidLoad */;\r\n            }\r\n            safeCall(instance, 'componentDidLoad');\r\n            if (BUILD.isDev) {\r\n                hostRef.$flags$ &= ~2048 /* HOST_FLAGS.devOnDidLoad */;\r\n            }\r\n        }\r\n        emitLifecycleEvent(elm, 'componentDidLoad');\r\n        endPostUpdate();\r\n        if (BUILD.asyncLoading) {\r\n            hostRef.$onReadyResolve$(elm);\r\n            if (!ancestorComponent) {\r\n                appDidLoad(tagName);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if (BUILD.cmpDidUpdate) {\r\n            // we've already loaded this component\r\n            // fire off the user's componentDidUpdate method (if one was provided)\r\n            // componentDidUpdate runs AFTER render() has been called\r\n            // and all child components have finished updating\r\n            if (BUILD.isDev) {\r\n                hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\r\n            }\r\n            safeCall(instance, 'componentDidUpdate');\r\n            if (BUILD.isDev) {\r\n                hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\r\n            }\r\n        }\r\n        emitLifecycleEvent(elm, 'componentDidUpdate');\r\n        endPostUpdate();\r\n    }\r\n    if (BUILD.hotModuleReplacement) {\r\n        elm['s-hmr-load'] && elm['s-hmr-load']();\r\n    }\r\n    if (BUILD.method && BUILD.lazyLoad) {\r\n        hostRef.$onInstanceResolve$(elm);\r\n    }\r\n    // load events fire from bottom to top\r\n    // the deepest elements load first then bubbles up\r\n    if (BUILD.asyncLoading) {\r\n        if (hostRef.$onRenderResolve$) {\r\n            hostRef.$onRenderResolve$();\r\n            hostRef.$onRenderResolve$ = undefined;\r\n        }\r\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\r\n            nextTick(() => scheduleUpdate(hostRef, false));\r\n        }\r\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\r\n    }\r\n    // ( •_•)\r\n    // ( •_•)>⌐■-■\r\n    // (⌐■_■)\r\n};\r\nconst forceUpdate = (ref) => {\r\n    if (BUILD.updatable) {\r\n        const hostRef = getHostRef(ref);\r\n        const isConnected = hostRef.$hostElement$.isConnected;\r\n        if (isConnected &&\r\n            (hostRef.$flags$ & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\r\n            scheduleUpdate(hostRef, false);\r\n        }\r\n        // Returns \"true\" when the forced update was successfully scheduled\r\n        return isConnected;\r\n    }\r\n    return false;\r\n};\r\nconst appDidLoad = (who) => {\r\n    // on appload\r\n    // we have finish the first big initial render\r\n    if (BUILD.cssAnnotations) {\r\n        addHydratedFlag(doc.documentElement);\r\n    }\r\n    if (BUILD.asyncQueue) {\r\n        plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\r\n    }\r\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\r\n    if (BUILD.profile && performance.measure) {\r\n        performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, 'st:app:start');\r\n    }\r\n};\r\nconst safeCall = (instance, method, arg) => {\r\n    if (instance && instance[method]) {\r\n        try {\r\n            return instance[method](arg);\r\n        }\r\n        catch (e) {\r\n            consoleError(e);\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\nconst then = (promise, thenFn) => {\r\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\r\n};\r\nconst emitLifecycleEvent = (elm, lifecycleName) => {\r\n    if (BUILD.lifecycleDOMEvents) {\r\n        emitEvent(elm, 'stencil_' + lifecycleName, {\r\n            bubbles: true,\r\n            composed: true,\r\n            detail: {\r\n                namespace: NAMESPACE,\r\n            },\r\n        });\r\n    }\r\n};\r\nconst addHydratedFlag = (elm) => BUILD.hydratedClass\r\n    ? elm.classList.add('hydrated')\r\n    : BUILD.hydratedAttribute\r\n        ? elm.setAttribute('hydrated', '')\r\n        : undefined;\r\nconst serverSideConnected = (elm) => {\r\n    const children = elm.children;\r\n    if (children != null) {\r\n        for (let i = 0, ii = children.length; i < ii; i++) {\r\n            const childElm = children[i];\r\n            if (typeof childElm.connectedCallback === 'function') {\r\n                childElm.connectedCallback();\r\n            }\r\n            serverSideConnected(childElm);\r\n        }\r\n    }\r\n};\r\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\r\nconst setValue = (ref, propName, newVal, cmpMeta) => {\r\n    // check our new property value against our internal value\r\n    const hostRef = getHostRef(ref);\r\n    const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\r\n    const oldVal = hostRef.$instanceValues$.get(propName);\r\n    const flags = hostRef.$flags$;\r\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\r\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\r\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\r\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\r\n    const didValueChange = newVal !== oldVal && !areBothNaN;\r\n    if ((!BUILD.lazyLoad || !(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\r\n        // gadzooks! the property's value has changed!!\r\n        // set our new value!\r\n        hostRef.$instanceValues$.set(propName, newVal);\r\n        if (BUILD.isDev) {\r\n            if (hostRef.$flags$ & 1024 /* HOST_FLAGS.devOnRender */) {\r\n                consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\r\n            }\r\n            else if (hostRef.$flags$ & 2048 /* HOST_FLAGS.devOnDidLoad */) {\r\n                consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\r\n            }\r\n        }\r\n        if (!BUILD.lazyLoad || instance) {\r\n            // get an array of method names of watch functions to call\r\n            if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* HOST_FLAGS.isWatchReady */) {\r\n                const watchMethods = cmpMeta.$watchers$[propName];\r\n                if (watchMethods) {\r\n                    // this instance is watching for when this property changed\r\n                    watchMethods.map((watchMethodName) => {\r\n                        try {\r\n                            // fire off each of the watch methods that are watching this property\r\n                            instance[watchMethodName](newVal, oldVal, propName);\r\n                        }\r\n                        catch (e) {\r\n                            consoleError(e, elm);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (BUILD.updatable &&\r\n                (flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\r\n                if (BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\r\n                    if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\r\n                        return;\r\n                    }\r\n                }\r\n                // looks like this value actually changed, so we've got work to do!\r\n                // but only if we've already rendered, otherwise just chill out\r\n                // queue that we need to do an update, but don't worry about queuing\r\n                // up millions cuz this function ensures it only runs once\r\n                scheduleUpdate(hostRef, false);\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * Attach a series of runtime constructs to a compiled Stencil component\r\n * constructor, including getters and setters for the `@Prop` and `@State`\r\n * decorators, callbacks for when attributes change, and so on.\r\n *\r\n * @param Cstr the constructor for a component that we need to process\r\n * @param cmpMeta metadata collected previously about the component\r\n * @param flags a number used to store a series of bit flags\r\n * @returns a reference to the same constructor passed in (but now mutated)\r\n */\r\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\r\n    if (BUILD.member && cmpMeta.$members$) {\r\n        if (BUILD.watchCallback && Cstr.watchers) {\r\n            cmpMeta.$watchers$ = Cstr.watchers;\r\n        }\r\n        // It's better to have a const than two Object.entries()\r\n        const members = Object.entries(cmpMeta.$members$);\r\n        const prototype = Cstr.prototype;\r\n        members.map(([memberName, [memberFlags]]) => {\r\n            if ((BUILD.prop || BUILD.state) &&\r\n                (memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\r\n                    ((!BUILD.lazyLoad || flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\r\n                // proxyComponent - prop\r\n                Object.defineProperty(prototype, memberName, {\r\n                    get() {\r\n                        // proxyComponent, get value\r\n                        return getValue(this, memberName);\r\n                    },\r\n                    set(newValue) {\r\n                        // only during dev time\r\n                        if (BUILD.isDev) {\r\n                            const ref = getHostRef(this);\r\n                            if (\r\n                            // we are proxying the instance (not element)\r\n                            (flags & 1 /* PROXY_FLAGS.isElementConstructor */) === 0 &&\r\n                                // the element is not constructing\r\n                                (ref.$flags$ & 8 /* HOST_FLAGS.isConstructingInstance */) === 0 &&\r\n                                // the member is a prop\r\n                                (memberFlags & 31 /* MEMBER_FLAGS.Prop */) !== 0 &&\r\n                                // the member is not mutable\r\n                                (memberFlags & 1024 /* MEMBER_FLAGS.Mutable */) === 0) {\r\n                                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\r\n                            }\r\n                        }\r\n                        // proxyComponent, set value\r\n                        setValue(this, memberName, newValue, cmpMeta);\r\n                    },\r\n                    configurable: true,\r\n                    enumerable: true,\r\n                });\r\n            }\r\n            else if (BUILD.lazyLoad &&\r\n                BUILD.method &&\r\n                flags & 1 /* PROXY_FLAGS.isElementConstructor */ &&\r\n                memberFlags & 64 /* MEMBER_FLAGS.Method */) {\r\n                // proxyComponent - method\r\n                Object.defineProperty(prototype, memberName, {\r\n                    value(...args) {\r\n                        const ref = getHostRef(this);\r\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\r\n                    },\r\n                });\r\n            }\r\n        });\r\n        if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\r\n            const attrNameToPropName = new Map();\r\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\r\n                plt.jmp(() => {\r\n                    const propName = attrNameToPropName.get(attrName);\r\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\r\n                    //  in the case where an attribute was set inline.\r\n                    //  ```html\r\n                    //    <my-component some-attribute=\"some-value\"></my-component>\r\n                    //  ```\r\n                    //\r\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\r\n                    //  programmatically changes it before it has been upgraded as shown below:\r\n                    //\r\n                    //  ```html\r\n                    //    <!-- this component has _not_ been upgraded yet -->\r\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\r\n                    //    <script>\r\n                    //      // grab non-upgraded component\r\n                    //      el = document.querySelector(\"#test\");\r\n                    //      el.someAttribute = \"another-value\";\r\n                    //      // upgrade component\r\n                    //      customElements.define('my-component', MyComponent);\r\n                    //    </script>\r\n                    //  ```\r\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\r\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\r\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\r\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\r\n                    //\r\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\r\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\r\n                    //\r\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\r\n                    //\r\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\r\n                    //  properties here given that this goes against best practices outlined here\r\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\r\n                    if (this.hasOwnProperty(propName)) {\r\n                        newValue = this[propName];\r\n                        delete this[propName];\r\n                    }\r\n                    else if (prototype.hasOwnProperty(propName) &&\r\n                        typeof this[propName] === 'number' &&\r\n                        this[propName] == newValue) {\r\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\r\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\r\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\r\n                        return;\r\n                    }\r\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\r\n                });\r\n            };\r\n            // create an array of attributes to observe\r\n            // and also create a map of html attribute name to js property name\r\n            Cstr.observedAttributes = members\r\n                .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */) // filter to only keep props that should match attributes\r\n                .map(([propName, m]) => {\r\n                const attrName = m[1] || propName;\r\n                attrNameToPropName.set(attrName, propName);\r\n                if (BUILD.reflect && m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {\r\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\r\n                }\r\n                return attrName;\r\n            });\r\n        }\r\n    }\r\n    return Cstr;\r\n};\r\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\r\n    // initializeComponent\r\n    if ((BUILD.lazyLoad || BUILD.hydrateServerSide || BUILD.style) &&\r\n        (hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\r\n        if (BUILD.lazyLoad || BUILD.hydrateClientSide) {\r\n            // we haven't initialized this element yet\r\n            hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\r\n            // lazy loaded components\r\n            // request the component's implementation to be\r\n            // wired up with the host element\r\n            Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\r\n            if (Cstr.then) {\r\n                // Await creates a micro-task avoid if possible\r\n                const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\r\n                Cstr = await Cstr;\r\n                endLoad();\r\n            }\r\n            if ((BUILD.isDev || BUILD.isDebug) && !Cstr) {\r\n                throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\r\n            }\r\n            if (BUILD.member && !Cstr.isProxied) {\r\n                // we've never proxied this Constructor before\r\n                // let's add the getters/setters to its prototype before\r\n                // the first time we create an instance of the implementation\r\n                if (BUILD.watchCallback) {\r\n                    cmpMeta.$watchers$ = Cstr.watchers;\r\n                }\r\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\r\n                Cstr.isProxied = true;\r\n            }\r\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\r\n            // ok, time to construct the instance\r\n            // but let's keep track of when we start and stop\r\n            // so that the getters/setters don't incorrectly step on data\r\n            if (BUILD.member) {\r\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\r\n            }\r\n            // construct the lazy-loaded component implementation\r\n            // passing the hostRef is very important during\r\n            // construction in order to directly wire together the\r\n            // host element and the lazy-loaded instance\r\n            try {\r\n                new Cstr(hostRef);\r\n            }\r\n            catch (e) {\r\n                consoleError(e);\r\n            }\r\n            if (BUILD.member) {\r\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\r\n            }\r\n            if (BUILD.watchCallback) {\r\n                hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\r\n            }\r\n            endNewInstance();\r\n            fireConnectedCallback(hostRef.$lazyInstance$);\r\n        }\r\n        else {\r\n            // sync constructor component\r\n            Cstr = elm.constructor;\r\n            hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\r\n            // wait for the CustomElementRegistry to mark the component as ready before setting `isWatchReady`. Otherwise,\r\n            // watchers may fire prematurely if `customElements.get()`/`customElements.whenDefined()` resolves _before_\r\n            // Stencil has completed instantiating the component.\r\n            customElements.whenDefined(cmpMeta.$tagName$).then(() => (hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */));\r\n        }\r\n        if (BUILD.style && Cstr.style) {\r\n            // this component has styles but we haven't registered them yet\r\n            let style = Cstr.style;\r\n            if (BUILD.mode && typeof style !== 'string') {\r\n                style = style[(hostRef.$modeName$ = computeMode(elm))];\r\n                if (BUILD.hydrateServerSide && hostRef.$modeName$) {\r\n                    elm.setAttribute('s-mode', hostRef.$modeName$);\r\n                }\r\n            }\r\n            const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\r\n            if (!styles.has(scopeId)) {\r\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\r\n                if (!BUILD.hydrateServerSide &&\r\n                    BUILD.shadowDom &&\r\n                    BUILD.shadowDomShim &&\r\n                    cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */) {\r\n                    style = await import('./shadow-css.js').then((m) => m.scopeCss(style, scopeId, false));\r\n                }\r\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\r\n                endRegisterStyles();\r\n            }\r\n        }\r\n    }\r\n    // we've successfully created a lazy instance\r\n    const ancestorComponent = hostRef.$ancestorComponent$;\r\n    const schedule = () => scheduleUpdate(hostRef, true);\r\n    if (BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\r\n        // this is the initial load and this component it has an ancestor component\r\n        // but the ancestor component has NOT fired its will update lifecycle yet\r\n        // so let's just cool our jets and wait for the ancestor to continue first\r\n        // this will get fired off when the ancestor component\r\n        // finally gets around to rendering its lazy self\r\n        // fire off the initial update\r\n        ancestorComponent['s-rc'].push(schedule);\r\n    }\r\n    else {\r\n        schedule();\r\n    }\r\n};\r\nconst fireConnectedCallback = (instance) => {\r\n    if (BUILD.lazyLoad && BUILD.connectedCallback) {\r\n        safeCall(instance, 'connectedCallback');\r\n    }\r\n};\r\nconst connectedCallback = (elm) => {\r\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\r\n        const hostRef = getHostRef(elm);\r\n        const cmpMeta = hostRef.$cmpMeta$;\r\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\r\n        if (BUILD.hostListenerTargetParent) {\r\n            // only run if we have listeners being attached to a parent\r\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\r\n        }\r\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\r\n            // first time this component has connected\r\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\r\n            let hostId;\r\n            if (BUILD.hydrateClientSide) {\r\n                hostId = elm.getAttribute(HYDRATE_ID);\r\n                if (hostId) {\r\n                    if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\r\n                        const scopeId = BUILD.mode\r\n                            ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode'))\r\n                            : addStyle(elm.shadowRoot, cmpMeta);\r\n                        elm.classList.remove(scopeId + '-h', scopeId + '-s');\r\n                    }\r\n                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\r\n                }\r\n            }\r\n            if (BUILD.slotRelocation && !hostId) {\r\n                // initUpdate\r\n                // if the slot polyfill is required we'll need to put some nodes\r\n                // in here to act as original content anchors as we move nodes around\r\n                // host element has been connected to the DOM\r\n                if (BUILD.hydrateServerSide ||\r\n                    ((BUILD.slot || BUILD.shadowDom) &&\r\n                        cmpMeta.$flags$ & (4 /* CMP_FLAGS.hasSlotRelocation */ | 8 /* CMP_FLAGS.needsShadowDomShim */))) {\r\n                    setContentReference(elm);\r\n                }\r\n            }\r\n            if (BUILD.asyncLoading) {\r\n                // find the first ancestor component (if there is one) and register\r\n                // this component as one of the actively loading child components for its ancestor\r\n                let ancestorComponent = elm;\r\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\r\n                    // climb up the ancestors looking for the first\r\n                    // component that hasn't finished its lifecycle update yet\r\n                    if ((BUILD.hydrateClientSide &&\r\n                        ancestorComponent.nodeType === 1 /* NODE_TYPE.ElementNode */ &&\r\n                        ancestorComponent.hasAttribute('s-id') &&\r\n                        ancestorComponent['s-p']) ||\r\n                        ancestorComponent['s-p']) {\r\n                        // we found this components first ancestor component\r\n                        // keep a reference to this component's ancestor component\r\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            // Lazy properties\r\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\r\n            if (BUILD.prop && !BUILD.hydrateServerSide && cmpMeta.$members$) {\r\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\r\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\r\n                        const value = elm[memberName];\r\n                        delete elm[memberName];\r\n                        elm[memberName] = value;\r\n                    }\r\n                });\r\n            }\r\n            if (BUILD.initializeNextTick) {\r\n                // connectedCallback, taskQueue, initialLoad\r\n                // angular sets attribute AFTER connectCallback\r\n                // https://github.com/angular/angular/issues/18909\r\n                // https://github.com/angular/angular/issues/19940\r\n                nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\r\n            }\r\n            else {\r\n                initializeComponent(elm, hostRef, cmpMeta);\r\n            }\r\n        }\r\n        else {\r\n            // not the first time this has connected\r\n            // reattach any event listeners to the host\r\n            // since they would have been removed when disconnected\r\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\r\n            // fire off connectedCallback() on component instance\r\n            fireConnectedCallback(hostRef.$lazyInstance$);\r\n        }\r\n        endConnected();\r\n    }\r\n};\r\nconst setContentReference = (elm) => {\r\n    // only required when we're NOT using native shadow dom (slot)\r\n    // or this browser doesn't support native shadow dom\r\n    // and this host element was NOT created with SSR\r\n    // let's pick out the inner content for slot projection\r\n    // create a node to represent where the original\r\n    // content was first placed, which is useful later on\r\n    const contentRefElm = (elm['s-cr'] = doc.createComment(BUILD.isDebug ? `content-ref (host=${elm.localName})` : ''));\r\n    contentRefElm['s-cn'] = true;\r\n    elm.insertBefore(contentRefElm, elm.firstChild);\r\n};\r\nconst disconnectedCallback = (elm) => {\r\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\r\n        const hostRef = getHostRef(elm);\r\n        const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\r\n        if (BUILD.hostListener) {\r\n            if (hostRef.$rmListeners$) {\r\n                hostRef.$rmListeners$.map((rmListener) => rmListener());\r\n                hostRef.$rmListeners$ = undefined;\r\n            }\r\n        }\r\n        // clear CSS var-shim tracking\r\n        if (BUILD.cssVarShim && plt.$cssShim$) {\r\n            plt.$cssShim$.removeHost(elm);\r\n        }\r\n        if (BUILD.lazyLoad && BUILD.disconnectedCallback) {\r\n            safeCall(instance, 'disconnectedCallback');\r\n        }\r\n        if (BUILD.cmpDidUnload) {\r\n            safeCall(instance, 'componentDidUnload');\r\n        }\r\n    }\r\n};\r\nconst defineCustomElement = (Cstr, compactMeta) => {\r\n    customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\r\n};\r\nconst proxyCustomElement = (Cstr, compactMeta) => {\r\n    const cmpMeta = {\r\n        $flags$: compactMeta[0],\r\n        $tagName$: compactMeta[1],\r\n    };\r\n    if (BUILD.member) {\r\n        cmpMeta.$members$ = compactMeta[2];\r\n    }\r\n    if (BUILD.hostListener) {\r\n        cmpMeta.$listeners$ = compactMeta[3];\r\n    }\r\n    if (BUILD.watchCallback) {\r\n        cmpMeta.$watchers$ = Cstr.$watchers$;\r\n    }\r\n    if (BUILD.reflect) {\r\n        cmpMeta.$attrsToReflect$ = [];\r\n    }\r\n    if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\r\n        cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\r\n    }\r\n    const originalConnectedCallback = Cstr.prototype.connectedCallback;\r\n    const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\r\n    Object.assign(Cstr.prototype, {\r\n        __registerHost() {\r\n            registerHost(this, cmpMeta);\r\n        },\r\n        connectedCallback() {\r\n            connectedCallback(this);\r\n            if (BUILD.connectedCallback && originalConnectedCallback) {\r\n                originalConnectedCallback.call(this);\r\n            }\r\n        },\r\n        disconnectedCallback() {\r\n            disconnectedCallback(this);\r\n            if (BUILD.disconnectedCallback && originalDisconnectedCallback) {\r\n                originalDisconnectedCallback.call(this);\r\n            }\r\n        },\r\n        __attachShadow() {\r\n            if (supportsShadow) {\r\n                if (BUILD.shadowDelegatesFocus) {\r\n                    this.attachShadow({\r\n                        mode: 'open',\r\n                        delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */),\r\n                    });\r\n                }\r\n                else {\r\n                    this.attachShadow({ mode: 'open' });\r\n                }\r\n            }\r\n            else {\r\n                this.shadowRoot = this;\r\n            }\r\n        },\r\n    });\r\n    Cstr.is = cmpMeta.$tagName$;\r\n    return proxyComponent(Cstr, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */ | 2 /* PROXY_FLAGS.proxyState */);\r\n};\r\nconst forceModeUpdate = (elm) => {\r\n    if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\r\n        const mode = computeMode(elm);\r\n        const hostRef = getHostRef(elm);\r\n        if (hostRef.$modeName$ !== mode) {\r\n            const cmpMeta = hostRef.$cmpMeta$;\r\n            const oldScopeId = elm['s-sc'];\r\n            const scopeId = getScopeId(cmpMeta, mode);\r\n            const style = elm.constructor.style[mode];\r\n            const flags = cmpMeta.$flags$;\r\n            if (style) {\r\n                if (!styles.has(scopeId)) {\r\n                    registerStyle(scopeId, style, !!(flags & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\r\n                }\r\n                hostRef.$modeName$ = mode;\r\n                elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\r\n                attachStyles(hostRef);\r\n                forceUpdate(elm);\r\n            }\r\n        }\r\n    }\r\n};\r\nconst patchCloneNode = (HostElementPrototype) => {\r\n    const orgCloneNode = HostElementPrototype.cloneNode;\r\n    HostElementPrototype.cloneNode = function (deep) {\r\n        const srcNode = this;\r\n        const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\r\n        const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\r\n        if (BUILD.slot && !isShadowDom && deep) {\r\n            let i = 0;\r\n            let slotted, nonStencilNode;\r\n            const stencilPrivates = [\r\n                's-id',\r\n                's-cr',\r\n                's-lr',\r\n                's-rc',\r\n                's-sc',\r\n                's-p',\r\n                's-cn',\r\n                's-sr',\r\n                's-sn',\r\n                's-hn',\r\n                's-ol',\r\n                's-nr',\r\n                's-si',\r\n            ];\r\n            for (; i < srcNode.childNodes.length; i++) {\r\n                slotted = srcNode.childNodes[i]['s-nr'];\r\n                nonStencilNode = stencilPrivates.every((privateField) => !srcNode.childNodes[i][privateField]);\r\n                if (slotted) {\r\n                    if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\r\n                        clonedNode.__appendChild(slotted.cloneNode(true));\r\n                    }\r\n                    else {\r\n                        clonedNode.appendChild(slotted.cloneNode(true));\r\n                    }\r\n                }\r\n                if (nonStencilNode) {\r\n                    clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\r\n                }\r\n            }\r\n        }\r\n        return clonedNode;\r\n    };\r\n};\r\nconst patchSlotAppendChild = (HostElementPrototype) => {\r\n    HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\r\n    HostElementPrototype.appendChild = function (newChild) {\r\n        const slotName = (newChild['s-sn'] = getSlotName(newChild));\r\n        const slotNode = getHostSlotNode(this.childNodes, slotName);\r\n        if (slotNode) {\r\n            const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\r\n            const appendAfter = slotChildNodes[slotChildNodes.length - 1];\r\n            return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\r\n        }\r\n        return this.__appendChild(newChild);\r\n    };\r\n};\r\n/**\r\n * Patches the text content of an unnamed slotted node inside a scoped component\r\n * @param hostElementPrototype the `Element` to be patched\r\n * @param cmpMeta component runtime metadata used to determine if the component should be patched or not\r\n */\r\nconst patchTextContent = (hostElementPrototype, cmpMeta) => {\r\n    if (BUILD.scoped && cmpMeta.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\r\n        const descriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');\r\n        Object.defineProperty(hostElementPrototype, '__textContent', descriptor);\r\n        Object.defineProperty(hostElementPrototype, 'textContent', {\r\n            get() {\r\n                var _a;\r\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\r\n                // the empty string\r\n                const slotNode = getHostSlotNode(this.childNodes, '');\r\n                // when a slot node is found, the textContent _may_ be found in the next sibling (text) node, depending on how\r\n                // nodes were reordered during the vdom render. first try to get the text content from the sibling.\r\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\r\n                    return slotNode.nextSibling.textContent;\r\n                }\r\n                else if (slotNode) {\r\n                    return slotNode.textContent;\r\n                }\r\n                else {\r\n                    // fallback to the original implementation\r\n                    return this.__textContent;\r\n                }\r\n            },\r\n            set(value) {\r\n                var _a;\r\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\r\n                // the empty string\r\n                const slotNode = getHostSlotNode(this.childNodes, '');\r\n                // when a slot node is found, the textContent _may_ need to be placed in the next sibling (text) node,\r\n                // depending on how nodes were reordered during the vdom render. first try to set the text content on the\r\n                // sibling.\r\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\r\n                    slotNode.nextSibling.textContent = value;\r\n                }\r\n                else if (slotNode) {\r\n                    slotNode.textContent = value;\r\n                }\r\n                else {\r\n                    // we couldn't find a slot, but that doesn't mean that there isn't one. if this check ran before the DOM\r\n                    // loaded, we could have missed it. check for a content reference element on the scoped component and insert\r\n                    // it there\r\n                    this.__textContent = value;\r\n                    const contentRefElm = this['s-cr'];\r\n                    if (contentRefElm) {\r\n                        this.insertBefore(contentRefElm, this.firstChild);\r\n                    }\r\n                }\r\n            },\r\n        });\r\n    }\r\n};\r\nconst patchChildSlotNodes = (elm, cmpMeta) => {\r\n    class FakeNodeList extends Array {\r\n        item(n) {\r\n            return this[n];\r\n        }\r\n    }\r\n    if (cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */) {\r\n        const childNodesFn = elm.__lookupGetter__('childNodes');\r\n        Object.defineProperty(elm, 'children', {\r\n            get() {\r\n                return this.childNodes.map((n) => n.nodeType === 1);\r\n            },\r\n        });\r\n        Object.defineProperty(elm, 'childElementCount', {\r\n            get() {\r\n                return elm.children.length;\r\n            },\r\n        });\r\n        Object.defineProperty(elm, 'childNodes', {\r\n            get() {\r\n                const childNodes = childNodesFn.call(this);\r\n                if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0 &&\r\n                    getHostRef(this).$flags$ & 2 /* HOST_FLAGS.hasRendered */) {\r\n                    const result = new FakeNodeList();\r\n                    for (let i = 0; i < childNodes.length; i++) {\r\n                        const slot = childNodes[i]['s-nr'];\r\n                        if (slot) {\r\n                            result.push(slot);\r\n                        }\r\n                    }\r\n                    return result;\r\n                }\r\n                return FakeNodeList.from(childNodes);\r\n            },\r\n        });\r\n    }\r\n};\r\nconst getSlotName = (node) => node['s-sn'] || (node.nodeType === 1 && node.getAttribute('slot')) || '';\r\n/**\r\n * Recursively searches a series of child nodes for a slot with the provided name.\r\n * @param childNodes the nodes to search for a slot with a specific name.\r\n * @param slotName the name of the slot to match on.\r\n * @returns a reference to the slot node that matches the provided name, `null` otherwise\r\n */\r\nconst getHostSlotNode = (childNodes, slotName) => {\r\n    let i = 0;\r\n    let childNode;\r\n    for (; i < childNodes.length; i++) {\r\n        childNode = childNodes[i];\r\n        if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\r\n            return childNode;\r\n        }\r\n        childNode = getHostSlotNode(childNode.childNodes, slotName);\r\n        if (childNode) {\r\n            return childNode;\r\n        }\r\n    }\r\n    return null;\r\n};\r\nconst getHostSlotChildNodes = (n, slotName) => {\r\n    const childNodes = [n];\r\n    while ((n = n.nextSibling) && n['s-sn'] === slotName) {\r\n        childNodes.push(n);\r\n    }\r\n    return childNodes;\r\n};\r\nconst hmrStart = (elm, cmpMeta, hmrVersionId) => {\r\n    // ¯\\_(ツ)_/¯\r\n    const hostRef = getHostRef(elm);\r\n    // reset state flags to only have been connected\r\n    hostRef.$flags$ = 1 /* HOST_FLAGS.hasConnected */;\r\n    // TODO\r\n    // detatch any event listeners that may have been added\r\n    // because we're not passing an exact event name it'll\r\n    // remove all of this element's event, which is good\r\n    // create a callback for when this component finishes hmr\r\n    elm['s-hmr-load'] = () => {\r\n        // finished hmr for this element\r\n        delete elm['s-hmr-load'];\r\n    };\r\n    // re-initialize the component\r\n    initializeComponent(elm, hostRef, cmpMeta, hmrVersionId);\r\n};\r\nconst bootstrapLazy = (lazyBundles, options = {}) => {\r\n    if (BUILD.profile && performance.mark) {\r\n        performance.mark('st:app:start');\r\n    }\r\n    installDevTools();\r\n    const endBootstrap = createTime('bootstrapLazy');\r\n    const cmpTags = [];\r\n    const exclude = options.exclude || [];\r\n    const customElements = win.customElements;\r\n    const head = doc.head;\r\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\r\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\r\n    const deferredConnectedCallbacks = [];\r\n    const styles = /*@__PURE__*/ doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\r\n    let appLoadFallback;\r\n    let isBootstrapping = true;\r\n    let i = 0;\r\n    Object.assign(plt, options);\r\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\r\n    if (BUILD.asyncQueue) {\r\n        if (options.syncQueue) {\r\n            plt.$flags$ |= 4 /* PLATFORM_FLAGS.queueSync */;\r\n        }\r\n    }\r\n    if (BUILD.hydrateClientSide) {\r\n        // If the app is already hydrated there is not point to disable the\r\n        // async queue. This will improve the first input delay\r\n        plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\r\n    }\r\n    if (BUILD.hydrateClientSide && BUILD.shadowDom) {\r\n        for (; i < styles.length; i++) {\r\n            registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\r\n        }\r\n    }\r\n    lazyBundles.map((lazyBundle) => {\r\n        lazyBundle[1].map((compactMeta) => {\r\n            const cmpMeta = {\r\n                $flags$: compactMeta[0],\r\n                $tagName$: compactMeta[1],\r\n                $members$: compactMeta[2],\r\n                $listeners$: compactMeta[3],\r\n            };\r\n            if (BUILD.member) {\r\n                cmpMeta.$members$ = compactMeta[2];\r\n            }\r\n            if (BUILD.hostListener) {\r\n                cmpMeta.$listeners$ = compactMeta[3];\r\n            }\r\n            if (BUILD.reflect) {\r\n                cmpMeta.$attrsToReflect$ = [];\r\n            }\r\n            if (BUILD.watchCallback) {\r\n                cmpMeta.$watchers$ = {};\r\n            }\r\n            if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\r\n                cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\r\n            }\r\n            const tagName = BUILD.transformTagName && options.transformTagName\r\n                ? options.transformTagName(cmpMeta.$tagName$)\r\n                : cmpMeta.$tagName$;\r\n            const HostElement = class extends HTMLElement {\r\n                // StencilLazyHost\r\n                constructor(self) {\r\n                    // @ts-ignore\r\n                    super(self);\r\n                    self = this;\r\n                    registerHost(self, cmpMeta);\r\n                    if (BUILD.shadowDom && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\r\n                        // this component is using shadow dom\r\n                        // and this browser supports shadow dom\r\n                        // add the read-only property \"shadowRoot\" to the host element\r\n                        // adding the shadow root build conditionals to minimize runtime\r\n                        if (supportsShadow) {\r\n                            if (BUILD.shadowDelegatesFocus) {\r\n                                self.attachShadow({\r\n                                    mode: 'open',\r\n                                    delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */),\r\n                                });\r\n                            }\r\n                            else {\r\n                                self.attachShadow({ mode: 'open' });\r\n                            }\r\n                        }\r\n                        else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\r\n                            self.shadowRoot = self;\r\n                        }\r\n                    }\r\n                    if (BUILD.slotChildNodesFix) {\r\n                        patchChildSlotNodes(self, cmpMeta);\r\n                    }\r\n                }\r\n                connectedCallback() {\r\n                    if (appLoadFallback) {\r\n                        clearTimeout(appLoadFallback);\r\n                        appLoadFallback = null;\r\n                    }\r\n                    if (isBootstrapping) {\r\n                        // connectedCallback will be processed once all components have been registered\r\n                        deferredConnectedCallbacks.push(this);\r\n                    }\r\n                    else {\r\n                        plt.jmp(() => connectedCallback(this));\r\n                    }\r\n                }\r\n                disconnectedCallback() {\r\n                    plt.jmp(() => disconnectedCallback(this));\r\n                }\r\n                componentOnReady() {\r\n                    return getHostRef(this).$onReadyPromise$;\r\n                }\r\n            };\r\n            if (BUILD.cloneNodeFix) {\r\n                patchCloneNode(HostElement.prototype);\r\n            }\r\n            if (BUILD.appendChildSlotFix) {\r\n                patchSlotAppendChild(HostElement.prototype);\r\n            }\r\n            if (BUILD.hotModuleReplacement) {\r\n                HostElement.prototype['s-hmr'] = function (hmrVersionId) {\r\n                    hmrStart(this, cmpMeta, hmrVersionId);\r\n                };\r\n            }\r\n            if (BUILD.scopedSlotTextContentFix) {\r\n                patchTextContent(HostElement.prototype, cmpMeta);\r\n            }\r\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\r\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\r\n                cmpTags.push(tagName);\r\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\r\n            }\r\n        });\r\n    });\r\n    if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {\r\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\r\n        visibilityStyle.setAttribute('data-styles', '');\r\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\r\n    }\r\n    // Process deferred connectedCallbacks now all components have been registered\r\n    isBootstrapping = false;\r\n    if (deferredConnectedCallbacks.length) {\r\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\r\n    }\r\n    else {\r\n        if (BUILD.profile) {\r\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30, 'timeout')));\r\n        }\r\n        else {\r\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\r\n        }\r\n    }\r\n    // Fallback appLoad event\r\n    endBootstrap();\r\n};\r\nconst getConnect = (_ref, tagName) => {\r\n    const componentOnReady = () => {\r\n        let elm = doc.querySelector(tagName);\r\n        if (!elm) {\r\n            elm = doc.createElement(tagName);\r\n            doc.body.appendChild(elm);\r\n        }\r\n        return typeof elm.componentOnReady === 'function' ? elm.componentOnReady() : Promise.resolve(elm);\r\n    };\r\n    const create = (...args) => {\r\n        return componentOnReady().then((el) => el.create(...args));\r\n    };\r\n    return {\r\n        create,\r\n        componentOnReady,\r\n    };\r\n};\r\nconst getContext = (_elm, context) => {\r\n    if (context in Context) {\r\n        return Context[context];\r\n    }\r\n    else if (context === 'window') {\r\n        return win;\r\n    }\r\n    else if (context === 'document') {\r\n        return doc;\r\n    }\r\n    else if (context === 'isServer' || context === 'isPrerender') {\r\n        return BUILD.hydrateServerSide ? true : false;\r\n    }\r\n    else if (context === 'isClient') {\r\n        return BUILD.hydrateServerSide ? false : true;\r\n    }\r\n    else if (context === 'resourcesUrl' || context === 'publicPath') {\r\n        return getAssetPath('.');\r\n    }\r\n    else if (context === 'queue') {\r\n        return {\r\n            write: writeTask,\r\n            read: readTask,\r\n            tick: {\r\n                then(cb) {\r\n                    return nextTick(cb);\r\n                },\r\n            },\r\n        };\r\n    }\r\n    return undefined;\r\n};\r\nconst Fragment = (_, children) => children;\r\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\r\n    if (BUILD.hostListener && listeners) {\r\n        // this is called immediately within the element's constructor\r\n        // initialize our event listeners on the host element\r\n        // we do this now so that we can listen to events that may\r\n        // have fired even before the instance is ready\r\n        if (BUILD.hostListenerTargetParent) {\r\n            // this component may have event listeners that should be attached to the parent\r\n            if (attachParentListeners) {\r\n                // this is being ran from within the connectedCallback\r\n                // which is important so that we know the host element actually has a parent element\r\n                // filter out the listeners to only have the ones that ARE being attached to the parent\r\n                listeners = listeners.filter(([flags]) => flags & 32 /* LISTENER_FLAGS.TargetParent */);\r\n            }\r\n            else {\r\n                // this is being ran from within the component constructor\r\n                // everything BUT the parent element listeners should be attached at this time\r\n                // filter out the listeners that are NOT being attached to the parent\r\n                listeners = listeners.filter(([flags]) => !(flags & 32 /* LISTENER_FLAGS.TargetParent */));\r\n            }\r\n        }\r\n        listeners.map(([flags, name, method]) => {\r\n            const target = BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\r\n            const handler = hostListenerProxy(hostRef, method);\r\n            const opts = hostListenerOpts(flags);\r\n            plt.ael(target, name, handler, opts);\r\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\r\n        });\r\n    }\r\n};\r\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\r\n    try {\r\n        if (BUILD.lazyLoad) {\r\n            if (hostRef.$flags$ & 256 /* HOST_FLAGS.isListenReady */) {\r\n                // instance is ready, let's call it's member method for this event\r\n                hostRef.$lazyInstance$[methodName](ev);\r\n            }\r\n            else {\r\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\r\n            }\r\n        }\r\n        else {\r\n            hostRef.$hostElement$[methodName](ev);\r\n        }\r\n    }\r\n    catch (e) {\r\n        consoleError(e);\r\n    }\r\n};\r\nconst getHostListenerTarget = (elm, flags) => {\r\n    if (BUILD.hostListenerTargetDocument && flags & 4 /* LISTENER_FLAGS.TargetDocument */)\r\n        return doc;\r\n    if (BUILD.hostListenerTargetWindow && flags & 8 /* LISTENER_FLAGS.TargetWindow */)\r\n        return win;\r\n    if (BUILD.hostListenerTargetBody && flags & 16 /* LISTENER_FLAGS.TargetBody */)\r\n        return doc.body;\r\n    if (BUILD.hostListenerTargetParent && flags & 32 /* LISTENER_FLAGS.TargetParent */)\r\n        return elm.parentElement;\r\n    return elm;\r\n};\r\n// prettier-ignore\r\nconst hostListenerOpts = (flags) => supportsListenerOptions\r\n    ? ({\r\n        passive: (flags & 1 /* LISTENER_FLAGS.Passive */) !== 0,\r\n        capture: (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0,\r\n    })\r\n    : (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0;\r\nconst setPlatformOptions = (opts) => Object.assign(plt, opts);\r\nconst insertVdomAnnotations = (doc, staticComponents) => {\r\n    if (doc != null) {\r\n        const docData = {\r\n            hostIds: 0,\r\n            rootLevelIds: 0,\r\n            staticComponents: new Set(staticComponents),\r\n        };\r\n        const orgLocationNodes = [];\r\n        parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\r\n        orgLocationNodes.forEach((orgLocationNode) => {\r\n            if (orgLocationNode != null) {\r\n                const nodeRef = orgLocationNode['s-nr'];\r\n                let hostId = nodeRef['s-host-id'];\r\n                let nodeId = nodeRef['s-node-id'];\r\n                let childId = `${hostId}.${nodeId}`;\r\n                if (hostId == null) {\r\n                    hostId = 0;\r\n                    docData.rootLevelIds++;\r\n                    nodeId = docData.rootLevelIds;\r\n                    childId = `${hostId}.${nodeId}`;\r\n                    if (nodeRef.nodeType === 1 /* NODE_TYPE.ElementNode */) {\r\n                        nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\r\n                    }\r\n                    else if (nodeRef.nodeType === 3 /* NODE_TYPE.TextNode */) {\r\n                        if (hostId === 0) {\r\n                            const textContent = nodeRef.nodeValue.trim();\r\n                            if (textContent === '') {\r\n                                // useless whitespace node at the document root\r\n                                orgLocationNode.remove();\r\n                                return;\r\n                            }\r\n                        }\r\n                        const commentBeforeTextNode = doc.createComment(childId);\r\n                        commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\r\n                        nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\r\n                    }\r\n                }\r\n                let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\r\n                const orgLocationParentNode = orgLocationNode.parentElement;\r\n                if (orgLocationParentNode) {\r\n                    if (orgLocationParentNode['s-en'] === '') {\r\n                        // ending with a \".\" means that the parent element\r\n                        // of this node's original location is a SHADOW dom element\r\n                        // and this node is apart of the root level light dom\r\n                        orgLocationNodeId += `.`;\r\n                    }\r\n                    else if (orgLocationParentNode['s-en'] === 'c') {\r\n                        // ending with a \".c\" means that the parent element\r\n                        // of this node's original location is a SCOPED element\r\n                        // and this node is apart of the root level light dom\r\n                        orgLocationNodeId += `.c`;\r\n                    }\r\n                }\r\n                orgLocationNode.nodeValue = orgLocationNodeId;\r\n            }\r\n        });\r\n    }\r\n};\r\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\r\n    if (node == null) {\r\n        return;\r\n    }\r\n    if (node['s-nr'] != null) {\r\n        orgLocationNodes.push(node);\r\n    }\r\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\r\n        node.childNodes.forEach((childNode) => {\r\n            const hostRef = getHostRef(childNode);\r\n            if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\r\n                const cmpData = {\r\n                    nodeIds: 0,\r\n                };\r\n                insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\r\n            }\r\n            parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\r\n        });\r\n    }\r\n};\r\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\r\n    if (vnode != null) {\r\n        const hostId = ++docData.hostIds;\r\n        hostElm.setAttribute(HYDRATE_ID, hostId);\r\n        if (hostElm['s-cr'] != null) {\r\n            hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\r\n        }\r\n        if (vnode.$children$ != null) {\r\n            const depth = 0;\r\n            vnode.$children$.forEach((vnodeChild, index) => {\r\n                insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\r\n            });\r\n        }\r\n        if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\r\n            const parent = hostElm.parentElement;\r\n            if (parent && parent.childNodes) {\r\n                const parentChildNodes = Array.from(parent.childNodes);\r\n                const comment = parentChildNodes.find((node) => node.nodeType === 8 /* NODE_TYPE.CommentNode */ && node['s-sr']);\r\n                if (comment) {\r\n                    const index = parentChildNodes.indexOf(hostElm) - 1;\r\n                    vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment['s-host-id']}.${comment['s-node-id']}.0.${index}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\r\n    const childElm = vnodeChild.$elm$;\r\n    if (childElm == null) {\r\n        return;\r\n    }\r\n    const nodeId = cmpData.nodeIds++;\r\n    const childId = `${hostId}.${nodeId}.${depth}.${index}`;\r\n    childElm['s-host-id'] = hostId;\r\n    childElm['s-node-id'] = nodeId;\r\n    if (childElm.nodeType === 1 /* NODE_TYPE.ElementNode */) {\r\n        childElm.setAttribute(HYDRATE_CHILD_ID, childId);\r\n    }\r\n    else if (childElm.nodeType === 3 /* NODE_TYPE.TextNode */) {\r\n        const parentNode = childElm.parentNode;\r\n        const nodeName = parentNode.nodeName;\r\n        if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\r\n            const textNodeId = `${TEXT_NODE_ID}.${childId}`;\r\n            const commentBeforeTextNode = doc.createComment(textNodeId);\r\n            parentNode.insertBefore(commentBeforeTextNode, childElm);\r\n        }\r\n    }\r\n    else if (childElm.nodeType === 8 /* NODE_TYPE.CommentNode */) {\r\n        if (childElm['s-sr']) {\r\n            const slotName = childElm['s-sn'] || '';\r\n            const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\r\n            childElm.nodeValue = slotNodeId;\r\n        }\r\n    }\r\n    if (vnodeChild.$children$ != null) {\r\n        const childDepth = depth + 1;\r\n        vnodeChild.$children$.forEach((vnode, index) => {\r\n            insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\r\n        });\r\n    }\r\n};\r\nconst hostRefs = /*@__PURE__*/ new WeakMap();\r\nconst getHostRef = (ref) => hostRefs.get(ref);\r\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\r\nconst registerHost = (elm, cmpMeta) => {\r\n    const hostRef = {\r\n        $flags$: 0,\r\n        $hostElement$: elm,\r\n        $cmpMeta$: cmpMeta,\r\n        $instanceValues$: new Map(),\r\n    };\r\n    if (BUILD.isDev) {\r\n        hostRef.$renderCount$ = 0;\r\n    }\r\n    if (BUILD.method && BUILD.lazyLoad) {\r\n        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));\r\n    }\r\n    if (BUILD.asyncLoading) {\r\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\r\n        elm['s-p'] = [];\r\n        elm['s-rc'] = [];\r\n    }\r\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\r\n    return hostRefs.set(elm, hostRef);\r\n};\r\nconst isMemberInElement = (elm, memberName) => memberName in elm;\r\nconst consoleError = (e, el) => (customError || console.error)(e, el);\r\nconst STENCIL_DEV_MODE = BUILD.isTesting\r\n    ? ['STENCIL:'] // E2E testing\r\n    : [\r\n        '%cstencil',\r\n        'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px',\r\n    ];\r\nconst consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);\r\nconst consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);\r\nconst consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);\r\nconst setErrorHandler = (handler) => (customError = handler);\r\nconst cmpModules = /*@__PURE__*/ new Map();\r\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\r\n    // loadModuleImport\r\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\r\n    const bundleId = cmpMeta.$lazyBundleId$;\r\n    if (BUILD.isDev && typeof bundleId !== 'string') {\r\n        consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\r\n        return undefined;\r\n    }\r\n    const module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\r\n    if (module) {\r\n        return module[exportName];\r\n    }\r\n    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\r\n    return import(\r\n    /* @vite-ignore */\r\n    /* webpackInclude: /\\.entry\\.js$/ */\r\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\r\n    /* webpackMode: \"lazy\" */\r\n    `./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then((importedModule) => {\r\n        if (!BUILD.hotModuleReplacement) {\r\n            cmpModules.set(bundleId, importedModule);\r\n        }\r\n        return importedModule[exportName];\r\n    }, consoleError);\r\n};\r\nconst styles = /*@__PURE__*/ new Map();\r\nconst modeResolutionChain = [];\r\nconst win = typeof window !== 'undefined' ? window : {};\r\nconst CSS = BUILD.cssVarShim ? win.CSS : null;\r\nconst doc = win.document || { head: {} };\r\nconst H = (win.HTMLElement || class {\r\n});\r\nconst plt = {\r\n    $flags$: 0,\r\n    $resourcesUrl$: '',\r\n    jmp: (h) => h(),\r\n    raf: (h) => requestAnimationFrame(h),\r\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\r\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\r\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\r\n};\r\nconst setPlatformHelpers = (helpers) => {\r\n    Object.assign(plt, helpers);\r\n};\r\nconst supportsShadow = BUILD.shadowDomShim && BUILD.shadowDom\r\n    ? /*@__PURE__*/ (() => (doc.head.attachShadow + '').indexOf('[native') > -1)()\r\n    : true;\r\nconst supportsListenerOptions = /*@__PURE__*/ (() => {\r\n    let supportsListenerOptions = false;\r\n    try {\r\n        doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\r\n            get() {\r\n                supportsListenerOptions = true;\r\n            },\r\n        }));\r\n    }\r\n    catch (e) { }\r\n    return supportsListenerOptions;\r\n})();\r\nconst promiseResolve = (v) => Promise.resolve(v);\r\nconst supportsConstructableStylesheets = BUILD.constructableCSS\r\n    ? /*@__PURE__*/ (() => {\r\n        try {\r\n            new CSSStyleSheet();\r\n            return typeof new CSSStyleSheet().replaceSync === 'function';\r\n        }\r\n        catch (e) { }\r\n        return false;\r\n    })()\r\n    : false;\r\nconst queueDomReads = [];\r\nconst queueDomWrites = [];\r\nconst queueDomWritesLow = [];\r\nconst queueTask = (queue, write) => (cb) => {\r\n    queue.push(cb);\r\n    if (!queuePending) {\r\n        queuePending = true;\r\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\r\n            nextTick(flush);\r\n        }\r\n        else {\r\n            plt.raf(flush);\r\n        }\r\n    }\r\n};\r\nconst consume = (queue) => {\r\n    for (let i = 0; i < queue.length; i++) {\r\n        try {\r\n            queue[i](performance.now());\r\n        }\r\n        catch (e) {\r\n            consoleError(e);\r\n        }\r\n    }\r\n    queue.length = 0;\r\n};\r\nconst consumeTimeout = (queue, timeout) => {\r\n    let i = 0;\r\n    let ts = 0;\r\n    while (i < queue.length && (ts = performance.now()) < timeout) {\r\n        try {\r\n            queue[i++](ts);\r\n        }\r\n        catch (e) {\r\n            consoleError(e);\r\n        }\r\n    }\r\n    if (i === queue.length) {\r\n        queue.length = 0;\r\n    }\r\n    else if (i !== 0) {\r\n        queue.splice(0, i);\r\n    }\r\n};\r\nconst flush = () => {\r\n    if (BUILD.asyncQueue) {\r\n        queueCongestion++;\r\n    }\r\n    // always force a bunch of medium callbacks to run, but still have\r\n    // a throttle on how many can run in a certain time\r\n    // DOM READS!!!\r\n    consume(queueDomReads);\r\n    // DOM WRITES!!!\r\n    if (BUILD.asyncQueue) {\r\n        const timeout = (plt.$flags$ & 6 /* PLATFORM_FLAGS.queueMask */) === 2 /* PLATFORM_FLAGS.appLoaded */\r\n            ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0))\r\n            : Infinity;\r\n        consumeTimeout(queueDomWrites, timeout);\r\n        consumeTimeout(queueDomWritesLow, timeout);\r\n        if (queueDomWrites.length > 0) {\r\n            queueDomWritesLow.push(...queueDomWrites);\r\n            queueDomWrites.length = 0;\r\n        }\r\n        if ((queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0)) {\r\n            // still more to do yet, but we've run out of time\r\n            // let's let this thing cool off and try again in the next tick\r\n            plt.raf(flush);\r\n        }\r\n        else {\r\n            queueCongestion = 0;\r\n        }\r\n    }\r\n    else {\r\n        consume(queueDomWrites);\r\n        if ((queuePending = queueDomReads.length > 0)) {\r\n            // still more to do yet, but we've run out of time\r\n            // let's let this thing cool off and try again in the next tick\r\n            plt.raf(flush);\r\n        }\r\n    }\r\n};\r\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\r\nconst readTask = /*@__PURE__*/ queueTask(queueDomReads, false);\r\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\r\nexport { BUILD, Env, NAMESPACE } from '@stencil/core/internal/app-data';\r\nexport { Build, CSS, Context, Fragment, H, H as HTMLElement, Host, STENCIL_DEV_MODE, addHostEventListeners, bootstrapLazy, cmpModules, connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, createEvent, defineCustomElement, disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getConnect, getContext, getElement, getHostRef, getMode, getRenderingRef, getValue, h, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, proxyCustomElement, readTask, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setPlatformHelpers, setPlatformOptions, setValue, styles, supportsConstructableStylesheets, supportsListenerOptions, supportsShadow, win, writeTask };\r\n"],
  "mappings": "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",
  "names": ["i", "h", "scopeId", "isSvgMode", "newVNode", "i", "i", "scopeId", "h", "supportsListenerOptions", "i"]
}
