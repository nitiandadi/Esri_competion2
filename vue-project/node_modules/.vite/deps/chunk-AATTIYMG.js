import {
  E
} from "./chunk-RFBUNXCZ.js";
import {
  J
} from "./chunk-QCYWXXBM.js";
import {
  D as D2,
  G,
  L,
  M,
  P
} from "./chunk-DNXRTHCH.js";
import {
  e as e3
} from "./chunk-MWIMWDJV.js";
import {
  d,
  e as e2,
  n as n2
} from "./chunk-5XBZ477A.js";
import {
  n
} from "./chunk-5WYME2YP.js";
import {
  a2 as a,
  e,
  v2 as v,
  y3 as y
} from "./chunk-OA5ES74L.js";
import {
  D
} from "./chunk-6ZUWLK7F.js";
import {
  s2 as s
} from "./chunk-YVZY5LDV.js";
import {
  has,
  p
} from "./chunk-H32MMKAJ.js";
import {
  t
} from "./chunk-HVCAHUYB.js";

// node_modules/@arcgis/core/layers/effects/EffectView.js
var l = -1;
var a2 = class extends v {
  constructor(t3) {
    super(t3), this._from = null, this._to = null, this._final = null, this._current = [], this._time = 0, this.duration = has("mapview-transitions-duration"), this.effects = [];
  }
  set effect(t3) {
    if (this._get("effect") !== (t3 = t3 || "")) {
      this._set("effect", t3);
      try {
        this._transitionTo(h(t3));
      } catch (e5) {
        this._transitionTo([]), s.getLogger(this.declaredClass).warn("Invalid Effect", { effect: t3, error: e5 });
      }
    }
  }
  get hasEffects() {
    return this.transitioning || !!this.effects.length;
  }
  set scale(t3) {
    this._updateForScale(t3);
  }
  get transitioning() {
    return null !== this._to;
  }
  canTransitionTo(t3) {
    try {
      return this.scale > 0 && u(this._current, h(t3), this.scale);
    } catch {
      return false;
    }
  }
  transitionStep(t3, e5) {
    this._applyTimeTransition(t3), this._updateForScale(e5);
  }
  endTransitions() {
    this._applyTimeTransition(this.duration);
  }
  _transitionTo(t3) {
    this.scale > 0 && u(this._current, t3, this.scale) ? (this._final = t3, this._to = p(t3), _(this._current, this._to, this.scale), this._from = p(this._current), this._time = 0) : (this._from = this._to = this._final = null, this._current = t3), this._set("effects", this._current[0] ? p(this._current[0].effects) : []);
  }
  _applyTimeTransition(t3) {
    if (!(this._to && this._from && this._current && this._final))
      return;
    this._time += t3;
    const e5 = Math.min(1, this._time / this.duration);
    for (let s2 = 0; s2 < this._current.length; s2++) {
      const t4 = this._current[s2], r2 = this._from[s2], i3 = this._to[s2];
      t4.scale = p2(r2.scale, i3.scale, e5);
      for (let s3 = 0; s3 < t4.effects.length; s3++) {
        const n4 = t4.effects[s3], c = r2.effects[s3], o2 = i3.effects[s3];
        n4.interpolate(c, o2, e5);
      }
    }
    1 === e5 && (this._current = this._final, this._set("effects", this._current[0] ? p(this._current[0].effects) : []), this._from = this._to = this._final = null);
  }
  _updateForScale(t3) {
    if (this._set("scale", t3), 0 === this._current.length)
      return;
    const e5 = this._current, s2 = this._current.length - 1;
    let r2, i3, n4 = 1;
    if (1 === e5.length || t3 >= e5[0].scale)
      i3 = r2 = e5[0].effects;
    else if (t3 <= e5[s2].scale)
      i3 = r2 = e5[s2].effects;
    else
      for (let c = 0; c < s2; c++) {
        const s3 = e5[c], o2 = e5[c + 1];
        if (s3.scale >= t3 && o2.scale <= t3) {
          n4 = (t3 - s3.scale) / (o2.scale - s3.scale), r2 = s3.effects, i3 = o2.effects;
          break;
        }
      }
    for (let c = 0; c < this.effects.length; c++) {
      this.effects[c].interpolate(r2[c], i3[c], n4);
    }
  }
};
function h(t3) {
  const e5 = d(t3) || [];
  return m(e5) ? [{ scale: l, effects: e5 }] : e5;
}
function u(t3, e5, s2) {
  var _a, _b, _c, _d;
  if (!((_a = t3[0]) == null ? void 0 : _a.effects) || !((_b = e5[0]) == null ? void 0 : _b.effects))
    return true;
  return !((((_c = t3[0]) == null ? void 0 : _c.scale) === l || ((_d = e5[0]) == null ? void 0 : _d.scale) === l) && (t3.length > 1 || e5.length > 1) && s2 <= 0) && n2(t3[0].effects, e5[0].effects);
}
function _(t3, e5, s2) {
  const r2 = t3.length > e5.length ? t3 : e5, i3 = t3.length > e5.length ? e5 : t3, n4 = i3[i3.length - 1], c = (n4 == null ? void 0 : n4.scale) ?? s2, o2 = (n4 == null ? void 0 : n4.effects) ?? [];
  for (let f2 = i3.length; f2 < r2.length; f2++)
    i3.push({ scale: c, effects: [...o2] });
  for (let a3 = 0; a3 < r2.length; a3++)
    i3[a3].scale = i3[a3].scale === l ? s2 : i3[a3].scale, r2[a3].scale = r2[a3].scale === l ? s2 : r2[a3].scale, e2(i3[a3].effects, r2[a3].effects);
}
function p2(t3, e5, s2) {
  return t3 + (e5 - t3) * s2;
}
function m(t3) {
  const e5 = t3[0];
  return !!e5 && "type" in e5;
}
e([y()], a2.prototype, "_to", void 0), e([y()], a2.prototype, "duration", void 0), e([y({ value: "" })], a2.prototype, "effect", null), e([y({ readOnly: true })], a2.prototype, "effects", void 0), e([y({ readOnly: true })], a2.prototype, "hasEffects", null), e([y({ value: 0 })], a2.prototype, "scale", null), e([y({ readOnly: true })], a2.prototype, "transitioning", null), a2 = e([a("esri.layers.effects.EffectView")], a2);

// node_modules/@arcgis/core/views/2d/engine/DisplayObject.js
var i = 1 / has("mapview-transitions-duration");
var r = class extends n {
  constructor() {
    super(...arguments), this._fadeOutResolver = null, this._fadeInResolver = null, this._clips = null, this.computedVisible = true, this.computedOpacity = 1, this.fadeTransitionEnabled = false, this.inFadeTransition = false, this._isReady = false, this._opacity = 1, this.parent = null, this._stage = null, this._visible = true;
  }
  get clips() {
    return this._clips;
  }
  set clips(e5) {
    this._clips = e5, this.requestRender();
  }
  get isReady() {
    return this._isReady;
  }
  get opacity() {
    return this._opacity;
  }
  set opacity(e5) {
    this._opacity !== e5 && (this._opacity = Math.min(1, Math.max(e5, 0)), this.requestRender());
  }
  get stage() {
    return this._stage;
  }
  set stage(e5) {
    var _a;
    if (this._stage === e5)
      return;
    const t3 = this._stage;
    this._stage = e5, e5 ? ((_a = this._stage) == null ? void 0 : _a.untrashDisplayObject(this)) || (this.onAttach(), this.emit("attach")) : t3 == null ? void 0 : t3.trashDisplayObject(this);
  }
  get transforms() {
    return this._getTransforms();
  }
  _getTransforms() {
    return t(this._transforms) && (this._transforms = this._createTransforms()), this._transforms;
  }
  get visible() {
    return this._visible;
  }
  set visible(e5) {
    this._visible !== e5 && (this._visible = e5, this.requestRender());
  }
  fadeIn() {
    return this._fadeInResolver || (this._fadeOutResolver && (this._fadeOutResolver(), this._fadeOutResolver = null), this.opacity = 1, this.computedOpacity = 0, this.fadeTransitionEnabled = true, this._fadeInResolver = D(), this.requestRender()), this._fadeInResolver.promise;
  }
  fadeOut() {
    return this._fadeOutResolver || (this.opacity = 0, this._fadeInResolver && (this._fadeInResolver(), this._fadeInResolver = null), this.fadeTransitionEnabled = true, this._fadeOutResolver = D(), this.requestRender()), this._fadeOutResolver.promise;
  }
  endTransitions() {
    var _a, _b;
    (_a = this._fadeInResolver) == null ? void 0 : _a.call(this), this._fadeInResolver = null, (_b = this._fadeOutResolver) == null ? void 0 : _b.call(this), this._fadeOutResolver = null, this.computedOpacity = this.visible ? this.opacity : 0, this.requestRender();
  }
  beforeRender(e5) {
    this.updateTransitionProperties(e5.deltaTime, e5.state.scale);
  }
  afterRender(e5) {
    this._fadeInResolver && this.computedOpacity === this.opacity ? (this._fadeInResolver(), this._fadeInResolver = null) : this._fadeOutResolver && 0 === this.computedOpacity && (this._fadeOutResolver(), this._fadeOutResolver = null);
  }
  remove() {
    var _a;
    (_a = this.parent) == null ? void 0 : _a.removeChild(this);
  }
  setTransform(e5) {
  }
  processRender(e5) {
    this.stage && this.computedVisible && this.doRender(e5);
  }
  requestRender() {
    this.stage && this.stage.requestRender();
  }
  processDetach() {
    this._fadeInResolver && (this._fadeInResolver(), this._fadeInResolver = null), this._fadeOutResolver && (this._fadeOutResolver(), this._fadeOutResolver = null), this.onDetach(), this.emit("detach");
  }
  updateTransitionProperties(e5, t3) {
    if (this.fadeTransitionEnabled) {
      const t4 = this._fadeOutResolver || !this.visible ? 0 : this.opacity, s2 = this.computedOpacity;
      if (s2 === t4)
        this.computedVisible = this.visible;
      else {
        const r2 = e5 * i;
        this.computedOpacity = s2 > t4 ? Math.max(t4, s2 - r2) : Math.min(t4, s2 + r2), this.computedVisible = this.computedOpacity > 0;
        const a3 = t4 === this.computedOpacity;
        this.inFadeTransition = !a3, a3 || this.requestRender();
      }
    } else
      this.computedOpacity = this.opacity, this.computedVisible = this.visible;
  }
  onAttach() {
  }
  onDetach() {
  }
  doRender(e5) {
  }
  ready() {
    this._isReady || (this._isReady = true, this.emit("isReady"), this.requestRender());
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/highlight/parameters.js
var o = 1;
var t2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1];
var i2 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
var n3 = 256;
var e4 = { outlineWidth: 1.3, outerHaloWidth: 0.4, innerHaloWidth: 0.4, outlinePosition: 0 };

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/highlight/HighlightGradient.js
var u2 = s.getLogger("esri.views.2d.engine.webgl.painter.highlight.HighlightGradient");
function C(o2, i3) {
  i3.fillColor[0] = o2.color.r / 255, i3.fillColor[1] = o2.color.g / 255, i3.fillColor[2] = o2.color.b / 255, i3.fillColor[3] = o2.color.a, o2.haloColor ? (i3.outlineColor[0] = o2.haloColor.r / 255, i3.outlineColor[1] = o2.haloColor.g / 255, i3.outlineColor[2] = o2.haloColor.b / 255, i3.outlineColor[3] = o2.haloColor.a) : (i3.outlineColor[0] = i3.fillColor[0], i3.outlineColor[1] = i3.fillColor[1], i3.outlineColor[2] = i3.fillColor[2], i3.outlineColor[3] = i3.fillColor[3]), i3.fillColor[3] *= o2.fillOpacity, i3.outlineColor[3] *= o2.haloOpacity, i3.fillColor[0] *= i3.fillColor[3], i3.fillColor[1] *= i3.fillColor[3], i3.fillColor[2] *= i3.fillColor[3], i3.outlineColor[0] *= i3.outlineColor[3], i3.outlineColor[1] *= i3.outlineColor[3], i3.outlineColor[2] *= i3.outlineColor[3], i3.outlineWidth = e4.outlineWidth, i3.outerHaloWidth = e4.outerHaloWidth, i3.innerHaloWidth = e4.innerHaloWidth, i3.outlinePosition = e4.outlinePosition;
}
var g = [0, 0, 0, 0];
var f = class {
  constructor() {
    this._convertedHighlightOptions = { fillColor: [0.2 * 0.75, 0.6 * 0.75, 0.675, 0.75], outlineColor: [0.2 * 0.9, 0.54, 0.81, 0.9], outlinePosition: e4.outlinePosition, outlineWidth: e4.outlineWidth, innerHaloWidth: e4.innerHaloWidth, outerHaloWidth: e4.outerHaloWidth }, this._shadeTexChanged = true, this._texelData = new Uint8Array(4 * n3), this._minMaxDistance = [0, 0];
  }
  setHighlightOptions(o2) {
    const i3 = this._convertedHighlightOptions;
    C(o2, i3);
    const t3 = i3.outlinePosition - i3.outlineWidth / 2 - i3.outerHaloWidth, r2 = i3.outlinePosition - i3.outlineWidth / 2, n4 = i3.outlinePosition + i3.outlineWidth / 2, h3 = i3.outlinePosition + i3.outlineWidth / 2 + i3.innerHaloWidth, a3 = Math.sqrt(Math.PI / 2) * o, s2 = Math.abs(t3) > a3 ? Math.round(10 * (Math.abs(t3) - a3)) / 10 : 0, d2 = Math.abs(h3) > a3 ? Math.round(10 * (Math.abs(h3) - a3)) / 10 : 0;
    let f2;
    s2 && !d2 ? u2.error("The outer rim of the highlight is " + s2 + "px away from the edge of the feature; consider reducing some width values or shifting the outline position towards positive values (inwards).") : !s2 && d2 ? u2.error("The inner rim of the highlight is " + d2 + "px away from the edge of the feature; consider reducing some width values or shifting the outline position towards negative values (outwards).") : s2 && d2 && u2.error("The highlight is " + Math.max(s2, d2) + "px away from the edge of the feature; consider reducing some width values.");
    const c = [void 0, void 0, void 0, void 0];
    function m2(o3, i4, t4) {
      c[0] = (1 - t4) * o3[0] + t4 * i4[0], c[1] = (1 - t4) * o3[1] + t4 * i4[1], c[2] = (1 - t4) * o3[2] + t4 * i4[2], c[3] = (1 - t4) * o3[3] + t4 * i4[3];
    }
    const { _texelData: p3 } = this;
    for (let l2 = 0; l2 < n3; ++l2)
      f2 = t3 + l2 / (n3 - 1) * (h3 - t3), f2 < t3 ? (c[4 * l2 + 0] = 0, c[4 * l2 + 1] = 0, c[4 * l2 + 2] = 0, c[4 * l2 + 3] = 0) : f2 < r2 ? m2(g, i3.outlineColor, (f2 - t3) / (r2 - t3)) : f2 < n4 ? [c[0], c[1], c[2], c[3]] = i3.outlineColor : f2 < h3 ? m2(i3.outlineColor, i3.fillColor, (f2 - n4) / (h3 - n4)) : [c[4 * l2 + 0], c[4 * l2 + 1], c[4 * l2 + 2], c[4 * l2 + 3]] = i3.fillColor, p3[4 * l2 + 0] = 255 * c[0], p3[4 * l2 + 1] = 255 * c[1], p3[4 * l2 + 2] = 255 * c[2], p3[4 * l2 + 3] = 255 * c[3];
    this._minMaxDistance[0] = t3, this._minMaxDistance[1] = h3, this._shadeTexChanged = true;
  }
  applyHighlightOptions(o2, t3) {
    this._shadeTex || (this._shadeTex = new E(o2, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D2.CLAMP_TO_EDGE, width: n3, height: 1, samplingMode: L.LINEAR })), this._shadeTexChanged && (this._shadeTex.updateData(0, 0, 0, n3, 1, this._texelData), this._shadeTexChanged = false), o2.bindTexture(this._shadeTex, J), t3.setUniform2fv("u_minMaxDistance", this._minMaxDistance);
  }
  destroy() {
    var _a;
    (_a = this._shadeTex) == null ? void 0 : _a.dispose(), this._shadeTex = null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/Container.js
var h2 = class extends r {
  constructor() {
    super(...arguments), this._childrenSet = /* @__PURE__ */ new Set(), this._needsSort = false, this.children = [], this._effectView = null, this._highlightOptions = null, this._highlightGradient = null;
  }
  get blendMode() {
    return this._blendMode;
  }
  set blendMode(e5) {
    this._blendMode = e5, this.requestRender();
  }
  get clips() {
    return this._clips;
  }
  set clips(e5) {
    this._clips = e5, this.children.forEach((t3) => t3.clips = e5);
  }
  get computedEffects() {
    var _a;
    return ((_a = this._effectView) == null ? void 0 : _a.effects) ?? null;
  }
  get effect() {
    var _a;
    return ((_a = this._effectView) == null ? void 0 : _a.effect) ?? "";
  }
  set effect(e5) {
    (this._effectView || e5) && (this._effectView || (this._effectView = new a2()), this._effectView.effect = e5, this.requestRender());
  }
  get highlightOptions() {
    return this._highlightOptions;
  }
  set highlightOptions(e5) {
    if (!e5)
      return this._highlightOptions = null, void (this._highlightGradient && (this._highlightGradient.destroy(), this._highlightGradient = null, this.requestRender()));
    this._highlightOptions && this._highlightOptions.equals(e5) || (this._highlightOptions = e5, this._highlightGradient || (this._highlightGradient = new f()), this._highlightGradient.setHighlightOptions(e5), this.requestRender());
  }
  updateTransitionProperties(e5, t3) {
    super.updateTransitionProperties(e5, t3), this._effectView && (this._effectView.transitionStep(e5, t3), this._effectView.transitioning && this.requestRender());
  }
  doRender(e5) {
    const t3 = this.createRenderParams(e5);
    this.renderChildren(t3);
  }
  addChild(e5) {
    return this.addChildAt(e5, this.children.length);
  }
  addChildAt(e5, t3 = this.children.length) {
    if (!e5)
      return e5;
    if (this.contains(e5))
      return e5;
    this._needsSort = true;
    const i3 = e5.parent;
    return i3 && i3 !== this && i3.removeChild(e5), t3 >= this.children.length ? this.children.push(e5) : this.children.splice(t3, 0, e5), this._childrenSet.add(e5), e5.parent = this, e5.stage = this.stage, this !== this.stage && (e5.clips = this.clips), this.requestRender(), e5;
  }
  contains(e5) {
    return this._childrenSet.has(e5);
  }
  endTransitions() {
    super.endTransitions(), this._effectView && (this._effectView.endTransitions(), this.requestRender());
  }
  removeAllChildren() {
    this._childrenSet.clear(), this._needsSort = true;
    for (const e5 of this.children)
      this !== this.stage && (e5.clips = null), e5.stage = null, e5.parent = null;
    this.children.length = 0;
  }
  removeChild(e5) {
    return this.contains(e5) ? this.removeChildAt(this.children.indexOf(e5)) : e5;
  }
  removeChildAt(e5) {
    if (e5 < 0 || e5 >= this.children.length)
      return null;
    this._needsSort = true;
    const t3 = this.children.splice(e5, 1)[0];
    return this._childrenSet.delete(t3), this !== this.stage && (t3.clips = null), t3.stage = null, t3.parent = null, t3;
  }
  sortChildren(e5) {
    this._needsSort && (this.children.sort(e5), this._needsSort = false);
  }
  beforeRender(e5) {
    super.beforeRender(e5);
    for (const t3 of this.children)
      t3.beforeRender(e5);
  }
  afterRender(e5) {
    super.afterRender(e5);
    for (const t3 of this.children)
      t3.afterRender(e5);
  }
  _createTransforms() {
    return { dvs: e3() };
  }
  onAttach() {
    super.onAttach();
    const e5 = this.stage;
    for (const t3 of this.children)
      t3.stage = e5;
  }
  onDetach() {
    super.onDetach();
    for (const e5 of this.children)
      e5.stage = null;
  }
  renderChildren(e5) {
    for (const t3 of this.children)
      t3.processRender(e5);
  }
  createRenderParams(e5) {
    return { ...e5, blendMode: this.blendMode, effects: this.computedEffects, globalOpacity: e5.globalOpacity * this.computedOpacity, inFadeTransition: this.inFadeTransition, highlightGradient: this._highlightGradient || e5.highlightGradient };
  }
};

export {
  a2 as a,
  r,
  o,
  t2 as t,
  i2 as i,
  h2 as h
};
//# sourceMappingURL=chunk-AATTIYMG.js.map
