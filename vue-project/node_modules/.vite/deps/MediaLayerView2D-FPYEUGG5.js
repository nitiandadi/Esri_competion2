import "./chunk-KBJSINBG.js";
import "./chunk-BVS3NILK.js";
import "./chunk-ZK7UMXRA.js";
import "./chunk-NOLTMJFN.js";
import "./chunk-LSZKZXKW.js";
import "./chunk-4FSIMQ5G.js";
import "./chunk-KSKGTAHP.js";
import "./chunk-6CHYNNZQ.js";
import "./chunk-OFMRQG54.js";
import {
  a as a3,
  w as w2
} from "./chunk-C5WM5BY7.js";
import {
  f as f4,
  u as u3
} from "./chunk-OJZLQ7WV.js";
import "./chunk-GR3QAE4S.js";
import {
  r as r9
} from "./chunk-XBPKFV6W.js";
import "./chunk-7XVHXPW5.js";
import "./chunk-GXJHN5TD.js";
import "./chunk-7FAY4Z4C.js";
import "./chunk-J6VS6FXY.js";
import "./chunk-3H5NJQM5.js";
import "./chunk-3QNFBCRR.js";
import "./chunk-F7LUL6DS.js";
import "./chunk-AZEN5UFW.js";
import "./chunk-TOX3CURZ.js";
import "./chunk-VV2CU7S7.js";
import "./chunk-FYA3X5C5.js";
import "./chunk-YA2ZN33B.js";
import "./chunk-DKDRIIV4.js";
import "./chunk-5SYMUP5B.js";
import "./chunk-R3MRUDAD.js";
import "./chunk-R6XKQWZ7.js";
import "./chunk-GSFOZZVA.js";
import "./chunk-LYEEAWXU.js";
import "./chunk-6SCM5LCL.js";
import "./chunk-223SE4BY.js";
import "./chunk-63WRUMNA.js";
import "./chunk-O2JKCGK6.js";
import {
  T
} from "./chunk-WAPZ634R.js";
import "./chunk-6YWY2BIN.js";
import "./chunk-ZJ5OO4BL.js";
import "./chunk-WEOA3BYJ.js";
import "./chunk-2B52LX6T.js";
import "./chunk-53FPJYCC.js";
import "./chunk-MSPZCZRZ.js";
import "./chunk-RURSJOSG.js";
import {
  j as j3,
  u as u2
} from "./chunk-M4OZDVBE.js";
import "./chunk-2JIMWZPW.js";
import "./chunk-UR7T2PHF.js";
import "./chunk-7FRYP2QO.js";
import {
  E as E2,
  f as f3
} from "./chunk-23AC3IC7.js";
import {
  E
} from "./chunk-GKD7ZY5C.js";
import "./chunk-ITU2WGYR.js";
import {
  r as r7
} from "./chunk-UHA44FM7.js";
import "./chunk-FSOPJKVB.js";
import "./chunk-L5V3AZEL.js";
import "./chunk-TQAOUM4T.js";
import "./chunk-TFWV44LH.js";
import "./chunk-RRNRSHX3.js";
import "./chunk-IEBU4QQL.js";
import {
  D,
  F,
  G,
  L,
  P
} from "./chunk-4M3AMTD4.js";
import {
  e as e2
} from "./chunk-A7PY25IH.js";
import "./chunk-MXRYGWSY.js";
import "./chunk-J5XD5R5N.js";
import "./chunk-KVNI5TTW.js";
import "./chunk-V2OTMPXZ.js";
import "./chunk-OEIEPNC6.js";
import "./chunk-U34LDFXK.js";
import {
  mt
} from "./chunk-CBTTC6SL.js";
import "./chunk-5VDXKCKM.js";
import "./chunk-XAGRIALY.js";
import {
  r as r6
} from "./chunk-6NPCB5RV.js";
import {
  y as y2
} from "./chunk-DDAW6PTY.js";
import "./chunk-HNKLBBNC.js";
import "./chunk-PNAN35AP.js";
import "./chunk-D2UI2BQN.js";
import "./chunk-5MV6T7MH.js";
import "./chunk-U3IHIDSP.js";
import "./chunk-34FJTA26.js";
import {
  t as t2
} from "./chunk-DUEDINK5.js";
import {
  e as e3
} from "./chunk-MZ267CZB.js";
import {
  r as r8
} from "./chunk-3DBV4JBL.js";
import {
  n
} from "./chunk-CJ2YD4VU.js";
import {
  M,
  f as f2,
  h as h3,
  i,
  r as r5
} from "./chunk-PRXITTX7.js";
import {
  r as r4
} from "./chunk-JGIZLXNQ.js";
import "./chunk-PXPM76YN.js";
import "./chunk-YWFASVWM.js";
import "./chunk-VHU47WM2.js";
import "./chunk-NWZTRS6O.js";
import "./chunk-77E52HT5.js";
import "./chunk-HBVUBDHI.js";
import "./chunk-26N6FACI.js";
import "./chunk-6XE2FUT4.js";
import {
  U
} from "./chunk-FQONAW2G.js";
import "./chunk-7Q77X7UJ.js";
import "./chunk-CP43AUSV.js";
import "./chunk-NOYTM57S.js";
import "./chunk-OPQ632ST.js";
import "./chunk-U6GC73UT.js";
import "./chunk-QS7JATZ7.js";
import "./chunk-6N2I7LNE.js";
import "./chunk-AETSRGIG.js";
import "./chunk-VEBWU4PY.js";
import "./chunk-AJY7W6KP.js";
import "./chunk-OO5RYTED.js";
import "./chunk-YIJX6PSI.js";
import "./chunk-MEYRAFYY.js";
import "./chunk-LSZOFED5.js";
import "./chunk-GHN5ZUCM.js";
import "./chunk-B4X5M3MB.js";
import "./chunk-CNIE5HLE.js";
import "./chunk-N5RJDK35.js";
import "./chunk-LC5BGIRA.js";
import "./chunk-ST7DNJJS.js";
import "./chunk-37ZA7E6R.js";
import "./chunk-46X6GKZ5.js";
import "./chunk-QUU4FGR5.js";
import "./chunk-2DDJXYOO.js";
import "./chunk-HM62IZSE.js";
import "./chunk-X2F6PX2U.js";
import "./chunk-HFRO4PG3.js";
import "./chunk-OF6BJKPA.js";
import "./chunk-BRWDGS6Y.js";
import "./chunk-PELFA5QO.js";
import "./chunk-FAK3SJAD.js";
import "./chunk-2CREJO6O.js";
import "./chunk-POTXVYUT.js";
import "./chunk-YMSHUIGU.js";
import "./chunk-T5PSDOZP.js";
import "./chunk-REIXEATJ.js";
import "./chunk-CCAF47ZU.js";
import "./chunk-YEFLZ2OV.js";
import "./chunk-CCNZLEW5.js";
import "./chunk-FGXNBIU5.js";
import "./chunk-EPJSBV4J.js";
import "./chunk-XP5MC636.js";
import "./chunk-TM5UW7VI.js";
import "./chunk-WVLEGBEW.js";
import "./chunk-NUSLMJR5.js";
import "./chunk-QX5IKXT7.js";
import "./chunk-ONU3G4LF.js";
import "./chunk-P26WTKBK.js";
import "./chunk-WAN4YZSB.js";
import "./chunk-OKST3HK4.js";
import "./chunk-BHQVXYUV.js";
import "./chunk-DKH5QOVM.js";
import "./chunk-X6SQQQR4.js";
import "./chunk-TNQLNDIQ.js";
import "./chunk-PSN7WPOI.js";
import "./chunk-FA3YUERM.js";
import "./chunk-LVRAFE6T.js";
import "./chunk-Y3KJPDCE.js";
import {
  u
} from "./chunk-LSUFI7PR.js";
import {
  c as c2
} from "./chunk-BQXNXAP2.js";
import {
  c
} from "./chunk-JT54I3AY.js";
import "./chunk-TNTTCGVB.js";
import "./chunk-DC3QI5ZE.js";
import "./chunk-EGHLQERQ.js";
import {
  a as a2,
  f,
  h as h2,
  l
} from "./chunk-FXMJJBXP.js";
import "./chunk-6YBCJ6DZ.js";
import "./chunk-5CMPUNQG.js";
import "./chunk-QJXSE36Y.js";
import "./chunk-WV4G3ROK.js";
import "./chunk-M3KO43BW.js";
import "./chunk-JT4JPYB6.js";
import {
  j as j2
} from "./chunk-SZO7ZKE4.js";
import "./chunk-7OAHPHOV.js";
import "./chunk-YMLMMCYX.js";
import "./chunk-I2U7UK6N.js";
import "./chunk-6TTVNN6M.js";
import "./chunk-3UXY2S4E.js";
import "./chunk-CPUYSXBP.js";
import "./chunk-MJFFZ3MM.js";
import "./chunk-7FMLQXIT.js";
import "./chunk-B6GJAETG.js";
import "./chunk-FC74MT6E.js";
import {
  R,
  s3,
  w2 as w,
  x
} from "./chunk-H2ENCYR3.js";
import "./chunk-SVHG5VY2.js";
import "./chunk-UADQEL54.js";
import "./chunk-FQ7L63IU.js";
import "./chunk-6K5VVUVI.js";
import "./chunk-S47644HM.js";
import "./chunk-QXPN4D5D.js";
import "./chunk-DLM7WQKI.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-7GTATSRF.js";
import "./chunk-MTJ2HM2W.js";
import {
  r as r3
} from "./chunk-PXVSWY3C.js";
import {
  j,
  r2
} from "./chunk-QLY5H3XF.js";
import {
  s,
  s2
} from "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import {
  h,
  r,
  t
} from "./chunk-WHB7G7RI.js";
import "./chunk-DFKQJ226.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/Overlay.js
var b = e2();
var A = class extends r9 {
  constructor(s4) {
    super(), this.elementView = s4, this.isWrapAround = false, this.perspectiveTransform = n(), this._vertices = new Float32Array(20), this._handles = [], this._handles.push(l(() => this.elementView.element.opacity, (e4) => this.opacity = e4, h2), l(() => [this.elementView.coords], () => {
      this.requestRender();
    }, h2), f(() => this.elementView.element.loaded, () => {
      const e4 = this.elementView.element;
      this.ready(), "video" === e4.type && r(e4.content) && this._handles.push(r2(e4.content, "play", () => this.requestRender()));
    }, h2)), s4.element.load().catch((t3) => {
      s.getLogger("esri.views.2d.layers.MediaLayerView2D").error(new s2("element-load-error", "Element cannot be displayed", { element: s4, error: t3 }));
    });
  }
  destroy() {
    this._handles.forEach((e4) => e4.remove()), this.texture = h(this.texture);
  }
  get dvsMat3() {
    return this.parent.dvsMat3;
  }
  beforeRender(e4) {
    const { context: t3 } = e4, r10 = this.elementView.element.content;
    if (r(r10)) {
      const e5 = r10 instanceof HTMLImageElement, i2 = r10 instanceof HTMLVideoElement, o = e5 ? r10.naturalWidth : i2 ? r10.videoWidth : r10.width, n2 = e5 ? r10.naturalHeight : i2 ? r10.videoHeight : r10.height;
      this._updatePerspectiveTransform(o, n2), this.texture ? i2 && !r10.paused && (this.texture.setData(r10), this.requestRender(), (t3.type === r8.WEBGL2 || c(o) && c(n2)) && this.texture.generateMipmap()) : (this.texture = new E(t3, { pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, samplingMode: L.LINEAR, wrapMode: D.CLAMP_TO_EDGE, width: o, height: n2, preMultiplyAlpha: true }, r10), (t3.type === r8.WEBGL2 || c(o) && c(n2)) && this.texture.generateMipmap(), i2 && !r10.paused && this.requestRender());
    }
    super.beforeRender(e4);
  }
  _createTransforms() {
    return null;
  }
  updateDrawCoords(e4, t3) {
    const r10 = this.elementView.coords;
    if (t(r10))
      return;
    const [s4, i2, o, a4] = r10.rings[0], m = this._vertices, { x: h4, y: c3 } = e4, p = 0 !== t3;
    p ? m.set([i2[0] - h4, i2[1] - c3, s4[0] - h4, s4[1] - c3, o[0] - h4, o[1] - c3, a4[0] - h4, a4[1] - c3, a4[0] - h4, a4[1] - c3, i2[0] + t3 - h4, i2[1] - c3, i2[0] + t3 - h4, i2[1] - c3, s4[0] + t3 - h4, s4[1] - c3, o[0] + t3 - h4, o[1] - c3, a4[0] + t3 - h4, a4[1] - c3]) : m.set([i2[0] - h4, i2[1] - c3, s4[0] - h4, s4[1] - c3, o[0] - h4, o[1] - c3, a4[0] - h4, a4[1] - c3]), this.isWrapAround = p;
  }
  getVAO(e4, t3, r10) {
    if (t(this.elementView.coords))
      return null;
    const s4 = this._vertices;
    if (this._vao)
      this._geometryVbo.setData(s4);
    else {
      this._geometryVbo = E2.createVertex(e4, F.DYNAMIC_DRAW, s4);
      const i2 = E2.createVertex(e4, F.STATIC_DRAW, new Uint16Array([0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1]));
      this._vao = new f3(e4, r10, t3, { geometry: this._geometryVbo, tex: i2 });
    }
    return this._vao;
  }
  _updatePerspectiveTransform(e4, t3) {
    const r10 = this._vertices;
    j3(b, [0, 0, e4, 0, 0, t3, e4, t3], [r10[0], r10[1], r10[4], r10[5], r10[2], r10[3], r10[6], r10[7]]), r4(this.perspectiveTransform, b[6] / b[8] * e4, b[7] / b[8] * t3);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/OverlayContainer.js
var M2 = class extends a3 {
  constructor() {
    super(...arguments), this._localOrigin = c2(0, 0), this._viewStateId = -1, this._dvsMat3 = e3(), this.requiresDedicatedFBO = false;
  }
  get dvsMat3() {
    return this._dvsMat3;
  }
  beforeRender(t3) {
    this._updateMatrices(t3), this._updateOverlays(t3, this.children);
    for (const e4 of this.children)
      e4.beforeRender(t3);
  }
  prepareRenderPasses(t3) {
    const e4 = t3.registerRenderPass({ name: "overlay", brushes: [w2.overlay], target: () => this.children, drawPhase: T.MAP });
    return [...super.prepareRenderPasses(t3), e4];
  }
  _updateMatrices(t3) {
    const { state: e4 } = t3, { id: n2, size: h4, pixelRatio: l2, resolution: m, rotation: f5, viewpoint: u4, displayMat3: M3 } = e4;
    if (this._viewStateId === n2)
      return;
    const v2 = Math.PI / 180 * f5, _2 = l2 * h4[0], w3 = l2 * h4[1], { x: y3, y: g } = u4.targetGeometry, j4 = U(y3, e4.spatialReference);
    this._localOrigin.x = j4, this._localOrigin.y = g;
    const b2 = m * _2, R3 = m * w3, O = r5(this._dvsMat3);
    i(O, O, M3), M(O, O, t2(_2 / 2, w3 / 2)), f2(O, O, r7(_2 / b2, -w3 / R3, 1)), h3(O, O, -v2), this._viewStateId = n2;
  }
  _updateOverlays(e4, s4) {
    const { state: r10 } = e4, { rotation: o, spatialReference: a4, worldScreenWidth: i2, size: n2, viewpoint: c3 } = r10, p = this._localOrigin;
    let d = 0;
    const m = R(a4);
    if (m && a4.isWrappable) {
      const e5 = n2[0], h4 = n2[1], f5 = 180 / Math.PI * o, u4 = Math.abs(Math.cos(f5)), M3 = Math.abs(Math.sin(f5)), v2 = Math.round(e5 * u4 + h4 * M3), [_2, w3] = m.valid, y3 = mt(a4), { x: g, y: j4 } = c3.targetGeometry, b2 = [g, j4], R3 = [0, 0];
      r10.toScreen(R3, b2);
      const O = [0, 0];
      let P2;
      P2 = v2 > i2 ? 0.5 * i2 : 0.5 * v2;
      const x2 = Math.floor((g + 0.5 * y3) / y3), C = _2 + x2 * y3, D2 = w3 + x2 * y3, I = [R3[0] + P2, 0];
      r10.toMap(O, I), O[0] > D2 && (d = y3), I[0] = R3[0] - P2, r10.toMap(O, I), O[0] < C && (d = -y3);
      for (const r11 of s4) {
        const e6 = r11.elementView.bounds;
        if (t(e6))
          continue;
        const [s5, , o2] = e6;
        s5 < _2 && o2 > _2 ? r11.updateDrawCoords(p, y3) : o2 > w3 && s5 < w3 ? r11.updateDrawCoords(p, -y3) : r11.updateDrawCoords(p, d);
      }
    } else
      for (const t3 of s4)
        t3.updateDrawCoords(p, d);
  }
};

// node_modules/@arcgis/core/views/2d/layers/MediaLayerView2D.js
var _ = class extends f4(u3) {
  constructor() {
    super(...arguments), this._overlayContainer = null, this._fetchQueue = null, this._tileStrategy = null, this._elementReferences = /* @__PURE__ */ new Map(), this._debugGraphicsView = null, this.layer = null, this.elements = new j2();
  }
  attach() {
    this.addAttachHandles([a2(() => this.layer.effectiveSource, "refresh", () => {
      for (const e4 of this._tileStrategy.tiles)
        this._updateTile(e4);
      this.requestUpdate();
    }), a2(() => this.layer.effectiveSource, "change", ({ element: e4 }) => this._elementUpdateHandler(e4))]), this._overlayContainer = new M2(), this.container.addChild(this._overlayContainer), this._fetchQueue = new y2({ tileInfoView: this.view.featuresTilingScheme, concurrency: 10, process: (e4, t3) => this._queryElements(e4, t3) }), this._tileStrategy = new r6({ cachePolicy: "purge", resampling: true, acquireTile: (e4) => this._acquireTile(e4), releaseTile: (e4) => this._releaseTile(e4), tileInfoView: this.view.featuresTilingScheme }), this.requestUpdate();
  }
  detach() {
    var _a;
    this.elements.removeAll(), this._tileStrategy.destroy(), this._fetchQueue.destroy(), this._overlayContainer.removeAllChildren(), this.container.removeAllChildren(), this._elementReferences.clear(), (_a = this._debugGraphicsView) == null ? void 0 : _a.destroy();
  }
  supportsSpatialReference(e4) {
    return true;
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  update(e4) {
    var _a;
    this._tileStrategy.update(e4), (_a = this._debugGraphicsView) == null ? void 0 : _a.update(e4);
  }
  async hitTest(e4, t3) {
    const r10 = [], s4 = e4.normalize(), n2 = [s4.x, s4.y];
    for (const { projectedElement: { normalizedCoords: o, element: l2 } } of this._elementReferences.values())
      r(o) && s3(o.rings, n2) && r10.push({ type: "media", element: l2, layer: this.layer, mapPoint: e4 });
    return r10.reverse();
  }
  canResume() {
    return null != this.layer.source && super.canResume();
  }
  async doRefresh() {
    this._fetchQueue.reset(), this._tileStrategy.tiles.forEach((e4) => this._updateTile(e4));
  }
  _acquireTile(e4) {
    const t3 = new E3(e4.clone());
    return this._updateTile(t3), t3;
  }
  _updateTile(e4) {
    this.updatingHandles.addPromise(this._fetchQueue.push(e4.key).then((t3) => {
      const [r10, s4] = e4.setElements(t3);
      this._referenceElements(e4, r10), this._dereferenceElements(e4, s4), this.requestUpdate();
    }, (e5) => {
      j(e5) || s.getLogger(this.declaredClass).error(e5);
    }));
  }
  _releaseTile(e4) {
    this._fetchQueue.abort(e4.key.id), e4.elements && this._dereferenceElements(e4, e4.elements), this.requestUpdate();
  }
  async _queryElements(e4, t3) {
    const r10 = this.layer.effectiveSource;
    if (t(r10))
      return [];
    this.view.featuresTilingScheme.getTileBounds(v, e4, true);
    const s4 = new w({ xmin: v[0], ymin: v[1], xmax: v[2], ymax: v[3], spatialReference: this.view.spatialReference });
    return r10.queryElements(s4, t3);
  }
  _referenceElements(e4, t3) {
    const r10 = this.layer.source;
    if (!t(r10))
      for (const s4 of t3)
        this._referenceElement(e4, s4);
  }
  _referenceElement(e4, t3) {
    r3(this._elementReferences, t3.uid, () => {
      const e5 = new u2({ element: t3, spatialReference: this.view.spatialReference }), r10 = new A(e5);
      this._overlayContainer.addChild(r10), this.elements.add(t3);
      let s4 = null;
      return { tiles: /* @__PURE__ */ new Set(), projectedElement: e5, overlay: r10, debugGraphic: s4 };
    }).tiles.add(e4);
  }
  _dereferenceElements(e4, t3) {
    for (const r10 of t3)
      this._dereferenceElement(e4, r10);
  }
  _dereferenceElement(e4, t3) {
    var _a;
    const r10 = this._elementReferences.get(t3.uid);
    r10.tiles.delete(e4), r10.tiles.size || (this._overlayContainer.removeChild(r10.overlay), r10.overlay.destroy(), r10.projectedElement.destroy(), this._elementReferences.delete(t3.uid), this.elements.remove(t3), (_a = this._debugGraphicsView) == null ? void 0 : _a.graphics.remove(r10.debugGraphic));
  }
  _elementUpdateHandler(e4) {
    var _a;
    let t3 = this._elementReferences.get(e4.uid);
    if (t3) {
      const r11 = t3.projectedElement.normalizedCoords;
      if (t(r11))
        return this._overlayContainer.removeChild(t3.overlay), t3.overlay.destroy(), t3.projectedElement.destroy(), this._elementReferences.delete(e4.uid), this.elements.remove(e4), void ((_a = this._debugGraphicsView) == null ? void 0 : _a.graphics.remove(t3.debugGraphic));
      const s4 = [], i2 = [];
      for (const e5 of this._tileStrategy.tiles) {
        const n2 = R2(this.view.featuresTilingScheme, e5, r11);
        t3.tiles.has(e5) ? n2 || i2.push(e5) : n2 && s4.push(e5);
      }
      for (const t4 of s4)
        this._referenceElement(t4, e4);
      for (const t4 of i2)
        this._dereferenceElement(t4, e4);
      return t3 = this._elementReferences.get(e4.uid), void ((t3 == null ? void 0 : t3.debugGraphic) && (t3.debugGraphic.geometry = t3.projectedElement.normalizedCoords, this._debugGraphicsView.graphicUpdateHandler({ graphic: t3.debugGraphic, property: "geometry" })));
    }
    const r10 = new u2({ element: e4, spatialReference: this.view.spatialReference }).normalizedCoords;
    if (r(r10))
      for (const s4 of this._tileStrategy.tiles) {
        R2(this.view.featuresTilingScheme, s4, r10) && this._referenceElement(s4, e4);
      }
  }
};
e([y()], _.prototype, "_fetchQueue", void 0), e([y()], _.prototype, "layer", void 0), e([y({ readOnly: true })], _.prototype, "elements", void 0), _ = e([a("esri.views.2d.layers.MediaLayerView2D")], _);
var v = u();
var T2 = { xmin: 0, ymin: 0, xmax: 0, ymax: 0 };
function R2(e4, t3, r10) {
  return e4.getTileBounds(v, t3.key, true), T2.xmin = v[0], T2.ymin = v[1], T2.xmax = v[2], T2.ymax = v[3], x(T2, r10);
}
var E3 = class {
  constructor(e4) {
    this.key = e4, this.elements = null, this.isReady = false, this.visible = true;
  }
  setElements(e4) {
    const t3 = [], r10 = new Set(this.elements);
    this.elements = e4;
    for (const s4 of e4)
      r10.has(s4) ? r10.delete(s4) : t3.push(s4);
    return this.isReady = true, [t3, Array.from(r10)];
  }
  destroy() {
  }
};
var S = _;
export {
  S as default
};
//# sourceMappingURL=MediaLayerView2D-FPYEUGG5.js.map
