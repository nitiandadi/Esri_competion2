import {
  i
} from "./chunk-5QO4BYXO.js";
import "./chunk-ZIWT55SL.js";
import {
  ae
} from "./chunk-YVWMHTJA.js";
import "./chunk-C47NUFM3.js";
import "./chunk-OXDZTKIK.js";
import "./chunk-JOI7RZGI.js";
import "./chunk-C6SENRFO.js";
import "./chunk-G3IR6EOM.js";
import "./chunk-6CHYNNZQ.js";
import "./chunk-OFMRQG54.js";
import "./chunk-W4RTPEF7.js";
import {
  f as f2,
  u
} from "./chunk-2PEMPHHT.js";
import "./chunk-KK7UXBV2.js";
import "./chunk-BLQJFVYJ.js";
import "./chunk-7XVHXPW5.js";
import "./chunk-J6VS6FXY.js";
import "./chunk-3H5NJQM5.js";
import "./chunk-LLOJIW4K.js";
import "./chunk-QX7RONCE.js";
import "./chunk-AZEN5UFW.js";
import "./chunk-5BAT5OP4.js";
import "./chunk-VV2CU7S7.js";
import "./chunk-FYA3X5C5.js";
import "./chunk-B3A3THPO.js";
import "./chunk-DKDRIIV4.js";
import "./chunk-5SYMUP5B.js";
import "./chunk-R3MRUDAD.js";
import "./chunk-R6XKQWZ7.js";
import "./chunk-N7UECSSE.js";
import "./chunk-LYEEAWXU.js";
import "./chunk-6SCM5LCL.js";
import "./chunk-223SE4BY.js";
import "./chunk-63WRUMNA.js";
import "./chunk-O2JKCGK6.js";
import "./chunk-WAPZ634R.js";
import "./chunk-7F3YO5N7.js";
import "./chunk-AEPSMJZJ.js";
import "./chunk-53FPJYCC.js";
import "./chunk-MSPZCZRZ.js";
import "./chunk-RURSJOSG.js";
import {
  D2 as D,
  O,
  b2 as b,
  f,
  g,
  h as h2,
  h2 as h3
} from "./chunk-VMIJ2Q5R.js";
import "./chunk-L225EF7W.js";
import "./chunk-23AC3IC7.js";
import "./chunk-GKD7ZY5C.js";
import "./chunk-UHA44FM7.js";
import "./chunk-TQAOUM4T.js";
import "./chunk-TFWV44LH.js";
import "./chunk-RRNRSHX3.js";
import "./chunk-IEBU4QQL.js";
import "./chunk-4M3AMTD4.js";
import "./chunk-MXRYGWSY.js";
import "./chunk-R4BFOFGL.js";
import "./chunk-KVNI5TTW.js";
import "./chunk-U34LDFXK.js";
import "./chunk-L6KWUR6B.js";
import "./chunk-OEIEPNC6.js";
import "./chunk-VG55DFRV.js";
import "./chunk-WQ64YIYM.js";
import "./chunk-NXYKN3ZF.js";
import "./chunk-5MAK42GD.js";
import "./chunk-NWZTRS6O.js";
import "./chunk-77E52HT5.js";
import "./chunk-KYJD6PVR.js";
import "./chunk-RITPHS54.js";
import "./chunk-D2UI2BQN.js";
import "./chunk-5MV6T7MH.js";
import "./chunk-U3IHIDSP.js";
import "./chunk-34FJTA26.js";
import "./chunk-DUEDINK5.js";
import "./chunk-MZ267CZB.js";
import "./chunk-3DBV4JBL.js";
import "./chunk-UTGANG7C.js";
import "./chunk-CJ2YD4VU.js";
import "./chunk-26N6FACI.js";
import "./chunk-PRXITTX7.js";
import "./chunk-JGIZLXNQ.js";
import "./chunk-PXPM76YN.js";
import "./chunk-G63AQLOB.js";
import "./chunk-M5GIVS5Q.js";
import "./chunk-XXDTEEJA.js";
import "./chunk-OPQ632ST.js";
import "./chunk-U6GC73UT.js";
import "./chunk-RSGOERDK.js";
import "./chunk-WVLEGBEW.js";
import {
  l as l2
} from "./chunk-TQCVRALN.js";
import "./chunk-KIR65PYA.js";
import "./chunk-N5RJDK35.js";
import "./chunk-DP34NAR5.js";
import "./chunk-OP7TT6MW.js";
import "./chunk-AJY7W6KP.js";
import "./chunk-G65A4RB3.js";
import "./chunk-MN4E5VOA.js";
import "./chunk-ST7DNJJS.js";
import "./chunk-2CREJO6O.js";
import "./chunk-RVPWRWBW.js";
import "./chunk-EPJSBV4J.js";
import "./chunk-SLPOHICA.js";
import "./chunk-REIXEATJ.js";
import "./chunk-7YGY53FV.js";
import "./chunk-XP5MC636.js";
import "./chunk-IGOXVXHJ.js";
import "./chunk-6YBCJ6DZ.js";
import "./chunk-H5PGGDUF.js";
import "./chunk-XS2IGMN6.js";
import "./chunk-YEBACBC7.js";
import "./chunk-UKGDL4FF.js";
import "./chunk-ZV33SC25.js";
import "./chunk-ONJXOTQ7.js";
import "./chunk-4VX5PWQN.js";
import "./chunk-K55CPJL4.js";
import "./chunk-HM62IZSE.js";
import "./chunk-2OJTWNQ6.js";
import "./chunk-QKWZO2WR.js";
import "./chunk-GEQPBGLO.js";
import {
  h,
  l
} from "./chunk-2UAIGHM2.js";
import "./chunk-CCAF47ZU.js";
import "./chunk-CCNZLEW5.js";
import "./chunk-FGXNBIU5.js";
import "./chunk-KGIL42MH.js";
import "./chunk-A3HP4ESO.js";
import "./chunk-Z5QBM3A6.js";
import "./chunk-MRALC5D7.js";
import "./chunk-CYZ4XVBT.js";
import "./chunk-LVRAFE6T.js";
import "./chunk-XF2RZJFH.js";
import "./chunk-HRFBINZY.js";
import "./chunk-WAN4YZSB.js";
import "./chunk-EALW5DHT.js";
import "./chunk-EAKUFEPO.js";
import "./chunk-EQMIUIFH.js";
import "./chunk-KK57CPHE.js";
import "./chunk-7MMTDLQQ.js";
import "./chunk-TJWUU7NW.js";
import "./chunk-Q62HELM6.js";
import "./chunk-BQXNXAP2.js";
import "./chunk-BHQVXYUV.js";
import "./chunk-DKH5QOVM.js";
import "./chunk-JT54I3AY.js";
import "./chunk-DC3QI5ZE.js";
import "./chunk-TNTTCGVB.js";
import "./chunk-EGHLQERQ.js";
import "./chunk-6CVKQGVU.js";
import "./chunk-2HZTCGYV.js";
import "./chunk-Z3YY72G4.js";
import "./chunk-M3KO43BW.js";
import "./chunk-LRFOTULU.js";
import "./chunk-HPP5IXU5.js";
import "./chunk-UADQEL54.js";
import "./chunk-4D6JGHEF.js";
import "./chunk-CT6YILLI.js";
import {
  j
} from "./chunk-LJAKPJDJ.js";
import "./chunk-CCWBAM3L.js";
import "./chunk-TKWZACTO.js";
import "./chunk-6K5VVUVI.js";
import "./chunk-DOQX2NNO.js";
import "./chunk-MJFFZ3MM.js";
import "./chunk-2ZX6RZTI.js";
import "./chunk-5Q7F7FJ6.js";
import "./chunk-XFNXUG2G.js";
import "./chunk-27R7KBOL.js";
import "./chunk-RDTHWDIE.js";
import "./chunk-EAFLFTSD.js";
import "./chunk-DOVXDFWE.js";
import "./chunk-M4BAPJ3L.js";
import "./chunk-QXPN4D5D.js";
import "./chunk-KGIB6IYW.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-3PPVODAA.js";
import "./chunk-MTJ2HM2W.js";
import "./chunk-PXVSWY3C.js";
import "./chunk-WTKFW2TD.js";
import "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import {
  r,
  t
} from "./chunk-WHB7G7RI.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/views/2d/layers/RouteLayerView2D.js
var k = Object.freeze({ remove() {
}, pause() {
}, resume() {
} });
var v = ["route-info", "direction-line", "direction-point", "polygon-barrier", "polyline-barrier", "point-barrier", "stop"];
var M = { graphic: null, property: null, oldValue: null, newValue: null };
function V(t2) {
  return t2 instanceof b || t2 instanceof h2 || t2 instanceof O || t2 instanceof g || t2 instanceof f || t2 instanceof h3 || t2 instanceof D;
}
function j2(t2) {
  return j.isCollection(t2) && t2.length && V(t2.getItemAt(0));
}
function G(t2) {
  return Array.isArray(t2) && t2.length > 0 && V(t2[0]);
}
var I = class extends f2(u) {
  constructor() {
    super(...arguments), this._graphics = new j(), this._highlightIds = /* @__PURE__ */ new Map(), this._networkFeatureMap = /* @__PURE__ */ new Map(), this._networkGraphicMap = /* @__PURE__ */ new Map();
  }
  get _routeItems() {
    return new l2({ getCollections: () => r(this.layer) && !this.destroyed ? [r(this.layer.routeInfo) ? new j([this.layer.routeInfo]) : null, this.layer.directionLines, this.layer.directionPoints, this.layer.polygonBarriers, this.layer.polylineBarriers, this.layer.pointBarriers, this.layer.stops] : [] });
  }
  initialize() {
    this.updatingHandles.addOnCollectionChange(() => this._routeItems, (t2) => this._routeItemsChanged(t2), h);
  }
  destroy() {
    var _a;
    this._networkFeatureMap.clear(), this._networkGraphicMap.clear(), this._graphics.removeAll(), (_a = this._get("_routeItems")) == null ? void 0 : _a.destroy();
  }
  attach() {
    this._createGraphicsView();
  }
  detach() {
    this._destroyGraphicsView();
  }
  async fetchPopupFeatures(t2) {
    return this._graphicsView.hitTest(t2).filter((t3) => !!t3.popupTemplate);
  }
  highlight(t2) {
    let e2;
    e2 = V(t2) ? [this._getNetworkFeatureUid(t2)] : G(t2) ? t2.map((t3) => this._getNetworkFeatureUid(t3)) : j2(t2) ? t2.map((t3) => this._getNetworkFeatureUid(t3)).toArray() : [t2.uid];
    const r2 = e2.filter(r);
    return r2.length ? (this._addHighlight(r2), { remove: () => this._removeHighlight(r2) }) : k;
  }
  async hitTest(t2, e2) {
    if (this.suspended)
      return null;
    const r2 = this._graphicsView.hitTest(t2).filter(r).map((t3) => this._networkGraphicMap.get(t3));
    if (!r2.length)
      return null;
    const { layer: s } = this;
    return r2.reverse().map((e3) => ({ type: "route", layer: s, mapPoint: t2, networkFeature: e3 }));
  }
  isUpdating() {
    return this._graphicsView.updating;
  }
  moveStart() {
  }
  moveEnd() {
  }
  update(t2) {
    this._graphicsView.processUpdate(t2);
  }
  viewChange() {
    this._graphicsView.viewChange();
  }
  _addHighlight(t2) {
    for (const e2 of t2)
      if (this._highlightIds.has(e2)) {
        const t3 = this._highlightIds.get(e2);
        this._highlightIds.set(e2, t3 + 1);
      } else
        this._highlightIds.set(e2, 1);
    this._updateHighlight();
  }
  _createGraphic(t2) {
    const e2 = t2.toGraphic();
    return e2.layer = this.layer, e2.sourceLayer = this.layer, e2;
  }
  _createGraphicsView() {
    const t2 = this.view, e2 = () => this.requestUpdate(), r2 = new i(t2.featuresTilingScheme);
    this._graphicsView = new ae({ container: r2, graphics: this._graphics, requestUpdateCallback: e2, view: t2 }), this.container.addChild(r2), this._updateHighlight();
  }
  _destroyGraphicsView() {
    this.container.removeChild(this._graphicsView.container), this._graphicsView.destroy();
  }
  _getDrawOrder(t2) {
    const e2 = this._networkGraphicMap.get(t2);
    return v.indexOf(e2.type);
  }
  _getNetworkFeatureUid(t2) {
    return this._networkFeatureMap.has(t2) ? this._networkFeatureMap.get(t2).uid : null;
  }
  _removeHighlight(t2) {
    for (const e2 of t2)
      if (this._highlightIds.has(e2)) {
        const t3 = this._highlightIds.get(e2) - 1;
        0 === t3 ? this._highlightIds.delete(e2) : this._highlightIds.set(e2, t3);
      }
    this._updateHighlight();
  }
  _routeItemsChanged(t2) {
    if (t2.removed.length) {
      this._graphics.removeMany(t2.removed.map((t3) => {
        const e2 = this._networkFeatureMap.get(t3);
        return this._networkFeatureMap.delete(t3), this._networkGraphicMap.delete(e2), e2;
      }));
      for (const e2 of t2.removed)
        this.removeHandles(e2);
    }
    if (t2.added.length) {
      this._graphics.addMany(t2.added.map((t3) => {
        const e2 = this._createGraphic(t3);
        return t(e2.symbol) ? null : (this._networkFeatureMap.set(t3, e2), this._networkGraphicMap.set(e2, t3), e2);
      }).filter(r));
      for (const e2 of t2.added)
        this.addHandles([l(() => e2.geometry, (t3, r2) => {
          this._updateGraphic(e2, "geometry", t3, r2);
        }), l(() => e2.symbol, (t3, r2) => {
          this._updateGraphic(e2, "symbol", t3, r2);
        })], e2);
      this._graphics.sort((t3, e2) => this._getDrawOrder(t3) - this._getDrawOrder(e2));
    }
  }
  _updateGraphic(t2, e2, r2, i2) {
    if (!this._networkFeatureMap.has(t2)) {
      const e3 = this._createGraphic(t2);
      return this._networkFeatureMap.set(t2, e3), this._networkGraphicMap.set(e3, t2), void this._graphics.add(e3);
    }
    const s = this._networkFeatureMap.get(t2);
    s[e2] = r2, M.graphic = s, M.property = e2, M.oldValue = i2, M.newValue = r2, this._graphicsView.graphicUpdateHandler(M);
  }
  _updateHighlight() {
    const t2 = Array.from(this._highlightIds.keys());
    this._graphicsView.setHighlight(t2);
  }
};
e([y()], I.prototype, "_graphics", void 0), e([y()], I.prototype, "_routeItems", null), I = e([a("esri.views.2d.layers.RouteLayerView2D")], I);
var F = I;
export {
  F as default
};
//# sourceMappingURL=RouteLayerView2D-YLBZ7XWN.js.map
