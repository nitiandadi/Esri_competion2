import {
  I,
  L,
  T
} from "./chunk-K6WVLQY6.js";
import {
  a as a2,
  f as f2,
  g as g3,
  m,
  w
} from "./chunk-TCBSWCXP.js";
import {
  a,
  i as i2,
  o
} from "./chunk-W7AW2ZTF.js";
import {
  g as g2
} from "./chunk-MZWXV5BA.js";
import {
  ee
} from "./chunk-P7WHLALO.js";
import "./chunk-MWZKAEWD.js";
import "./chunk-2PTKNNW7.js";
import "./chunk-MXRYGWSY.js";
import "./chunk-KPS7FFP3.js";
import {
  f,
  g
} from "./chunk-J5XD5R5N.js";
import "./chunk-AWGMYJGH.js";
import "./chunk-JLELSJK5.js";
import "./chunk-CEQ74MRR.js";
import "./chunk-Y5TO5CEM.js";
import "./chunk-BKGJHAJX.js";
import "./chunk-V2OTMPXZ.js";
import "./chunk-OEIEPNC6.js";
import "./chunk-2E4SJPYR.js";
import "./chunk-U34LDFXK.js";
import "./chunk-QARU3EBQ.js";
import "./chunk-PXPM76YN.js";
import "./chunk-6XE2FUT4.js";
import "./chunk-2VRWGZDB.js";
import "./chunk-FQONAW2G.js";
import "./chunk-7Q77X7UJ.js";
import {
  ct,
  nt,
  ot,
  st,
  ut
} from "./chunk-NOYTM57S.js";
import "./chunk-OPQ632ST.js";
import "./chunk-U6GC73UT.js";
import {
  j as j2
} from "./chunk-FAK3SJAD.js";
import "./chunk-2CREJO6O.js";
import {
  r as r2
} from "./chunk-POTXVYUT.js";
import "./chunk-YMSHUIGU.js";
import "./chunk-T5PSDOZP.js";
import "./chunk-REIXEATJ.js";
import "./chunk-YEFLZ2OV.js";
import {
  i
} from "./chunk-ICG3HFWD.js";
import "./chunk-EPJSBV4J.js";
import "./chunk-XP5MC636.js";
import "./chunk-TM5UW7VI.js";
import "./chunk-WVLEGBEW.js";
import "./chunk-Y3KJPDCE.js";
import "./chunk-LSUFI7PR.js";
import "./chunk-JT54I3AY.js";
import "./chunk-TNTTCGVB.js";
import "./chunk-DC3QI5ZE.js";
import "./chunk-EGHLQERQ.js";
import "./chunk-FXMJJBXP.js";
import "./chunk-6YBCJ6DZ.js";
import {
  U
} from "./chunk-QJXSE36Y.js";
import "./chunk-WV4G3ROK.js";
import "./chunk-M3KO43BW.js";
import "./chunk-I2U7UK6N.js";
import {
  M
} from "./chunk-6TTVNN6M.js";
import "./chunk-3UXY2S4E.js";
import "./chunk-CPUYSXBP.js";
import "./chunk-MJFFZ3MM.js";
import "./chunk-7FMLQXIT.js";
import {
  c as c2
} from "./chunk-B6GJAETG.js";
import "./chunk-FC74MT6E.js";
import {
  E,
  c
} from "./chunk-H2ENCYR3.js";
import "./chunk-SVHG5VY2.js";
import "./chunk-FQ7L63IU.js";
import "./chunk-S47644HM.js";
import "./chunk-QXPN4D5D.js";
import "./chunk-DLM7WQKI.js";
import "./chunk-7GTATSRF.js";
import "./chunk-MTJ2HM2W.js";
import "./chunk-PXVSWY3C.js";
import {
  j
} from "./chunk-QLY5H3XF.js";
import {
  s,
  s2
} from "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import {
  r
} from "./chunk-WHB7G7RI.js";
import "./chunk-DFKQJ226.js";

// node_modules/@arcgis/core/layers/graphics/sources/geojson/GeoJSONSourceWorker.js
var C = { hasAttachments: false, capabilities: "query, editing, create, delete, update", useStandardizedQueries: true, supportsCoordinatesQuantization: true, supportsReturningQueryGeometry: true, advancedQueryCapabilities: { supportsQueryAttachments: false, supportsStatistics: true, supportsPercentileStatistics: true, supportsReturningGeometryCentroid: true, supportsQueryWithDistance: true, supportsDistinct: true, supportsReturningQueryExtent: true, supportsReturningGeometryProperties: false, supportsHavingClause: true, supportsOrderBy: true, supportsPagination: true, supportsQueryWithResultType: false, supportsSqlExpression: true, supportsDisjointSpatialRel: true } };
var D = class {
  constructor() {
    this._queryEngine = null, this._snapshotFeatures = async (e) => {
      const t = await this._fetch(e);
      return this._createFeatures(t);
    };
  }
  destroy() {
    var _a;
    (_a = this._queryEngine) == null ? void 0 : _a.destroy(), this._queryEngine = this._fieldsIndex = this._createDefaultAttributes = null;
  }
  async load(e, t = {}) {
    this._loadOptions = { url: e.url, customParameters: e.customParameters };
    const i3 = [];
    await this._checkProjection(e.spatialReference);
    let r3 = null;
    e.url && (r3 = await this._fetch(t == null ? void 0 : t.signal));
    const n = L(r3, { geometryType: e.geometryType }), a3 = e.fields || n.fields || [], u = null != e.hasZ ? e.hasZ : n.hasZ, l = n.geometryType;
    let d = e.objectIdField || n.objectIdFieldName || "__OBJECTID";
    const p = e.spatialReference || c;
    let c3 = e.timeInfo;
    a3 === n.fields && n.unknownFields.length > 0 && i3.push({ name: "geojson-layer:unknown-field-types", message: "Some fields types couldn't be inferred from the features and were dropped", details: { unknownFields: n.unknownFields } });
    let h = new r2(a3).get(d);
    h ? ("esriFieldTypeString" !== h.type && (h.type = "esriFieldTypeOID"), h.editable = false, h.nullable = false, d = h.name) : (h = { alias: d, name: d, type: "string" === n.objectIdFieldType ? "esriFieldTypeString" : "esriFieldTypeOID", editable: false, nullable: false }, a3.unshift(h));
    const m2 = {};
    for (const o2 of a3) {
      if (null == o2.name && (o2.name = o2.alias), null == o2.alias && (o2.alias = o2.name), !o2.name)
        throw new s2("geojson-layer:invalid-field-name", "field name is missing", { field: o2 });
      if (!i.jsonValues.includes(o2.type))
        throw new s2("geojson-layer:invalid-field-type", `invalid type for field "${o2.name}"`, { field: o2 });
      if (o2.name !== h.name) {
        const e2 = M(o2);
        void 0 !== e2 && (m2[o2.name] = e2);
      }
    }
    this._fieldsIndex = new r2(a3);
    const f3 = this._fieldsIndex.requiredFields.indexOf(h);
    if (f3 > -1 && this._fieldsIndex.requiredFields.splice(f3, 1), c3) {
      if (c3.startTimeField) {
        const e2 = this._fieldsIndex.get(c3.startTimeField);
        e2 ? (c3.startTimeField = e2.name, e2.type = "esriFieldTypeDate") : c3.startTimeField = null;
      }
      if (c3.endTimeField) {
        const e2 = this._fieldsIndex.get(c3.endTimeField);
        e2 ? (c3.endTimeField = e2.name, e2.type = "esriFieldTypeDate") : c3.endTimeField = null;
      }
      if (c3.trackIdField) {
        const e2 = this._fieldsIndex.get(c3.trackIdField);
        e2 ? c3.trackIdField = e2.name : (c3.trackIdField = null, i3.push({ name: "geojson-layer:invalid-timeInfo-trackIdField", message: "trackIdField is missing", details: { timeInfo: c3 } }));
      }
      c3.startTimeField || c3.endTimeField || (i3.push({ name: "geojson-layer:invalid-timeInfo", message: "startTimeField and endTimeField are missing", details: { timeInfo: c3 } }), c3 = null);
    }
    const I2 = l ? o(l) : void 0, j3 = { warnings: i3, featureErrors: [], layerDefinition: { ...C, drawingInfo: I2 ?? void 0, templates: a(m2), extent: void 0, geometryType: l, objectIdField: d, fields: a3, hasZ: !!u, timeInfo: c3 } };
    this._queryEngine = new ee({ fields: a3, geometryType: l, hasM: false, hasZ: u, objectIdField: d, spatialReference: p, timeInfo: c3, featureStore: new g2({ geometryType: l, hasM: false, hasZ: u }), cacheSpatialQueries: true }), this._createDefaultAttributes = i2(m2, d);
    const w2 = await this._createFeatures(r3);
    this._objectIdGenerator = this._createObjectIdGenerator(this._queryEngine, w2);
    const T2 = this._normalizeFeatures(w2, j3.warnings, j3.featureErrors);
    this._queryEngine.featureStore.addMany(T2);
    const { fullExtent: x, timeExtent: q } = await this._queryEngine.fetchRecomputedExtents();
    if (j3.layerDefinition.extent = x, q) {
      const { start: e2, end: t2 } = q;
      j3.layerDefinition.timeInfo.timeExtent = [e2, t2];
    }
    return j3;
  }
  async applyEdits(e) {
    const { spatialReference: t, geometryType: s3 } = this._queryEngine;
    return await Promise.all([w(t, s3), f(e.adds, t), f(e.updates, t)]), await this._waitSnapshotComplete(), this._applyEdits(e);
  }
  async queryFeatures(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQuery(e, t.signal);
  }
  async queryFeatureCount(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForCount(e, t.signal);
  }
  async queryObjectIds(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForIds(e, t.signal);
  }
  async queryExtent(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForExtent(e, t.signal);
  }
  async querySnapping(e, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForSnapping(e, t.signal);
  }
  async refresh(e) {
    var _a;
    this._loadOptions.customParameters = e, (_a = this._snapshotTask) == null ? void 0 : _a.abort(), this._snapshotTask = j2(this._snapshotFeatures), this._snapshotTask.promise.then((e2) => {
      this._queryEngine.featureStore.clear(), this._objectIdGenerator = this._createObjectIdGenerator(this._queryEngine, e2);
      const t = this._normalizeFeatures(e2);
      t && this._queryEngine.featureStore.addMany(t);
    }, (e2) => {
      this._queryEngine.featureStore.clear(), j(e2) || s.getLogger("esri.layers.GeoJSONLayer").error(new s2("geojson-layer:refresh", "An error occurred during refresh", { error: e2 }));
    }), await this._waitSnapshotComplete();
    const { fullExtent: r3, timeExtent: a3 } = await this._queryEngine.fetchRecomputedExtents();
    return { extent: r3, timeExtent: a3 };
  }
  async _createFeatures(e) {
    if (null == e)
      return [];
    const { geometryType: t, hasZ: s3, objectIdField: i3 } = this._queryEngine, n = I(e, { geometryType: t, hasZ: s3, objectIdField: i3 });
    if (!E(this._queryEngine.spatialReference, c))
      for (const a3 of n)
        r(a3.geometry) && (a3.geometry = ct(g(ut(a3.geometry, this._queryEngine.geometryType, this._queryEngine.hasZ, false), c, this._queryEngine.spatialReference)));
    return n;
  }
  async _waitSnapshotComplete() {
    if (this._snapshotTask && !this._snapshotTask.finished) {
      try {
        await this._snapshotTask.promise;
      } catch {
      }
      return this._waitSnapshotComplete();
    }
  }
  async _fetch(t) {
    const { url: s3, customParameters: i3 } = this._loadOptions, r3 = (await U(s3, { responseType: "json", query: { ...i3 }, signal: t })).data;
    return await T(r3), r3;
  }
  _normalizeFeatures(e, t, s3) {
    const { objectIdField: i3 } = this._queryEngine, r3 = [];
    for (const n of e) {
      const e2 = this._createDefaultAttributes(), a3 = m(this._fieldsIndex, e2, n.attributes, true, t);
      a3 ? s3 == null ? void 0 : s3.push(a3) : (this._assignObjectId(e2, n.attributes, true), n.attributes = e2, n.objectId = e2[i3], r3.push(n));
    }
    return r3;
  }
  async _applyEdits(e) {
    const { adds: t, updates: s3, deletes: i3 } = e, r3 = { addResults: [], deleteResults: [], updateResults: [], uidToObjectId: {} };
    if (t && t.length && this._applyAddEdits(r3, t), s3 && s3.length && this._applyUpdateEdits(r3, s3), i3 && i3.length) {
      for (const e2 of i3)
        r3.deleteResults.push(f2(e2));
      this._queryEngine.featureStore.removeManyById(i3);
    }
    const { fullExtent: n, timeExtent: a3 } = await this._queryEngine.fetchRecomputedExtents();
    return { extent: n, timeExtent: a3, featureEditResults: r3 };
  }
  _applyAddEdits(e, t) {
    const { addResults: s3 } = e, { geometryType: i3, hasM: n, hasZ: o2, objectIdField: u, spatialReference: l, featureStore: d } = this._queryEngine, c3 = [];
    for (const p of t) {
      if (p.geometry && i3 !== c2(p.geometry)) {
        s3.push(a2("Incorrect geometry type."));
        continue;
      }
      const t2 = this._createDefaultAttributes(), n2 = m(this._fieldsIndex, t2, p.attributes);
      if (n2)
        s3.push(n2);
      else {
        if (this._assignObjectId(t2, p.attributes), p.attributes = t2, null != p.uid) {
          const t3 = p.attributes[u];
          e.uidToObjectId[p.uid] = t3;
        }
        if (r(p.geometry)) {
          const e2 = p.geometry.spatialReference ?? l;
          p.geometry = g(g3(p.geometry, e2), e2, l);
        }
        c3.push(p), s3.push(f2(p.attributes[u]));
      }
    }
    d.addMany(nt([], c3, i3, o2, n, u));
  }
  _applyUpdateEdits({ updateResults: e }, t) {
    const { geometryType: s3, hasM: i3, hasZ: n, objectIdField: o2, spatialReference: u, featureStore: l } = this._queryEngine;
    for (const d of t) {
      const { attributes: t2, geometry: p } = d, y = t2 && t2[o2];
      if (null == y) {
        e.push(a2(`Identifier field ${o2} missing`));
        continue;
      }
      if (!l.has(y)) {
        e.push(a2(`Feature with object id ${y} missing`));
        continue;
      }
      const m2 = st(l.getFeature(y), s3, n, i3);
      if (r(p)) {
        if (s3 !== c2(p)) {
          e.push(a2("Incorrect geometry type."));
          continue;
        }
        const t3 = p.spatialReference ?? u;
        m2.geometry = g(g3(p, t3), t3, u);
      }
      if (t2) {
        const s4 = m(this._fieldsIndex, m2.attributes, t2);
        if (s4) {
          e.push(s4);
          continue;
        }
      }
      l.add(ot(m2, s3, n, i3, o2)), e.push(f2(y));
    }
  }
  _createObjectIdGenerator(e, t) {
    const s3 = e.fieldsIndex.get(e.objectIdField);
    if ("esriFieldTypeString" === s3.type)
      return () => s3.name + "-" + Date.now().toString(16);
    let i3 = Number.NEGATIVE_INFINITY;
    for (const r3 of t)
      r3.objectId && (i3 = Math.max(i3, r3.objectId));
    return i3 = Math.max(0, i3) + 1, () => i3++;
  }
  _assignObjectId(e, t, s3 = false) {
    const i3 = this._queryEngine.objectIdField;
    e[i3] = s3 && i3 in t ? t[i3] : this._objectIdGenerator();
  }
  async _checkProjection(e) {
    try {
      await f(c, e);
    } catch {
      throw new s2("geojson-layer", "Projection not supported");
    }
  }
};
export {
  D as default
};
//# sourceMappingURL=GeoJSONSourceWorker-HXY6M3FR.js.map
