import {
  w
} from "./chunk-IN72WEYZ.js";
import {
  n
} from "./chunk-JTNRBNRF.js";
import {
  b
} from "./chunk-BLEGKDS6.js";
import {
  E,
  f
} from "./chunk-TTCQP5LX.js";
import {
  s2 as s
} from "./chunk-C2WY74GI.js";
import {
  r
} from "./chunk-HVCAHUYB.js";

// node_modules/@arcgis/core/webdoc/support/saveUtils.js
async function a(r2, o, a2) {
  if (!o || !o.resources)
    return;
  const h = o.portalItem === r2.portalItem ? new Set(r2.paths) : /* @__PURE__ */ new Set();
  r2.paths.length = 0, r2.portalItem = o.portalItem;
  const i = new Set(o.resources.toKeep.map((r3) => r3.resource.path)), m = /* @__PURE__ */ new Set(), f2 = [];
  i.forEach((e) => {
    h.delete(e), r2.paths.push(e);
  });
  for (const e of o.resources.toUpdate)
    if (h.delete(e.resource.path), i.has(e.resource.path) || m.has(e.resource.path)) {
      const { resource: o2, content: t, finish: s2, error: u2 } = e, h2 = w(o2, n());
      r2.paths.push(h2.path), f2.push(n2({ resource: h2, content: t, compress: e.compress, finish: s2, error: u2 }, a2));
    } else
      r2.paths.push(e.resource.path), f2.push(u(e, a2)), m.add(e.resource.path);
  for (const e of o.resources.toAdd)
    f2.push(n2(e, a2)), r2.paths.push(e.resource.path);
  if (h.forEach((r3) => {
    if (o.portalItem) {
      const e = o.portalItem.resourceFromPath(r3);
      f2.push(e.portalItem.removeResource(e).catch(() => {
      }));
    }
  }), 0 === f2.length)
    return;
  const l = await E(f2);
  f(a2);
  const d = l.filter((r3) => "error" in r3).map((r3) => r3.error);
  if (d.length > 0)
    throw new s("save:resources", "Failed to save one or more resources", { errors: d });
}
async function n2(e, t) {
  var _a, _b;
  const s2 = { ...r(t) ? t : {}, compress: e.compress }, c = await b(e.resource.portalItem.addResource(e.resource, e.content, s2));
  if (true !== c.ok)
    throw (_a = e.error) == null ? void 0 : _a.call(e, c.error), c.error;
  (_b = e.finish) == null ? void 0 : _b.call(e, e.resource);
}
async function u(e, o) {
  var _a, _b;
  const t = await b(e.resource.update(e.content, o));
  if (true !== t.ok)
    throw (_a = e.error) == null ? void 0 : _a.call(e, t.error), t.error;
  (_b = e.finish) == null ? void 0 : _b.call(e, e.resource);
}

export {
  a
};
//# sourceMappingURL=chunk-KV3RO44U.js.map
