import {
  a as a2,
  c,
  i as i2
} from "./chunk-CCNZLEW5.js";
import {
  p as p2
} from "./chunk-L2YYMVOS.js";
import {
  j
} from "./chunk-KGIL42MH.js";
import {
  y as y2
} from "./chunk-TJWUU7NW.js";
import {
  o as o2
} from "./chunk-BQXNXAP2.js";
import {
  l as l2
} from "./chunk-BHQVXYUV.js";
import {
  S,
  w
} from "./chunk-4D6JGHEF.js";
import {
  i
} from "./chunk-27R7KBOL.js";
import {
  o
} from "./chunk-EAFLFTSD.js";
import {
  l
} from "./chunk-KGIB6IYW.js";
import {
  a2 as a,
  e,
  e2,
  v,
  y3 as y
} from "./chunk-3PPVODAA.js";
import {
  T
} from "./chunk-PXVSWY3C.js";
import {
  t2 as t
} from "./chunk-WTKFW2TD.js";
import {
  s
} from "./chunk-UG2OEDEE.js";
import {
  p
} from "./chunk-PR6SXADK.js";

// node_modules/@arcgis/core/renderers/support/HeatmapColorStop.js
var c2;
var i3 = c2 = class extends l {
  constructor(o3) {
    super(o3), this.color = null, this.ratio = null;
  }
  clone() {
    return new c2({ color: this.color, ratio: this.ratio });
  }
};
e([y({ type: l2, json: { type: [T], default: null, write: true } })], i3.prototype, "color", void 0), e([y({ type: Number, json: { write: true } })], i3.prototype, "ratio", void 0), i3 = c2 = e([a("esri.renderers.support.HeatmapColorStop")], i3);
var a3 = i3;

// node_modules/@arcgis/core/renderers/support/HeatmapLegendOptions.js
var p3 = class extends i(l) {
  constructor() {
    super(...arguments), this.minLabel = null, this.maxLabel = null, this.title = null;
  }
};
e([y({ type: String, json: { write: true } })], p3.prototype, "minLabel", void 0), e([y({ type: String, json: { write: true } })], p3.prototype, "maxLabel", void 0), e([y({ type: String, json: { write: true } })], p3.prototype, "title", void 0), p3 = e([a("esri.renderers.support.HeatmapLegendOptions")], p3);

// node_modules/@arcgis/core/renderers/HeatmapRenderer.js
var j2;
var D = "esri.renderers.HeatmapRenderer";
var I = s.getLogger(D);
function S2(e3) {
  if (null != e3) {
    const { maxDensity: t2, minDensity: i4, radius: s2 } = e3;
    if (null != t2 || null != i4 || null != s2) {
      const { blurRadius: t3, maxPixelIntensity: i5, minPixelIntensity: s3, ...r } = e3;
      return r;
    }
  }
  return e3;
}
var v2 = j2 = class extends p2 {
  constructor(e3) {
    super(e3), this.authoringInfo = null, this.colorStops = [new a3({ ratio: 0, color: new l2("rgba(255, 140, 0, 0)") }), new a3({ ratio: 0.75, color: new l2("rgba(255, 140, 0, 1)") }), new a3({ ratio: 0.9, color: new l2("rgba(255, 0,   0, 1)") })], this.field = null, this.fieldOffset = 0, this.legendOptions = null, this.maxDensity = 0.04, this.minDensity = 0, this.radius = 18, this.referenceScale = 0, this.type = "heatmap", this.valueExpression = null, this.valueExpressionTitle = null, this._warnedProps = { blurRadius: false, maxPixelIntensity: false, minPixelIntensity: false };
  }
  normalizeCtorArgs(e3) {
    return S2(e3);
  }
  get blurRadius() {
    return c(this.radius);
  }
  set blurRadius(e3) {
    const t2 = this.maxPixelIntensity, i4 = this.minPixelIntensity;
    this._set("radius", i2(e3)), this._warnAboutDeprecatedGaussianBlurProp("blurRadius", "radius"), this._set("maxDensity", t2 * this._pixelIntensityToDensity), this._set("minDensity", i4 * this._pixelIntensityToDensity);
  }
  get maxPixelIntensity() {
    return this.maxDensity / this._pixelIntensityToDensity;
  }
  set maxPixelIntensity(e3) {
    this._set("maxDensity", e3 * this._pixelIntensityToDensity), this._warnAboutDeprecatedGaussianBlurProp("maxPixelIntensity", "maxDensity");
  }
  get minPixelIntensity() {
    return this.minDensity / this._pixelIntensityToDensity;
  }
  set minPixelIntensity(e3) {
    this._set("minDensity", e3 * this._pixelIntensityToDensity), this._warnAboutDeprecatedGaussianBlurProp("minPixelIntensity", "minDensity");
  }
  get _pixelIntensityToDensity() {
    return 24 / (a2 ** 2 * this.blurRadius ** 4);
  }
  _warnAboutDeprecatedGaussianBlurProp(e3, t2) {
    if (this._warnedProps[e3])
      return;
    "user" === e2(this).getDefaultOrigin() && (this._warnedProps[e3] = true, v(() => {
      t(I, e3, { replacement: `${String(t2)} (suggested value: ${this._get(t2)})`, version: "4.24" });
    }));
  }
  read(e3, t2) {
    e3 = S2(e3), super.read(e3, t2);
  }
  getSymbol() {
    return new y2();
  }
  async getSymbolAsync() {
    return this.getSymbol();
  }
  getSymbols() {
    return [this.getSymbol()];
  }
  async collectRequiredFields(e3, t2) {
    const i4 = this.field, s2 = this.valueExpression;
    i4 && "string" == typeof i4 && await w(e3, t2, i4), s2 && "string" == typeof s2 && await S(e3, t2, s2);
  }
  getAttributeHash() {
    return null;
  }
  getMeshHash() {
    return `${JSON.stringify(this.colorStops)}.${this.blurRadius}.${this.field}`;
  }
  clone() {
    return new j2({ authoringInfo: this.authoringInfo && this.authoringInfo.clone(), colorStops: p(this.colorStops), field: this.field, legendOptions: p(this.legendOptions), maxDensity: this.maxDensity, minDensity: this.minDensity, radius: this.radius, referenceScale: this.referenceScale, valueExpression: this.valueExpression, valueExpressionTitle: this.valueExpressionTitle });
  }
};
e([y({ type: j, json: { write: true, origins: { "web-scene": { write: false, read: false } } } })], v2.prototype, "authoringInfo", void 0), e([y({ type: Number, json: { origins: { "portal-item": { write: true }, "web-map": { write: true } } } })], v2.prototype, "blurRadius", null), e([y({ type: [a3], json: { write: true } })], v2.prototype, "colorStops", void 0), e([y({ type: String, json: { write: true } })], v2.prototype, "field", void 0), e([y({ type: Number, json: { write: { overridePolicy: (e3, t2, i4) => ({ enabled: null == i4 }) }, origins: { "web-scene": { write: false } } } })], v2.prototype, "fieldOffset", void 0), e([y({ type: p3, json: { write: true } })], v2.prototype, "legendOptions", void 0), e([y({ type: Number, json: { write: true } })], v2.prototype, "maxDensity", void 0), e([y({ type: Number, json: { origins: { "portal-item": { write: true }, "web-map": { write: true } } } })], v2.prototype, "maxPixelIntensity", null), e([y({ type: Number, json: { write: true } })], v2.prototype, "minDensity", void 0), e([y({ type: Number, json: { origins: { "portal-item": { write: true }, "web-map": { write: true } } } })], v2.prototype, "minPixelIntensity", null), e([y({ type: Number, cast: o2, json: { write: true } })], v2.prototype, "radius", void 0), e([y({ type: Number, range: { min: 0 }, json: { default: 0, write: true } })], v2.prototype, "referenceScale", void 0), e([o({ heatmap: "heatmap" })], v2.prototype, "type", void 0), e([y({ type: String, json: { write: true, origins: { "web-document": { write: false }, "portal-item": { write: false } } } })], v2.prototype, "valueExpression", void 0), e([y({ type: String })], v2.prototype, "valueExpressionTitle", void 0), e([y({ readOnly: true })], v2.prototype, "_pixelIntensityToDensity", null), v2 = j2 = e([a(D)], v2);
var P = v2;

export {
  a3 as a,
  P
};
//# sourceMappingURL=chunk-KFVYVU45.js.map
