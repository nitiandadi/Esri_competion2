import {
  a2,
  e,
  v2 as v
} from "./chunk-Y54MR3BP.js";
import {
  A,
  a,
  j
} from "./chunk-TTCQP5LX.js";
import {
  N
} from "./chunk-HVCAHUYB.js";

// node_modules/@arcgis/core/core/Promise.js
var h;
!function(s) {
  s[s.PENDING = 0] = "PENDING", s[s.RESOLVED = 1] = "RESOLVED", s[s.REJECTED = 2] = "REJECTED";
}(h || (h = {}));
var n = class {
  constructor(s) {
    this.instance = s, this._resolver = A(), this._status = h.PENDING, this._resolvingPromises = [], this._resolver.promise.then(() => {
      this._status = h.RESOLVED, this._cleanUp();
    }, () => {
      this._status = h.REJECTED, this._cleanUp();
    });
  }
  addResolvingPromise(s) {
    this._resolvingPromises.push(s), this._tryResolve();
  }
  isResolved() {
    return this._status === h.RESOLVED;
  }
  isRejected() {
    return this._status === h.REJECTED;
  }
  isFulfilled() {
    return this._status !== h.PENDING;
  }
  abort() {
    this._resolver.reject(a());
  }
  when(s, e2) {
    return this._resolver.promise.then(s, e2);
  }
  _cleanUp() {
    this._allPromise = this._resolvingPromises = this._allPromise = null;
  }
  _tryResolve() {
    if (this.isFulfilled())
      return;
    const s = A(), e2 = [...this._resolvingPromises, N(s.promise)], t = this._allPromise = Promise.all(e2);
    t.then(() => {
      this.isFulfilled() || this._allPromise !== t || this._resolver.resolve(this.instance);
    }, (s2) => {
      this.isFulfilled() || this._allPromise !== t || j(s2) || this._resolver.reject(s2);
    }), s.resolve();
  }
};
var m = (e2) => {
  let i = class extends e2 {
    constructor(...s) {
      super(...s), this._promiseProps = new n(this), this.addResolvingPromise(Promise.resolve());
    }
    isResolved() {
      return this._promiseProps.isResolved();
    }
    isRejected() {
      return this._promiseProps.isRejected();
    }
    isFulfilled() {
      return this._promiseProps.isFulfilled();
    }
    when(s, e3) {
      return new Promise((s2, e4) => {
        this._promiseProps.when(s2, e4);
      }).then(s, e3);
    }
    catch(s) {
      return this.when(null, s);
    }
    addResolvingPromise(s) {
      s && !this._promiseProps.isFulfilled() && this._promiseProps.addResolvingPromise("_promiseProps" in s ? s.when() : s);
    }
  };
  return i = e([a2("esri.core.Promise")], i), i;
};
var _ = class extends m(v) {
};
_ = e([a2("esri.core.Promise")], _);

export {
  m,
  _
};
//# sourceMappingURL=chunk-SQBJ6KPL.js.map
