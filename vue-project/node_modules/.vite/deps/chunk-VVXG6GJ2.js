import {
  t as t3
} from "./chunk-IJT6XLR5.js";
import {
  e as e2
} from "./chunk-7HK5OJHH.js";
import {
  a2 as a,
  e,
  t4 as t2,
  v2 as v,
  x,
  y2 as y,
  y3 as y2
} from "./chunk-Y54MR3BP.js";
import {
  i
} from "./chunk-TTCQP5LX.js";
import {
  s
} from "./chunk-C2WY74GI.js";
import {
  has
} from "./chunk-XPATKIHO.js";
import {
  c,
  t
} from "./chunk-HVCAHUYB.js";

// node_modules/@arcgis/core/core/throttle.js
function e3(e6, t5, l, n2) {
  let o3 = null, p = 1e3;
  "number" == typeof t5 ? (p = t5, n2 = l) : (o3 = t5 ?? null, p = l);
  let r, u2 = 0;
  const a4 = () => {
    u2 = 0, e6.apply(n2, r);
  }, c2 = (...e7) => {
    o3 && o3.apply(n2, e7), r = e7, p ? u2 || (u2 = setTimeout(a4, p)) : a4();
  };
  return c2.remove = () => {
    u2 && (clearTimeout(u2), u2 = 0);
  }, c2.forceUpdate = () => {
    u2 && (clearTimeout(u2), a4());
  }, c2.hasPendingUpdates = () => !!u2, c2;
}

// node_modules/@arcgis/core/views/3d/support/PropertiesPool.js
var o = class {
  constructor(r, o3) {
    this._owner = o3, this._properties = {}, this._afterDispatchHandle = null;
    for (const t5 in r) {
      const o4 = r[t5], s4 = new t2(o4, void 0, void 0, 2, 2);
      this._properties[t5] = { pool: s4, acquired: [] };
    }
    this._afterDispatchHandle = y(() => this._release());
  }
  destroy() {
    this._afterDispatchHandle && (this._afterDispatchHandle.remove(), this._afterDispatchHandle = null);
    for (const e6 in this._properties) {
      const t5 = this._properties[e6];
      for (const e7 of t5.acquired)
        x(e7) || t5.pool.release(e7);
      t5.pool.destroy(), t5.pool = null, t5.acquired = null;
    }
    this._properties = null, this._owner = null;
  }
  get(e6) {
    const t5 = this._owner._get(e6), r = this._properties[e6];
    let o3 = r.pool.acquire();
    for (r.acquired.push(o3); o3 === t5; )
      r.acquired.push(o3), o3 = r.pool.acquire();
    return o3;
  }
  _release() {
    for (const e6 in this._properties) {
      const t5 = this._properties[e6];
      let o3 = 0;
      for (const e7 of t5.acquired)
        x(e7) ? t5.acquired[o3++] = e7 : t5.pool.release(e7);
      t5.acquired.length = o3;
    }
  }
};

// node_modules/@arcgis/core/views/input/keys.js
var e4 = has("mac") ? "Meta" : "Ctrl";
var t4 = { 8: "Backspace", 9: "Tab", 13: "Enter", 27: "Escape", 33: "PageUp", 34: "PageDown", 35: "End", 36: "Home", 37: "ArrowLeft", 38: "ArrowUp", 39: "ArrowRight", 40: "ArrowDown", 45: "Insert", 46: "Delete" };
for (let n2 = 48; n2 < 58; n2++)
  t4[n2] = String.fromCharCode(n2);
for (let n2 = 1; n2 < 25; n2++)
  t4[111 + n2] = `F${n2}`;
for (let n2 = 65; n2 < 91; n2++)
  t4[n2] = [String.fromCharCode(n2 + 32), String.fromCharCode(n2)];
function o2(e6) {
  if (void 0 !== e6.key)
    return i(e6);
  const o3 = t4[e6.keyCode];
  return Array.isArray(o3) ? e6.shiftKey ? o3[1] : o3[0] : o3;
}
function a2(r) {
  switch (r) {
    case "Ctrl":
    case "Alt":
    case "Shift":
    case "Meta":
    case "Primary":
      return true;
  }
  return false;
}

// node_modules/@arcgis/core/views/input/EventMatch.js
var e5 = class {
  constructor(e6, t5 = []) {
    this.eventType = e6, this.keyModifiers = t5;
  }
  matches(e6) {
    if (e6.type !== this.eventType)
      return false;
    if (0 === this.keyModifiers.length)
      return true;
    const t5 = e6.modifiers;
    for (const i4 of this.keyModifiers)
      if (!t5.has(i4))
        return false;
    return true;
  }
};

// node_modules/@arcgis/core/views/input/InputHandler.js
var n = s.getLogger("esri.views.input.InputHandler");
var i2 = class {
  constructor(e6) {
    this._manager = null, this._incoming = {}, this._outgoing = {}, this._incomingEventMatches = null, this._incomingEventTypes = null, this._outgoingEventTypes = null, this._hasSideEffects = e6;
  }
  get incomingEventMatches() {
    if (!this._incomingEventMatches) {
      this._incomingEventMatches = [];
      for (const e6 in this._incoming) {
        const t5 = this._incoming[e6];
        for (const e7 of t5)
          this._incomingEventMatches.push(e7.match);
      }
    }
    return this._incomingEventMatches;
  }
  get incomingEventTypes() {
    return this._incomingEventTypes || (this._incomingEventTypes = this.incomingEventMatches.map((e6) => e6.eventType)), this._incomingEventTypes;
  }
  get outgoingEventTypes() {
    return this._outgoingEventTypes || (this._outgoingEventTypes = Object.keys(this._outgoing)), this._outgoingEventTypes;
  }
  get hasSideEffects() {
    return this._hasSideEffects;
  }
  get hasPendingInputs() {
    return false;
  }
  onInstall(e6) {
    this._manager ? n.error("This InputHandler has already been registered with an InputManager") : (e6.setEventCallback((e7) => this._handleEvent(e7)), e6.setUninstallCallback(() => this._onUninstall()), this._manager = e6);
  }
  onUninstall() {
  }
  registerIncoming(e6, n2, i4) {
    let a4;
    "function" == typeof n2 ? (i4 = n2, a4 = []) : a4 = n2 || [];
    const o3 = "string" == typeof e6 ? new e5(e6, a4) : e6, h = () => {
      this._incomingEventTypes = null, this._incomingEventMatches = null;
    }, r = (e7) => {
      const t5 = this._incoming[e7.match.eventType];
      if (t5) {
        const n3 = t5.indexOf(e7);
        t5.splice(n3, 1), h(), this._manager && this._manager.updateDependencies();
      }
    }, g2 = new s2(o3, i4, { onPause: r, onRemove: r, onResume: (e7) => {
      const t5 = this._incoming[e7.match.eventType];
      t5 && !t5.includes(e7) && (t5.push(e7), h(), this._manager && this._manager.updateDependencies());
    } });
    let c2 = this._incoming[o3.eventType];
    return c2 || (c2 = [], this._incoming[o3.eventType] = c2), c2.push(g2), h(), this._manager && this._manager.updateDependencies(), g2;
  }
  registerOutgoing(e6) {
    if (this._outgoing[e6])
      throw new Error("There is already a callback registered for this outgoing InputEvent: " + e6);
    const t5 = new a3(e6, { onEmit: (e7, t6, n2, i4) => {
      var _a;
      (_a = this._manager) == null ? void 0 : _a.emit(e7.eventType, t6, n2, i4);
    }, onRemove: (e7) => {
      var _a;
      delete this._outgoing[e7.eventType], (_a = this._manager) == null ? void 0 : _a.updateDependencies();
    } });
    return this._outgoing[e6] = t5, this._outgoingEventTypes = null, this._manager && this._manager.updateDependencies(), t5;
  }
  startCapturingPointer(e6) {
    var _a;
    (_a = this._manager) == null ? void 0 : _a.setPointerCapture(e6, true);
  }
  stopCapturingPointer(e6) {
    var _a;
    (_a = this._manager) == null ? void 0 : _a.setPointerCapture(e6, false);
  }
  refreshHasPendingInputs() {
    var _a;
    (_a = this._manager) == null ? void 0 : _a.refreshHasPendingInputs();
  }
  _onUninstall() {
    this._manager ? (this.onUninstall(), this._manager = null) : n.error("This InputHandler is not registered with an InputManager");
  }
  _handleEvent(e6) {
    var _a;
    const t5 = this._incoming[e6.type];
    if (t5) {
      for (const n2 of t5)
        if (n2.match.matches(e6) && ((_a = n2.callback) == null ? void 0 : _a.call(n2, e6), e6.shouldStopPropagation()))
          break;
    }
  }
};
var s2 = class {
  constructor(e6, t5, n2) {
    this.match = e6, this._callback = t5, this._handler = n2;
  }
  pause() {
    this._handler.onPause(this);
  }
  resume() {
    this._handler.onResume(this);
  }
  remove() {
    this._handler.onRemove(this);
  }
  get callback() {
    return this._callback;
  }
};
var a3 = class {
  constructor(e6, t5) {
    this.eventType = e6, this._removed = false, this._handler = t5;
  }
  emit(e6, t5, n2) {
    this._removed || this._handler.onEmit(this, e6, t5, n2);
  }
  remove() {
    this._removed = true, this._handler.onRemove(this);
  }
};

// node_modules/@arcgis/core/views/input/handlers/LatestPointer.js
var s3 = class extends i2 {
  constructor(t5) {
    super(true), this._onChange = t5, this._value = "mouse", this._x = null, this._y = null, this.registerIncoming("pointer-move", (t6) => {
      this._update(t6.data);
    });
  }
  _update(t5) {
    const s4 = "touch" === t5.native.pointerType ? "touch" : "mouse", { x: e6, y: i4 } = t5;
    s4 === this._value && this._x === e6 && this._y === i4 || (this._value = s4, this._x = e6, this._y = i4, this._onChange(s4, e6, i4));
  }
};

// node_modules/@arcgis/core/views/input/handlers/MultiTouch.js
var i3 = class extends i2 {
  get multiTouchActive() {
    return this._multiTouchActive.get();
  }
  constructor() {
    super(true), this._activeTouchPointerIds = /* @__PURE__ */ new Set(), this._multiTouchActive = new t3(false), this._onPointerAdd = ({ data: t5 }) => {
      "touch" === t5.pointerType && (this._activeTouchPointerIds.add(t5.native.pointerId), this._update());
    }, this._onPointerRemove = ({ data: t5 }) => {
      "touch" === t5.pointerType && (this._activeTouchPointerIds.delete(t5.native.pointerId), this._update());
    }, this.registerIncoming("pointer-down", this._onPointerAdd), this.registerIncoming("pointer-up", this._onPointerRemove), this.registerIncoming("pointer-capture-lost", this._onPointerRemove), this.registerIncoming("pointer-cancel", this._onPointerRemove);
  }
  _update() {
    this._multiTouchActive.set(this._activeTouchPointerIds.size > 1);
  }
};

// node_modules/@arcgis/core/views/input/InputManager.js
var u = class extends v {
  constructor(e6) {
    super(e6), this._pointerCaptures = /* @__PURE__ */ new Map(), this._nameToGroup = {}, this._handlers = [], this._handlersPriority = [], this._currentPropagation = null, this._updateDependenciesAfterPropagation = false, this._sourceEvents = /* @__PURE__ */ new Set(), this._keyModifiers = /* @__PURE__ */ new Set(), this._activeKeyModifiers = /* @__PURE__ */ new Set(), this._stoppedPropagationEventIds = /* @__PURE__ */ new Set(), this.primaryKey = e4, this._latestPointerType = "mouse", this._propertiesPool = new o({ latestPointerLocation: f }, this), this.latestPointerLocation = null, this.test = { timestamp: void 0, hasCurrentPropagation: () => !!this._currentPropagation };
  }
  initialize() {
    this.eventSource.onEventReceived = this._onEventReceived.bind(this), this._installRecognizers();
  }
  destroy() {
    const e6 = Object.keys(this._nameToGroup);
    for (const t5 of e6)
      this.uninstallHandlers(t5);
    this.eventSource.destroy(), this._currentPropagation = null, this._propertiesPool.destroy();
  }
  get hasPendingInputs() {
    return this._handlers.some((e6) => e6.handler.hasPendingInputs);
  }
  get latestPointerType() {
    return this._latestPointerType;
  }
  get multiTouchActive() {
    return this._multiTouchHandler.multiTouchActive;
  }
  installHandlers(e6, t5, i4 = P.INTERNAL) {
    if (this._nameToGroup[e6])
      return void s.getLogger(this.declaredClass).error("There is already an InputHandler group registered under the name `" + e6 + "`");
    if (0 === t5.length)
      return void s.getLogger(this.declaredClass).error("Can't register a group of zero handlers");
    const n2 = { name: e6, handlers: t5.map((e7) => ({ handler: e7, active: true, removed: false, priorityIndex: 0, groupPriority: i4, eventCallback: null, uninstallCallback: null })) };
    this._nameToGroup[e6] = n2;
    for (let r = n2.handlers.length - 1; r >= 0; r--) {
      const e7 = n2.handlers[r];
      this._handlers.push(e7), e7.handler.onInstall({ updateDependencies: () => {
        this.updateDependencies();
      }, emit: (t6, r2, i5, n3, s4) => {
        this._emitInputEvent(e7.priorityIndex + 1, t6, r2, i5, s4, n3);
      }, setPointerCapture: (t6, r2) => {
        this._setPointerCapture(n2, e7, t6, r2);
      }, setEventCallback: (t6) => {
        e7.eventCallback = t6;
      }, setUninstallCallback: (t6) => {
        e7.uninstallCallback = t6;
      }, refreshHasPendingInputs: () => {
        this.notifyChange("hasPendingInputs");
      } });
    }
    this.updateDependencies();
  }
  uninstallHandlers(e6) {
    const t5 = this._nameToGroup[e6];
    t5 ? (t5.handlers.forEach((e7) => {
      var _a;
      e7.removed = true, (_a = e7.uninstallCallback) == null ? void 0 : _a.call(e7);
    }), delete this._nameToGroup[e6], this._currentPropagation ? this._currentPropagation.needsHandlerGarbageCollect = true : this._garbageCollectRemovedHandlers()) : s.getLogger(this.declaredClass).error("There is no InputHandler group registered under the name `" + e6 + "`");
  }
  hasHandlers(e6) {
    return void 0 !== this._nameToGroup[e6];
  }
  updateDependencies() {
    if (this._currentPropagation)
      return void (this._updateDependenciesAfterPropagation = true);
    this._updateDependenciesAfterPropagation = false;
    const e6 = /* @__PURE__ */ new Set(), t5 = /* @__PURE__ */ new Set();
    this._handlersPriority = [];
    for (let r = this._handlers.length - 1; r >= 0; r--) {
      const e7 = this._handlers[r];
      e7.priorityIndex = r, this._handlersPriority.push(e7);
    }
    this._handlersPriority = this._sortHandlersPriority(this._handlersPriority);
    for (let r = this._handlersPriority.length - 1; r >= 0; r--) {
      const i4 = this._handlersPriority[r];
      i4.priorityIndex = r;
      let n2 = i4.handler.hasSideEffects;
      if (!n2) {
        for (const t6 of i4.handler.outgoingEventTypes)
          if (e6.has(t6)) {
            n2 = true;
            break;
          }
      }
      if (n2)
        for (const r2 of i4.handler.incomingEventMatches) {
          e6.add(r2.eventType);
          for (const e7 of r2.keyModifiers)
            a2(e7) || t5.add(e7);
        }
      i4.active = n2;
    }
    this._sourceEvents = e6, this._keyModifiers = t5, this._pointerCaptures.size > 0 && this._sourceEvents.add("pointer-capture-lost"), this._keyModifiers.size > 0 && (this._sourceEvents.add("key-down"), this._sourceEvents.add("key-up")), this.eventSource && (this.eventSource.activeEvents = this._sourceEvents);
  }
  _setLatestPointer(e6, t5, r) {
    this._latestPointerType = e6;
    const n2 = this._get("latestPointerLocation");
    if (t(n2) || n2.x !== t5 || n2.y !== r) {
      const e7 = this._propertiesPool.get("latestPointerLocation");
      e7.x = t5, e7.y = r, this._set("latestPointerLocation", e7);
    }
  }
  _onEventReceived(e6, t5) {
    if ("pointer-capture-lost" === e6) {
      const e7 = t5;
      this._pointerCaptures.delete(e7.native.pointerId);
    }
    this._updateKeyModifiers(e6, t5);
    const r = null != this.test.timestamp ? this.test.timestamp : t5.native ? t5.native.timestamp : void 0, i4 = t5.native ? t5.native.cancelable : void 0;
    this._emitInputEventFromSource(e6, t5, r, i4);
  }
  _updateKeyModifiers(e6, t5) {
    if (!t5)
      return;
    let r = false;
    const i4 = () => {
      if (!r) {
        const e7 = /* @__PURE__ */ new Set();
        this._activeKeyModifiers.forEach((t6) => {
          e7.add(t6);
        }), this._activeKeyModifiers = e7, r = true;
      }
    }, n2 = (e7, t6) => {
      t6 && !this._activeKeyModifiers.has(e7) ? (i4(), this._activeKeyModifiers.add(e7)) : !t6 && this._activeKeyModifiers.has(e7) && (i4(), this._activeKeyModifiers.delete(e7));
    };
    if ("key-down" === e6 || "key-up" === e6) {
      const r2 = t5.key;
      this._keyModifiers.has(r2) && n2(r2, "key-down" === e6);
    }
    const s4 = t5.native;
    n2("Alt", !(!s4 || !s4.altKey)), n2("Ctrl", !(!s4 || !s4.ctrlKey)), n2("Shift", !(!s4 || !s4.shiftKey)), n2("Meta", !(!s4 || !s4.metaKey)), n2("Primary", this._activeKeyModifiers.has(this.primaryKey));
  }
  _installRecognizers() {
    this._latestPointerHandler = new s3((e6, t5, r) => this._setLatestPointer(e6, t5, r)), this._multiTouchHandler = new i3(), this.installHandlers("input-manager-logic", [this._latestPointerHandler, this._multiTouchHandler], P.ALWAYS), this.recognizers.length > 0 && this.installHandlers("default", this.recognizers, P.INTERNAL);
  }
  _setPointerCapture(e6, t5, r, i4) {
    const n2 = e6.name + "-" + t5.priorityIndex, s4 = this._pointerCaptures.get(r.pointerId) || /* @__PURE__ */ new Set();
    this._pointerCaptures.set(r.pointerId, s4), i4 ? (s4.add(n2), 1 === s4.size && this.eventSource && this.eventSource.setPointerCapture(r, true)) : s4.has(n2) && (s4.delete(n2), 0 === s4.size && (this._pointerCaptures.delete(r.pointerId), this.eventSource && this.eventSource.setPointerCapture(r, false)));
  }
  _garbageCollectRemovedHandlers() {
    this._handlers = this._handlers.filter((e6) => !e6.removed), this.updateDependencies();
  }
  _emitInputEventFromSource(e6, t5, r, i4) {
    this._emitInputEvent(0, e6, t5, r, i4);
  }
  _emitInputEvent(e6, t5, r, i4, n2, s4) {
    const o3 = void 0 !== i4 ? i4 : this._currentPropagation ? this._currentPropagation.timestamp : performance.now(), a4 = void 0 !== n2 && n2, l = { event: new _(t5, r, o3, s4 || this._activeKeyModifiers, a4), priorityIndex: e6 };
    this._currentPropagation ? this._currentPropagation.events.push(l) : this._doNewPropagation(l);
  }
  _doNewPropagation(e6) {
    this._currentPropagation = { events: new e2(), currentHandler: null, needsHandlerGarbageCollect: false, timestamp: e6.event.timestamp }, this._currentPropagation.events.push(e6), this._continuePropagation();
  }
  _continuePropagation() {
    var _a, _b;
    const e6 = c(this._currentPropagation);
    for (; e6.events.length > 0; ) {
      const { event: t5, priorityIndex: r } = e6.events.pop(), i4 = t5.data && t5.data.eventId;
      if (!(null != i4 && this._stoppedPropagationEventIds.has(i4)))
        for (e6.currentHandler = this._handlersPriority[r]; e6.currentHandler; ) {
          if (e6.currentHandler.removed)
            e6.needsHandlerGarbageCollect = true;
          else {
            if (e6.currentHandler.active && !t5.shouldStopPropagation() && ((_b = (_a = e6.currentHandler).eventCallback) == null ? void 0 : _b.call(_a, t5)), t5.shouldStopPropagation()) {
              null != i4 && this._stoppedPropagationEventIds.add(i4);
              break;
            }
            if (t5.shouldPausePropagation(() => this._continuePropagation()))
              return void this._pausePropagation({ event: t5, priorityIndex: e6.currentHandler.priorityIndex + 1 });
          }
          e6.currentHandler = this._handlersPriority[e6.currentHandler.priorityIndex + 1];
        }
    }
    e6.needsHandlerGarbageCollect && this._garbageCollectRemovedHandlers(), this.hasPendingInputs || this._stoppedPropagationEventIds.clear(), this._currentPropagation = null, this._updateDependenciesAfterPropagation && this.updateDependencies();
  }
  _pausePropagation(e6) {
    const t5 = new e2();
    t5.push(e6);
    const r = this._currentPropagation;
    if (r) {
      for (; r.events.length; )
        t5.push(r.events.pop());
      r.events = t5, r.currentHandler = null;
    }
  }
  _compareHandlerPriority(e6, t5) {
    if (e6.handler.hasSideEffects !== t5.handler.hasSideEffects)
      return e6.handler.hasSideEffects ? 1 : -1;
    if (e6.groupPriority !== t5.groupPriority)
      return e6.groupPriority > t5.groupPriority ? -1 : 1;
    for (const r of e6.handler.incomingEventMatches)
      for (const e7 of t5.handler.incomingEventMatches) {
        if (r.eventType !== e7.eventType)
          continue;
        const t6 = r.keyModifiers.filter((t7) => e7.keyModifiers.includes(t7));
        if (t6.length === r.keyModifiers.length !== (t6.length === e7.keyModifiers.length))
          return r.keyModifiers.length > e7.keyModifiers.length ? -1 : 1;
      }
    return e6.priorityIndex > t5.priorityIndex ? -1 : 1;
  }
  _sortHandlersPriority(e6) {
    const t5 = [];
    for (const r of e6) {
      let e7 = 0;
      for (; e7 < t5.length && this._compareHandlerPriority(r, t5[e7]) >= 0; )
        e7++;
      t5.splice(e7, 0, r);
    }
    return t5;
  }
  get debug() {
    const e6 = (e7) => {
      const t5 = this._setPointerCapture;
      this._setPointerCapture = () => {
      }, e7(), this._setPointerCapture = t5;
    };
    return { injectEvent: (t5, r) => {
      e6(() => {
        this._onEventReceived(t5, r);
      });
    }, disablePointerCapture: e6 };
  }
};
e([y2({ readOnly: true })], u.prototype, "hasPendingInputs", null), e([y2({ constructOnly: true })], u.prototype, "eventSource", void 0), e([y2({ constructOnly: true })], u.prototype, "recognizers", void 0), e([y2()], u.prototype, "_latestPointerType", void 0), e([y2()], u.prototype, "latestPointerType", null), e([y2()], u.prototype, "multiTouchActive", null), e([y2({ readOnly: true })], u.prototype, "latestPointerLocation", void 0), u = e([a("esri.views.input.InputManager")], u);
var _ = class {
  constructor(e6, t5, r, i4, n2) {
    this.type = e6, this.data = t5, this.timestamp = r, this.modifiers = i4, this.cancelable = n2, this._propagationState = g.NONE, this._resumeCallback = null;
  }
  stopPropagation() {
    this._propagationState |= g.STOPPED;
  }
  shouldStopPropagation() {
    return 0 != (this._propagationState & g.STOPPED);
  }
  async(e6) {
    this._propagationState |= g.PAUSED;
    const t5 = (e7, t6) => {
      this._propagationState &= ~g.PAUSED;
      const r = this._resumeCallback;
      if (this._resumeCallback = null, r && r(), t6)
        throw e7;
      return e7;
    };
    return ("function" == typeof e6 ? e6() : e6).then((e7) => t5(e7, false), (e7) => t5(e7, true));
  }
  shouldPausePropagation(e6) {
    return !!(this._propagationState & g.PAUSED) && (this._resumeCallback = e6, true);
  }
  preventDefault() {
    this.data.native.preventDefault();
  }
};
var g;
!function(e6) {
  e6[e6.NONE = 0] = "NONE", e6[e6.STOPPED = 1] = "STOPPED", e6[e6.PAUSED = 2] = "PAUSED";
}(g || (g = {}));
var P = { ALWAYS: 1, DEFAULT: 0, TOOL: -1, WIDGET: -2, INTERNAL: -3 };
var v2 = class {
};
var f = v2;

export {
  e3 as e,
  o2 as o,
  i2 as i,
  u,
  P
};
//# sourceMappingURL=chunk-VVXG6GJ2.js.map
