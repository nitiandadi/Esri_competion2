import {
  e as e2
} from "./chunk-ORBD62GG.js";
import {
  j,
  p
} from "./chunk-ZNI6KX7M.js";
import {
  t as t2
} from "./chunk-LT2MTVPF.js";
import {
  p as p2
} from "./chunk-TXZADL6E.js";
import {
  n
} from "./chunk-72FH64H2.js";
import {
  t as t3
} from "./chunk-XSWH32P3.js";
import {
  c
} from "./chunk-MR6MDWDW.js";
import {
  O
} from "./chunk-TGWKHDFY.js";
import {
  b
} from "./chunk-RLEK6TWZ.js";
import "./chunk-RZNNSB7A.js";
import "./chunk-5Z6OHN6Z.js";
import "./chunk-TKZTELJQ.js";
import "./chunk-OXPHYLAY.js";
import "./chunk-JKIHHWKC.js";
import "./chunk-NBVRAQMU.js";
import "./chunk-BHKUW5DD.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-GCXFCVSM.js";
import "./chunk-ECM7B2HV.js";
import "./chunk-JYFMP3PO.js";
import "./chunk-CBAVHWPY.js";
import {
  u
} from "./chunk-EMRZKKP3.js";
import "./chunk-SQBJ6KPL.js";
import {
  U
} from "./chunk-MKMLHQNH.js";
import "./chunk-PHPHIDTF.js";
import "./chunk-P6SQPYDS.js";
import "./chunk-GWFG4NRK.js";
import "./chunk-YXFIF2O5.js";
import "./chunk-E4MAG7OK.js";
import "./chunk-YVQV6YXG.js";
import "./chunk-3KALZGFA.js";
import "./chunk-OJKTPYH5.js";
import "./chunk-UHF3OUQV.js";
import "./chunk-6U5BQYRW.js";
import "./chunk-LUOENZ4F.js";
import "./chunk-QGRPG4XS.js";
import "./chunk-M73MMEC7.js";
import {
  f2 as f,
  w,
  w2
} from "./chunk-A5CTLI5A.js";
import "./chunk-WUBKNERF.js";
import "./chunk-DDRAFOUW.js";
import "./chunk-F4DUNBGT.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-GMLVDTS4.js";
import "./chunk-G7CHVXDR.js";
import {
  s as s2
} from "./chunk-OAZLVZFS.js";
import "./chunk-CPSZPA6H.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-Y54MR3BP.js";
import "./chunk-6VTYOWNK.js";
import "./chunk-JY6H6KI3.js";
import "./chunk-TTCQP5LX.js";
import {
  s2 as s
} from "./chunk-C2WY74GI.js";
import "./chunk-MCOYI7PX.js";
import "./chunk-EL4OGCJC.js";
import "./chunk-XPATKIHO.js";
import "./chunk-MKHZ5X6F.js";
import {
  r,
  t
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/layers/BaseTileLayer.js
var h;
var d = new t2("0/0/0", 0, 0, 0, void 0);
var g = h = class extends n(t3(p2(b))) {
  constructor() {
    super(...arguments), this.tileInfo = j.create({ spatialReference: f.WebMercator, size: 256 }), this.type = "base-tile", this.fullExtent = new w2(-20037508342787e-6, -2003750834278e-5, 2003750834278e-5, 20037508342787e-6, f.WebMercator), this.spatialReference = f.WebMercator;
  }
  getTileBounds(e3, t4, r2, o) {
    const s3 = o || u();
    return d.level = e3, d.row = t4, d.col = r2, d.extent = s3, this.tileInfo.updateTileInfo(d), d.extent = void 0, s3;
  }
  fetchTile(e3, r2, o, s3 = {}) {
    const { signal: i } = s3, a2 = this.getTileUrl(e3, r2, o), l = { responseType: "image", signal: i, query: { ...this.refreshParameters } };
    return U(a2 ?? "", l).then((e4) => e4.data);
  }
  async fetchImageBitmapTile(e3, o, s3, i = {}) {
    const { signal: a2 } = i;
    if (this.fetchTile !== h.prototype.fetchTile) {
      const t4 = await this.fetchTile(e3, o, s3, i);
      try {
        return createImageBitmap(t4);
      } catch (m) {
        throw new s("request:server", `Unable to load tile ${e3}/${o}/${s3}`, { error: m, level: e3, row: o, col: s3 });
      }
    }
    const l = this.getTileUrl(e3, o, s3) ?? "", p3 = { responseType: "blob", signal: a2, query: { ...this.refreshParameters } }, { data: n2 } = await U(l, p3);
    return e2(n2, l);
  }
  getTileUrl() {
    throw new s("basetilelayer:gettileurl-not-implemented", "getTileUrl() is not implemented");
  }
};
e([y({ type: j })], g.prototype, "tileInfo", void 0), e([y({ type: ["show", "hide"] })], g.prototype, "listMode", void 0), e([y({ readOnly: true, value: "base-tile" })], g.prototype, "type", void 0), e([y({ nonNullable: true })], g.prototype, "fullExtent", void 0), e([y()], g.prototype, "spatialReference", void 0), g = h = e([a("esri.layers.BaseTileLayer")], g);
var j2 = g;

// node_modules/@arcgis/core/layers/BingMapsLayer.js
var h2 = new s2({ BingMapsAerial: "aerial", BingMapsRoad: "road", BingMapsHybrid: "hybrid" });
var b2 = "https://dev.virtualearth.net";
var w3 = class extends n(c(O(j2))) {
  constructor(e3) {
    super(e3), this.type = "bing-maps", this.tileInfo = new j({ size: [256, 256], dpi: 96, origin: new w({ x: -20037508342787e-6, y: 20037508342787e-6, spatialReference: f.WebMercator }), spatialReference: f.WebMercator, lods: [new p({ level: 1, resolution: 78271.5169639999, scale: 295828763795777e-6 }), new p({ level: 2, resolution: 39135.7584820001, scale: 147914381897889e-6 }), new p({ level: 3, resolution: 19567.8792409999, scale: 73957190948944e-6 }), new p({ level: 4, resolution: 9783.93962049996, scale: 36978595474472e-6 }), new p({ level: 5, resolution: 4891.96981024998, scale: 18489297737236e-6 }), new p({ level: 6, resolution: 2445.98490512499, scale: 9244648868618e-6 }), new p({ level: 7, resolution: 1222.99245256249, scale: 4622324434309e-6 }), new p({ level: 8, resolution: 611.49622628138, scale: 2311162217155e-6 }), new p({ level: 9, resolution: 305.748113140558, scale: 1155581108577e-6 }), new p({ level: 10, resolution: 152.874056570411, scale: 577790.554289 }), new p({ level: 11, resolution: 76.4370282850732, scale: 288895.277144 }), new p({ level: 12, resolution: 38.2185141425366, scale: 144447.638572 }), new p({ level: 13, resolution: 19.1092570712683, scale: 72223.819286 }), new p({ level: 14, resolution: 9.55462853563415, scale: 36111.909643 }), new p({ level: 15, resolution: 4.77731426794937, scale: 18055.954822 }), new p({ level: 16, resolution: 2.38865713397468, scale: 9027.977411 }), new p({ level: 17, resolution: 1.19432856685505, scale: 4513.988705 }), new p({ level: 18, resolution: 0.597164283559817, scale: 2256.994353 }), new p({ level: 19, resolution: 0.298582141647617, scale: 1128.497176 }), new p({ level: 20, resolution: 0.1492910708238085, scale: 564.248588 })] }), this.key = null, this.style = "road", this.culture = "en-US", this.region = null, this.portalUrl = null, this.hasAttributionData = true;
  }
  get bingMetadata() {
    return this._get("bingMetadata");
  }
  set bingMetadata(e3) {
    this._set("bingMetadata", e3);
  }
  get copyright() {
    return r(this.bingMetadata) ? this.bingMetadata.copyright : null;
  }
  get operationalLayerType() {
    return h2.toJSON(this.style);
  }
  get bingLogo() {
    return r(this.bingMetadata) ? this.bingMetadata.brandLogoUri : null;
  }
  load(e3) {
    return this.key ? this.addResolvingPromise(this._getMetadata()) : this.portalUrl ? this.addResolvingPromise(this._getPortalBingKey().then(() => this._getMetadata())) : this.addResolvingPromise(Promise.reject(new s("bingmapslayer:load", "Bing layer must have bing key."))), Promise.resolve(this);
  }
  getTileUrl(e3, t4, r2) {
    if (!this.loaded || t(this.bingMetadata))
      return null;
    const o = this.bingMetadata.resourceSets[0].resources[0], a2 = o.imageUrlSubdomains[t4 % o.imageUrlSubdomains.length], i = this._getQuadKey(e3, t4, r2);
    return o.imageUrl.replace("{subdomain}", a2).replace("{quadkey}", i);
  }
  async fetchAttributionData() {
    return this.load().then(() => {
      if (t(this.bingMetadata))
        return null;
      return { contributors: this.bingMetadata.resourceSets[0].resources[0].imageryProviders.map((e3) => ({ attribution: e3.attribution, coverageAreas: e3.coverageAreas.map((e4) => ({ zoomMin: e4.zoomMin, zoomMax: e4.zoomMax, score: 1, bbox: [e4.bbox[0], e4.bbox[1], e4.bbox[2], e4.bbox[3]] })) })) };
    });
  }
  _getMetadata() {
    const e3 = { road: "roadOnDemand", aerial: "aerial", hybrid: "aerialWithLabelsOnDemand" }[this.style];
    return U(`${b2}/REST/v1/Imagery/Metadata/${e3}`, { responseType: "json", query: { include: "ImageryProviders", uriScheme: "https", key: this.key, suppressStatus: true, output: "json", culture: this.culture, userRegion: this.region } }).then((e4) => {
      const t4 = e4.data;
      if (200 !== t4.statusCode)
        throw new s("bingmapslayer:getmetadata", t4.statusDescription);
      if (this.bingMetadata = t4, 0 === this.bingMetadata.resourceSets.length)
        throw new s("bingmapslayer:getmetadata", "no bing resourcesets");
      if (0 === this.bingMetadata.resourceSets[0].resources.length)
        throw new s("bingmapslayer:getmetadata", "no bing resources");
    }).catch((e4) => {
      throw new s("bingmapslayer:getmetadata", e4.message);
    });
  }
  _getPortalBingKey() {
    return U(this.portalUrl ?? "", { responseType: "json", authMode: "no-prompt", query: { f: "json" } }).then((e3) => {
      if (!e3.data.bingKey)
        throw new s("bingmapslayer:getportalbingkey", "The referenced Portal does not contain a valid bing key");
      this.key = e3.data.bingKey;
    }).catch((e3) => {
      throw new s("bingmapslayer:getportalbingkey", e3.message);
    });
  }
  _getQuadKey(e3, t4, r2) {
    let o = "";
    for (let a2 = e3; a2 > 0; a2--) {
      let e4 = 0;
      const s3 = 1 << a2 - 1;
      0 != (r2 & s3) && (e4 += 1), 0 != (t4 & s3) && (e4 += 2), o += e4.toString();
    }
    return o;
  }
};
e([y({ json: { read: false, write: false }, value: null })], w3.prototype, "bingMetadata", null), e([y({ json: { read: false, write: false }, value: "bing-maps", readOnly: true })], w3.prototype, "type", void 0), e([y({ type: j })], w3.prototype, "tileInfo", void 0), e([y({ type: String, readOnly: true, json: { read: false, write: false } })], w3.prototype, "copyright", null), e([y({ type: String, json: { write: false, read: false } })], w3.prototype, "key", void 0), e([y({ type: h2.apiValues, nonNullable: true, json: { read: { source: "layerType", reader: h2.read } } })], w3.prototype, "style", void 0), e([y({ type: ["BingMapsAerial", "BingMapsHybrid", "BingMapsRoad"] })], w3.prototype, "operationalLayerType", null), e([y({ type: String, json: { write: false, read: false } })], w3.prototype, "culture", void 0), e([y({ type: String, json: { write: false, read: false } })], w3.prototype, "region", void 0), e([y({ type: String, json: { write: true, read: true } })], w3.prototype, "portalUrl", void 0), e([y({ type: Boolean, json: { write: false, read: false } })], w3.prototype, "hasAttributionData", void 0), e([y({ type: String, readOnly: true })], w3.prototype, "bingLogo", null), w3 = e([a("esri.layers.BingMapsLayer")], w3);
var v = w3;
export {
  v as default
};
//# sourceMappingURL=BingMapsLayer-VN3WLYQV.js.map
