import {
  s as s2
} from "./chunk-OHZM2VYI.js";
import {
  r as r3
} from "./chunk-JATK7CEQ.js";
import {
  o
} from "./chunk-74TXAD7S.js";
import {
  o as o2
} from "./chunk-HIRLBWV3.js";
import {
  l as l2
} from "./chunk-AFQAO5F4.js";
import {
  a2,
  e,
  y3 as y
} from "./chunk-OA5ES74L.js";
import {
  T,
  a
} from "./chunk-RLEMMDH4.js";
import {
  s2 as s
} from "./chunk-YVZY5LDV.js";
import {
  p,
  r as r2
} from "./chunk-H32MMKAJ.js";
import {
  l,
  r,
  t
} from "./chunk-HVCAHUYB.js";

// node_modules/@arcgis/core/geometry/support/SupportedGCSWkids.js
var S;
!function(S3) {
  S3[S3.CGCS2000 = 4490] = "CGCS2000", S3[S3.GCSMARS2000 = 104971] = "GCSMARS2000", S3[S3.GCSMARS2000_SPHERE = 104905] = "GCSMARS2000_SPHERE", S3[S3.GCSMOON2000 = 104903] = "GCSMOON2000";
}(S || (S = {}));

// node_modules/@arcgis/core/geometry/support/WKIDUnitConversion.js
var o3;
var r4 = { values: [1, 0.3048, 0.3048006096012192, 0.3047972654, 0.9143917962, 0.201166195164, 0.9143984146160287, 0.3047994715386762, 20.11676512155263, 20.11678249437587, 0.9143985307444408, 0.91439523, 0.3047997101815088, 20.1168, 20.116756, 5e4, 15e4], units: ["Meter", "Foot", "Foot_US", "Foot_Clarke", "Yard_Clarke", "Link_Clarke", "Yard_Sears", "Foot_Sears", "Chain_Sears", "Chain_Benoit_1895_B", "Yard_Indian", "Yard_Indian_1937", "Foot_Gold_Coast", "Chain", "Chain_Sears_1922_Truncated", "50_Kilometers", "150_Kilometers"], 2066: 5, 2136: 12, 2155: 2, 2157: 0, 2158: 0, 2159: 12, 2160: 12, 2204: 2, 2219: 0, 2220: 0, 2254: 2, 2255: 2, 2256: 1, 2265: 1, 2266: 1, 2267: 2, 2268: 2, 2269: 1, 2270: 1, 2271: 2, 2272: 2, 2273: 1, 2294: 0, 2295: 0, 2314: 3, 2899: 2, 2900: 2, 2901: 1, 2909: 1, 2910: 1, 2911: 2, 2912: 2, 2913: 1, 2914: 1, 2992: 1, 2993: 0, 2994: 1, 3080: 1, 3089: 2, 3090: 0, 3091: 2, 3102: 2, 3141: 0, 3142: 0, 3167: 14, 3359: 2, 3360: 0, 3361: 1, 3362: 0, 3363: 2, 3364: 0, 3365: 2, 3366: 3, 3404: 2, 3405: 0, 3406: 0, 3407: 3, 3439: 0, 3440: 0, 3479: 1, 3480: 0, 3481: 1, 3482: 0, 3483: 1, 3484: 0, 3485: 2, 3486: 0, 3487: 2, 3488: 0, 3489: 0, 3490: 2, 3491: 0, 3492: 2, 3493: 0, 3494: 2, 3495: 0, 3496: 2, 3497: 0, 3498: 2, 3499: 0, 3500: 2, 3501: 0, 3502: 2, 3503: 0, 3504: 2, 3505: 0, 3506: 2, 3507: 0, 3508: 2, 3509: 0, 3510: 2, 3511: 0, 3512: 2, 3513: 0, 3514: 0, 3515: 2, 3516: 0, 3517: 2, 3518: 0, 3519: 2, 3520: 0, 3521: 2, 3522: 0, 3523: 2, 3524: 0, 3525: 2, 3526: 0, 3527: 2, 3528: 0, 3529: 2, 3530: 0, 3531: 2, 3532: 0, 3533: 2, 3534: 0, 3535: 2, 3536: 0, 3537: 2, 3538: 0, 3539: 2, 3540: 0, 3541: 2, 3542: 0, 3543: 2, 3544: 0, 3545: 2, 3546: 0, 3547: 2, 3548: 0, 3549: 2, 3550: 0, 3551: 2, 3552: 0, 3553: 2, 3582: 2, 3583: 0, 3584: 2, 3585: 0, 3586: 2, 3587: 0, 3588: 1, 3589: 0, 3590: 1, 3591: 0, 3592: 0, 3593: 1, 3598: 2, 3599: 0, 3600: 2, 3605: 1, 3606: 0, 3607: 0, 3608: 2, 3609: 0, 3610: 2, 3611: 0, 3612: 2, 3613: 0, 3614: 2, 3615: 0, 3616: 2, 3617: 0, 3618: 2, 3619: 0, 3620: 2, 3621: 0, 3622: 2, 3623: 0, 3624: 2, 3625: 0, 3626: 2, 3627: 0, 3628: 2, 3629: 0, 3630: 2, 3631: 0, 3632: 2, 3633: 0, 3634: 1, 3635: 0, 3636: 1, 3640: 2, 3641: 0, 3642: 2, 3643: 0, 3644: 1, 3645: 0, 3646: 1, 3647: 0, 3648: 1, 3649: 0, 3650: 2, 3651: 0, 3652: 2, 3653: 0, 3654: 2, 3655: 0, 3656: 1, 3657: 0, 3658: 2, 3659: 0, 3660: 2, 3661: 0, 3662: 2, 3663: 0, 3664: 2, 3668: 2, 3669: 0, 3670: 2, 3671: 0, 3672: 2, 3673: 0, 3674: 2, 3675: 0, 3676: 1, 3677: 2, 3678: 0, 3679: 1, 3680: 2, 3681: 0, 3682: 1, 3683: 2, 3684: 0, 3685: 0, 3686: 2, 3687: 0, 3688: 2, 3689: 0, 3690: 2, 3691: 0, 3692: 2, 3696: 2, 3697: 0, 3698: 2, 3699: 0, 3700: 2, 3793: 0, 3794: 0, 3812: 0, 3854: 0, 3857: 0, 3920: 0, 3978: 0, 3979: 0, 3991: 2, 3992: 2, 4026: 0, 4037: 0, 4038: 0, 4071: 0, 4082: 0, 4083: 0, 4087: 0, 4088: 0, 4217: 2, 4414: 0, 4415: 0, 4417: 0, 4434: 0, 4437: 0, 4438: 2, 4439: 2, 4462: 0, 4467: 0, 4471: 0, 4474: 0, 4559: 0, 4647: 0, 4822: 0, 4826: 0, 4839: 0, 5018: 0, 5041: 0, 5042: 0, 5048: 0, 5167: 0, 5168: 0, 5221: 0, 5223: 0, 5234: 0, 5235: 0, 5243: 0, 5247: 0, 5266: 0, 5316: 0, 5320: 0, 5321: 0, 5325: 0, 5337: 0, 5361: 0, 5362: 0, 5367: 0, 5382: 0, 5383: 0, 5396: 0, 5456: 0, 5457: 0, 5469: 0, 5472: 4, 5490: 0, 5513: 0, 5514: 0, 5523: 0, 5559: 0, 5588: 1, 5589: 3, 5596: 0, 5627: 0, 5629: 0, 5641: 0, 5643: 0, 5644: 0, 5646: 2, 5654: 2, 5655: 2, 5659: 0, 5700: 0, 5825: 0, 5836: 0, 5837: 0, 5839: 0, 5842: 0, 5844: 0, 5858: 0, 5879: 0, 5880: 0, 5887: 0, 5890: 0, 6128: 1, 6129: 1, 6141: 1, 6204: 0, 6210: 0, 6211: 0, 6307: 0, 6312: 0, 6316: 0, 6362: 0, 6391: 1, 6405: 1, 6406: 0, 6407: 1, 6408: 0, 6409: 1, 6410: 0, 6411: 2, 6412: 0, 6413: 2, 6414: 0, 6415: 0, 6416: 2, 6417: 0, 6418: 2, 6419: 0, 6420: 2, 6421: 0, 6422: 2, 6423: 0, 6424: 2, 6425: 0, 6426: 2, 6427: 0, 6428: 2, 6429: 0, 6430: 2, 6431: 0, 6432: 2, 6433: 0, 6434: 2, 6435: 0, 6436: 2, 6437: 0, 6438: 2, 6439: 0, 6440: 0, 6441: 2, 6442: 0, 6443: 2, 6444: 0, 6445: 2, 6446: 0, 6447: 2, 6448: 0, 6449: 2, 6450: 0, 6451: 2, 6452: 0, 6453: 2, 6454: 0, 6455: 2, 6456: 0, 6457: 2, 6458: 0, 6459: 2, 6460: 0, 6461: 2, 6462: 0, 6463: 2, 6464: 0, 6465: 2, 6466: 0, 6467: 2, 6468: 0, 6469: 2, 6470: 0, 6471: 2, 6472: 0, 6473: 2, 6474: 0, 6475: 2, 6476: 0, 6477: 2, 6478: 0, 6479: 2, 6484: 2, 6485: 0, 6486: 2, 6487: 0, 6488: 2, 6489: 0, 6490: 2, 6491: 0, 6492: 2, 6493: 0, 6494: 1, 6495: 0, 6496: 1, 6497: 0, 6498: 0, 6499: 1, 6500: 0, 6501: 2, 6502: 0, 6503: 2, 6504: 0, 6505: 2, 6506: 0, 6507: 2, 6508: 0, 6509: 0, 6510: 2, 6515: 1, 6516: 0, 6518: 0, 6519: 2, 6520: 0, 6521: 2, 6522: 0, 6523: 2, 6524: 0, 6525: 2, 6526: 0, 6527: 2, 6528: 0, 6529: 2, 6530: 0, 6531: 2, 6532: 0, 6533: 2, 6534: 0, 6535: 2, 6536: 0, 6537: 2, 6538: 0, 6539: 2, 6540: 0, 6541: 2, 6542: 0, 6543: 2, 6544: 0, 6545: 1, 6546: 0, 6547: 1, 6548: 0, 6549: 2, 6550: 0, 6551: 2, 6552: 0, 6553: 2, 6554: 0, 6555: 2, 6556: 0, 6557: 1, 6558: 0, 6559: 1, 6560: 0, 6561: 1, 6562: 0, 6563: 2, 6564: 0, 6565: 2, 6566: 0, 6567: 0, 6568: 2, 6569: 0, 6570: 1, 6571: 0, 6572: 2, 6573: 0, 6574: 2, 6575: 0, 6576: 2, 6577: 0, 6578: 2, 6582: 2, 6583: 0, 6584: 2, 6585: 0, 6586: 2, 6587: 0, 6588: 2, 6589: 0, 6590: 2, 6591: 0, 6592: 0, 6593: 2, 6594: 0, 6595: 2, 6596: 0, 6597: 2, 6598: 0, 6599: 2, 6600: 0, 6601: 2, 6602: 0, 6603: 2, 6605: 2, 6606: 0, 6607: 2, 6608: 0, 6609: 2, 6610: 0, 6611: 0, 6612: 2, 6613: 0, 6614: 2, 6615: 0, 6616: 2, 6617: 0, 6618: 2, 6633: 2, 6646: 0, 6703: 0, 6784: 0, 6785: 1, 6786: 0, 6787: 1, 6788: 0, 6789: 1, 6790: 0, 6791: 1, 6792: 0, 6793: 1, 6794: 0, 6795: 1, 6796: 0, 6797: 1, 6798: 0, 6799: 1, 6800: 0, 6801: 1, 6802: 0, 6803: 1, 6804: 0, 6805: 1, 6806: 0, 6807: 1, 6808: 0, 6809: 1, 6810: 0, 6811: 1, 6812: 0, 6813: 1, 6814: 0, 6815: 1, 6816: 0, 6817: 1, 6818: 0, 6819: 1, 6820: 0, 6821: 1, 6822: 0, 6823: 1, 6824: 0, 6825: 1, 6826: 0, 6827: 1, 6828: 0, 6829: 1, 6830: 0, 6831: 1, 6832: 0, 6833: 1, 6834: 0, 6835: 1, 6836: 0, 6837: 1, 6838: 0, 6839: 1, 6840: 0, 6841: 1, 6842: 0, 6843: 1, 6844: 0, 6845: 1, 6846: 0, 6847: 1, 6848: 0, 6849: 1, 6850: 0, 6851: 1, 6852: 0, 6853: 1, 6854: 0, 6855: 1, 6856: 0, 6857: 1, 6858: 0, 6859: 1, 6860: 0, 6861: 1, 6862: 0, 6863: 1, 6867: 0, 6868: 1, 6870: 0, 6875: 0, 6876: 0, 6879: 0, 6880: 2, 6884: 0, 6885: 1, 6886: 0, 6887: 1, 6915: 0, 6922: 0, 6923: 2, 6924: 0, 6925: 2, 6962: 0, 6984: 0, 6991: 0, 7128: 2, 7131: 0, 7132: 2, 7142: 0, 7257: 0, 7258: 2, 7259: 0, 7260: 2, 7261: 0, 7262: 2, 7263: 0, 7264: 2, 7265: 0, 7266: 2, 7267: 0, 7268: 2, 7269: 0, 7270: 2, 7271: 0, 7272: 2, 7273: 0, 7274: 2, 7275: 0, 7276: 2, 7277: 0, 7278: 2, 7279: 0, 7280: 2, 7281: 0, 7282: 2, 7283: 0, 7284: 2, 7285: 0, 7286: 2, 7287: 0, 7288: 2, 7289: 0, 7290: 2, 7291: 0, 7292: 2, 7293: 0, 7294: 2, 7295: 0, 7296: 2, 7297: 0, 7298: 2, 7299: 0, 7300: 2, 7301: 0, 7302: 2, 7303: 0, 7304: 2, 7305: 0, 7306: 2, 7307: 0, 7308: 2, 7309: 0, 7310: 2, 7311: 0, 7312: 2, 7313: 0, 7314: 2, 7315: 0, 7316: 2, 7317: 0, 7318: 2, 7319: 0, 7320: 2, 7321: 0, 7322: 2, 7323: 0, 7324: 2, 7325: 0, 7326: 2, 7327: 0, 7328: 2, 7329: 0, 7330: 2, 7331: 0, 7332: 2, 7333: 0, 7334: 2, 7335: 0, 7336: 2, 7337: 0, 7338: 2, 7339: 0, 7340: 2, 7341: 0, 7342: 2, 7343: 0, 7344: 2, 7345: 0, 7346: 2, 7347: 0, 7348: 2, 7349: 0, 7350: 2, 7351: 0, 7352: 2, 7353: 0, 7354: 2, 7355: 0, 7356: 2, 7357: 0, 7358: 2, 7359: 0, 7360: 2, 7361: 0, 7362: 2, 7363: 0, 7364: 2, 7365: 0, 7366: 2, 7367: 0, 7368: 2, 7369: 0, 7370: 2, 7877: 0, 7878: 0, 7882: 0, 7883: 0, 7887: 0, 7899: 0, 7991: 0, 7992: 0, 8035: 2, 8036: 2, 8058: 0, 8059: 0, 8082: 0, 8083: 0, 8088: 0, 8090: 0, 8091: 2, 8092: 0, 8093: 2, 8095: 0, 8096: 2, 8097: 0, 8098: 2, 8099: 0, 8100: 2, 8101: 0, 8102: 2, 8103: 0, 8104: 2, 8105: 0, 8106: 2, 8107: 0, 8108: 2, 8109: 0, 8110: 2, 8111: 0, 8112: 2, 8113: 0, 8114: 2, 8115: 0, 8116: 2, 8117: 0, 8118: 2, 8119: 0, 8120: 2, 8121: 0, 8122: 2, 8123: 0, 8124: 2, 8125: 0, 8126: 2, 8127: 0, 8128: 2, 8129: 0, 8130: 2, 8131: 0, 8132: 2, 8133: 0, 8134: 2, 8135: 0, 8136: 2, 8137: 0, 8138: 2, 8139: 0, 8140: 2, 8141: 0, 8142: 2, 8143: 0, 8144: 2, 8145: 0, 8146: 2, 8147: 0, 8148: 2, 8149: 0, 8150: 2, 8151: 0, 8152: 2, 8153: 0, 8154: 2, 8155: 0, 8156: 2, 8157: 0, 8158: 2, 8159: 0, 8160: 2, 8161: 0, 8162: 2, 8163: 0, 8164: 2, 8165: 0, 8166: 2, 8167: 0, 8168: 2, 8169: 0, 8170: 2, 8171: 0, 8172: 2, 8173: 0, 8177: 2, 8179: 0, 8180: 2, 8181: 0, 8182: 2, 8184: 0, 8185: 2, 8187: 0, 8189: 2, 8191: 0, 8193: 2, 8196: 0, 8197: 2, 8198: 0, 8200: 2, 8201: 0, 8202: 2, 8203: 0, 8204: 2, 8205: 0, 8206: 2, 8207: 0, 8208: 2, 8209: 0, 8210: 2, 8212: 0, 8213: 2, 8214: 0, 8216: 2, 8218: 0, 8220: 2, 8222: 0, 8224: 2, 8225: 0, 8226: 2, 8311: 0, 8312: 1, 8313: 0, 8314: 1, 8315: 0, 8316: 1, 8317: 0, 8318: 1, 8319: 0, 8320: 1, 8321: 0, 8322: 1, 8323: 0, 8324: 1, 8325: 0, 8326: 1, 8327: 0, 8328: 1, 8329: 0, 8330: 1, 8331: 0, 8332: 1, 8333: 0, 8334: 1, 8335: 0, 8336: 1, 8337: 0, 8338: 1, 8339: 0, 8340: 1, 8341: 0, 8342: 1, 8343: 0, 8344: 1, 8345: 0, 8346: 1, 8347: 0, 8348: 1, 8352: 0, 8353: 0, 8379: 0, 8380: 2, 8381: 0, 8382: 2, 8383: 0, 8384: 2, 8385: 0, 8387: 2, 8391: 0, 8395: 0, 8433: 0, 8441: 0, 8455: 0, 8456: 0, 8531: 2, 8682: 0, 8686: 0, 8687: 0, 8692: 0, 8693: 0, 8826: 0, 8903: 0, 8950: 0, 8951: 0, 9039: 0, 9040: 0, 9141: 0, 9149: 0, 9150: 0, 9191: 0, 9221: 0, 9222: 0, 9249: 0, 9250: 0, 9252: 0, 9254: 0, 9265: 0, 9284: 0, 9285: 0, 9300: 0, 9354: 0, 9367: 0, 9373: 0, 9377: 0, 9387: 0, 9391: 0, 9456: 0, 9473: 0, 9498: 0, 9674: 0, 9678: 0, 9680: 0, 9709: 0, 9712: 0, 9713: 0, 9716: 0, 9741: 0, 9748: 2, 9749: 2, 9761: 0, 9766: 0, 9793: 0, 9794: 0, 9869: 0, 9874: 0, 9875: 0, 9880: 0, 9943: 0, 9945: 0, 9947: 0, 9967: 0, 9972: 0, 9977: 0, 20042: 0, 20050: 1, 20499: 0, 20538: 0, 20539: 0, 20790: 0, 20791: 0, 21291: 0, 21292: 0, 21500: 0, 21817: 0, 21818: 0, 22032: 0, 22033: 0, 22091: 0, 22092: 0, 22239: 0, 22240: 0, 22332: 0, 22337: 0, 22338: 0, 22391: 0, 22392: 0, 22639: 0, 22700: 0, 22739: 0, 22770: 0, 22780: 0, 22832: 0, 23090: 0, 23095: 0, 23239: 0, 23240: 0, 23433: 0, 23700: 0, 24047: 0, 24048: 0, 24100: 3, 24200: 0, 24305: 0, 24306: 0, 24382: 10, 24383: 0, 24500: 0, 24547: 0, 24548: 0, 24571: 9, 24600: 0, 25e3: 0, 25231: 0, 25884: 0, 25932: 0, 26237: 0, 26331: 0, 26332: 0, 26432: 0, 26591: 0, 26592: 0, 26632: 0, 26692: 0, 27120: 0, 27200: 0, 27291: 6, 27292: 6, 27429: 0, 27492: 0, 27493: 0, 27500: 0, 27700: 0, 28232: 0, 28600: 0, 28991: 0, 28992: 0, 29100: 0, 29101: 0, 29220: 0, 29221: 0, 29333: 0, 29635: 0, 29636: 0, 29701: 0, 29738: 0, 29739: 0, 29849: 0, 29850: 0, 29871: 8, 29872: 7, 29873: 0, 29874: 0, 30200: 5, 30339: 0, 30340: 0, 30591: 0, 30592: 0, 30791: 0, 30792: 0, 30800: 0, 31028: 0, 31121: 0, 31154: 0, 31170: 0, 31171: 0, 31370: 0, 31528: 0, 31529: 0, 31600: 0, 31700: 0, 31838: 0, 31839: 0, 31900: 0, 31901: 0, 32061: 0, 32062: 0, 32098: 0, 32099: 2, 32100: 0, 32104: 0, 32161: 0, 32766: 0, 53048: 0, 53049: 0, 54090: 0, 54091: 0, 65061: 2, 65062: 2, 65161: 0, 65163: 0, 102041: 2, 102064: 11, 102068: 15, 102069: 16, 102118: 2, 102119: 1, 102120: 2, 102121: 2, 102217: 2, 102218: 0, 102219: 2, 102220: 2, 102378: 1, 102379: 1, 102380: 0, 102381: 1, 102589: 2, 102599: 2, 102600: 2, 102604: 2, 102647: 0, 102704: 2, 102705: 2, 102706: 0, 102731: 0, 102732: 0, 102759: 1, 102760: 1, 102761: 2, 102762: 0, 102763: 2, 102764: 0, 102765: 0, 102766: 2, 102970: 1, 102974: 2, 102993: 0, 102994: 0, 102995: 2, 102996: 2, 103015: 0, 103016: 2, 103017: 0, 103018: 2, 103025: 0, 103026: 0, 103027: 2, 103028: 2, 103035: 0, 103036: 0, 103037: 2, 103038: 2, 103039: 0, 103040: 0, 103041: 2, 103042: 2, 103043: 0, 103044: 0, 103045: 2, 103046: 2, 103047: 0, 103048: 0, 103049: 2, 103050: 2, 103051: 0, 103052: 2, 103053: 0, 103054: 2, 103055: 0, 103056: 2, 103057: 0, 103058: 0, 103059: 2, 103060: 2, 103061: 0, 103062: 0, 103063: 2, 103064: 2, 103069: 2, 103070: 0, 103071: 0, 103072: 2, 103073: 2, 103086: 0, 103087: 0, 103088: 2, 103089: 2, 103094: 1, 103095: 0, 103096: 2, 103103: 0, 103104: 2, 103105: 0, 103106: 2, 103121: 0, 103122: 2, 103123: 0, 103124: 0, 103125: 1, 103126: 1, 103127: 0, 103128: 0, 103129: 2, 103130: 2, 103131: 0, 103132: 0, 103133: 2, 103134: 2, 103135: 0, 103136: 0, 103137: 1, 103138: 1, 103139: 0, 103140: 2, 103141: 0, 103142: 2, 103143: 0, 103144: 2, 103145: 0, 103146: 1, 103147: 0, 103148: 0, 103149: 2, 103150: 2, 103151: 0, 103152: 2, 103172: 0, 103173: 2, 103174: 0, 103175: 0, 103176: 2, 103177: 2, 103178: 0, 103179: 0, 103180: 2, 103181: 2, 103182: 0, 103183: 0, 103184: 2, 103185: 2, 103228: 0, 103229: 0, 103230: 2, 103231: 2, 103250: 0, 103251: 2, 103252: 0, 103253: 2, 103260: 0, 103261: 0, 103262: 2, 103263: 2, 103270: 0, 103271: 0, 103272: 2, 103273: 2, 103274: 0, 103275: 0, 103276: 2, 103277: 2, 103278: 0, 103279: 0, 103280: 2, 103281: 2, 103282: 0, 103283: 0, 103284: 2, 103285: 2, 103286: 0, 103287: 2, 103288: 0, 103289: 2, 103290: 0, 103291: 2, 103292: 0, 103293: 0, 103294: 2, 103295: 2, 103296: 0, 103297: 0, 103298: 2, 103299: 2, 103376: 2, 103377: 0, 103378: 0, 103379: 2, 103380: 2, 103393: 0, 103394: 0, 103395: 2, 103396: 2, 103472: 0, 103473: 1, 103474: 0, 103475: 2, 103482: 0, 103483: 2, 103484: 0, 103485: 2, 103500: 0, 103501: 2, 103502: 0, 103503: 0, 103504: 1, 103505: 1, 103506: 0, 103507: 0, 103508: 2, 103509: 2, 103510: 0, 103511: 0, 103512: 2, 103513: 2, 103514: 0, 103515: 2, 103516: 0, 103517: 2, 103518: 0, 103519: 2, 103520: 0, 103521: 1, 103522: 0, 103523: 0, 103524: 2, 103525: 2, 103526: 0, 103527: 2, 103561: 2, 103562: 2, 103563: 0, 103564: 0, 103565: 2, 103566: 2, 103567: 0, 103568: 0, 103569: 2, 103570: 2, 103584: 0, 103585: 2, 103586: 0, 103587: 2, 103588: 1, 103589: 0, 103590: 2, 103591: 1, 103592: 0, 103593: 2, 103594: 1, 103695: 2 };
for (o3 = 2e3; o3 <= 2045; o3++)
  r4[o3] = 0;
for (o3 = 2056; o3 <= 2065; o3++)
  r4[o3] = 0;
for (o3 = 2067; o3 <= 2135; o3++)
  r4[o3] = 0;
for (o3 = 2137; o3 <= 2154; o3++)
  r4[o3] = 0;
for (o3 = 2161; o3 <= 2170; o3++)
  r4[o3] = 0;
for (o3 = 2172; o3 <= 2193; o3++)
  r4[o3] = 0;
for (o3 = 2195; o3 <= 2198; o3++)
  r4[o3] = 0;
for (o3 = 2200; o3 <= 2203; o3++)
  r4[o3] = 0;
for (o3 = 2205; o3 <= 2217; o3++)
  r4[o3] = 0;
for (o3 = 2222; o3 <= 2224; o3++)
  r4[o3] = 1;
for (o3 = 2225; o3 <= 2250; o3++)
  r4[o3] = 2;
for (o3 = 2251; o3 <= 2253; o3++)
  r4[o3] = 1;
for (o3 = 2257; o3 <= 2264; o3++)
  r4[o3] = 2;
for (o3 = 2274; o3 <= 2279; o3++)
  r4[o3] = 2;
for (o3 = 2280; o3 <= 2282; o3++)
  r4[o3] = 1;
for (o3 = 2283; o3 <= 2289; o3++)
  r4[o3] = 2;
for (o3 = 2290; o3 <= 2292; o3++)
  r4[o3] = 0;
for (o3 = 2308; o3 <= 2313; o3++)
  r4[o3] = 0;
for (o3 = 2315; o3 <= 2491; o3++)
  r4[o3] = 0;
for (o3 = 2494; o3 <= 2866; o3++)
  r4[o3] = 0;
for (o3 = 2867; o3 <= 2869; o3++)
  r4[o3] = 1;
for (o3 = 2870; o3 <= 2888; o3++)
  r4[o3] = 2;
for (o3 = 2891; o3 <= 2895; o3++)
  r4[o3] = 2;
for (o3 = 2896; o3 <= 2898; o3++)
  r4[o3] = 1;
for (o3 = 2902; o3 <= 2908; o3++)
  r4[o3] = 2;
for (o3 = 2915; o3 <= 2920; o3++)
  r4[o3] = 2;
for (o3 = 2921; o3 <= 2923; o3++)
  r4[o3] = 1;
for (o3 = 2924; o3 <= 2930; o3++)
  r4[o3] = 2;
for (o3 = 2931; o3 <= 2962; o3++)
  r4[o3] = 0;
for (o3 = 2964; o3 <= 2968; o3++)
  r4[o3] = 2;
for (o3 = 2969; o3 <= 2973; o3++)
  r4[o3] = 0;
for (o3 = 2975; o3 <= 2991; o3++)
  r4[o3] = 0;
for (o3 = 2995; o3 <= 3051; o3++)
  r4[o3] = 0;
for (o3 = 3054; o3 <= 3079; o3++)
  r4[o3] = 0;
for (o3 = 3081; o3 <= 3088; o3++)
  r4[o3] = 0;
for (o3 = 3092; o3 <= 3101; o3++)
  r4[o3] = 0;
for (o3 = 3106; o3 <= 3138; o3++)
  r4[o3] = 0;
for (o3 = 3146; o3 <= 3151; o3++)
  r4[o3] = 0;
for (o3 = 3153; o3 <= 3166; o3++)
  r4[o3] = 0;
for (o3 = 3168; o3 <= 3172; o3++)
  r4[o3] = 0;
for (o3 = 3174; o3 <= 3203; o3++)
  r4[o3] = 0;
for (o3 = 3294; o3 <= 3358; o3++)
  r4[o3] = 0;
for (o3 = 3367; o3 <= 3403; o3++)
  r4[o3] = 0;
for (o3 = 3408; o3 <= 3416; o3++)
  r4[o3] = 0;
for (o3 = 3417; o3 <= 3438; o3++)
  r4[o3] = 2;
for (o3 = 3441; o3 <= 3446; o3++)
  r4[o3] = 2;
for (o3 = 3447; o3 <= 3450; o3++)
  r4[o3] = 0;
for (o3 = 3451; o3 <= 3459; o3++)
  r4[o3] = 2;
for (o3 = 3460; o3 <= 3478; o3++)
  r4[o3] = 0;
for (o3 = 3554; o3 <= 3559; o3++)
  r4[o3] = 0;
for (o3 = 3560; o3 <= 3570; o3++)
  r4[o3] = 2;
for (o3 = 3571; o3 <= 3581; o3++)
  r4[o3] = 0;
for (o3 = 3594; o3 <= 3597; o3++)
  r4[o3] = 0;
for (o3 = 3601; o3 <= 3604; o3++)
  r4[o3] = 0;
for (o3 = 3637; o3 <= 3639; o3++)
  r4[o3] = 0;
for (o3 = 3665; o3 <= 3667; o3++)
  r4[o3] = 0;
for (o3 = 3693; o3 <= 3695; o3++)
  r4[o3] = 0;
for (o3 = 3701; o3 <= 3727; o3++)
  r4[o3] = 0;
for (o3 = 3728; o3 <= 3739; o3++)
  r4[o3] = 2;
for (o3 = 3740; o3 <= 3751; o3++)
  r4[o3] = 0;
for (o3 = 3753; o3 <= 3760; o3++)
  r4[o3] = 2;
for (o3 = 3761; o3 <= 3773; o3++)
  r4[o3] = 0;
for (o3 = 3775; o3 <= 3777; o3++)
  r4[o3] = 0;
for (o3 = 3779; o3 <= 3781; o3++)
  r4[o3] = 0;
for (o3 = 3783; o3 <= 3785; o3++)
  r4[o3] = 0;
for (o3 = 3788; o3 <= 3791; o3++)
  r4[o3] = 0;
for (o3 = 3797; o3 <= 3802; o3++)
  r4[o3] = 0;
for (o3 = 3814; o3 <= 3816; o3++)
  r4[o3] = 0;
for (o3 = 3825; o3 <= 3829; o3++)
  r4[o3] = 0;
for (o3 = 3832; o3 <= 3841; o3++)
  r4[o3] = 0;
for (o3 = 3844; o3 <= 3852; o3++)
  r4[o3] = 0;
for (o3 = 3873; o3 <= 3885; o3++)
  r4[o3] = 0;
for (o3 = 3890; o3 <= 3893; o3++)
  r4[o3] = 0;
for (o3 = 3907; o3 <= 3912; o3++)
  r4[o3] = 0;
for (o3 = 3942; o3 <= 3950; o3++)
  r4[o3] = 0;
for (o3 = 3968; o3 <= 3970; o3++)
  r4[o3] = 0;
for (o3 = 3973; o3 <= 3976; o3++)
  r4[o3] = 0;
for (o3 = 3986; o3 <= 3989; o3++)
  r4[o3] = 0;
for (o3 = 3994; o3 <= 3997; o3++)
  r4[o3] = 0;
for (o3 = 4048; o3 <= 4051; o3++)
  r4[o3] = 0;
for (o3 = 4056; o3 <= 4063; o3++)
  r4[o3] = 0;
for (o3 = 4093; o3 <= 4096; o3++)
  r4[o3] = 0;
for (o3 = 4390; o3 <= 4398; o3++)
  r4[o3] = 0;
for (o3 = 4399; o3 <= 4413; o3++)
  r4[o3] = 2;
for (o3 = 4418; o3 <= 4433; o3++)
  r4[o3] = 2;
for (o3 = 4455; o3 <= 4457; o3++)
  r4[o3] = 2;
for (o3 = 4484; o3 <= 4489; o3++)
  r4[o3] = 0;
for (o3 = 4491; o3 <= 4554; o3++)
  r4[o3] = 0;
for (o3 = 4568; o3 <= 4589; o3++)
  r4[o3] = 0;
for (o3 = 4652; o3 <= 4656; o3++)
  r4[o3] = 0;
for (o3 = 4766; o3 <= 4800; o3++)
  r4[o3] = 0;
for (o3 = 5014; o3 <= 5016; o3++)
  r4[o3] = 0;
for (o3 = 5069; o3 <= 5072; o3++)
  r4[o3] = 0;
for (o3 = 5105; o3 <= 5130; o3++)
  r4[o3] = 0;
for (o3 = 5173; o3 <= 5188; o3++)
  r4[o3] = 0;
for (o3 = 5253; o3 <= 5259; o3++)
  r4[o3] = 0;
for (o3 = 5269; o3 <= 5275; o3++)
  r4[o3] = 0;
for (o3 = 5292; o3 <= 5311; o3++)
  r4[o3] = 0;
for (o3 = 5329; o3 <= 5331; o3++)
  r4[o3] = 0;
for (o3 = 5343; o3 <= 5349; o3++)
  r4[o3] = 0;
for (o3 = 5355; o3 <= 5357; o3++)
  r4[o3] = 0;
for (o3 = 5387; o3 <= 5389; o3++)
  r4[o3] = 0;
for (o3 = 5459; o3 <= 5463; o3++)
  r4[o3] = 0;
for (o3 = 5479; o3 <= 5482; o3++)
  r4[o3] = 0;
for (o3 = 5518; o3 <= 5520; o3++)
  r4[o3] = 0;
for (o3 = 5530; o3 <= 5539; o3++)
  r4[o3] = 0;
for (o3 = 5550; o3 <= 5552; o3++)
  r4[o3] = 0;
for (o3 = 5562; o3 <= 5583; o3++)
  r4[o3] = 0;
for (o3 = 5623; o3 <= 5625; o3++)
  r4[o3] = 2;
for (o3 = 5631; o3 <= 5639; o3++)
  r4[o3] = 0;
for (o3 = 5649; o3 <= 5653; o3++)
  r4[o3] = 0;
for (o3 = 5663; o3 <= 5680; o3++)
  r4[o3] = 0;
for (o3 = 5682; o3 <= 5685; o3++)
  r4[o3] = 0;
for (o3 = 5875; o3 <= 5877; o3++)
  r4[o3] = 0;
for (o3 = 5896; o3 <= 5899; o3++)
  r4[o3] = 0;
for (o3 = 5921; o3 <= 5940; o3++)
  r4[o3] = 0;
for (o3 = 6050; o3 <= 6125; o3++)
  r4[o3] = 0;
for (o3 = 6244; o3 <= 6275; o3++)
  r4[o3] = 0;
for (o3 = 6328; o3 <= 6348; o3++)
  r4[o3] = 0;
for (o3 = 6350; o3 <= 6356; o3++)
  r4[o3] = 0;
for (o3 = 6366; o3 <= 6372; o3++)
  r4[o3] = 0;
for (o3 = 6381; o3 <= 6387; o3++)
  r4[o3] = 0;
for (o3 = 6393; o3 <= 6404; o3++)
  r4[o3] = 0;
for (o3 = 6480; o3 <= 6483; o3++)
  r4[o3] = 0;
for (o3 = 6511; o3 <= 6514; o3++)
  r4[o3] = 0;
for (o3 = 6579; o3 <= 6581; o3++)
  r4[o3] = 0;
for (o3 = 6619; o3 <= 6624; o3++)
  r4[o3] = 0;
for (o3 = 6625; o3 <= 6627; o3++)
  r4[o3] = 2;
for (o3 = 6628; o3 <= 6632; o3++)
  r4[o3] = 0;
for (o3 = 6634; o3 <= 6637; o3++)
  r4[o3] = 0;
for (o3 = 6669; o3 <= 6692; o3++)
  r4[o3] = 0;
for (o3 = 6707; o3 <= 6709; o3++)
  r4[o3] = 0;
for (o3 = 6720; o3 <= 6723; o3++)
  r4[o3] = 0;
for (o3 = 6732; o3 <= 6738; o3++)
  r4[o3] = 0;
for (o3 = 6931; o3 <= 6933; o3++)
  r4[o3] = 0;
for (o3 = 6956; o3 <= 6959; o3++)
  r4[o3] = 0;
for (o3 = 7005; o3 <= 7007; o3++)
  r4[o3] = 0;
for (o3 = 7057; o3 <= 7070; o3++)
  r4[o3] = 2;
for (o3 = 7074; o3 <= 7082; o3++)
  r4[o3] = 0;
for (o3 = 7109; o3 <= 7118; o3++)
  r4[o3] = 0;
for (o3 = 7119; o3 <= 7127; o3++)
  r4[o3] = 1;
for (o3 = 7374; o3 <= 7376; o3++)
  r4[o3] = 0;
for (o3 = 7528; o3 <= 7586; o3++)
  r4[o3] = 0;
for (o3 = 7587; o3 <= 7645; o3++)
  r4[o3] = 2;
for (o3 = 7692; o3 <= 7696; o3++)
  r4[o3] = 0;
for (o3 = 7755; o3 <= 7787; o3++)
  r4[o3] = 0;
for (o3 = 7791; o3 <= 7795; o3++)
  r4[o3] = 0;
for (o3 = 7799; o3 <= 7801; o3++)
  r4[o3] = 0;
for (o3 = 7803; o3 <= 7805; o3++)
  r4[o3] = 0;
for (o3 = 7825; o3 <= 7831; o3++)
  r4[o3] = 0;
for (o3 = 7845; o3 <= 7859; o3++)
  r4[o3] = 0;
for (o3 = 8013; o3 <= 8032; o3++)
  r4[o3] = 0;
for (o3 = 8065; o3 <= 8068; o3++)
  r4[o3] = 1;
for (o3 = 8518; o3 <= 8529; o3++)
  r4[o3] = 2;
for (o3 = 8533; o3 <= 8536; o3++)
  r4[o3] = 2;
for (o3 = 8538; o3 <= 8540; o3++)
  r4[o3] = 2;
for (o3 = 8677; o3 <= 8679; o3++)
  r4[o3] = 0;
for (o3 = 8836; o3 <= 8840; o3++)
  r4[o3] = 0;
for (o3 = 8857; o3 <= 8859; o3++)
  r4[o3] = 0;
for (o3 = 8908; o3 <= 8910; o3++)
  r4[o3] = 0;
for (o3 = 9154; o3 <= 9159; o3++)
  r4[o3] = 0;
for (o3 = 9205; o3 <= 9218; o3++)
  r4[o3] = 0;
for (o3 = 9271; o3 <= 9273; o3++)
  r4[o3] = 0;
for (o3 = 9295; o3 <= 9297; o3++)
  r4[o3] = 0;
for (o3 = 9356; o3 <= 9360; o3++)
  r4[o3] = 0;
for (o3 = 9404; o3 <= 9407; o3++)
  r4[o3] = 0;
for (o3 = 9476; o3 <= 9482; o3++)
  r4[o3] = 0;
for (o3 = 9487; o3 <= 9494; o3++)
  r4[o3] = 0;
for (o3 = 9697; o3 <= 9699; o3++)
  r4[o3] = 0;
for (o3 = 9821; o3 <= 9865; o3++)
  r4[o3] = 0;
for (o3 = 20002; o3 <= 20032; o3++)
  r4[o3] = 0;
for (o3 = 20047; o3 <= 20049; o3++)
  r4[o3] = 0;
for (o3 = 20062; o3 <= 20092; o3++)
  r4[o3] = 0;
for (o3 = 20135; o3 <= 20138; o3++)
  r4[o3] = 0;
for (o3 = 20248; o3 <= 20258; o3++)
  r4[o3] = 0;
for (o3 = 20348; o3 <= 20358; o3++)
  r4[o3] = 0;
for (o3 = 20436; o3 <= 20440; o3++)
  r4[o3] = 0;
for (o3 = 20822; o3 <= 20824; o3++)
  r4[o3] = 0;
for (o3 = 20904; o3 <= 20932; o3++)
  r4[o3] = 0;
for (o3 = 20934; o3 <= 20936; o3++)
  r4[o3] = 0;
for (o3 = 21004; o3 <= 21032; o3++)
  r4[o3] = 0;
for (o3 = 21035; o3 <= 21037; o3++)
  r4[o3] = 0;
for (o3 = 21095; o3 <= 21097; o3++)
  r4[o3] = 0;
for (o3 = 21148; o3 <= 21150; o3++)
  r4[o3] = 0;
for (o3 = 21207; o3 <= 21264; o3++)
  r4[o3] = 0;
for (o3 = 21307; o3 <= 21364; o3++)
  r4[o3] = 0;
for (o3 = 21413; o3 <= 21423; o3++)
  r4[o3] = 0;
for (o3 = 21453; o3 <= 21463; o3++)
  r4[o3] = 0;
for (o3 = 21473; o3 <= 21483; o3++)
  r4[o3] = 0;
for (o3 = 21780; o3 <= 21782; o3++)
  r4[o3] = 0;
for (o3 = 21891; o3 <= 21894; o3++)
  r4[o3] = 0;
for (o3 = 21896; o3 <= 21899; o3++)
  r4[o3] = 0;
for (o3 = 22171; o3 <= 22177; o3++)
  r4[o3] = 0;
for (o3 = 22181; o3 <= 22187; o3++)
  r4[o3] = 0;
for (o3 = 22191; o3 <= 22197; o3++)
  r4[o3] = 0;
for (o3 = 22207; o3 <= 22222; o3++)
  r4[o3] = 0;
for (o3 = 22234; o3 <= 22236; o3++)
  r4[o3] = 0;
for (o3 = 22243; o3 <= 22250; o3++)
  r4[o3] = 0;
for (o3 = 22262; o3 <= 22265; o3++)
  r4[o3] = 0;
for (o3 = 22307; o3 <= 22322; o3++)
  r4[o3] = 0;
for (o3 = 22348; o3 <= 22357; o3++)
  r4[o3] = 0;
for (o3 = 22407; o3 <= 22422; o3++)
  r4[o3] = 0;
for (o3 = 22462; o3 <= 22465; o3++)
  r4[o3] = 0;
for (o3 = 22521; o3 <= 22525; o3++)
  r4[o3] = 0;
for (o3 = 22607; o3 <= 22622; o3++)
  r4[o3] = 0;
for (o3 = 22641; o3 <= 22646; o3++)
  r4[o3] = 0;
for (o3 = 22648; o3 <= 22657; o3++)
  r4[o3] = 0;
for (o3 = 22707; o3 <= 22722; o3++)
  r4[o3] = 0;
for (o3 = 22762; o3 <= 22765; o3++)
  r4[o3] = 0;
for (o3 = 22991; o3 <= 22994; o3++)
  r4[o3] = 0;
for (o3 = 23028; o3 <= 23038; o3++)
  r4[o3] = 0;
for (o3 = 23830; o3 <= 23853; o3++)
  r4[o3] = 0;
for (o3 = 23866; o3 <= 23872; o3++)
  r4[o3] = 0;
for (o3 = 23877; o3 <= 23884; o3++)
  r4[o3] = 0;
for (o3 = 23886; o3 <= 23894; o3++)
  r4[o3] = 0;
for (o3 = 23946; o3 <= 23948; o3++)
  r4[o3] = 0;
for (o3 = 24311; o3 <= 24313; o3++)
  r4[o3] = 0;
for (o3 = 24342; o3 <= 24347; o3++)
  r4[o3] = 0;
for (o3 = 24370; o3 <= 24374; o3++)
  r4[o3] = 10;
for (o3 = 24375; o3 <= 24381; o3++)
  r4[o3] = 0;
for (o3 = 24718; o3 <= 24721; o3++)
  r4[o3] = 0;
for (o3 = 24817; o3 <= 24821; o3++)
  r4[o3] = 0;
for (o3 = 24877; o3 <= 24882; o3++)
  r4[o3] = 0;
for (o3 = 24891; o3 <= 24893; o3++)
  r4[o3] = 0;
for (o3 = 25391; o3 <= 25395; o3++)
  r4[o3] = 0;
for (o3 = 25828; o3 <= 25838; o3++)
  r4[o3] = 0;
for (o3 = 26191; o3 <= 26195; o3++)
  r4[o3] = 0;
for (o3 = 26391; o3 <= 26393; o3++)
  r4[o3] = 0;
for (o3 = 26701; o3 <= 26722; o3++)
  r4[o3] = 0;
for (o3 = 26729; o3 <= 26799; o3++)
  r4[o3] = 2;
for (o3 = 26801; o3 <= 26803; o3++)
  r4[o3] = 2;
for (o3 = 26811; o3 <= 26813; o3++)
  r4[o3] = 2;
for (o3 = 26847; o3 <= 26870; o3++)
  r4[o3] = 2;
for (o3 = 26891; o3 <= 26899; o3++)
  r4[o3] = 0;
for (o3 = 26901; o3 <= 26923; o3++)
  r4[o3] = 0;
for (o3 = 26929; o3 <= 26946; o3++)
  r4[o3] = 0;
for (o3 = 26948; o3 <= 26998; o3++)
  r4[o3] = 0;
for (o3 = 27037; o3 <= 27040; o3++)
  r4[o3] = 0;
for (o3 = 27205; o3 <= 27232; o3++)
  r4[o3] = 0;
for (o3 = 27258; o3 <= 27260; o3++)
  r4[o3] = 0;
for (o3 = 27391; o3 <= 27398; o3++)
  r4[o3] = 0;
for (o3 = 27561; o3 <= 27564; o3++)
  r4[o3] = 0;
for (o3 = 27571; o3 <= 27574; o3++)
  r4[o3] = 0;
for (o3 = 27581; o3 <= 27584; o3++)
  r4[o3] = 0;
for (o3 = 27591; o3 <= 27594; o3++)
  r4[o3] = 0;
for (o3 = 28191; o3 <= 28193; o3++)
  r4[o3] = 0;
for (o3 = 28348; o3 <= 28358; o3++)
  r4[o3] = 0;
for (o3 = 28402; o3 <= 28432; o3++)
  r4[o3] = 0;
for (o3 = 28462; o3 <= 28492; o3++)
  r4[o3] = 0;
for (o3 = 29118; o3 <= 29122; o3++)
  r4[o3] = 0;
for (o3 = 29168; o3 <= 29172; o3++)
  r4[o3] = 0;
for (o3 = 29177; o3 <= 29185; o3++)
  r4[o3] = 0;
for (o3 = 29187; o3 <= 29195; o3++)
  r4[o3] = 0;
for (o3 = 29900; o3 <= 29903; o3++)
  r4[o3] = 0;
for (o3 = 30161; o3 <= 30179; o3++)
  r4[o3] = 0;
for (o3 = 30491; o3 <= 30494; o3++)
  r4[o3] = 0;
for (o3 = 30729; o3 <= 30732; o3++)
  r4[o3] = 0;
for (o3 = 31251; o3 <= 31259; o3++)
  r4[o3] = 0;
for (o3 = 31265; o3 <= 31268; o3++)
  r4[o3] = 0;
for (o3 = 31275; o3 <= 31279; o3++)
  r4[o3] = 0;
for (o3 = 31281; o3 <= 31297; o3++)
  r4[o3] = 0;
for (o3 = 31461; o3 <= 31469; o3++)
  r4[o3] = 0;
for (o3 = 31491; o3 <= 31495; o3++)
  r4[o3] = 0;
for (o3 = 31917; o3 <= 31922; o3++)
  r4[o3] = 0;
for (o3 = 31965; o3 <= 32e3; o3++)
  r4[o3] = 0;
for (o3 = 32001; o3 <= 32003; o3++)
  r4[o3] = 2;
for (o3 = 32005; o3 <= 32031; o3++)
  r4[o3] = 2;
for (o3 = 32033; o3 <= 32060; o3++)
  r4[o3] = 2;
for (o3 = 32064; o3 <= 32067; o3++)
  r4[o3] = 2;
for (o3 = 32074; o3 <= 32077; o3++)
  r4[o3] = 2;
for (o3 = 32081; o3 <= 32086; o3++)
  r4[o3] = 0;
for (o3 = 32107; o3 <= 32130; o3++)
  r4[o3] = 0;
for (o3 = 32133; o3 <= 32159; o3++)
  r4[o3] = 0;
for (o3 = 32164; o3 <= 32167; o3++)
  r4[o3] = 2;
for (o3 = 32180; o3 <= 32199; o3++)
  r4[o3] = 0;
for (o3 = 32201; o3 <= 32260; o3++)
  r4[o3] = 0;
for (o3 = 32301; o3 <= 32360; o3++)
  r4[o3] = 0;
for (o3 = 32601; o3 <= 32662; o3++)
  r4[o3] = 0;
for (o3 = 32664; o3 <= 32667; o3++)
  r4[o3] = 2;
for (o3 = 32701; o3 <= 32761; o3++)
  r4[o3] = 0;
for (o3 = 53001; o3 <= 53004; o3++)
  r4[o3] = 0;
for (o3 = 53008; o3 <= 53019; o3++)
  r4[o3] = 0;
for (o3 = 53021; o3 <= 53032; o3++)
  r4[o3] = 0;
for (o3 = 53034; o3 <= 53037; o3++)
  r4[o3] = 0;
for (o3 = 53042; o3 <= 53046; o3++)
  r4[o3] = 0;
for (o3 = 53074; o3 <= 53080; o3++)
  r4[o3] = 0;
for (o3 = 54001; o3 <= 54004; o3++)
  r4[o3] = 0;
for (o3 = 54008; o3 <= 54019; o3++)
  r4[o3] = 0;
for (o3 = 54021; o3 <= 54032; o3++)
  r4[o3] = 0;
for (o3 = 54034; o3 <= 54037; o3++)
  r4[o3] = 0;
for (o3 = 54042; o3 <= 54046; o3++)
  r4[o3] = 0;
for (o3 = 54048; o3 <= 54053; o3++)
  r4[o3] = 0;
for (o3 = 54074; o3 <= 54080; o3++)
  r4[o3] = 0;
for (o3 = 54098; o3 <= 54101; o3++)
  r4[o3] = 0;
for (o3 = 102001; o3 <= 102040; o3++)
  r4[o3] = 0;
for (o3 = 102042; o3 <= 102063; o3++)
  r4[o3] = 0;
for (o3 = 102065; o3 <= 102067; o3++)
  r4[o3] = 0;
for (o3 = 102070; o3 <= 102117; o3++)
  r4[o3] = 0;
for (o3 = 102122; o3 <= 102216; o3++)
  r4[o3] = 0;
for (o3 = 102221; o3 <= 102377; o3++)
  r4[o3] = 0;
for (o3 = 102382; o3 <= 102388; o3++)
  r4[o3] = 0;
for (o3 = 102389; o3 <= 102398; o3++)
  r4[o3] = 2;
for (o3 = 102399; o3 <= 102444; o3++)
  r4[o3] = 0;
for (o3 = 102445; o3 <= 102447; o3++)
  r4[o3] = 2;
for (o3 = 102448; o3 <= 102458; o3++)
  r4[o3] = 0;
for (o3 = 102459; o3 <= 102468; o3++)
  r4[o3] = 2;
for (o3 = 102469; o3 <= 102499; o3++)
  r4[o3] = 0;
for (o3 = 102500; o3 <= 102519; o3++)
  r4[o3] = 1;
for (o3 = 102520; o3 <= 102524; o3++)
  r4[o3] = 0;
for (o3 = 102525; o3 <= 102529; o3++)
  r4[o3] = 2;
for (o3 = 102530; o3 <= 102588; o3++)
  r4[o3] = 0;
for (o3 = 102590; o3 <= 102598; o3++)
  r4[o3] = 0;
for (o3 = 102601; o3 <= 102603; o3++)
  r4[o3] = 0;
for (o3 = 102605; o3 <= 102628; o3++)
  r4[o3] = 0;
for (o3 = 102629; o3 <= 102646; o3++)
  r4[o3] = 2;
for (o3 = 102648; o3 <= 102700; o3++)
  r4[o3] = 2;
for (o3 = 102701; o3 <= 102703; o3++)
  r4[o3] = 0;
for (o3 = 102707; o3 <= 102730; o3++)
  r4[o3] = 2;
for (o3 = 102733; o3 <= 102758; o3++)
  r4[o3] = 2;
for (o3 = 102767; o3 <= 102900; o3++)
  r4[o3] = 0;
for (o3 = 102901; o3 <= 102933; o3++)
  r4[o3] = 2;
for (o3 = 102934; o3 <= 102950; o3++)
  r4[o3] = 13;
for (o3 = 102951; o3 <= 102955; o3++)
  r4[o3] = 0;
for (o3 = 102961; o3 <= 102963; o3++)
  r4[o3] = 0;
for (o3 = 102965; o3 <= 102969; o3++)
  r4[o3] = 0;
for (o3 = 102971; o3 <= 102973; o3++)
  r4[o3] = 0;
for (o3 = 102975; o3 <= 102989; o3++)
  r4[o3] = 0;
for (o3 = 102990; o3 <= 102992; o3++)
  r4[o3] = 1;
for (o3 = 102997; o3 <= 103002; o3++)
  r4[o3] = 0;
for (o3 = 103003; o3 <= 103008; o3++)
  r4[o3] = 2;
for (o3 = 103009; o3 <= 103011; o3++)
  r4[o3] = 0;
for (o3 = 103012; o3 <= 103014; o3++)
  r4[o3] = 2;
for (o3 = 103019; o3 <= 103021; o3++)
  r4[o3] = 0;
for (o3 = 103022; o3 <= 103024; o3++)
  r4[o3] = 2;
for (o3 = 103029; o3 <= 103031; o3++)
  r4[o3] = 0;
for (o3 = 103032; o3 <= 103034; o3++)
  r4[o3] = 2;
for (o3 = 103065; o3 <= 103068; o3++)
  r4[o3] = 0;
for (o3 = 103074; o3 <= 103076; o3++)
  r4[o3] = 0;
for (o3 = 103077; o3 <= 103079; o3++)
  r4[o3] = 1;
for (o3 = 103080; o3 <= 103082; o3++)
  r4[o3] = 0;
for (o3 = 103083; o3 <= 103085; o3++)
  r4[o3] = 2;
for (o3 = 103090; o3 <= 103093; o3++)
  r4[o3] = 0;
for (o3 = 103097; o3 <= 103099; o3++)
  r4[o3] = 0;
for (o3 = 103100; o3 <= 103102; o3++)
  r4[o3] = 2;
for (o3 = 103107; o3 <= 103109; o3++)
  r4[o3] = 0;
for (o3 = 103110; o3 <= 103112; o3++)
  r4[o3] = 2;
for (o3 = 103113; o3 <= 103116; o3++)
  r4[o3] = 0;
for (o3 = 103117; o3 <= 103120; o3++)
  r4[o3] = 2;
for (o3 = 103153; o3 <= 103157; o3++)
  r4[o3] = 0;
for (o3 = 103158; o3 <= 103162; o3++)
  r4[o3] = 2;
for (o3 = 103163; o3 <= 103165; o3++)
  r4[o3] = 0;
for (o3 = 103166; o3 <= 103168; o3++)
  r4[o3] = 1;
for (o3 = 103169; o3 <= 103171; o3++)
  r4[o3] = 2;
for (o3 = 103186; o3 <= 103188; o3++)
  r4[o3] = 0;
for (o3 = 103189; o3 <= 103191; o3++)
  r4[o3] = 2;
for (o3 = 103192; o3 <= 103195; o3++)
  r4[o3] = 0;
for (o3 = 103196; o3 <= 103199; o3++)
  r4[o3] = 2;
for (o3 = 103200; o3 <= 103224; o3++)
  r4[o3] = 0;
for (o3 = 103225; o3 <= 103227; o3++)
  r4[o3] = 1;
for (o3 = 103232; o3 <= 103237; o3++)
  r4[o3] = 0;
for (o3 = 103238; o3 <= 103243; o3++)
  r4[o3] = 2;
for (o3 = 103244; o3 <= 103246; o3++)
  r4[o3] = 0;
for (o3 = 103247; o3 <= 103249; o3++)
  r4[o3] = 2;
for (o3 = 103254; o3 <= 103256; o3++)
  r4[o3] = 0;
for (o3 = 103257; o3 <= 103259; o3++)
  r4[o3] = 2;
for (o3 = 103264; o3 <= 103266; o3++)
  r4[o3] = 0;
for (o3 = 103267; o3 <= 103269; o3++)
  r4[o3] = 2;
for (o3 = 103300; o3 <= 103375; o3++)
  r4[o3] = 0;
for (o3 = 103381; o3 <= 103383; o3++)
  r4[o3] = 0;
for (o3 = 103384; o3 <= 103386; o3++)
  r4[o3] = 1;
for (o3 = 103387; o3 <= 103389; o3++)
  r4[o3] = 0;
for (o3 = 103390; o3 <= 103392; o3++)
  r4[o3] = 2;
for (o3 = 103397; o3 <= 103399; o3++)
  r4[o3] = 0;
for (o3 = 103400; o3 <= 103471; o3++)
  r4[o3] = 2;
for (o3 = 103476; o3 <= 103478; o3++)
  r4[o3] = 0;
for (o3 = 103479; o3 <= 103481; o3++)
  r4[o3] = 2;
for (o3 = 103486; o3 <= 103488; o3++)
  r4[o3] = 0;
for (o3 = 103489; o3 <= 103491; o3++)
  r4[o3] = 2;
for (o3 = 103492; o3 <= 103495; o3++)
  r4[o3] = 0;
for (o3 = 103496; o3 <= 103499; o3++)
  r4[o3] = 2;
for (o3 = 103528; o3 <= 103543; o3++)
  r4[o3] = 0;
for (o3 = 103544; o3 <= 103548; o3++)
  r4[o3] = 2;
for (o3 = 103549; o3 <= 103551; o3++)
  r4[o3] = 0;
for (o3 = 103552; o3 <= 103554; o3++)
  r4[o3] = 1;
for (o3 = 103555; o3 <= 103557; o3++)
  r4[o3] = 2;
for (o3 = 103558; o3 <= 103560; o3++)
  r4[o3] = 0;
for (o3 = 103571; o3 <= 103573; o3++)
  r4[o3] = 0;
for (o3 = 103574; o3 <= 103576; o3++)
  r4[o3] = 2;
for (o3 = 103577; o3 <= 103580; o3++)
  r4[o3] = 0;
for (o3 = 103581; o3 <= 103583; o3++)
  r4[o3] = 2;
for (o3 = 103595; o3 <= 103694; o3++)
  r4[o3] = 0;
for (o3 = 103696; o3 <= 103699; o3++)
  r4[o3] = 0;
for (o3 = 103700; o3 <= 103793; o3++)
  r4[o3] = 2;
for (o3 = 103794; o3 <= 103890; o3++)
  r4[o3] = 0;
for (o3 = 103891; o3 <= 103896; o3++)
  r4[o3] = 2;
for (o3 = 103900; o3 <= 103971; o3++)
  r4[o3] = 2;
for (o3 = 103972; o3 <= 103977; o3++)
  r4[o3] = 0;
for (o3 = 112e3; o3 <= 112101; o3++)
  r4[o3] = 0;

// node_modules/@arcgis/core/geometry/support/spatialReferenceUtils.js
var t2 = { 102113: true, 102100: true, 3857: true, 3785: true };
var _ = { 4326: true, 3785: true, 3857: true, 102113: true, 102100: true, 104905: true, 104971: true };
var l3 = 'PROJCS["WGS_1984_Web_Mercator_Auxiliary_Sphere",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Mercator_Auxiliary_Sphere"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",{Central_Meridian}],PARAMETER["Standard_Parallel_1",0.0],PARAMETER["Auxiliary_Sphere_Type",0.0],UNIT["Meter",1.0]]';
var M = [-20037508342788905e-9, 20037508342788905e-9];
var S2 = [-20037508342787e-6, 20037508342787e-6];
var d = { 102113: { wkTemplate: 'PROJCS["WGS_1984_Web_Mercator",GEOGCS["GCS_WGS_1984_Major_Auxiliary_Sphere",DATUM["D_WGS_1984_Major_Auxiliary_Sphere",SPHEROID["WGS_1984_Major_Auxiliary_Sphere",6378137.0,0.0]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Mercator"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",{Central_Meridian}],PARAMETER["Standard_Parallel_1",0.0],UNIT["Meter",1.0]]', valid: M, origin: S2, dx: 1e-5 }, 102100: { wkTemplate: l3, valid: M, origin: S2, dx: 1e-5 }, 3785: { wkTemplate: 'PROJCS["WGS_1984_Web_Mercator",GEOGCS["GCS_WGS_1984_Major_Auxiliary_Sphere",DATUM["D_WGS_1984_Major_Auxiliary_Sphere",SPHEROID["WGS_1984_Major_Auxiliary_Sphere",6378137.0,0.0]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Mercator"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",{Central_Meridian}],PARAMETER["Standard_Parallel_1",0.0],UNIT["Meter",1.0]]', valid: M, origin: S2, dx: 1e-5 }, 3857: { wkTemplate: l3, valid: M, origin: S2, dx: 1e-5 }, 4326: { wkTemplate: 'GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",{Central_Meridian}],UNIT["Degree",0.0174532925199433]]', altTemplate: 'PROJCS["WGS_1984_Plate_Carree",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Plate_Carree"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",{Central_Meridian}],UNIT["Degrees",111319.491]]', valid: [-180, 180], origin: [-180, 90], dx: 1e-5 }, 104971: { wkTemplate: 'GEOGCS["Mars_2000_(Sphere)",DATUM["Mars_2000_(Sphere)",SPHEROID["Mars_2000_(Sphere)",3396190.0,0.0]],PRIMEM["Reference_Meridian",0.0],UNIT["Degree",0.0174532925199433]]', valid: [-180, 180], origin: [-180, 90], dx: 1e-5 }, 104905: { wkTemplate: 'GEOGCS["GCS_Mars_2000",DATUM["D_Mars_2000",SPHEROID["Mars_2000_IAU_IAG",3396190.0,169.8944472236118]],PRIMEM["Reference_Meridian",0.0],UNIT["Degree",0.0174532925199433]]', valid: [-180, 180], origin: [-180, 90], dx: 1e-5 } };
function E(r6, i4) {
  return r6 === i4 || !t(r6) && !t(i4) && (null != r6.wkid || null != i4.wkid ? r6.wkid === i4.wkid || k(r6) && k(i4) || null != i4.latestWkid && r6.wkid === i4.latestWkid || null != r6.latestWkid && i4.wkid === r6.latestWkid : !(!r6.wkt || !i4.wkt) && r6.wkt.toUpperCase() === i4.wkt.toUpperCase());
}
function R(e4) {
  return I(e4) && e4.wkid && d[e4.wkid] || null;
}
function o4(e4) {
  return !!I(e4) && (e4.wkid ? null == r4[e4.wkid] : !!e4.wkt && !!/^\s*GEOGCS/i.test(e4.wkt));
}
function A(e4) {
  return !(P(e4) || s3(e4));
}
function G(e4) {
  return I(e4) && 4326 === e4.wkid;
}
function u(e4) {
  return I(e4) && e4.wkid === S.CGCS2000;
}
function k(e4) {
  return I(e4) && null != e4.wkid && true === t2[e4.wkid];
}
function T2(e4) {
  return I(e4) && 32662 === e4.wkid;
}
function w(e4) {
  return e4 === S.GCSMARS2000 || e4 === S.GCSMARS2000_SPHERE;
}
function P(e4) {
  return I(e4) && null != e4.wkid && w(e4.wkid);
}
function C(e4) {
  return e4 === S.GCSMOON2000;
}
function s3(e4) {
  return I(e4) && null != e4.wkid && C(e4.wkid);
}
function p2(e4) {
  return I(e4) && null != e4.wkid && true === _[e4.wkid];
}
function I(e4) {
  return r(e4) && (null != e4.wkid && e4.wkid >= 2e3 || null != e4.wkt);
}
var c = { wkid: 4326, wkt: r2(d[4326].wkTemplate, { Central_Meridian: "0.0" }) };
var D = { wkid: 102100, latestWkid: 3857 };
var O = { wkid: 32662 };

// node_modules/@arcgis/core/geometry/support/Ellipsoid.js
var i = class {
  constructor(i4, s7, t6, e4) {
    this.semiMajorAxis = i4, this.flattening = s7, this.outerAtmosphereRimWidth = t6;
    const h5 = 1 - this.flattening;
    this.semiMinorAxis = this.semiMajorAxis * h5, this.halfSemiMajorAxis = this.semiMajorAxis / 2, this.halfCircumference = Math.PI * this.semiMajorAxis, this.metersPerDegree = this.halfCircumference / 180, this.inverseFlattening = 1 / (1 - this.flattening) - 1, this.eccentricitySquared = e4 || 2 * this.flattening - this.flattening * this.flattening, this.meanRadiusSemiAxes = (2 * this.semiMajorAxis + this.semiMinorAxis) / 3;
  }
  get radius() {
    return this.semiMajorAxis;
  }
};
var s4 = new i(6378137, 1 / 298.257223563, 3e5, 0.006694379990137799);
var t3 = new i(3396190, 1 / 169.8944472236118, 23e4);
var e2 = new i(1737400, 0, 0);

// node_modules/@arcgis/core/geometry/ellipsoidUtils.js
function G2(n) {
  return { wkt: `GEOCCS["Spherical geocentric",
    DATUM["Not specified",
      SPHEROID["Sphere",${n.radius},0]],
    PRIMEM["Greenwich",0.0,
      AUTHORITY["EPSG","8901"]],
    UNIT["m",1.0],
    AXIS["Geocentric X",OTHER],
    AXIS["Geocentric Y",EAST],
    AXIS["Geocentric Z",NORTH]
  ]` };
}
var I2 = G2(s4);
var E2 = G2(t3);
var R2 = G2(e2);
var A2 = { wkt: `GEOCCS["WGS 84",
  DATUM["WGS_1984",
    SPHEROID["WGS 84",${s4.radius},298.257223563,
      AUTHORITY["EPSG","7030"]],
    AUTHORITY["EPSG","6326"]],
  PRIMEM["Greenwich",0,
    AUTHORITY["EPSG","8901"]],
  UNIT["m",1.0,
    AUTHORITY["EPSG","9001"]],
  AXIS["Geocentric X",OTHER],
  AXIS["Geocentric Y",OTHER],
  AXIS["Geocentric Z",NORTH],
  AUTHORITY["EPSG","4978"]
]` };
function O2(S3) {
  return r(S3) && (P(S3) || E(S3, E2)) ? t3 : r(S3) && (s3(S3) || E(S3, R2)) ? e2 : s4;
}
function p3(n) {
  return w(n) ? t3 : C(n) ? e2 : s4;
}

// node_modules/@arcgis/core/core/unitUtils.js
var f = 39.37;
var d2 = s4.radius * Math.PI / 200;
var U = /UNIT\[([^\]]+)\]\]$/i;
var q = r4;
var h = /UNIT\[([^\]]+)\]/i;
var B = /* @__PURE__ */ new Set([4261, 4305, 4807, 4810, 4811, 4812, 4816, 4819, 4821, 4901, 4902, 37225, 104139, 104140]);
var k2 = o2()({ meter: "meters", foot: "feet", foot_us: "us-feet", foot_clarke: "clarke-feet", yard_clarke: "clarke-yards", link_clarke: "clarke-links", yard_sears: "sears-yards", foot_sears: "sears-feet", chain_sears: "sears-chains", chain_benoit_1895_b: "benoit-1895-b-chains", yard_indian: "indian-yards", yard_indian_1937: "indian-1937-yards", foot_gold_coast: "gold-coast-feet", chain_sears_1922_truncated: "sears-1922-truncated-chains", "50_kilometers": "50-kilometers", "150_kilometers": "150-kilometers" });
var b = (e4) => e4 * e4;
var p4 = (e4) => e4 * e4 * e4;
var y2 = { length: { baseUnit: "meters", units: { millimeters: { inBaseUnits: 1e-3 }, centimeters: { inBaseUnits: 0.01 }, decimeters: { inBaseUnits: 0.1 }, meters: { inBaseUnits: 1 }, kilometers: { inBaseUnits: 1e3 }, inches: { inBaseUnits: 0.0254 }, feet: { inBaseUnits: 0.3048 }, yards: { inBaseUnits: 0.9144 }, miles: { inBaseUnits: 1609.344 }, "nautical-miles": { inBaseUnits: 1852 }, "us-feet": { inBaseUnits: 1200 / 3937 } } }, area: { baseUnit: "square-meters", units: { "square-millimeters": { inBaseUnits: b(1e-3) }, "square-centimeters": { inBaseUnits: b(0.01) }, "square-decimeters": { inBaseUnits: b(0.1) }, "square-meters": { inBaseUnits: 1 }, "square-kilometers": { inBaseUnits: b(1e3) }, "square-inches": { inBaseUnits: b(0.0254) }, "square-feet": { inBaseUnits: b(0.3048) }, "square-yards": { inBaseUnits: b(0.9144) }, "square-miles": { inBaseUnits: b(1609.344) }, "square-us-feet": { inBaseUnits: b(1200 / 3937) }, acres: { inBaseUnits: 15625e-7 * b(1609.344) }, ares: { inBaseUnits: 100 }, hectares: { inBaseUnits: 1e4 } } }, volume: { baseUnit: "liters", units: { liters: { inBaseUnits: 1 }, "cubic-millimeters": { inBaseUnits: 1e3 * p4(1e-3) }, "cubic-centimeters": { inBaseUnits: 1e3 * p4(0.01) }, "cubic-decimeters": { inBaseUnits: 1e3 * p4(0.1) }, "cubic-meters": { inBaseUnits: 1e3 }, "cubic-kilometers": { inBaseUnits: 1e3 * p4(1e3) }, "cubic-inches": { inBaseUnits: 1e3 * p4(0.0254) }, "cubic-feet": { inBaseUnits: 1e3 * p4(0.3048) }, "cubic-yards": { inBaseUnits: 1e3 * p4(0.9144) }, "cubic-miles": { inBaseUnits: 1e3 * p4(1609.344) } } }, angle: { baseUnit: "radians", units: { radians: { inBaseUnits: 1 }, degrees: { inBaseUnits: Math.PI / 180 } } } };
var _2 = (() => {
  const e4 = {};
  for (const s7 in y2)
    for (const t6 in y2[s7].units)
      e4[t6] = s7;
  return e4;
})();
function M2(e4, s7, t6) {
  return e4 * y2[t6].units[s7].inBaseUnits;
}
function g(e4, s7, t6) {
  return e4 / y2[t6].units[s7].inBaseUnits;
}
function I3(e4) {
  const s7 = _2[e4];
  if (!s7)
    throw new Error("unknown type");
  return s7;
}
function x(e4, s7 = null) {
  return s7 = s7 || I3(e4), y2[s7].baseUnit === e4;
}
function N(e4, s7, t6) {
  if (s7 === t6)
    return e4;
  const r6 = I3(s7);
  if (r6 !== I3(t6))
    throw new Error("incompatible units");
  const i4 = x(s7, r6) ? e4 : M2(e4, s7, r6);
  return x(t6, r6) ? i4 : g(i4, t6, r6);
}
function Y(e4, s7, t6) {
  return N(e4, s7, "meters") / (t6 * Math.PI / 180);
}
function G3(e4) {
  return k2.fromJSON(e4.toLowerCase()) || null;
}
function L(e4) {
  if (r(e4) && !A(e4))
    return 1;
  const t6 = $(e4);
  return t6 > 1e5 ? 1 : t6;
}
function W(e4) {
  return $(e4) >= O2(e4).metersPerDegree ? "meters" : X(e4);
}
function $(e4, s7 = s4.metersPerDegree) {
  return l(z(e4, true), s7);
}
function z(e4, t6 = false) {
  const r6 = r(e4) ? e4.wkid : null, i4 = r(e4) ? e4.wkt : null;
  let n = null;
  if (r6) {
    if (w(r6))
      return t3.metersPerDegree;
    if (C(r6))
      return e2.metersPerDegree;
    n = q.values[q[r6]], !n && t6 && B.has(r6) && (n = d2);
  } else
    i4 && (re(i4) ? n = Q(U.exec(i4), n) : te(i4) && (n = Q(h.exec(i4), n)));
  return n;
}
function Q(e4, s7) {
  return e4 && e4[1] ? V(e4[1]) : s7;
}
function V(e4) {
  return parseFloat(e4.split(",")[1]);
}
function X(e4) {
  const t6 = r(e4) ? e4.wkid : null, r6 = r(e4) ? e4.wkt : null;
  let i4 = null;
  if (t6)
    i4 = q.units[q[t6]];
  else if (r6) {
    const e5 = re(r6) ? U : te(r6) ? h : null;
    if (e5) {
      const s7 = e5.exec(r6);
      s7 && s7[1] && (i4 = ne(s7[1]));
    }
  }
  return r(i4) ? G3(i4) : null;
}
function te(e4) {
  return /^GEOCCS/i.test(e4);
}
function re(e4) {
  return /^PROJCS/i.test(e4);
}
var ie = 1e-7;
function ne(e4) {
  const s7 = /[\\"\\']{1}([^\\"\\']+)/.exec(e4);
  let t6 = s7 && s7[1];
  if (!t6 || !q.units.includes(t6)) {
    const s8 = V(e4);
    t6 = null;
    const r6 = q.values;
    for (let e5 = 0; e5 < r6.length; ++e5)
      if (Math.abs(s8 - r6[e5]) < ie) {
        t6 = q.units[e5];
        break;
      }
  }
  return t6;
}
var ue = { esriAcres: "acres", esriAres: "ares", esriHectares: "hectares", esriSquareCentimeters: "square-centimeters", esriSquareDecimeters: "square-decimeters", esriSquareFeet: "square-feet", esriSquareInches: "square-inches", esriSquareKilometers: "square-kilometers", esriSquareMeters: "square-meters", esriSquareMiles: "square-miles", esriSquareMillimeters: "square-millimeters", esriSquareUsFeet: "square-us-feet", esriSquareYards: "square-yards" };
var ce = { esriCentimeters: "centimeters", esriDecimeters: "decimeters", esriFeet: "feet", esriInches: "inches", esriKilometers: "kilometers", esriMeters: "meters", esriMiles: "miles", esriMillimeters: "millimeters", esriNauticalMiles: "nautical-miles", esriYards: "yards" };
var oe = { esriDUDecimalDegrees: "degrees", esriDURadians: "radians" };
var le = o2()(ue);
var me = o2()(ce);
var fe = o2()(oe);

// node_modules/@arcgis/core/geometry/SpatialReference.js
var h2;
var k3 = h2 = class extends l2 {
  static fromJSON(e4) {
    if (!e4)
      return null;
    if (e4.wkid) {
      if (102100 === e4.wkid)
        return h2.WebMercator;
      if (4326 === e4.wkid)
        return h2.WGS84;
    }
    const t6 = new h2();
    return t6.read(e4), t6;
  }
  constructor(e4) {
    super(e4), this.latestWkid = null, this.wkid = null, this.wkt = null, this.vcsWkid = null, this.latestVcsWkid = null, this.imageCoordinateSystem = null;
  }
  normalizeCtorArgs(e4) {
    if (e4 && "object" == typeof e4)
      return e4;
    return { ["string" == typeof e4 ? "wkt" : "wkid"]: e4 };
  }
  get isWGS84() {
    return G(this);
  }
  get isWebMercator() {
    return k(this);
  }
  get isGeographic() {
    return o4(this);
  }
  get isWrappable() {
    return p2(this);
  }
  get metersPerUnit() {
    return $(this);
  }
  get unit() {
    return X(this) || (this.isGeographic ? "degrees" : null);
  }
  writeWkt(e4, t6) {
    this.wkid || (t6.wkt = e4);
  }
  clone() {
    if (this === h2.WGS84)
      return h2.WGS84;
    if (this === h2.WebMercator)
      return h2.WebMercator;
    const e4 = new h2();
    return null != this.wkid ? (e4.wkid = this.wkid, null != this.latestWkid && (e4.latestWkid = this.latestWkid), null != this.vcsWkid && (e4.vcsWkid = this.vcsWkid), null != this.latestVcsWkid && (e4.latestVcsWkid = this.latestVcsWkid)) : null != this.wkt && (e4.wkt = this.wkt), this.imageCoordinateSystem && (e4.imageCoordinateSystem = p(this.imageCoordinateSystem)), e4;
  }
  equals(e4) {
    if (null == e4)
      return false;
    if (this.imageCoordinateSystem || e4.imageCoordinateSystem) {
      if (null == this.imageCoordinateSystem || null == e4.imageCoordinateSystem)
        return false;
      const { id: t6, referenceServiceName: r6 } = e4.imageCoordinateSystem, { geodataXform: i4 } = e4.imageCoordinateSystem, o8 = this.imageCoordinateSystem;
      return null == t6 || i4 ? JSON.stringify(o8) === JSON.stringify(e4.imageCoordinateSystem) : r6 ? o8.id === t6 && o8.referenceServiceName === r6 : o8.id === t6;
    }
    return E(this, e4);
  }
  toJSON(e4) {
    return this.write(void 0, e4);
  }
};
k3.GCS_NAD_1927 = null, k3.WGS84 = null, k3.WebMercator = null, k3.PlateCarree = null, e([y({ readOnly: true })], k3.prototype, "isWGS84", null), e([y({ readOnly: true })], k3.prototype, "isWebMercator", null), e([y({ readOnly: true })], k3.prototype, "isGeographic", null), e([y({ readOnly: true })], k3.prototype, "isWrappable", null), e([y({ type: T, json: { write: true } })], k3.prototype, "latestWkid", void 0), e([y({ readOnly: true })], k3.prototype, "metersPerUnit", null), e([y({ readOnly: true })], k3.prototype, "unit", null), e([y({ type: T, json: { write: true, origins: { "web-scene": { write: { overridePolicy() {
  return { isRequired: null === this.wkt };
} } } } } })], k3.prototype, "wkid", void 0), e([y({ type: String, json: { origins: { "web-scene": { write: { overridePolicy() {
  return { isRequired: null === this.wkid };
} } } } } })], k3.prototype, "wkt", void 0), e([r3("wkt"), r3("web-scene", "wkt")], k3.prototype, "writeWkt", null), e([y({ type: T, json: { write: true } })], k3.prototype, "vcsWkid", void 0), e([y({ type: T, json: { write: true } })], k3.prototype, "latestVcsWkid", void 0), e([y()], k3.prototype, "imageCoordinateSystem", void 0), k3 = h2 = e([a2("esri.geometry.SpatialReference")], k3), k3.prototype.toJSON.isDefaultToJSON = true, k3.GCS_NAD_1927 = new k3({ wkid: 4267, wkt: 'GEOGCS["GCS_North_American_1927",DATUM["D_North_American_1927",SPHEROID["Clarke_1866",6378206.4,294.9786982]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]]' }), k3.WGS84 = new k3(c), k3.WebMercator = new k3(D), k3.PlateCarree = new k3(O), Object.freeze && (Object.freeze(k3.GCS_NAD_1927), Object.freeze(k3.WGS84), Object.freeze(k3.WebMercator));
var f2 = k3;

// node_modules/@arcgis/core/geometry/Geometry.js
var c2 = class extends l2 {
  constructor(...e4) {
    super(...e4), this.type = null, this.hasM = false, this.hasZ = false, this.spatialReference = f2.WGS84;
  }
  get cache() {
    return this.commitProperty("spatialReference"), {};
  }
  get extent() {
    return null;
  }
  readSpatialReference(e4, r6) {
    if (e4 instanceof f2)
      return e4;
    if (null != e4) {
      const t6 = new f2();
      return t6.read(e4, r6), t6;
    }
    return e4;
  }
  clone() {
    return console.warn(".clone() is not implemented for " + this.declaredClass), null;
  }
  clearCache() {
    this.notifyChange("cache");
  }
  getCacheValue(e4) {
    return this.cache[e4];
  }
  setCacheValue(e4, r6) {
    this.cache[e4] = r6;
  }
};
e([y()], c2.prototype, "type", void 0), e([y({ readOnly: true })], c2.prototype, "cache", null), e([y({ readOnly: true })], c2.prototype, "extent", null), e([y({ type: Boolean, json: { write: { overridePolicy: (e4) => ({ enabled: e4 }) } } })], c2.prototype, "hasM", void 0), e([y({ type: Boolean, json: { write: { overridePolicy: (e4) => ({ enabled: e4 }) } } })], c2.prototype, "hasZ", void 0), e([y({ type: f2, json: { write: true }, value: f2.WGS84 })], c2.prototype, "spatialReference", void 0), e([o("spatialReference")], c2.prototype, "readSpatialReference", null), c2 = e([a2("esri.geometry.Geometry")], c2);
var p5 = c2;

// node_modules/@arcgis/core/geometry/support/webMercatorUtils.js
var o5 = 57.29577951308232;
var u2 = 0.017453292519943;
function l4(n) {
  return n * o5;
}
function p6(n) {
  return n * u2;
}
function c3(n) {
  return Math.PI / 2 - 2 * Math.atan(Math.exp(-n / s4.radius));
}
function h3(n) {
  return null != n.wkid || null != n.wkt;
}
var m = [0, 0];
function x2(n, t6, e4, i4, r6) {
  const s7 = n, a5 = r6;
  if (a5.spatialReference = e4, "x" in s7 && "x" in a5)
    [a5.x, a5.y] = t6(s7.x, s7.y, m, i4);
  else if ("xmin" in s7 && "xmin" in a5)
    [a5.xmin, a5.ymin] = t6(s7.xmin, s7.ymin, m, i4), [a5.xmax, a5.ymax] = t6(s7.xmax, s7.ymax, m, i4);
  else if ("paths" in s7 && "paths" in a5 || "rings" in s7 && "rings" in a5) {
    const n2 = "paths" in s7 ? s7.paths : s7.rings, e5 = [];
    let r7;
    for (let s8 = 0; s8 < n2.length; s8++) {
      const a6 = n2[s8];
      r7 = [], e5.push(r7);
      for (let n3 = 0; n3 < a6.length; n3++)
        r7.push(t6(a6[n3][0], a6[n3][1], [0, 0], i4)), a6[n3].length > 2 && r7[n3].push(a6[n3][2]), a6[n3].length > 3 && r7[n3].push(a6[n3][3]);
    }
    "paths" in a5 ? a5.paths = e5 : a5.rings = e5;
  } else if ("points" in s7 && "points" in a5) {
    const n2 = s7.points, e5 = [];
    for (let r7 = 0; r7 < n2.length; r7++)
      e5[r7] = t6(n2[r7][0], n2[r7][1], [0, 0], i4), n2[r7].length > 2 && e5[r7].push(n2[r7][2]), n2[r7].length > 3 && e5[r7].push(n2[r7][3]);
    a5.points = e5;
  }
  return r6;
}
function g2(n, t6) {
  const e4 = n && (h3(n) ? n : n.spatialReference), i4 = t6 && (h3(t6) ? t6 : t6.spatialReference);
  return !(n && "type" in n && "mesh" === n.type || t6 && "type" in t6 && "mesh" === t6.type || !e4 || !i4) && (!!E(i4, e4) || (k(i4) && G(e4) || k(e4) && G(i4)));
}
function M3(i4, o8) {
  if (t(i4))
    return null;
  const u5 = i4.spatialReference, l6 = o8 && (h3(o8) ? o8 : o8.spatialReference);
  return g2(u5, l6) ? E(u5, l6) ? p(i4) : k(l6) ? x2(i4, y3, f2.WebMercator, false, p(i4)) : G(l6) ? x2(i4, d3, f2.WGS84, false, p(i4)) : null : null;
}
function y3(n, t6, e4 = [0, 0]) {
  t6 > 89.99999 ? t6 = 89.99999 : t6 < -89.99999 && (t6 = -89.99999);
  const r6 = p6(t6);
  return e4[0] = p6(n) * s4.radius, e4[1] = s4.halfSemiMajorAxis * Math.log((1 + Math.sin(r6)) / (1 - Math.sin(r6))), e4;
}
function d3(n, t6, e4 = [0, 0], r6 = false) {
  const s7 = l4(n / s4.radius);
  return e4[0] = r6 ? s7 : s7 - 360 * Math.floor((s7 + 180) / 360), e4[1] = l4(Math.PI / 2 - 2 * Math.atan(Math.exp(-t6 / s4.radius))), e4;
}
function R3(t6, i4 = false, r6 = p(t6)) {
  return x2(t6, y3, f2.WebMercator, i4, r6);
}
function j(t6, i4 = false, r6 = p(t6)) {
  return x2(t6, d3, f2.WGS84, i4, r6);
}

// node_modules/@arcgis/core/geometry/support/pointUtils.js
function t4(t6, n) {
  const s7 = t6.x - n.x, r6 = t6.y - n.y, a5 = t6.hasZ && n.hasZ ? t6.z - n.z : 0;
  return Math.sqrt(s7 * s7 + r6 * r6 + a5 * a5);
}

// node_modules/@arcgis/core/geometry/Point.js
var m2;
var f3 = [0, 0];
function g3(e4) {
  return e4 && ("esri.geometry.SpatialReference" === e4.declaredClass || null != e4.wkid);
}
var x3 = m2 = class extends p5 {
  static copy(e4, t6) {
    t6._set("x", e4._get("x")), t6._set("y", e4._get("y")), t6._set("z", e4._get("z")), t6._set("m", e4._get("m"));
    const r6 = e4._get("spatialReference");
    t6._set("spatialReference", Object.isFrozen(r6) ? r6 : r6.clone());
  }
  constructor(...e4) {
    super(...e4), this.x = 0, this.y = 0, this.z = void 0, this.m = void 0, this.type = "point";
  }
  normalizeCtorArgs(e4, r6, s7, i4, o8) {
    let a5;
    if (Array.isArray(e4))
      a5 = e4, o8 = r6, e4 = a5[0], r6 = a5[1], s7 = a5[2], i4 = a5[3];
    else if (e4 && "object" == typeof e4) {
      if (a5 = e4, e4 = null != a5.x ? a5.x : a5.longitude, r6 = null != a5.y ? a5.y : a5.latitude, s7 = a5.z, i4 = a5.m, (o8 = a5.spatialReference) && "esri.geometry.SpatialReference" !== o8.declaredClass && (o8 = new f2(o8)), null != a5.longitude || null != a5.latitude) {
        if (null == a5.longitude)
          s.getLogger(this.declaredClass).warn(".longitude=", "Latitude was defined without longitude");
        else if (null == a5.latitude)
          s.getLogger(this.declaredClass).warn(".latitude=", "Longitude was defined without latitude");
        else if (!a5.declaredClass && o8 && o8.isWebMercator) {
          const t6 = y3(a5.longitude, a5.latitude, f3);
          e4 = t6[0], r6 = t6[1];
        }
      }
    } else
      g3(s7) ? (o8 = s7, s7 = null) : g3(i4) && (o8 = i4, i4 = null);
    const l6 = { x: e4, y: r6 };
    return null == l6.x && null != l6.y ? s.getLogger(this.declaredClass).warn(".y=", "Y coordinate was defined without an X coordinate") : null == l6.y && null != l6.x && s.getLogger(this.declaredClass).warn(".x=", "X coordinate was defined without a Y coordinate"), null != o8 && (l6.spatialReference = o8), null != s7 && (l6.z = s7), null != i4 && (l6.m = i4), l6;
  }
  get cache() {
    return this.commitProperty("x"), this.commitProperty("y"), this.commitProperty("z"), this.commitProperty("m"), this.commitProperty("spatialReference"), {};
  }
  get hasM() {
    return void 0 !== this.m;
  }
  set hasM(e4) {
    e4 !== (void 0 !== this._get("m")) && (this._set("m", e4 ? 0 : void 0), this._set("hasM", e4));
  }
  get hasZ() {
    return void 0 !== this.z;
  }
  set hasZ(e4) {
    e4 !== (void 0 !== this._get("z")) && (this._set("z", e4 ? 0 : void 0), this._set("hasZ", e4));
  }
  get latitude() {
    const { spatialReference: e4, x: t6, y: r6 } = this;
    if (e4) {
      if (e4.isWebMercator)
        return d3(t6, r6, f3)[1];
      if (e4.isGeographic)
        return r6;
    }
    return null;
  }
  set latitude(e4) {
    const { spatialReference: t6, x: r6 } = this;
    null != e4 && t6 && (t6.isWebMercator ? this._set("y", y3(r6, e4, f3)[1]) : t6.isGeographic && this._set("y", e4), this._set("latitude", e4));
  }
  get longitude() {
    const { x: e4, y: t6, spatialReference: r6 } = this;
    if (r6) {
      if (r6.isWebMercator)
        return d3(e4, t6, f3)[0];
      if (r6.isGeographic)
        return e4;
    }
    return null;
  }
  set longitude(e4) {
    const { y: t6, spatialReference: r6 } = this;
    null != e4 && r6 && (r6.isWebMercator ? this._set("x", y3(e4, t6, f3)[0]) : r6.isGeographic && this._set("x", e4), this._set("longitude", e4));
  }
  writeX(e4, t6, r6) {
    t6[r6] = isNaN(e4) ? "NaN" : e4;
  }
  readX(e4) {
    return "string" == typeof e4 ? NaN : e4;
  }
  clone() {
    const e4 = new m2();
    return e4.x = this.x, e4.y = this.y, e4.z = this.z, e4.m = this.m, e4.spatialReference = this.spatialReference, e4;
  }
  copy(e4) {
    return m2.copy(e4, this), this;
  }
  equals(e4) {
    if (t(e4))
      return false;
    const { x: t6, y: s7, z: i4, m: o8, spatialReference: a5 } = this, { z: l6, m: n } = e4;
    let { x: c6, y: u5, spatialReference: p8 } = e4;
    if (!a5.equals(p8))
      if (a5.isWebMercator && p8.isWGS84)
        [c6, u5] = y3(c6, u5), p8 = a5;
      else {
        if (!a5.isWGS84 || !p8.isWebMercator)
          return false;
        [c6, u5] = d3(c6, u5), p8 = a5;
      }
    return t6 === c6 && s7 === u5 && i4 === l6 && o8 === n && a5.wkid === p8.wkid;
  }
  offset(e4, t6, r6) {
    return this.x += e4, this.y += t6, null != r6 && (this.z = (this.z ?? 0) + r6), this;
  }
  normalize() {
    if (!this.spatialReference)
      return this;
    const e4 = R(this.spatialReference);
    if (!e4)
      return this;
    let t6 = this.x;
    const [r6, s7] = e4.valid, i4 = 2 * s7;
    let o8;
    return t6 > s7 ? (o8 = Math.ceil(Math.abs(t6 - s7) / i4), t6 -= o8 * i4) : t6 < r6 && (o8 = Math.ceil(Math.abs(t6 - r6) / i4), t6 += o8 * i4), this._set("x", t6), this;
  }
  distance(e4) {
    return t4(this, e4);
  }
  toArray() {
    const e4 = this.hasZ, t6 = this.hasM;
    return e4 && t6 ? [this.x, this.y, this.z, this.m] : e4 ? [this.x, this.y, this.z] : t6 ? [this.x, this.y, this.m] : [this.x, this.y];
  }
  toJSON(e4) {
    return this.write({}, e4);
  }
};
e([y({ readOnly: true })], x3.prototype, "cache", null), e([y({ type: Boolean, json: { read: false, write: { enabled: false, overridePolicy: null } } })], x3.prototype, "hasM", null), e([y({ type: Boolean, json: { read: false, write: { enabled: false, overridePolicy: null } } })], x3.prototype, "hasZ", null), e([y({ type: Number })], x3.prototype, "latitude", null), e([y({ type: Number })], x3.prototype, "longitude", null), e([y({ type: Number, json: { type: [Number, String], write: { isRequired: true, allowNull: true } } }), s2((e4) => isNaN(e4) ? e4 : a(e4))], x3.prototype, "x", void 0), e([r3("x")], x3.prototype, "writeX", null), e([o("x")], x3.prototype, "readX", null), e([y({ type: Number, json: { write: true } })], x3.prototype, "y", void 0), e([y({ type: Number, json: { write: { overridePolicy() {
  return { enabled: this.hasZ };
} } } })], x3.prototype, "z", void 0), e([y({ type: Number, json: { write: { overridePolicy() {
  return { enabled: this.hasM };
} } } })], x3.prototype, "m", void 0), x3 = m2 = e([a2("esri.geometry.Point")], x3), x3.prototype.toJSON.isDefaultToJSON = true;
var w2 = x3;

// node_modules/@arcgis/core/geometry/support/contains.js
var t5 = [0, 0];
function r5(t6, r6) {
  return !!r(r6) && f4(t6, r6.x, r6.y, r6.z);
}
function i2(n, t6) {
  if (!t6.points || t6.points.length)
    return false;
  for (const r6 of t6.points)
    if (!u3(n, r6))
      return false;
  return true;
}
function o6(n, t6) {
  const { xmin: r6, ymin: i4, zmin: o8, xmax: u5, ymax: e4, zmax: c6 } = t6;
  return n.hasZ && t6.hasZ ? f4(n, r6, i4, o8) && f4(n, r6, e4, o8) && f4(n, u5, e4, o8) && f4(n, u5, i4, o8) && f4(n, r6, i4, c6) && f4(n, r6, e4, c6) && f4(n, u5, e4, c6) && f4(n, u5, i4, c6) : f4(n, r6, i4) && f4(n, r6, e4) && f4(n, u5, e4) && f4(n, u5, i4);
}
function u3(n, t6) {
  return f4(n, t6[0], t6[1]);
}
function e3(n, t6) {
  return f4(n, t6[0], t6[1], t6[2]);
}
function f4(n, t6, r6, i4) {
  return t6 >= n.xmin && t6 <= n.xmax && r6 >= n.ymin && r6 <= n.ymax && (null == i4 || !n.hasZ || i4 >= n.zmin && i4 <= n.zmax);
}
function c4(n, r6) {
  return t5[1] = r6.y, t5[0] = r6.x, m3(n, t5);
}
function m3(n, t6) {
  return s5(n.rings, t6);
}
function s5(n, t6) {
  if (!n)
    return false;
  if (x4(n))
    return a3(false, n, t6);
  let r6 = false;
  for (let i4 = 0, o8 = n.length; i4 < o8; i4++)
    r6 = a3(r6, n[i4], t6);
  return r6;
}
function x4(n) {
  return !Array.isArray(n[0][0]);
}
function a3(n, t6, r6) {
  const [i4, o8] = r6;
  let u5 = n, e4 = 0;
  for (let f7 = 0, c6 = t6.length; f7 < c6; f7++) {
    e4++, e4 === c6 && (e4 = 0);
    const [n2, r7] = t6[f7], [m5, s7] = t6[e4];
    (r7 < o8 && s7 >= o8 || s7 < o8 && r7 >= o8) && n2 + (o8 - r7) / (s7 - r7) * (m5 - n2) < i4 && (u5 = !u5);
  }
  return u5;
}

// node_modules/@arcgis/core/geometry/support/intersectsBase.js
function i3(t6, e4) {
  return r5(t6, e4);
}
function o7(n, t6) {
  const e4 = n.hasZ && t6.hasZ;
  let r6, i4, o8;
  if (n.xmin <= t6.xmin) {
    if (r6 = t6.xmin, n.xmax < r6)
      return false;
  } else if (r6 = n.xmin, t6.xmax < r6)
    return false;
  if (n.ymin <= t6.ymin) {
    if (i4 = t6.ymin, n.ymax < i4)
      return false;
  } else if (i4 = n.ymin, t6.ymax < i4)
    return false;
  if (e4 && t6.hasZ) {
    if (n.zmin <= t6.zmin) {
      if (o8 = t6.zmin, n.zmax < o8)
        return false;
    } else if (o8 = n.zmin, t6.zmax < o8)
      return false;
  }
  return true;
}
function f5(n, t6) {
  const { points: i4, hasZ: o8 } = t6, f7 = o8 ? e3 : u3;
  for (const e4 of i4)
    if (f7(n, e4))
      return true;
  return false;
}
var s6 = [0, 0];
var u4 = [0, 0];
var c5 = [0, 0];
var m4 = [0, 0];
var l5 = [s6, u4, c5, m4];
var a4 = [[c5, s6], [s6, u4], [u4, m4], [m4, c5]];
function x5(n, t6) {
  return y4(n, t6.rings);
}
function y4(n, r6) {
  s6[0] = n.xmin, s6[1] = n.ymax, u4[0] = n.xmax, u4[1] = n.ymax, c5[0] = n.xmin, c5[1] = n.ymin, m4[0] = n.xmax, m4[1] = n.ymin;
  for (const e4 of l5)
    if (s5(r6, e4))
      return true;
  for (const t6 of r6) {
    if (!t6.length)
      continue;
    let r7 = t6[0];
    if (u3(n, r7))
      return true;
    for (let i4 = 1; i4 < t6.length; i4++) {
      const o8 = t6[i4];
      if (u3(n, o8) || z2(r7, o8, a4))
        return true;
      r7 = o8;
    }
  }
  return false;
}
function h4(n, t6) {
  s6[0] = n.xmin, s6[1] = n.ymax, u4[0] = n.xmax, u4[1] = n.ymax, c5[0] = n.xmin, c5[1] = n.ymin, m4[0] = n.xmax, m4[1] = n.ymin;
  const r6 = t6.paths;
  for (const i4 of r6) {
    if (!r6.length)
      continue;
    let t7 = i4[0];
    if (u3(n, t7))
      return true;
    for (let r7 = 1; r7 < i4.length; r7++) {
      const o8 = i4[r7];
      if (u3(n, o8) || z2(t7, o8, a4))
        return true;
      t7 = o8;
    }
  }
  return false;
}
var g4 = [0, 0];
function p7(n) {
  for (let t6 = 0; t6 < n.length; t6++) {
    const e4 = n[t6];
    for (let i4 = 0; i4 < e4.length - 1; i4++) {
      const r7 = e4[i4], o8 = e4[i4 + 1];
      for (let e5 = t6 + 1; e5 < n.length; e5++)
        for (let t7 = 0; t7 < n[e5].length - 1; t7++) {
          const i5 = n[e5][t7], f7 = n[e5][t7 + 1];
          if (G4(r7, o8, i5, f7, g4) && !(g4[0] === r7[0] && g4[1] === r7[1] || g4[0] === i5[0] && g4[1] === i5[1] || g4[0] === o8[0] && g4[1] === o8[1] || g4[0] === f7[0] && g4[1] === f7[1]))
            return true;
        }
    }
    const r6 = e4.length;
    if (!(r6 <= 4))
      for (let n2 = 0; n2 < r6 - 3; n2++) {
        let t7 = r6 - 1;
        0 === n2 && (t7 = r6 - 2);
        const i4 = e4[n2], o8 = e4[n2 + 1];
        for (let r7 = n2 + 2; r7 < t7; r7++) {
          const n3 = e4[r7], t8 = e4[r7 + 1];
          if (G4(i4, o8, n3, t8, g4) && !(g4[0] === i4[0] && g4[1] === i4[1] || g4[0] === n3[0] && g4[1] === n3[1] || g4[0] === o8[0] && g4[1] === o8[1] || g4[0] === t8[0] && g4[1] === t8[1]))
            return true;
        }
      }
  }
  return false;
}
function z2(n, t6, e4) {
  for (let r6 = 0; r6 < e4.length; r6++)
    if (G4(n, t6, e4[r6][0], e4[r6][1]))
      return true;
  return false;
}
function G4(n, t6, e4, r6, i4) {
  const [o8, f7] = n, [s7, u5] = t6, [c6, m5] = e4, [l6, a5] = r6, x6 = l6 - c6, y5 = o8 - c6, h5 = s7 - o8, g5 = a5 - m5, p8 = f7 - m5, z4 = u5 - f7, G5 = g5 * h5 - x6 * z4;
  if (0 === G5)
    return false;
  const Z2 = (x6 * p8 - g5 * y5) / G5, P2 = (h5 * p8 - z4 * y5) / G5;
  return Z2 >= 0 && Z2 <= 1 && P2 >= 0 && P2 <= 1 && (i4 && (i4[0] = o8 + Z2 * (s7 - o8), i4[1] = f7 + Z2 * (u5 - f7)), true);
}
function Z(n) {
  switch (n) {
    case "esriGeometryEnvelope":
    case "extent":
      return o7;
    case "esriGeometryMultipoint":
    case "multipoint":
      return f5;
    case "esriGeometryPoint":
    case "point":
      return i3;
    case "esriGeometryPolygon":
    case "polygon":
      return x5;
    case "esriGeometryPolyline":
    case "polyline":
      return h4;
  }
}

// node_modules/@arcgis/core/geometry/Extent.js
var f6;
function d4(t6) {
  return t6 && ("esri.geometry.SpatialReference" === t6.declaredClass || null != t6.wkid);
}
function z3(t6, i4, e4) {
  return null == i4 ? e4 : null == e4 ? i4 : t6(i4, e4);
}
var M4 = f6 = class extends p5 {
  constructor(...t6) {
    super(...t6), this.type = "extent", this.xmin = 0, this.ymin = 0, this.mmin = void 0, this.zmin = void 0, this.xmax = 0, this.ymax = 0, this.mmax = void 0, this.zmax = void 0;
  }
  normalizeCtorArgs(t6, i4, e4, s7, n) {
    return d4(t6) ? { spatialReference: t6, xmin: 0, ymin: 0, xmax: 0, ymax: 0 } : "object" == typeof t6 ? (t6.spatialReference = null == t6.spatialReference ? f2.WGS84 : t6.spatialReference, t6) : { xmin: t6, ymin: i4, xmax: e4, ymax: s7, spatialReference: n ?? f2.WGS84 };
  }
  static fromBounds(t6, i4) {
    return new f6({ xmin: t6[0], ymin: t6[1], xmax: t6[2], ymax: t6[3], spatialReference: i4 });
  }
  static fromPoint(t6) {
    return new f6({ xmin: t6.x, ymin: t6.y, zmin: t6.z, xmax: t6.x, ymax: t6.y, zmax: t6.z, spatialReference: t6.spatialReference });
  }
  get cache() {
    return this.commitProperty("xmin"), this.commitProperty("ymin"), this.commitProperty("zmin"), this.commitProperty("mmin"), this.commitProperty("xmax"), this.commitProperty("ymax"), this.commitProperty("zmax"), this.commitProperty("mmax"), this.commitProperty("spatialReference"), {};
  }
  get center() {
    const t6 = new w2({ x: 0.5 * (this.xmin + this.xmax), y: 0.5 * (this.ymin + this.ymax), spatialReference: this.spatialReference });
    return this.hasZ && (t6.z = 0.5 * (this.zmin + this.zmax)), this.hasM && (t6.m = 0.5 * (this.mmin + this.mmax)), t6;
  }
  get extent() {
    return this.clone();
  }
  get hasM() {
    return null != this.mmin && null != this.mmax;
  }
  get hasZ() {
    return null != this.zmin && null != this.zmax;
  }
  get height() {
    return Math.abs(this.ymax - this.ymin);
  }
  get width() {
    return Math.abs(this.xmax - this.xmin);
  }
  centerAt(t6) {
    const i4 = this.center;
    return null != t6.z && this.hasZ ? this.offset(t6.x - i4.x, t6.y - i4.y, t6.z - i4.z) : this.offset(t6.x - i4.x, t6.y - i4.y);
  }
  clone() {
    const t6 = new f6();
    return t6.xmin = this.xmin, t6.ymin = this.ymin, t6.xmax = this.xmax, t6.ymax = this.ymax, t6.spatialReference = this.spatialReference, null != this.zmin && (t6.zmin = this.zmin, t6.zmax = this.zmax), null != this.mmin && (t6.mmin = this.mmin, t6.mmax = this.mmax), t6;
  }
  contains(t6) {
    if (!t6)
      return false;
    const i4 = this.spatialReference, e4 = t6.spatialReference;
    return i4 && e4 && !i4.equals(e4) && g2(i4, e4) && (t6 = i4.isWebMercator ? R3(t6) : j(t6, true)), "point" === t6.type ? r5(this, t6) : "extent" === t6.type && o6(this, t6);
  }
  equals(t6) {
    if (this === t6)
      return true;
    if (t(t6))
      return false;
    const e4 = this.spatialReference, s7 = t6.spatialReference;
    return e4 && s7 && !e4.equals(s7) && g2(e4, s7) && (t6 = e4.isWebMercator ? R3(t6) : j(t6, true)), this.xmin === t6.xmin && this.ymin === t6.ymin && this.zmin === t6.zmin && this.mmin === t6.mmin && this.xmax === t6.xmax && this.ymax === t6.ymax && this.zmax === t6.zmax && this.mmax === t6.mmax;
  }
  expand(t6) {
    const i4 = 0.5 * (1 - t6), e4 = this.width * i4, s7 = this.height * i4;
    if (this.xmin += e4, this.ymin += s7, this.xmax -= e4, this.ymax -= s7, this.hasZ) {
      const t7 = (this.zmax - this.zmin) * i4;
      this.zmin += t7, this.zmax -= t7;
    }
    if (this.hasM) {
      const t7 = (this.mmax - this.mmin) * i4;
      this.mmin += t7, this.mmax -= t7;
    }
    return this;
  }
  intersects(t6) {
    if (t(t6))
      return false;
    "mesh" === t6.type && (t6 = t6.extent);
    const e4 = this.spatialReference, s7 = t6.spatialReference;
    e4 && s7 && !E(e4, s7) && g2(e4, s7) && (t6 = e4.isWebMercator ? R3(t6) : j(t6, true));
    return Z(t6.type)(this, t6);
  }
  normalize() {
    const t6 = this._normalize(false, true);
    return Array.isArray(t6) ? t6 : [t6];
  }
  offset(t6, i4, e4) {
    return this.xmin += t6, this.ymin += i4, this.xmax += t6, this.ymax += i4, null != e4 && (this.zmin += e4, this.zmax += e4), this;
  }
  shiftCentralMeridian() {
    return this._normalize(true);
  }
  union(t6) {
    return this === t6 || (this.xmin = Math.min(this.xmin, t6.xmin), this.ymin = Math.min(this.ymin, t6.ymin), this.xmax = Math.max(this.xmax, t6.xmax), this.ymax = Math.max(this.ymax, t6.ymax), (this.hasZ || t6.hasZ) && (this.zmin = z3(Math.min, this.zmin, t6.zmin), this.zmax = z3(Math.max, this.zmax, t6.zmax)), (this.hasM || t6.hasM) && (this.mmin = z3(Math.min, this.mmin, t6.mmin), this.mmax = z3(Math.max, this.mmax, t6.mmax))), this;
  }
  intersection(t6) {
    return this === t6 ? this : t(t6) || !this.intersects(t6) ? null : (this.xmin = Math.max(this.xmin, t6.xmin), this.ymin = Math.max(this.ymin, t6.ymin), this.xmax = Math.min(this.xmax, t6.xmax), this.ymax = Math.min(this.ymax, t6.ymax), (this.hasZ || t6.hasZ) && (this.zmin = z3(Math.max, this.zmin, t6.zmin), this.zmax = z3(Math.min, this.zmax, t6.zmax)), (this.hasM || t6.hasM) && (this.mmin = z3(Math.max, this.mmin, t6.mmin), this.mmax = z3(Math.min, this.mmax, t6.mmax)), this);
  }
  toJSON(t6) {
    return this.write({}, t6);
  }
  _shiftCM(t6 = R(this.spatialReference)) {
    if (!t6 || !this.spatialReference)
      return this;
    const i4 = this.spatialReference, s7 = this._getCM(t6);
    if (s7) {
      const n = i4.isWebMercator ? j(s7) : s7;
      this.xmin -= s7.x, this.xmax -= s7.x, i4.isWebMercator || (n.x = this._normalizeX(n.x, t6).x), this.spatialReference = new f2(r2((i4.isWGS84 ? t6.altTemplate : null) ?? t6.wkTemplate, { Central_Meridian: n.x }));
    }
    return this;
  }
  _getCM(t6) {
    let i4 = null;
    const [e4, s7] = t6.valid, n = this.xmin, m5 = this.xmax;
    return n >= e4 && n <= s7 && (m5 >= e4 && m5 <= s7) || (i4 = this.center), i4;
  }
  _normalize(t6, i4, e4) {
    const s7 = this.spatialReference;
    if (!s7)
      return this;
    const n = e4 ?? R(s7);
    if (null == n)
      return this;
    const m5 = this._getParts(n).map((t7) => t7.extent);
    if (m5.length < 2)
      return m5[0] || this;
    if (m5.length > 2)
      return t6 ? this._shiftCM(n) : this.set({ xmin: n.valid[0], xmax: n.valid[1] });
    if (t6)
      return this._shiftCM(n);
    if (i4)
      return m5;
    let r6 = true, a5 = true;
    return m5.forEach((t7) => {
      t7.hasZ || (r6 = false), t7.hasM || (a5 = false);
    }), { rings: m5.map((t7) => {
      const i5 = [[t7.xmin, t7.ymin], [t7.xmin, t7.ymax], [t7.xmax, t7.ymax], [t7.xmax, t7.ymin], [t7.xmin, t7.ymin]];
      if (r6) {
        const e5 = (t7.zmax - t7.zmin) / 2;
        for (let t8 = 0; t8 < i5.length; t8++)
          i5[t8].push(e5);
      }
      if (a5) {
        const e5 = (t7.mmax - t7.mmin) / 2;
        for (let t8 = 0; t8 < i5.length; t8++)
          i5[t8].push(e5);
      }
      return i5;
    }), hasZ: r6, hasM: a5, spatialReference: s7 };
  }
  _getParts(t6) {
    let i4 = this.cache._parts;
    if (!i4) {
      i4 = [];
      const { ymin: e5, ymax: s8, spatialReference: n } = this, m5 = this.width, r6 = this.xmin, a5 = this.xmax;
      let h5;
      t6 = t6 || R(n);
      const [o8, x6] = t6.valid;
      h5 = this._normalizeX(this.xmin, t6);
      const l6 = h5.x, c6 = h5.frameId;
      h5 = this._normalizeX(this.xmax, t6);
      const y5 = h5.x, u5 = h5.frameId, d5 = l6 === y5 && m5 > 0;
      if (m5 > 2 * x6) {
        const t7 = new f6(r6 < a5 ? l6 : y5, e5, x6, s8, n), m6 = new f6(o8, e5, r6 < a5 ? y5 : l6, s8, n), h6 = new f6(0, e5, x6, s8, n), p8 = new f6(o8, e5, 0, s8, n), d6 = [], z4 = [];
        t7.contains(h6) && d6.push(c6), t7.contains(p8) && z4.push(c6), m6.contains(h6) && d6.push(u5), m6.contains(p8) && z4.push(u5);
        for (let i5 = c6 + 1; i5 < u5; i5++)
          d6.push(i5), z4.push(i5);
        i4.push({ extent: t7, frameIds: [c6] }, { extent: m6, frameIds: [u5] }, { extent: h6, frameIds: d6 }, { extent: p8, frameIds: z4 });
      } else
        l6 > y5 || d5 ? i4.push({ extent: new f6(l6, e5, x6, s8, n), frameIds: [c6] }, { extent: new f6(o8, e5, y5, s8, n), frameIds: [u5] }) : i4.push({ extent: new f6(l6, e5, y5, s8, n), frameIds: [c6] });
      this.cache._parts = i4;
    }
    const e4 = this.hasZ, s7 = this.hasM;
    if (e4 || s7) {
      const t7 = {};
      e4 && (t7.zmin = this.zmin, t7.zmax = this.zmax), s7 && (t7.mmin = this.mmin, t7.mmax = this.mmax);
      for (let e5 = 0; e5 < i4.length; e5++)
        i4[e5].extent.set(t7);
    }
    return i4;
  }
  _normalizeX(t6, i4) {
    const [e4, s7] = i4.valid, n = 2 * s7;
    let m5, r6 = 0;
    return t6 > s7 ? (m5 = Math.ceil(Math.abs(t6 - s7) / n), t6 -= m5 * n, r6 = m5) : t6 < e4 && (m5 = Math.ceil(Math.abs(t6 - e4) / n), t6 += m5 * n, r6 = -m5), { x: t6, frameId: r6 };
  }
};
e([y({ readOnly: true })], M4.prototype, "cache", null), e([y({ readOnly: true })], M4.prototype, "center", null), e([y({ readOnly: true })], M4.prototype, "extent", null), e([y({ readOnly: true, json: { write: { enabled: false, overridePolicy: null } } })], M4.prototype, "hasM", null), e([y({ readOnly: true, json: { write: { enabled: false, overridePolicy: null } } })], M4.prototype, "hasZ", null), e([y({ readOnly: true })], M4.prototype, "height", null), e([y({ readOnly: true })], M4.prototype, "width", null), e([y({ type: Number, json: { type: [Number, String], write: { enabled: true, allowNull: true } } })], M4.prototype, "xmin", void 0), e([y({ type: Number, json: { write: true } })], M4.prototype, "ymin", void 0), e([y({ type: Number, json: { origins: { "web-scene": { write: false } }, write: { overridePolicy() {
  return { enabled: this.hasM };
} } } })], M4.prototype, "mmin", void 0), e([y({ type: Number, json: { origins: { "web-scene": { write: false } }, write: { overridePolicy() {
  return { enabled: this.hasZ };
} } } })], M4.prototype, "zmin", void 0), e([y({ type: Number, json: { write: true } })], M4.prototype, "xmax", void 0), e([y({ type: Number, json: { write: true } })], M4.prototype, "ymax", void 0), e([y({ type: Number, json: { origins: { "web-scene": { write: false } }, write: { overridePolicy() {
  return { enabled: this.hasM };
} } } })], M4.prototype, "mmax", void 0), e([y({ type: Number, json: { origins: { "web-scene": { write: false } }, write: { overridePolicy() {
  return { enabled: this.hasZ };
} } } })], M4.prototype, "zmax", void 0), M4 = f6 = e([a2("esri.geometry.Extent")], M4), M4.prototype.toJSON.isDefaultToJSON = true;
var w3 = M4;

export {
  s4 as s,
  t3 as t,
  e2 as e,
  S,
  r4 as r,
  E,
  R,
  o4 as o,
  G,
  u,
  k,
  T2 as T,
  P,
  s3 as s2,
  p2 as p,
  I,
  c,
  I2,
  E2,
  R2,
  A2 as A,
  p3 as p2,
  f,
  N,
  Y,
  G3 as G2,
  L,
  W,
  $,
  X,
  le,
  me,
  fe,
  f2,
  p5 as p3,
  c3 as c2,
  g2 as g,
  M3 as M,
  y3 as y,
  d3 as d,
  R3,
  j,
  w2 as w,
  r5 as r2,
  i2 as i,
  c4 as c3,
  s5 as s3,
  o7 as o2,
  x5 as x,
  p7 as p4,
  G4 as G3,
  Z,
  w3 as w2
};
//# sourceMappingURL=chunk-T5VSOT6T.js.map
