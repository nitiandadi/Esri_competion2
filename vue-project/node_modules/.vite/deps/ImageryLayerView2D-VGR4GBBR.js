import {
  h as h2,
  m,
  y as y2
} from "./chunk-YFCIFUMZ.js";
import {
  n
} from "./chunk-VOASWX25.js";
import {
  v as v2
} from "./chunk-MQQUS4RK.js";
import {
  a as a3
} from "./chunk-JVETMABH.js";
import {
  l as l2
} from "./chunk-RHRVMFYS.js";
import {
  i as i2
} from "./chunk-X2II7CAR.js";
import "./chunk-ZIWT55SL.js";
import {
  ae
} from "./chunk-YVWMHTJA.js";
import "./chunk-C47NUFM3.js";
import "./chunk-OXDZTKIK.js";
import "./chunk-JOI7RZGI.js";
import "./chunk-C6SENRFO.js";
import "./chunk-G3IR6EOM.js";
import "./chunk-6CHYNNZQ.js";
import "./chunk-OFMRQG54.js";
import {
  a as a2
} from "./chunk-W4RTPEF7.js";
import {
  f,
  u
} from "./chunk-2PEMPHHT.js";
import "./chunk-KK7UXBV2.js";
import {
  h
} from "./chunk-BLQJFVYJ.js";
import "./chunk-7XVHXPW5.js";
import "./chunk-J6VS6FXY.js";
import "./chunk-3H5NJQM5.js";
import "./chunk-LLOJIW4K.js";
import "./chunk-QX7RONCE.js";
import "./chunk-AZEN5UFW.js";
import "./chunk-5BAT5OP4.js";
import "./chunk-VV2CU7S7.js";
import "./chunk-FYA3X5C5.js";
import "./chunk-B3A3THPO.js";
import "./chunk-DKDRIIV4.js";
import "./chunk-5SYMUP5B.js";
import "./chunk-R3MRUDAD.js";
import "./chunk-R6XKQWZ7.js";
import "./chunk-N7UECSSE.js";
import "./chunk-LYEEAWXU.js";
import "./chunk-6SCM5LCL.js";
import "./chunk-223SE4BY.js";
import "./chunk-63WRUMNA.js";
import "./chunk-O2JKCGK6.js";
import {
  T
} from "./chunk-WAPZ634R.js";
import "./chunk-7F3YO5N7.js";
import "./chunk-AEPSMJZJ.js";
import "./chunk-53FPJYCC.js";
import "./chunk-MSPZCZRZ.js";
import "./chunk-RURSJOSG.js";
import "./chunk-L225EF7W.js";
import "./chunk-23AC3IC7.js";
import "./chunk-GKD7ZY5C.js";
import {
  J
} from "./chunk-BTIR4W7Z.js";
import {
  T as T2,
  d as d2,
  x2 as x3
} from "./chunk-OC742RJZ.js";
import {
  s as s3
} from "./chunk-7OXAXJPF.js";
import "./chunk-UHA44FM7.js";
import "./chunk-TQAOUM4T.js";
import "./chunk-TFWV44LH.js";
import "./chunk-RRNRSHX3.js";
import "./chunk-IEBU4QQL.js";
import "./chunk-4M3AMTD4.js";
import "./chunk-MXRYGWSY.js";
import "./chunk-R4BFOFGL.js";
import "./chunk-KVNI5TTW.js";
import "./chunk-U34LDFXK.js";
import "./chunk-L6KWUR6B.js";
import "./chunk-OEIEPNC6.js";
import "./chunk-VG55DFRV.js";
import "./chunk-WQ64YIYM.js";
import "./chunk-NXYKN3ZF.js";
import "./chunk-5MAK42GD.js";
import "./chunk-NWZTRS6O.js";
import "./chunk-77E52HT5.js";
import "./chunk-KYJD6PVR.js";
import "./chunk-RITPHS54.js";
import "./chunk-D2UI2BQN.js";
import "./chunk-5MV6T7MH.js";
import "./chunk-U3IHIDSP.js";
import "./chunk-34FJTA26.js";
import {
  i
} from "./chunk-6EQJNBJO.js";
import "./chunk-DUEDINK5.js";
import "./chunk-MZ267CZB.js";
import "./chunk-3DBV4JBL.js";
import "./chunk-UTGANG7C.js";
import "./chunk-CJ2YD4VU.js";
import "./chunk-26N6FACI.js";
import "./chunk-PRXITTX7.js";
import "./chunk-JGIZLXNQ.js";
import "./chunk-5BYH2DSF.js";
import "./chunk-3IDKVHSA.js";
import "./chunk-PXPM76YN.js";
import "./chunk-G63AQLOB.js";
import "./chunk-M5GIVS5Q.js";
import "./chunk-XXDTEEJA.js";
import "./chunk-OPQ632ST.js";
import "./chunk-U6GC73UT.js";
import "./chunk-RSGOERDK.js";
import "./chunk-WVLEGBEW.js";
import "./chunk-KIR65PYA.js";
import "./chunk-N5RJDK35.js";
import "./chunk-DP34NAR5.js";
import "./chunk-OP7TT6MW.js";
import "./chunk-AJY7W6KP.js";
import "./chunk-G65A4RB3.js";
import "./chunk-MN4E5VOA.js";
import "./chunk-ST7DNJJS.js";
import {
  b
} from "./chunk-RPT2LTMJ.js";
import "./chunk-JP2SJCCZ.js";
import "./chunk-QIPM2JON.js";
import "./chunk-2CREJO6O.js";
import "./chunk-RVPWRWBW.js";
import "./chunk-EPJSBV4J.js";
import "./chunk-SLPOHICA.js";
import "./chunk-REIXEATJ.js";
import "./chunk-7YGY53FV.js";
import "./chunk-XP5MC636.js";
import {
  d
} from "./chunk-IGOXVXHJ.js";
import "./chunk-6YBCJ6DZ.js";
import {
  x as x2
} from "./chunk-IFB6JAZV.js";
import "./chunk-IMDA6RVE.js";
import "./chunk-GGTMSDMZ.js";
import "./chunk-ICG3HFWD.js";
import "./chunk-4NXG3DDL.js";
import "./chunk-H5PGGDUF.js";
import "./chunk-XS2IGMN6.js";
import "./chunk-YEBACBC7.js";
import "./chunk-UKGDL4FF.js";
import "./chunk-ZV33SC25.js";
import "./chunk-ONJXOTQ7.js";
import "./chunk-4VX5PWQN.js";
import "./chunk-K55CPJL4.js";
import "./chunk-HM62IZSE.js";
import {
  g
} from "./chunk-2OJTWNQ6.js";
import "./chunk-QKWZO2WR.js";
import "./chunk-GEQPBGLO.js";
import {
  U,
  l,
  w as w3
} from "./chunk-2UAIGHM2.js";
import "./chunk-CCAF47ZU.js";
import "./chunk-CCNZLEW5.js";
import "./chunk-FGXNBIU5.js";
import "./chunk-KGIL42MH.js";
import "./chunk-A3HP4ESO.js";
import "./chunk-Z5QBM3A6.js";
import "./chunk-MRALC5D7.js";
import "./chunk-CYZ4XVBT.js";
import "./chunk-LVRAFE6T.js";
import "./chunk-XF2RZJFH.js";
import "./chunk-HRFBINZY.js";
import "./chunk-WAN4YZSB.js";
import "./chunk-EALW5DHT.js";
import "./chunk-EAKUFEPO.js";
import "./chunk-EQMIUIFH.js";
import "./chunk-KK57CPHE.js";
import "./chunk-7MMTDLQQ.js";
import "./chunk-TJWUU7NW.js";
import "./chunk-Q62HELM6.js";
import "./chunk-BQXNXAP2.js";
import "./chunk-BHQVXYUV.js";
import "./chunk-DKH5QOVM.js";
import "./chunk-JT54I3AY.js";
import "./chunk-DC3QI5ZE.js";
import "./chunk-TNTTCGVB.js";
import "./chunk-EGHLQERQ.js";
import "./chunk-6CVKQGVU.js";
import {
  U as U2
} from "./chunk-2HZTCGYV.js";
import "./chunk-Z3YY72G4.js";
import "./chunk-M3KO43BW.js";
import "./chunk-LRFOTULU.js";
import "./chunk-HPP5IXU5.js";
import "./chunk-UADQEL54.js";
import "./chunk-4D6JGHEF.js";
import "./chunk-CT6YILLI.js";
import {
  j as j2
} from "./chunk-LJAKPJDJ.js";
import "./chunk-CCWBAM3L.js";
import "./chunk-TKWZACTO.js";
import "./chunk-6K5VVUVI.js";
import "./chunk-DOQX2NNO.js";
import "./chunk-MJFFZ3MM.js";
import "./chunk-2ZX6RZTI.js";
import "./chunk-5Q7F7FJ6.js";
import {
  w,
  w2
} from "./chunk-XFNXUG2G.js";
import "./chunk-27R7KBOL.js";
import "./chunk-RDTHWDIE.js";
import "./chunk-EAFLFTSD.js";
import "./chunk-DOVXDFWE.js";
import "./chunk-M4BAPJ3L.js";
import "./chunk-QXPN4D5D.js";
import "./chunk-KGIB6IYW.js";
import {
  a2 as a,
  e as e2,
  v2 as v,
  y3 as y
} from "./chunk-3PPVODAA.js";
import "./chunk-MTJ2HM2W.js";
import "./chunk-PXVSWY3C.js";
import {
  j,
  x
} from "./chunk-WTKFW2TD.js";
import {
  s,
  s2
} from "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import {
  e,
  r,
  t
} from "./chunk-WHB7G7RI.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryView2D.js
var d3 = class extends v {
  constructor() {
    super(...arguments), this.attached = false, this.container = new h(), this.updateRequested = false, this.type = "imagery", this._bitmapView = new a3();
  }
  destroy() {
    this.attached && (this.detach(), this.attached = false), this.updateRequested = false;
  }
  get updating() {
    return !this.attached || this.isUpdating();
  }
  update(e3) {
    this.strategy.update(e3).catch((e4) => {
      j(e4) || s.getLogger(this.declaredClass).error(e4);
    });
  }
  hitTest(e3) {
    return new g({ attributes: {}, geometry: e3.clone(), layer: this.layer });
  }
  attach() {
    this.container.addChild(this._bitmapView);
    const e3 = this.layer.version >= 10, t3 = this.layer.version >= 10.1 ? this.layer.imageMaxHeight : 2048, i3 = this.layer.version >= 10.1 ? this.layer.imageMaxWidth : 2048;
    this.strategy = new v2({ container: this._bitmapView, imageNormalizationSupported: e3, imageMaxHeight: t3, imageMaxWidth: i3, fetchSource: this._fetchImage.bind(this), requestUpdate: () => this.requestUpdate() });
  }
  detach() {
    this.strategy.destroy(), this._bitmapView.removeAllChildren(), this.container.removeAllChildren(), this.updateRequested = false;
  }
  redraw() {
    this.strategy.updateExports(async (e3) => {
      const { source: t3 } = e3;
      if (!t3 || t3 instanceof ImageBitmap)
        return;
      const i3 = await this.layer.applyRenderer({ extent: t3.extent, pixelBlock: t3.originalPixelBlock ?? t3.pixelBlock });
      t3.filter = (e4) => this.layer.pixelFilter ? this.layer.applyFilter(e4) : { ...i3, extent: t3.extent };
    }).catch((e3) => {
      j(e3) || s.getLogger(this.declaredClass).error(e3);
    });
  }
  requestUpdate() {
    this.updateRequested || (this.updateRequested = true, this.view.requestUpdate());
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  getPixelData() {
    if (this.updating)
      return null;
    const e3 = this.strategy.bitmaps;
    if (1 === e3.length && e3[0].source)
      return { extent: e3[0].source.extent, pixelBlock: e3[0].source.originalPixelBlock };
    if (e3.length > 1) {
      const t3 = this.view.extent, i3 = e3.map((e4) => e4.source).filter((e4) => e4.extent && e4.extent.intersects(t3)).map((e4) => ({ extent: e4.extent, pixelBlock: e4.originalPixelBlock })), r2 = T2(i3, t3);
      return r(r2) ? { extent: r2.extent, pixelBlock: r2.pixelBlock } : null;
    }
    return null;
  }
  async _fetchImage(e3, t3, i3, r2) {
    var _a;
    (r2 = r2 || {}).timeExtent = this.timeExtent, r2.requestAsImageElement = true, r2.returnImageBitmap = true;
    const s4 = await this.layer.fetchImage(e3, t3, i3, r2);
    if (s4.imageBitmap)
      return s4.imageBitmap;
    const a4 = await this.layer.applyRenderer(s4.pixelData, { signal: r2.signal }), o = new l2(a4.pixelBlock, (_a = a4.extent) == null ? void 0 : _a.clone(), s4.pixelData.pixelBlock);
    return o.filter = (e4) => this.layer.applyFilter(e4), o;
  }
};
e2([y()], d3.prototype, "attached", void 0), e2([y()], d3.prototype, "container", void 0), e2([y()], d3.prototype, "layer", void 0), e2([y()], d3.prototype, "strategy", void 0), e2([y()], d3.prototype, "timeExtent", void 0), e2([y()], d3.prototype, "view", void 0), e2([y()], d3.prototype, "updateRequested", void 0), e2([y()], d3.prototype, "updating", null), e2([y()], d3.prototype, "type", void 0), d3 = e2([a("esri.views.2d.layers.imagery.ImageryView2D")], d3);
var u2 = d3;

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFContainer.js
var t2 = class extends a2 {
  constructor() {
    super(...arguments), this.symbolTypes = ["triangle"];
  }
  get requiresDedicatedFBO() {
    return false;
  }
  prepareRenderPasses(s4) {
    const t3 = s4.registerRenderPass({ name: "imagery (vf)", brushes: [m], target: () => this.children, drawPhase: T.MAP });
    return [...super.prepareRenderPasses(s4), t3];
  }
  doRender(e3) {
    this.visible && e3.drawPhase === T.MAP && this.symbolTypes.forEach((r2) => {
      e3.renderPass = r2, super.doRender(e3);
    });
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryVFStrategy.js
var p = class extends v {
  constructor(e3) {
    super(e3), this._loading = null, this.update = x((e4, t3) => this._update(e4, t3).catch((e5) => {
      j(e5) || s.getLogger(this.declaredClass).error(e5);
    }));
  }
  get updating() {
    return !!this._loading;
  }
  redraw(e3) {
    if (!this.container.children.length)
      return;
    const t3 = this.container.children[0];
    t3.symbolizerParameters = e3, t3.invalidateVAO(), this.container.symbolTypes = "wind_speed" === e3.style ? ["scalar", "triangle"] : "simple_scalar" === e3.style ? ["scalar"] : ["triangle"], this.container.requestRender();
  }
  async _update(e3, t3, r2) {
    if (!e3.stationary)
      return;
    const { extent: i3, spatialReference: s4 } = e3.state, o = new w2({ xmin: i3.xmin, ymin: i3.ymin, xmax: i3.xmax, ymax: i3.ymax, spatialReference: s4 }), [a4, n2] = e3.state.size;
    this._loading = this.fetchPixels(o, a4, n2, r2);
    const c = await this._loading;
    this._addToDisplay(c, t3, e3.state), this._loading = null;
  }
  _addToDisplay(e3, t3, r2) {
    if (t(e3.pixelBlock))
      return this.container.children.forEach((e4) => e4.destroy()), void this.container.removeAllChildren();
    const { extent: s4, pixelBlock: o } = e3, a4 = new y2(o);
    a4.offset = [0, 0], a4.symbolizerParameters = t3, a4.rawPixelData = e3, a4.invalidateVAO(), a4.x = s4.xmin, a4.y = s4.ymax, a4.pixelRatio = r2.pixelRatio, a4.rotation = r2.rotation, a4.resolution = r2.resolution, a4.width = o.width * t3.symbolTileSize, a4.height = o.height * t3.symbolTileSize, this.container.children.forEach((e4) => e4.destroy()), this.container.removeAllChildren(), this.container.symbolTypes = "wind_speed" === t3.style ? ["scalar", "triangle"] : "simple_scalar" === t3.style ? ["scalar"] : ["triangle"], this.container.addChild(a4);
  }
};
e2([y()], p.prototype, "fetchPixels", void 0), e2([y()], p.prototype, "container", void 0), e2([y()], p.prototype, "_loading", void 0), e2([y()], p.prototype, "updating", null), p = e2([a("esri.views.2d.layers.imagery.ImageryVFStrategy")], p);
var m2 = p;

// node_modules/@arcgis/core/views/2d/layers/imagery/VectorFieldView2D.js
var f2 = class extends d {
  constructor() {
    super(...arguments), this.attached = false, this.container = new t2(), this.type = "imageryVF", this._dataParameters = { exportParametersVersion: 0, bbox: "", symbolTileSize: 0, time: "" }, this._fetchpixels = async (t3, e3, r2, i3) => {
      const n2 = await this._projectFullExtentPromise, { symbolTileSize: l3 } = this.layer.renderer, { extent: m4, width: c, height: p2 } = x3(t3, e3, r2, l3, n2);
      if (r(n2) && !n2.intersects(t3))
        return { extent: m4, pixelBlock: null };
      const h3 = { bbox: `${m4.xmin}, ${m4.ymin}, ${m4.xmax}, ${m4.ymax}`, exportParametersVersion: this.layer.exportImageServiceParameters.version, symbolTileSize: l3, time: JSON.stringify(this.timeExtent || "") };
      if (this._canReuseVectorFieldData(h3)) {
        const t4 = this.getPixelData();
        if (r(t4)) {
          if (`${t4.extent.xmin}, ${t4.extent.ymin}, ${t4.extent.xmax}, ${t4.extent.ymax}` === h3.bbox)
            return t4;
        }
      }
      const { pixelData: d4 } = await this.layer.fetchImage(m4, c, p2, { timeExtent: this.timeExtent, requestAsImageElement: false, signal: i3 });
      this._dataParameters = h3;
      const x4 = d4 == null ? void 0 : d4.pixelBlock;
      if (t(x4))
        return { extent: m4, pixelBlock: null };
      return { extent: m4, pixelBlock: "vector-uv" === this.layer.rasterInfo.dataType ? e(d2(x4, "vector-uv")) : x4 };
    };
  }
  get updating() {
    return !this.attached || this._strategy.updating;
  }
  attach() {
    this._projectFullExtentPromise = this._getProjectedFullExtent(this.view.spatialReference), this._strategy = new m2({ container: this.container, fetchPixels: this._fetchpixels }), this.handles.add(l(() => this.layer.renderer, (t3) => this._updateSymbolizerParams(t3), w3), "attach");
  }
  detach() {
    this._strategy.destroy(), this.container.children.forEach((t3) => t3.destroy()), this.container.removeAllChildren(), this.handles.remove("attach"), this._strategy = this.container = this._projectFullExtentPromise = null;
  }
  getPixelData() {
    var _a;
    const t3 = (_a = this.container.children[0]) == null ? void 0 : _a.rawPixelData;
    if (this.updating || !t3)
      return null;
    const { extent: e3, pixelBlock: r2 } = t3;
    return { extent: e3, pixelBlock: r2 };
  }
  hitTest(t3) {
    return new g({ attributes: {}, geometry: t3.clone(), layer: this.layer });
  }
  update(t3) {
    this._strategy.update(t3, this._symbolizerParams);
  }
  redraw() {
    const { renderer: t3 } = this.layer;
    t3 && (this._updateSymbolizerParams(t3), this._strategy.redraw(this._symbolizerParams));
  }
  _canReuseVectorFieldData(t3) {
    const e3 = this._dataParameters.exportParametersVersion === t3.exportParametersVersion, r2 = this._dataParameters.time === t3.time, i3 = this._dataParameters.symbolTileSize === t3.symbolTileSize, s4 = this._dataParameters.bbox === t3.bbox;
    return e3 && r2 && i3 && s4;
  }
  async _getProjectedFullExtent(t3) {
    try {
      return await J(this.layer.fullExtent, t3);
    } catch (e3) {
      try {
        const e4 = (await U2(this.layer.url, { query: { option: "footprints", outSR: t3.wkid || JSON.stringify(t3.toJSON()), f: "json" } })).data.featureCollection.layers[0].layerDefinition.extent;
        return e4 ? w2.fromJSON(e4) : null;
      } catch {
        return null;
      }
    }
  }
  _updateSymbolizerParams(t3) {
    "vector-field" === t3.type && (this._symbolizerParams = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: null }));
  }
};
e2([y()], f2.prototype, "attached", void 0), e2([y()], f2.prototype, "container", void 0), e2([y()], f2.prototype, "layer", void 0), e2([y()], f2.prototype, "timeExtent", void 0), e2([y()], f2.prototype, "type", void 0), e2([y()], f2.prototype, "view", void 0), e2([y()], f2.prototype, "updating", null), f2 = e2([a("esri.views.2d.layers.imagery.VectorFieldView2D")], f2);
var g2 = f2;

// node_modules/@arcgis/core/views/layers/ImageryLayerView.js
var m3 = (m4) => {
  let c = class extends m4 {
    constructor() {
      super(...arguments), this.view = null;
    }
    async fetchPopupFeatures(e3, s4) {
      const { layer: p2 } = this;
      if (!e3)
        throw new s2("imagerylayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: p2 });
      const { popupEnabled: a4 } = p2, m5 = s3(p2, s4);
      if (!a4 || t(m5))
        throw new s2("imagerylayerview:fetchPopupFeatures", "Missing required popupTemplate or popupEnabled", { popupEnabled: a4, popupTemplate: m5 });
      const c2 = await m5.getRequiredFields(), l3 = new x2();
      l3.timeExtent = this.timeExtent, l3.geometry = e3, l3.outFields = c2, l3.outSpatialReference = e3.spatialReference;
      const { resolution: y3, spatialReference: d4 } = this.view, w4 = "2d" === this.view.type ? new w(y3, y3, d4) : new w(0.5 * y3, 0.5 * y3, d4), { returnTopmostRaster: f3, showNoDataRecords: h3 } = m5.layerOptions || { returnTopmostRaster: true, showNoDataRecords: false }, R = { returnDomainValues: true, returnTopmostRaster: f3, pixelSize: w4, showNoDataRecords: h3, signal: r(s4) ? s4.signal : null };
      return p2.queryVisibleRasters(l3, R).then((e4) => e4);
    }
    canResume() {
      var _a;
      return !!super.canResume() && !((_a = this.timeExtent) == null ? void 0 : _a.isEmpty);
    }
  };
  return e2([y()], c.prototype, "layer", void 0), e2([y()], c.prototype, "suspended", void 0), e2([y(b)], c.prototype, "timeExtent", void 0), e2([y()], c.prototype, "view", void 0), c = e2([a("esri.views.layers.ImageryLayerView")], c), c;
};

// node_modules/@arcgis/core/views/2d/layers/ImageryLayerView2D.js
var g3 = class extends m3(i2(f(u))) {
  constructor() {
    super(...arguments), this._exportImageVersion = -1, this._highlightGraphics = new i(), this._highlightView = void 0, this.layer = null, this.subview = null;
  }
  get pixelData() {
    const { subview: e3 } = this;
    return this.updating || !e3 ? null : "getPixelData" in e3 ? e3.getPixelData() : null;
  }
  async hitTest(e3, t3) {
    return this.subview ? [{ type: "graphic", graphic: this.subview.hitTest(e3), layer: this.layer, mapPoint: e3 }] : null;
  }
  update(e3) {
    var _a;
    (_a = this.subview) == null ? void 0 : _a.update(e3);
  }
  attach() {
    this.layer.increaseRasterJobHandlerUsage(), this._setSubView(), this.view && (this._highlightView = new ae({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new n(this.view.featuresTilingScheme) }), this.container.addChild(this._highlightView.container)), this.addAttachHandles([l(() => this.layer.blendMode ?? "normal", (e3) => this.subview && (this.subview.container.blendMode = e3), w3), l(() => this.layer.effect ?? null, (e3) => this.subview && (this.subview.container.effect = e3), w3), l(() => this.layer.exportImageServiceParameters.version, (e3) => {
      e3 && this._exportImageVersion !== e3 && (this._exportImageVersion = e3, this.requestUpdate());
    }, U), l(() => this.timeExtent, (e3) => {
      const { subview: t3 } = this;
      t3 && (t3.timeExtent = e3, "redraw" in t3 ? this.requestUpdate() : t3.redrawOrRefetch());
    }, U), this.layer.on("redraw", () => {
      const { subview: e3 } = this;
      e3 && ("redraw" in e3 ? e3.redraw() : e3.redrawOrRefetch());
    }), l(() => this.layer.renderer, () => this._setSubView())]);
  }
  detach() {
    var _a, _b;
    this.layer.decreaseRasterJobHandlerUsage(), this.container.removeAllChildren(), this._detachSubview(this.subview), (_a = this.subview) == null ? void 0 : _a.destroy(), this.subview = null, (_b = this._highlightView) == null ? void 0 : _b.destroy(), this._exportImageVersion = -1;
  }
  moveStart() {
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  highlight(e3, r2) {
    if (!((Array.isArray(e3) ? e3[0] : j2.isCollection(e3) ? e3.getItemAt(0) : e3) instanceof g))
      return { remove: () => {
      } };
    let s4 = [];
    return Array.isArray(e3) || j2.isCollection(e3) ? s4 = e3.map((e4) => e4.clone()) : e3 instanceof g && (s4 = [e3.clone()]), this._highlightGraphics.addMany(s4), { remove: () => {
      this._highlightGraphics.removeMany(s4);
    } };
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    return !this.subview || this.subview.updating;
  }
  _setSubView() {
    var _a, _b;
    if (!this.view)
      return;
    const e3 = (_a = this.layer.renderer) == null ? void 0 : _a.type;
    let t3 = "imagery";
    if ("vector-field" === e3 ? t3 = "imageryVF" : "flow" === e3 && (t3 = "flow"), this.subview) {
      const { type: e4 } = this.subview;
      if (e4 === t3)
        return this._attachSubview(this.subview), void ("flow" === e4 ? this.subview.redrawOrRefetch() : "imagery" === e4 && "lerc" === this.layer.format ? this.subview.redraw() : this.requestUpdate());
      this._detachSubview(this.subview), (_b = this.subview) == null ? void 0 : _b.destroy();
    }
    this.subview = "imagery" === t3 ? new u2({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : "imageryVF" === t3 ? new g2({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : new h2({ layer: this.layer, layerView: this }), this._attachSubview(this.subview), this.requestUpdate();
  }
  _attachSubview(e3) {
    e3 && !e3.attached && (e3.attach(), e3.attached = true, this.container.addChildAt(e3.container, 0), e3.container.blendMode = this.layer.blendMode, e3.container.effect = this.layer.effect);
  }
  _detachSubview(e3) {
    (e3 == null ? void 0 : e3.attached) && (this.container.removeChild(e3.container), e3.detach(), e3.attached = false);
  }
};
e2([y()], g3.prototype, "pixelData", null), e2([y()], g3.prototype, "subview", void 0), g3 = e2([a("esri.views.2d.layers.ImageryLayerView2D")], g3);
var b2 = g3;
export {
  b2 as default
};
//# sourceMappingURL=ImageryLayerView2D-VGR4GBBR.js.map
