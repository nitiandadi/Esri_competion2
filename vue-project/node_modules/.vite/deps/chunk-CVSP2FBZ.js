import {
  m
} from "./chunk-OF6BJKPA.js";
import {
  S
} from "./chunk-YHZVWABO.js";
import {
  r as r2
} from "./chunk-H2ENCYR3.js";
import {
  o
} from "./chunk-SVHG5VY2.js";
import {
  o as o2,
  s
} from "./chunk-QXPN4D5D.js";
import {
  l
} from "./chunk-DLM7WQKI.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-7GTATSRF.js";
import {
  d,
  r
} from "./chunk-WHB7G7RI.js";

// node_modules/@arcgis/core/symbols/support/FeatureExpressionInfo.js
var i;
var p = i = class extends l {
  constructor(r4) {
    super(r4);
  }
  async collectRequiredFields(r4, e3) {
    return S(r4, e3, this.expression);
  }
  clone() {
    return new i({ expression: this.expression, title: this.title });
  }
  equals(r4) {
    return this.expression === r4.expression && this.title === r4.title;
  }
};
e([y({ type: String, json: { write: true } })], p.prototype, "expression", void 0), e([y({ type: String, json: { write: true } })], p.prototype, "title", void 0), p = i = e([a("esri.layers.support.FeatureExpressionInfo")], p);
var c = p;

// node_modules/@arcgis/core/symbols/support/unitConversionUtils.js
function r3(n) {
  return 1 / (m[n] || 1);
}
function e2() {
  const n = Object.keys(m);
  return n.sort(), n;
}
var o3 = e2();

// node_modules/@arcgis/core/symbols/support/ElevationInfo.js
var m2;
var d2 = o2()({ onTheGround: "on-the-ground", relativeToGround: "relative-to-ground", relativeToScene: "relative-to-scene", absoluteHeight: "absolute-height" });
var c2 = new s({ foot: "feet", kilometer: "kilometers", meter: "meters", mile: "miles", "us-foot": "us-feet", yard: "yards" });
var h = m2 = class extends l {
  constructor(e3) {
    super(e3), this.offset = null;
  }
  readFeatureExpressionInfo(e3, r4) {
    return null != e3 ? e3 : r4.featureExpression && 0 === r4.featureExpression.value ? { expression: "0" } : void 0;
  }
  writeFeatureExpressionInfo(e3, r4, o4, t) {
    r4[o4] = e3.write({}, t), "0" === e3.expression && (r4.featureExpression = { value: 0 });
  }
  get mode() {
    const { offset: e3, featureExpressionInfo: r4 } = this;
    return this._isOverridden("mode") ? this._get("mode") : r(e3) || r4 ? "relative-to-ground" : "on-the-ground";
  }
  set mode(e3) {
    this._override("mode", e3);
  }
  set unit(e3) {
    this._set("unit", e3);
  }
  write(e3, r4) {
    return this.offset || this.mode || this.featureExpressionInfo || this.unit ? super.write(e3, r4) : null;
  }
  clone() {
    return new m2({ mode: this.mode, offset: this.offset, featureExpressionInfo: this.featureExpressionInfo ? this.featureExpressionInfo.clone() : void 0, unit: this.unit });
  }
  equals(e3) {
    return this.mode === e3.mode && this.offset === e3.offset && this.unit === e3.unit && d(this.featureExpressionInfo, e3.featureExpressionInfo);
  }
};
e([y({ type: c, json: { write: true } })], h.prototype, "featureExpressionInfo", void 0), e([o("featureExpressionInfo", ["featureExpressionInfo", "featureExpression"])], h.prototype, "readFeatureExpressionInfo", null), e([r2("featureExpressionInfo", { featureExpressionInfo: { type: c }, "featureExpression.value": { type: [0] } })], h.prototype, "writeFeatureExpressionInfo", null), e([y({ type: d2.apiValues, nonNullable: true, json: { type: d2.jsonValues, read: d2.read, write: { writer: d2.write, isRequired: true } } })], h.prototype, "mode", null), e([y({ type: Number, json: { write: true } })], h.prototype, "offset", void 0), e([y({ type: o3, json: { type: String, read: c2.read, write: c2.write } })], h.prototype, "unit", null), h = m2 = e([a("esri.layers.support.ElevationInfo")], h);
var x = h;

export {
  r3 as r,
  x
};
//# sourceMappingURL=chunk-CVSP2FBZ.js.map
