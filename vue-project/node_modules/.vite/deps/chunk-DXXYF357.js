// node_modules/@arcgis/core/layers/support/rasterFormats/pixelRangeUtils.js
var t = 9999999e31;
var e = 2e-7;
var n = { u1: [0, 1], u2: [0, 3], u4: [0, 15], u8: [0, 255], s8: [-128, 127], u16: [0, 65535], s16: [-32768, 32767], u32: [0, 4294967295], s32: [-2147483648, 2147483647], f32: [-34028234663852886e22, 34028234663852886e22], f64: [-Number.MAX_VALUE, Number.MAX_VALUE] };
function s(t2) {
  return n[t2] ?? [-34028234663852886e22, 34028234663852886e22];
}
function u(n2, u2, a) {
  if (n2.depthCount && n2.depthCount > 1)
    return;
  const { pixels: i, statistics: l, pixelType: o } = n2, r = i[0].length, f = n2.bandMasks ?? [], c = n2.mask ?? new Uint8Array(r).fill(255), b = "f32" === o || "f64" === o, m = s(o);
  let h = false;
  for (let s2 = 0; s2 < i.length; s2++) {
    const n3 = "number" == typeof u2 ? u2 : u2[s2];
    if (null == n3)
      continue;
    const p = (l == null ? void 0 : l[s2].minValue) ?? m[0], N = (l == null ? void 0 : l[s2].maxValue) ?? m[1];
    if (p > n3 + Number.EPSILON || N < n3 - Number.EPSILON)
      continue;
    const M = f[s2] || new Uint8Array(r).fill(255), d = i[s2], A = a == null ? void 0 : a.customFloatTolerance;
    if (b && 0 !== A) {
      let s3 = A;
      s3 || (s3 = Math.abs(n3) >= t ? e * Math.abs(n3) : "f32" === o ? 2 ** -23 : Number.EPSILON);
      for (let t2 = 0; t2 < d.length; t2++)
        M[t2] && Math.abs(d[t2] - n3) < s3 && (d[t2] = 0, M[t2] = 0, c[t2] = 0, h = true);
    } else
      for (let t2 = 0; t2 < d.length; t2++)
        M[t2] && d[t2] === n3 && (d[t2] = 0, M[t2] = 0, c[t2] = 0, h = true);
    f[s2] = M;
  }
  h && (n2.bandMasks = f, n2.mask = c), h && "updateStatistics" in n2 && n2.updateStatistics();
}

export {
  s,
  u
};
//# sourceMappingURL=chunk-DXXYF357.js.map
