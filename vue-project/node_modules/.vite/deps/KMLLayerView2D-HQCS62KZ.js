import {
  l as l2
} from "./chunk-T6WYSB4E.js";
import {
  I,
  o
} from "./chunk-N3ONIRVT.js";
import "./chunk-VF6NHVYX.js";
import {
  a as a4
} from "./chunk-F4LSTMWS.js";
import {
  R,
  S,
  T
} from "./chunk-UZ2MSG7E.js";
import {
  i as i2
} from "./chunk-SLJLXSCA.js";
import "./chunk-VCVFTYST.js";
import {
  ae
} from "./chunk-XCS3TAXR.js";
import "./chunk-RF7QBWO2.js";
import "./chunk-LUJI6E4N.js";
import "./chunk-AQNLVOSU.js";
import "./chunk-VAKRQRV6.js";
import "./chunk-WSPTGWUV.js";
import "./chunk-FRHIREEO.js";
import "./chunk-4UIQ3FQB.js";
import {
  n
} from "./chunk-TZVXXAQI.js";
import {
  f as f4,
  u
} from "./chunk-B6QNIB4A.js";
import "./chunk-6ZJGGXFT.js";
import "./chunk-AATTIYMG.js";
import "./chunk-27RJDD2V.js";
import "./chunk-NKU7VSVT.js";
import "./chunk-CSXCA65Q.js";
import "./chunk-RPPTWDPP.js";
import "./chunk-ECBW37F4.js";
import "./chunk-RSRGRQCE.js";
import "./chunk-BTELXCWJ.js";
import "./chunk-HCWIAQV3.js";
import "./chunk-JEN3J6RC.js";
import "./chunk-UKMTP4AR.js";
import "./chunk-DEBYWO5M.js";
import "./chunk-37BTU2M3.js";
import "./chunk-ZKGXZZBF.js";
import "./chunk-WVAMROZV.js";
import "./chunk-VBBXLTF2.js";
import "./chunk-QXR6CWAU.js";
import "./chunk-EMUQ7G7L.js";
import "./chunk-46UYDOF4.js";
import "./chunk-E7Q7UFBO.js";
import "./chunk-ZZVUJ6NV.js";
import "./chunk-B4N37FMV.js";
import "./chunk-VGTB7JUJ.js";
import "./chunk-QARJUBJV.js";
import "./chunk-UNKGAJFQ.js";
import "./chunk-DJZ2IN55.js";
import "./chunk-E4XXNNS2.js";
import "./chunk-372CNO3V.js";
import "./chunk-LIDKQETZ.js";
import "./chunk-KKWP7B7A.js";
import {
  $,
  C
} from "./chunk-EVAPL4ZD.js";
import {
  b,
  d,
  g
} from "./chunk-R66KUL6G.js";
import "./chunk-34RKANBE.js";
import "./chunk-YVZSFZPZ.js";
import "./chunk-HPIY7K2R.js";
import "./chunk-NPWYQ752.js";
import {
  x
} from "./chunk-SX7NW3RK.js";
import {
  E
} from "./chunk-RFBUNXCZ.js";
import "./chunk-PYN2S3CJ.js";
import "./chunk-AETXSJBI.js";
import "./chunk-S7QT5QV2.js";
import "./chunk-DJBFAFOP.js";
import "./chunk-QCYWXXBM.js";
import "./chunk-CCKR7UFK.js";
import {
  D,
  G,
  L,
  P,
  V,
  Y,
  f as f3
} from "./chunk-DNXRTHCH.js";
import "./chunk-OGEJGMAT.js";
import "./chunk-FFQ74L2K.js";
import "./chunk-VQUDNY75.js";
import "./chunk-4S6QYDLW.js";
import "./chunk-6WFGRBCZ.js";
import "./chunk-QDIJO3T2.js";
import "./chunk-6N66PUXI.js";
import "./chunk-VMQMOFVW.js";
import "./chunk-6BFZPJCJ.js";
import "./chunk-7UNBIIZU.js";
import "./chunk-HERKGCCA.js";
import "./chunk-SB6UPWEY.js";
import "./chunk-HWMFYBFS.js";
import "./chunk-JFNJRNZX.js";
import "./chunk-EOF72YID.js";
import "./chunk-SXVHYYSN.js";
import "./chunk-3FNYVRHQ.js";
import "./chunk-66OCZHWI.js";
import {
  i
} from "./chunk-WDFAEPDG.js";
import "./chunk-XEFASELW.js";
import "./chunk-3JVZYYA3.js";
import "./chunk-MWIMWDJV.js";
import "./chunk-LUSFZCEU.js";
import "./chunk-2KKFAUOD.js";
import "./chunk-6VXAAN5J.js";
import "./chunk-M2DTCG2D.js";
import "./chunk-AVTBKAM2.js";
import "./chunk-3F26JL34.js";
import "./chunk-KEA4MCOH.js";
import "./chunk-E4FSIE7C.js";
import "./chunk-UZM66DAH.js";
import "./chunk-CFTD44JM.js";
import "./chunk-MI7FJDLG.js";
import "./chunk-BDRIBQHS.js";
import {
  f as f2
} from "./chunk-POASDJDE.js";
import "./chunk-UQVFVW24.js";
import "./chunk-FAQPWMFY.js";
import "./chunk-ARRABRN2.js";
import "./chunk-XKQGIVQO.js";
import "./chunk-2LQUYG3Y.js";
import "./chunk-TDFTAVQL.js";
import "./chunk-7HK5OJHH.js";
import "./chunk-5XBZ477A.js";
import "./chunk-TKZTELJQ.js";
import "./chunk-7WIVOZQ6.js";
import "./chunk-OXCMSIKI.js";
import {
  rn,
  tn
} from "./chunk-HWGER6NN.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-ZXEHLMMH.js";
import "./chunk-BHKUW5DD.js";
import "./chunk-G3ZCYHOR.js";
import "./chunk-F6Y6UABE.js";
import "./chunk-5W2WWLX7.js";
import "./chunk-U6PCZE74.js";
import "./chunk-WLWGIFGY.js";
import "./chunk-IZJW67TO.js";
import "./chunk-Q4UXP7RG.js";
import "./chunk-JZSNGIOH.js";
import "./chunk-EXHPOUUQ.js";
import "./chunk-6PNW7TCI.js";
import "./chunk-6UZRMITW.js";
import "./chunk-HSDJ4PR2.js";
import {
  l
} from "./chunk-QP5ZWBKN.js";
import "./chunk-QAGMOCSO.js";
import "./chunk-EPZLAQP3.js";
import "./chunk-VSUGA5AN.js";
import "./chunk-E3JHIVZP.js";
import "./chunk-3ACAMBZX.js";
import "./chunk-G3A2XEXX.js";
import "./chunk-JKBONAYS.js";
import "./chunk-YSJ4W32U.js";
import "./chunk-3EIJOCWD.js";
import "./chunk-HRIBADXS.js";
import "./chunk-CSFUQCFV.js";
import "./chunk-ZUIHAM2A.js";
import "./chunk-SABBLK7S.js";
import "./chunk-2G4WAYFD.js";
import "./chunk-PK5IA5PH.js";
import "./chunk-7FGYV4GW.js";
import "./chunk-CXHYHUY6.js";
import "./chunk-CXBJMCKT.js";
import "./chunk-ULOJUU6K.js";
import "./chunk-3CXPBSW5.js";
import "./chunk-PLL74BYO.js";
import "./chunk-AMV7VELH.js";
import "./chunk-UZTIVDTR.js";
import "./chunk-33RBBVRO.js";
import "./chunk-VWOAL3VX.js";
import "./chunk-II3EAW7L.js";
import {
  U
} from "./chunk-JU2WP2RZ.js";
import {
  a as a3
} from "./chunk-NI6ENKKR.js";
import {
  A,
  v
} from "./chunk-6XDV3BWZ.js";
import "./chunk-CH2BQDQT.js";
import "./chunk-OTDDRQS2.js";
import "./chunk-W3UIP6CW.js";
import "./chunk-CHJGFW3N.js";
import {
  j
} from "./chunk-25GQOVW6.js";
import "./chunk-QLGPYDHY.js";
import "./chunk-IMKS3PQX.js";
import "./chunk-5WYME2YP.js";
import "./chunk-PEP3ZFMY.js";
import "./chunk-MQUNEV3K.js";
import "./chunk-WVICJPEU.js";
import "./chunk-TZBBKXOW.js";
import "./chunk-YMGINT43.js";
import "./chunk-2WLZX6A7.js";
import "./chunk-M7CMZTD6.js";
import "./chunk-ERJGVLTB.js";
import {
  f2 as f,
  w as w2,
  w2 as w3
} from "./chunk-T5VSOT6T.js";
import "./chunk-OHZM2VYI.js";
import "./chunk-FSB7TIRN.js";
import "./chunk-UIMO4FGN.js";
import "./chunk-NXJOIK2O.js";
import "./chunk-DDRAFOUW.js";
import "./chunk-F4DUNBGT.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-E4M4B5ZQ.js";
import "./chunk-JATK7CEQ.js";
import "./chunk-74TXAD7S.js";
import "./chunk-HIRLBWV3.js";
import "./chunk-AFQAO5F4.js";
import {
  a2,
  e,
  y3 as y
} from "./chunk-OA5ES74L.js";
import "./chunk-6VTYOWNK.js";
import "./chunk-RLEMMDH4.js";
import "./chunk-6ZUWLK7F.js";
import "./chunk-YVZY5LDV.js";
import "./chunk-H32MMKAJ.js";
import "./chunk-MKHZ5X6F.js";
import {
  a,
  r,
  t,
  w
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/views/support/imageReprojection.js
var b2 = class {
  constructor(t2) {
    if (this._ownsRctx = false, t2)
      this._ownsRctx = false, this._rctx = t2;
    else {
      if (b2._instance)
        return b2._instanceRefCount++, b2._instance;
      b2._instanceRefCount = 1, b2._instance = this, this._ownsRctx = true;
      const t3 = document.createElement("canvas").getContext("webgl");
      t3.getExtension("OES_texture_float"), this._rctx = new I(t3, {});
    }
    const e2 = { applyProjection: true, bilinear: false, bicubic: false }, r2 = o("raster/reproject", "raster/reproject", /* @__PURE__ */ new Map([["a_position", 0]]), e2);
    this._program = this._rctx.programCache.acquire(r2.shaders.vertexShader, r2.shaders.fragmentShader, r2.attributes), this._rctx.useProgram(this._program), this._program.setUniform1f("u_opacity", 1), this._program.setUniform1i("u_image", 0), this._program.setUniform1i("u_flipY", 0), this._program.setUniform1i("u_transformGrid", 1), this._quad = new n(this._rctx, [0, 0, 1, 0, 0, 1, 1, 1]);
  }
  reprojectTexture(t2, s, n2 = false) {
    const o2 = rn(t2.extent, s), m = new w2({ x: (t2.extent.xmax - t2.extent.xmin) / t2.texture.descriptor.width, y: (t2.extent.ymax - t2.extent.ymin) / t2.texture.descriptor.height, spatialReference: t2.extent.spatialReference }), { x: l3, y: b3 } = C(m, s, t2.extent);
    let T2 = (l3 + b3) / 2;
    const R2 = Math.round((o2.xmax - o2.xmin) / T2), j2 = Math.round((o2.ymax - o2.ymin) / T2);
    T2 = (o2.width / R2 + o2.height / j2) / 2;
    const E2 = new w2({ x: T2, y: T2, spatialReference: o2.spatialReference }), D2 = $({ projectedExtent: o2, srcBufferExtent: t2.extent, pixelSize: E2, hasWrapAround: true, spacing: [16, 16] }), C2 = l2(this._rctx, D2), y2 = new E(this._rctx, { width: R2, height: j2, pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.LINEAR, hasMipmap: false }), M2 = new x(this._rctx, { colorTarget: Y.TEXTURE, depthStencilTarget: V.NONE, width: R2, height: j2 }, y2);
    this._rctx.bindFramebuffer(M2), this._rctx.setViewport(0, 0, R2, j2), this._rctx.useProgram(this._program), this._rctx.bindTexture(t2.texture, 0), this._rctx.bindTexture(C2, 1), this._quad.bind();
    const { width: A2 = 0, height: S2 = 0 } = t2.texture.descriptor;
    if (this._program.setUniform2f("u_srcImageSize", A2, S2), this._program.setUniform2fv("u_transformSpacing", D2.spacing), this._program.setUniform2fv("u_transformGridSize", D2.size), this._program.setUniform2f("u_targetImageSize", R2, j2), this._quad.draw(), this._quad.unbind(), this._rctx.useProgram(null), this._rctx.bindFramebuffer(null), C2.dispose(), n2) {
      const { width: t3 = 0, height: e2 = 0 } = M2.descriptor, r2 = new ImageData(t3, e2);
      return M2.readPixels(0, 0, t3, e2, P.RGBA, G.UNSIGNED_BYTE, r2.data), M2.detachColorTexture(f3.COLOR_ATTACHMENT0), M2.dispose(), { texture: y2, extent: o2, imageData: r2 };
    }
    return M2.detachColorTexture(f3.COLOR_ATTACHMENT0), M2.dispose(), { texture: y2, extent: o2 };
  }
  reprojectBitmapData(t2, e2) {
    const r2 = T(t2.bitmapData) ? S(t2.bitmapData) : t2.bitmapData, i3 = new E(this._rctx, { width: t2.bitmapData.width, height: t2.bitmapData.height, pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.LINEAR, hasMipmap: false }, r2), a5 = this.reprojectTexture({ texture: i3, extent: t2.extent }, e2, true);
    a5.texture.dispose();
    const o2 = document.createElement("canvas"), m = a5.imageData;
    o2.width = m.width, o2.height = m.height;
    return o2.getContext("2d").putImageData(m, 0, 0), { bitmapData: o2, extent: a5.extent };
  }
  async loadAndReprojectBitmapData(e2, r2, i3) {
    const a5 = (await U(e2, { responseType: "image" })).data, s = document.createElement("canvas");
    s.width = a5.width, s.height = a5.height;
    const n2 = s.getContext("2d");
    n2.drawImage(a5, 0, 0);
    const o2 = n2.getImageData(0, 0, s.width, s.height);
    if (r2.spatialReference.equals(i3))
      return { bitmapData: o2, extent: r2 };
    const m = this.reprojectBitmapData({ bitmapData: o2, extent: r2 }, i3);
    return { bitmapData: m.bitmapData, extent: m.extent };
  }
  destroy() {
    this._ownsRctx ? (b2._instanceRefCount--, 0 === b2._instanceRefCount && (this._quad.dispose(), this._program.dispose(), this._rctx.dispose(), b2._instance = null)) : (this._quad.dispose(), this._program.dispose());
  }
};
b2._instanceRefCount = 0;

// node_modules/@arcgis/core/views/2d/layers/KMLLayerView2D.js
var k = class {
  constructor() {
    this.allSublayers = /* @__PURE__ */ new Map(), this.allPoints = [], this.allPolylines = [], this.allPolygons = [], this.allMapImages = [];
  }
};
var P2 = class extends f4(u) {
  constructor() {
    super(...arguments), this._bitmapIndex = /* @__PURE__ */ new Map(), this._mapImageContainer = new a4(), this._kmlVisualData = new k(), this._fetchController = null, this.allVisiblePoints = new i(), this.allVisiblePolylines = new i(), this.allVisiblePolygons = new i(), this.allVisibleMapImages = new j();
  }
  async hitTest(e2, i3) {
    var _a, _b, _c;
    const t2 = this.layer;
    return [(_a = this._pointsView) == null ? void 0 : _a.hitTest(e2), (_b = this._polylinesView) == null ? void 0 : _b.hitTest(e2), (_c = this._polygonsView) == null ? void 0 : _c.hitTest(e2)].flat().filter(Boolean).map((i4) => (i4.layer = t2, i4.sourceLayer = t2, { type: "graphic", graphic: i4, layer: t2, mapPoint: e2 }));
  }
  update(e2) {
    this._polygonsView && this._polygonsView.processUpdate(e2), this._polylinesView && this._polylinesView.processUpdate(e2), this._pointsView && this._pointsView.processUpdate(e2);
  }
  attach() {
    this._fetchController = new AbortController(), this.container.addChild(this._mapImageContainer), this._polygonsView = new ae({ view: this.view, graphics: this.allVisiblePolygons, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._polygonsView.container), this._polylinesView = new ae({ view: this.view, graphics: this.allVisiblePolylines, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._polylinesView.container), this._pointsView = new ae({ view: this.view, graphics: this.allVisiblePoints, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._pointsView.container), this.addAttachHandles([this.allVisibleMapImages.on("change", (e2) => {
      e2.added.forEach((e3) => this._addMapImage(e3)), e2.removed.forEach((e3) => this._removeMapImage(e3));
    }), l(() => this.layer.visibleSublayers, (e2) => {
      for (const [i3, t2] of this._kmlVisualData.allSublayers)
        t2.visibility = 0;
      for (const i3 of e2) {
        const e3 = this._kmlVisualData.allSublayers.get(i3.id);
        e3 && (e3.visibility = 1);
      }
      this._refreshCollections();
    })]), this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)), this._imageReprojector = new b2();
  }
  detach() {
    this._fetchController = w(this._fetchController), this._mapImageContainer.removeAllChildren(), this.container.removeAllChildren(), this._bitmapIndex.clear(), this._polygonsView = a(this._polygonsView), this._polylinesView = a(this._polylinesView), this._pointsView = a(this._pointsView), this._imageReprojector = a(this._imageReprojector);
  }
  moveStart() {
  }
  viewChange() {
    this._polygonsView.viewChange(), this._polylinesView.viewChange(), this._pointsView.viewChange();
  }
  moveEnd() {
  }
  isUpdating() {
    return this._pointsView.updating || this._polygonsView.updating || this._polylinesView.updating;
  }
  _addMapImage(e2) {
    var _a, _b;
    (((_a = this.view.spatialReference) == null ? void 0 : _a.isWGS84) || ((_b = this.view.spatialReference) == null ? void 0 : _b.isWebMercator)) && this._imageReprojector.loadAndReprojectBitmapData(e2.href, w3.fromJSON(e2.extent), this.view.spatialReference).then((i3) => {
      const t2 = new R(i3.bitmapData, { immutable: false, requestRenderOnSourceChangedEnabled: true });
      t2.x = i3.extent.xmin, t2.y = i3.extent.ymax, t2.resolution = i3.extent.width / i3.bitmapData.width, t2.rotation = e2.rotation, this._mapImageContainer.addChild(t2), this._bitmapIndex.set(e2, t2);
    });
  }
  async _getViewDependentUrl(e2, t2) {
    const { viewFormat: s, viewBoundScale: a5, httpQuery: l3 } = e2;
    if (r(s)) {
      if (t(t2))
        throw new Error("Loading this network link requires a view state.");
      let p;
      if (await tn(), r(a5) && 1 !== a5) {
        const e3 = new w3(t2.extent);
        e3.expand(a5), p = e3;
      } else
        p = t2.extent;
      p = rn(p, f.WGS84);
      const m = rn(p, f.WebMercator), w4 = p.xmin, u2 = p.xmax, _ = p.ymin, V2 = p.ymax, f5 = t2.size[0] * t2.pixelRatio, v2 = t2.size[1] * t2.pixelRatio, S2 = Math.max(m.width, m.height), I2 = { "[bboxWest]": w4.toString(), "[bboxEast]": u2.toString(), "[bboxSouth]": _.toString(), "[bboxNorth]": V2.toString(), "[lookatLon]": p.center.x.toString(), "[lookatLat]": p.center.y.toString(), "[lookatRange]": S2.toString(), "[lookatTilt]": "0", "[lookatHeading]": t2.rotation.toString(), "[lookatTerrainLon]": p.center.x.toString(), "[lookatTerrainLat]": p.center.y.toString(), "[lookatTerrainAlt]": "0", "[cameraLon]": p.center.x.toString(), "[cameraLat]": p.center.y.toString(), "[cameraAlt]": S2.toString(), "[horizFov]": "60", "[vertFov]": "60", "[horizPixels]": f5.toString(), "[vertPixels]": v2.toString(), "[terrainEnabled]": "0", "[clientVersion]": a3, "[kmlVersion]": "2.2", "[clientName]": "ArcGIS API for JavaScript", "[language]": "en-US" }, x2 = (e3) => {
        for (const i3 in e3)
          for (const t3 in I2)
            e3[i3] = e3[i3].replace(t3, I2[t3]);
      }, C2 = v(s);
      x2(C2);
      let j2 = {};
      r(l3) && (j2 = v(l3), x2(j2));
      const k2 = f2(e2.href);
      k2.query = { ...k2.query, ...C2, ...j2 };
      return `${k2.path}?${A(C2)}`;
    }
    return e2.href;
  }
  async _fetchService(e2) {
    const i3 = new k();
    await this._loadVisualData(this.layer.url, i3, e2), this._kmlVisualData = i3, this._refreshCollections();
  }
  _refreshCollections() {
    this.allVisiblePoints.removeAll(), this.allVisiblePolylines.removeAll(), this.allVisiblePolygons.removeAll(), this.allVisibleMapImages.removeAll(), this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2)), this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2)), this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2)), this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2));
  }
  _isSublayerVisible(e2) {
    const i3 = this._kmlVisualData.allSublayers.get(e2);
    return !!(i3 == null ? void 0 : i3.visibility) && (-1 === i3.parentFolderId || this._isSublayerVisible(i3.parentFolderId));
  }
  _loadVisualData(e2, i3, t2) {
    return this._fetchParsedKML(e2, t2).then(async (e3) => {
      for (const s of e3.sublayers) {
        i3.allSublayers.set(s.id, s);
        const e4 = s.points ? await b(s.points) : [], a5 = s.polylines ? await b(s.polylines) : [], o2 = s.polygons ? await b(s.polygons) : [], r2 = s.mapImages || [];
        if (i3.allPoints.push(...e4.map((e5) => ({ item: e5, sublayerId: s.id }))), i3.allPolylines.push(...a5.map((e5) => ({ item: e5, sublayerId: s.id }))), i3.allPolygons.push(...o2.map((e5) => ({ item: e5, sublayerId: s.id }))), i3.allMapImages.push(...r2.map((e5) => ({ item: e5, sublayerId: s.id }))), s.networkLink) {
          const e5 = await this._getViewDependentUrl(s.networkLink, this.view.state);
          await this._loadVisualData(e5, i3, t2);
        }
      }
    });
  }
  _fetchParsedKML(e2, i3) {
    return g(e2, this.layer.spatialReference, this.layer.refreshInterval, i3).then((e3) => d(e3.data));
  }
  _removeMapImage(e2) {
    const i3 = this._bitmapIndex.get(e2);
    i3 && (this._mapImageContainer.removeChild(i3), this._bitmapIndex.delete(e2));
  }
};
e([y()], P2.prototype, "_pointsView", void 0), e([y()], P2.prototype, "_polylinesView", void 0), e([y()], P2.prototype, "_polygonsView", void 0), e([y()], P2.prototype, "updating", void 0), P2 = e([a2("esri.views.2d.layers.KMLLayerView2D")], P2);
var M = P2;
export {
  M as default
};
//# sourceMappingURL=KMLLayerView2D-HQCS62KZ.js.map
