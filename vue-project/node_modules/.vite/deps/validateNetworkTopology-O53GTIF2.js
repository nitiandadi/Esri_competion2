import {
  p
} from "./chunk-MVLXAZ5P.js";
import {
  f,
  i,
  s as s2
} from "./chunk-WVLEGBEW.js";
import {
  U
} from "./chunk-YT74S35I.js";
import "./chunk-U5I7FQWJ.js";
import "./chunk-M3KO43BW.js";
import "./chunk-DLM7WQKI.js";
import "./chunk-7GTATSRF.js";
import "./chunk-MTJ2HM2W.js";
import "./chunk-PXVSWY3C.js";
import "./chunk-QLY5H3XF.js";
import {
  s2 as s
} from "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import "./chunk-WHB7G7RI.js";
import "./chunk-DFKQJ226.js";

// node_modules/@arcgis/core/rest/networks/validateNetworkTopology.js
async function a(o, a2, n2) {
  var _a;
  const d = f(o), l = a2.toJSON();
  a2.validationSet && (l.validationSet = JSON.stringify(a2.validationSet));
  const u = { ...l, returnEdits: true, f: "json" }, p2 = s2({ ...d.query, ...u }), m = i(p2, { ...n2, method: "post" }), c = `${d.path}/validateNetworkTopology`, { data: f2 } = await U(c, m);
  if (!f2)
    return null;
  const v = p.fromJSON(f2);
  return v.serviceEdits = ((_a = v.serviceEdits) == null ? void 0 : _a.map((t) => ({ layerId: t.id, editedFeatures: t.editedFeatures }))) ?? [], v;
}
async function n(s3, a2, n2) {
  if (!a2.gdbVersion)
    throw new s("submit-validate-network-topology-job:missing-gdb-version", "version is missing");
  const d = f(s3), l = a2.toJSON();
  a2.validationSet && (l.validationSet = JSON.stringify(a2.validationSet));
  const u = i(d.query, { query: s2({ ...l, returnEdits: true, async: true, f: "json" }), ...n2, method: "post" }), p2 = `${d.path}/validateNetworkTopology`, { data: m } = await U(p2, u);
  return m ? m.statusUrl : null;
}
export {
  n as submitValidateNetworkTopologyJob,
  a as validateNetworkTopology
};
//# sourceMappingURL=validateNetworkTopology-O53GTIF2.js.map
