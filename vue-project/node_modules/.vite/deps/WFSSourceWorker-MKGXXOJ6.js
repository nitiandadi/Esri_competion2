import {
  K
} from "./chunk-D6FQ575R.js";
import "./chunk-2755SAL2.js";
import {
  I,
  T
} from "./chunk-YQKWXVS3.js";
import {
  m
} from "./chunk-5KLGNVYS.js";
import {
  g as g2
} from "./chunk-TOUWX7QY.js";
import {
  ee
} from "./chunk-KFKQAPIE.js";
import "./chunk-I6NT2Q5S.js";
import "./chunk-OGEJGMAT.js";
import "./chunk-IHH5JPM6.js";
import "./chunk-CKJEN72K.js";
import {
  f as f2,
  g
} from "./chunk-FFQ74L2K.js";
import "./chunk-4INBF4X4.js";
import "./chunk-T5ZE4H5E.js";
import "./chunk-Y2A35C5L.js";
import "./chunk-5AFBRPYC.js";
import "./chunk-H7DQVFGE.js";
import "./chunk-4S6QYDLW.js";
import "./chunk-6WFGRBCZ.js";
import "./chunk-H52BWZLI.js";
import "./chunk-QDIJO3T2.js";
import "./chunk-HMF3PNQD.js";
import "./chunk-KHZKCEXF.js";
import "./chunk-BWDA3FLJ.js";
import "./chunk-3F26JL34.js";
import "./chunk-KEA4MCOH.js";
import "./chunk-E4FSIE7C.js";
import {
  ct,
  ut
} from "./chunk-UZM66DAH.js";
import "./chunk-CFTD44JM.js";
import "./chunk-MI7FJDLG.js";
import "./chunk-BDRIBQHS.js";
import "./chunk-POASDJDE.js";
import {
  j as j2
} from "./chunk-AIOICOJJ.js";
import {
  r as r2
} from "./chunk-OXCMSIKI.js";
import "./chunk-HWGER6NN.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-ZXEHLMMH.js";
import "./chunk-BHKUW5DD.js";
import "./chunk-G3ZCYHOR.js";
import "./chunk-5W2WWLX7.js";
import "./chunk-6PNW7TCI.js";
import "./chunk-QP5ZWBKN.js";
import "./chunk-UZTIVDTR.js";
import "./chunk-33RBBVRO.js";
import "./chunk-JU2WP2RZ.js";
import "./chunk-NI6ENKKR.js";
import "./chunk-6XDV3BWZ.js";
import "./chunk-W3UIP6CW.js";
import "./chunk-CHJGFW3N.js";
import "./chunk-QLGPYDHY.js";
import "./chunk-5WYME2YP.js";
import "./chunk-MQUNEV3K.js";
import "./chunk-WVICJPEU.js";
import "./chunk-YMGINT43.js";
import "./chunk-2WLZX6A7.js";
import "./chunk-M7CMZTD6.js";
import "./chunk-ERJGVLTB.js";
import {
  E,
  c
} from "./chunk-T5VSOT6T.js";
import "./chunk-OHZM2VYI.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-E4M4B5ZQ.js";
import "./chunk-JATK7CEQ.js";
import "./chunk-74TXAD7S.js";
import "./chunk-HIRLBWV3.js";
import "./chunk-AFQAO5F4.js";
import "./chunk-OA5ES74L.js";
import "./chunk-6VTYOWNK.js";
import "./chunk-RLEMMDH4.js";
import {
  f,
  j
} from "./chunk-6ZUWLK7F.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-YVZY5LDV.js";
import "./chunk-H32MMKAJ.js";
import "./chunk-MKHZ5X6F.js";
import {
  e,
  r
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/layers/graphics/sources/WFSSourceWorker.js
var E2 = class {
  constructor() {
    this._queryEngine = null, this._customParameters = null, this._snapshotFeatures = async (e2) => {
      const { objectIdField: t } = this._queryEngine, r3 = await K(this._getFeatureUrl ?? "", this._featureType.typeName, this._getFeatureOutputFormat, { customParameters: this._customParameters, dateFields: this._queryEngine.fieldsIndex.dateFields.map((e3) => e3.name), signal: e2 });
      await T(r3), f(e2);
      const a = I(r3, { geometryType: this._queryEngine.geometryType, hasZ: false, objectIdField: t });
      if (!E(this._queryEngine.spatialReference, c))
        for (const i of a)
          r(i.geometry) && (i.geometry = ct(g(ut(i.geometry, this._queryEngine.geometryType, false, false), c, this._queryEngine.spatialReference)));
      let o = 1;
      for (const s3 of a) {
        const e3 = {};
        m(this._fieldsIndex, e3, s3.attributes, true), s3.attributes = e3, null == s3.attributes[t] && (s3.objectId = s3.attributes[t] = o++);
      }
      return a;
    };
  }
  destroy() {
    var _a;
    (_a = this._queryEngine) == null ? void 0 : _a.destroy(), this._queryEngine = null;
  }
  async load(e2, t) {
    const { getFeatureUrl: r3, getFeatureOutputFormat: s3, spatialReference: o, fields: n, geometryType: u, featureType: p, objectIdField: h, customParameters: c2 } = e2;
    this._featureType = p, this._customParameters = c2, this._getFeatureUrl = r3, this._getFeatureOutputFormat = s3, this._fieldsIndex = new r2(n), await this._checkProjection(o), f(t), this._queryEngine = new ee({ fields: n, geometryType: u, hasM: false, hasZ: false, objectIdField: h, spatialReference: o, timeInfo: null, featureStore: new g2({ geometryType: u, hasM: false, hasZ: false }) });
    const m2 = await this._snapshotFeatures(e(t.signal));
    return this._queryEngine.featureStore.addMany(m2), { extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async applyEdits() {
    throw new s2("wfs-source:editing-not-supported", "applyEdits() is not supported on WFSLayer");
  }
  async queryFeatures(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQuery(e2, t.signal);
  }
  async queryFeatureCount(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForCount(e2, t.signal);
  }
  async queryObjectIds(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForIds(e2, t.signal);
  }
  async queryExtent(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForExtent(e2, t.signal);
  }
  async querySnapping(e2, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForSnapping(e2, t.signal);
  }
  async refresh(s3) {
    var _a;
    return this._customParameters = s3, (_a = this._snapshotTask) == null ? void 0 : _a.abort(), this._snapshotTask = j2(this._snapshotFeatures), this._snapshotTask.promise.then((e2) => {
      this._queryEngine.featureStore.clear(), e2 && this._queryEngine.featureStore.addMany(e2);
    }, (e2) => {
      this._queryEngine.featureStore.clear(), j(e2) || s.getLogger("esri.layers.WFSLayer").error(new s2("wfs-layer:getfeature-error", "An error occurred during the GetFeature request", { error: e2 }));
    }), await this._waitSnapshotComplete(), { extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async _waitSnapshotComplete() {
    if (this._snapshotTask && !this._snapshotTask.finished) {
      try {
        await this._snapshotTask.promise;
      } catch {
      }
      return this._waitSnapshotComplete();
    }
  }
  async _checkProjection(e2) {
    try {
      await f2(c, e2);
    } catch {
      throw new s2("unsupported-projection", "Projection not supported", { spatialReference: e2 });
    }
  }
};
export {
  E2 as default
};
//# sourceMappingURL=WFSSourceWorker-MKGXXOJ6.js.map
