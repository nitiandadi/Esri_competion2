import {
  a as a6
} from "./chunk-XNKMMOMK.js";
import {
  c
} from "./chunk-OMLEIHSR.js";
import "./chunk-DZUX232E.js";
import "./chunk-GPDPMYIV.js";
import {
  s as s6
} from "./chunk-DXXYF357.js";
import {
  C,
  S as S2,
  a as a5,
  e as e5,
  h as h2,
  i as i3,
  i2 as i4,
  i3 as i5,
  i4 as i6,
  l as l3,
  n as n2,
  n2 as n3,
  o as o2,
  r as r4,
  r2 as r5,
  s as s7,
  s2 as s8,
  u as u2,
  u2 as u3,
  u3 as u4,
  u4 as u5,
  v as v2,
  x as x3
} from "./chunk-DYZZL2SH.js";
import "./chunk-OOCVC5ZO.js";
import {
  R,
  l as l4
} from "./chunk-7MCQCXYO.js";
import {
  t as t5
} from "./chunk-QZ6NXEME.js";
import "./chunk-HERKGCCA.js";
import "./chunk-SB6UPWEY.js";
import {
  I,
  b as b2,
  q,
  w
} from "./chunk-2ZJIK5UJ.js";
import "./chunk-XTUZNPIG.js";
import "./chunk-VY77CAXT.js";
import "./chunk-JST2N5RE.js";
import "./chunk-6VXAAN5J.js";
import "./chunk-6ZR5GOPR.js";
import {
  W,
  e2 as e3,
  r2 as r3,
  t2 as t3
} from "./chunk-MILH3W4Q.js";
import {
  f as f2,
  i,
  n2 as n
} from "./chunk-X37SQ4HC.js";
import "./chunk-QPO5PHJF.js";
import "./chunk-5EUH7VZ3.js";
import "./chunk-JTNRBNRF.js";
import "./chunk-PDQWP33P.js";
import {
  i as i2
} from "./chunk-RZNNSB7A.js";
import "./chunk-5Z6OHN6Z.js";
import "./chunk-TKZTELJQ.js";
import "./chunk-OXPHYLAY.js";
import "./chunk-JKIHHWKC.js";
import "./chunk-NBVRAQMU.js";
import "./chunk-BLEGKDS6.js";
import "./chunk-BHKUW5DD.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-ZUCPDNAU.js";
import {
  s as s5
} from "./chunk-A4GUE3HH.js";
import "./chunk-ZJBIBQFZ.js";
import "./chunk-HNMSCBZJ.js";
import {
  t as t4
} from "./chunk-PVXAD5LL.js";
import "./chunk-IKDJIJNE.js";
import "./chunk-CZLGELTA.js";
import "./chunk-OIMP53SC.js";
import "./chunk-43D3HGVY.js";
import "./chunk-DZGHLWSV.js";
import "./chunk-P4V73ZOM.js";
import "./chunk-6UZRMITW.js";
import "./chunk-HSDJ4PR2.js";
import {
  a as a3,
  f,
  h,
  j as j2,
  l
} from "./chunk-Y44VKGHM.js";
import "./chunk-266JJ3A2.js";
import "./chunk-GDTCKTOE.js";
import {
  a as a4,
  b
} from "./chunk-WPXKVF3K.js";
import "./chunk-EXVE3AJP.js";
import "./chunk-VEZKY6SV.js";
import "./chunk-Y74QPJ3T.js";
import "./chunk-OVUZXV2P.js";
import "./chunk-VTZGYKHD.js";
import "./chunk-MI3ZQEJV.js";
import "./chunk-HRIBADXS.js";
import "./chunk-GPWY2LRL.js";
import {
  S2 as S,
  x as x2
} from "./chunk-3ZZKMNU2.js";
import "./chunk-SXUQWH7K.js";
import "./chunk-WAUZFAX7.js";
import "./chunk-3JPUCMWK.js";
import "./chunk-GCXFCVSM.js";
import "./chunk-CU2KO5NT.js";
import "./chunk-EXL23DF3.js";
import "./chunk-ECM7B2HV.js";
import "./chunk-L5JOPRWD.js";
import "./chunk-JYFMP3PO.js";
import "./chunk-CBAVHWPY.js";
import "./chunk-OJCBSPLX.js";
import "./chunk-EMRZKKP3.js";
import "./chunk-VWOAL3VX.js";
import "./chunk-SQBJ6KPL.js";
import {
  U
} from "./chunk-MKMLHQNH.js";
import {
  o
} from "./chunk-PHPHIDTF.js";
import {
  Et
} from "./chunk-P6SQPYDS.js";
import "./chunk-SFT755VT.js";
import "./chunk-GWFG4NRK.js";
import {
  re
} from "./chunk-YXFIF2O5.js";
import "./chunk-E4MAG7OK.js";
import {
  j
} from "./chunk-YVQV6YXG.js";
import "./chunk-3KALZGFA.js";
import {
  m
} from "./chunk-M47YTHQ5.js";
import "./chunk-OJKTPYH5.js";
import {
  s as s4
} from "./chunk-PEP3ZFMY.js";
import "./chunk-3U7SS7RC.js";
import "./chunk-UHF3OUQV.js";
import "./chunk-6U5BQYRW.js";
import "./chunk-LUOENZ4F.js";
import "./chunk-QGRPG4XS.js";
import "./chunk-M73MMEC7.js";
import "./chunk-A5CTLI5A.js";
import {
  s as s2
} from "./chunk-WUBKNERF.js";
import {
  m as m2,
  y as y2
} from "./chunk-VACYSSCT.js";
import "./chunk-4HXSKBAW.js";
import {
  l as l2
} from "./chunk-FFQG5TD2.js";
import "./chunk-DDRAFOUW.js";
import {
  e as e4,
  u
} from "./chunk-F4DUNBGT.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-GLDJLPWH.js";
import "./chunk-GMLVDTS4.js";
import "./chunk-G7CHVXDR.js";
import {
  s as s3
} from "./chunk-OAZLVZFS.js";
import "./chunk-CPSZPA6H.js";
import {
  a2,
  e,
  r2,
  t2,
  v2 as v,
  y3 as y
} from "./chunk-Y54MR3BP.js";
import "./chunk-6VTYOWNK.js";
import "./chunk-JY6H6KI3.js";
import {
  E,
  x
} from "./chunk-TTCQP5LX.js";
import {
  s
} from "./chunk-C2WY74GI.js";
import "./chunk-MCOYI7PX.js";
import "./chunk-EL4OGCJC.js";
import "./chunk-XPATKIHO.js";
import "./chunk-MKHZ5X6F.js";
import {
  a,
  e as e2,
  r,
  t
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/renderers/support/rendererConversion.js
function s10(r9) {
  return t(r9) || "simple" === r9.type || "unique-value" === r9.type || "class-breaks" === r9.type || "dictionary" === r9.type || "heatmap" === r9.type;
}

// node_modules/@arcgis/core/widgets/Legend/support/clusterUtils.js
var l5 = (e8, l7) => {
  const a12 = e8.featuresTilingScheme.getClosestInfoForScale(e8.scale).level;
  return (l7 == null ? void 0 : l7.levels) ? l7.levels[a12] : null;
};
function a8(a12, i8) {
  if (!a12 || !("visualVariables" in a12) || !a12.visualVariables)
    return null;
  const s13 = a12.visualVariables.find((e8) => "size" === e8.type), n6 = l5(i8, s13);
  return n6 ? new b({ field: s13.field, minSize: n6[2].size, minDataValue: n6[2].value, maxSize: n6[3].size, maxDataValue: n6[3].value }) : null;
}

// node_modules/@arcgis/core/widgets/Legend/support/sizeRampUtils.js
var p = 30;
var y3 = 12;
var b3 = [255, 255, 255];
var h3 = [200, 200, 200];
var d = [128, 128, 128];
var w2 = 20;
var g = 5;
function S4(e8) {
  return "esri.symbols.SimpleMarkerSymbol" === e8.declaredClass;
}
function v3(e8) {
  return "esri.symbols.PictureMarkerSymbol" === e8.declaredClass;
}
function z(e8) {
  return "esri.symbols.SimpleLineSymbol" === e8.declaredClass;
}
function j3(e8) {
  return "esri.symbols.TextSymbol" === e8.declaredClass;
}
function V(e8, l7) {
  const t7 = e8.length - 1;
  return e8.map((e9, o4) => o2(e9, o4, t7, l7));
}
async function k(e8, l7, o4, s13, n6, a12, u9) {
  const c4 = l7.legendOptions, m4 = c4 && c4.customValues, f5 = u9 || await U2(e8, o4), p4 = !!f5, y5 = !!m4, b5 = null != l7.minSize && null != l7.maxSize, h6 = l7.stops && l7.stops.length > 1, d3 = !!l7.target;
  if (!p4 || !y5 && !(b5 || h6 && !d3))
    return;
  const w5 = w(f5);
  let g3 = null, S5 = null, v7 = null;
  S5 = w5 && !h6 ? u2([l7.minDataValue, l7.maxDataValue]) : m4 || await D(l7, f5, s13, n6);
  const z3 = e8 == null ? void 0 : e8.authoringInfo, j6 = "univariate-color-size" === (z3 == null ? void 0 : z3.type), k3 = j6 && "above-and-below" === (z3 == null ? void 0 : z3.univariateTheme);
  if (!S5 && h6 && (S5 = l7.stops.map((e9) => e9.value), g3 = l7.stops.some((e9) => !!e9.label), "flow" === e8.type && (S5 = u2(S5)), g3 && (v7 = l7.stops.map((e9) => e9.label))), w5 && (S5 == null ? void 0 : S5.length) > 2 && !k3 && (S5 = [S5[0], S5[S5.length - 1]]), !S5)
    return null;
  j6 && 5 !== (S5 == null ? void 0 : S5.length) && (S5 = E2({ minSize: S5[0], maxSize: S5[S5.length - 1] }));
  const C4 = w5 ? x4(e8, S5) : null, I5 = b2(f5), M2 = g3 ? null : V(S5, a12);
  return (await Promise.all(S5.map(async (t7, o5) => {
    const i8 = w5 ? C4[o5] : await B(l7, f5, t7, s13, n6);
    return { value: t7, symbol: P(k3 && "class-breaks" === e8.type ? L(e8, o5) : f5, i8), label: g3 ? v7[o5] : M2[o5], size: i8, outlineSize: I5 };
  }))).reverse();
}
function x4(e8, l7) {
  const t7 = e8 == null ? void 0 : e8.authoringInfo, o4 = "univariate-color-size" === (t7 == null ? void 0 : t7.type);
  let s13 = [y3, p];
  if (o4) {
    const e9 = l7[0], t8 = l7[l7.length - 1], o5 = y3, n6 = p;
    s13 = l7.map((l8) => o5 + (l8 - e9) / (t8 - e9) * (n6 - o5));
  }
  return o4 && "below" === (t7 == null ? void 0 : t7.univariateTheme) && s13.reverse(), s13;
}
function L(e8, l7) {
  const t7 = e8.classBreakInfos, o4 = t7.length, s13 = o4 < 2 || !(l7 >= 2) ? t7[0].symbol.clone() : t7[o4 - 1].symbol.clone();
  return e8.visualVariables.some((e9) => "color" === e9.type) && (s13.type.includes("3d") ? I2(s13) : M(s13)), s13;
}
async function U2(e8, l7) {
  var _a;
  if ("flow" === e8.type)
    return u3(e8, l7);
  if ("pie-chart" === e8.type)
    return new y2({ color: null, outline: ((_a = e8.outline) == null ? void 0 : _a.width) ? e8.outline : new m2() });
  let t7 = null, o4 = null;
  if ("simple" === e8.type)
    t7 = e8.symbol;
  else if ("class-breaks" === e8.type) {
    const l8 = e8.classBreakInfos;
    t7 = l8 && l8[0] && l8[0].symbol, o4 = l8.length > 1;
  } else if ("unique-value" === e8.type) {
    const l8 = e8.uniqueValueInfos;
    t7 = l8 && l8[0] && l8[0].symbol, o4 = l8.length > 1;
  }
  return !t7 || C2(t7) ? null : (t7 = t7.clone(), (l7 || o4) && (t7.type.includes("3d") ? I2(t7) : M(t7)), t7);
}
function C2(e8) {
  if (e8) {
    if (x2(e8)) {
      return !!e8.symbolLayers && e8.symbolLayers.some((e9) => e9 && "fill" === e9.type);
    }
    return e8.type.includes("fill");
  }
  return false;
}
function I2(e8) {
  "line-3d" === e8.type ? e8.symbolLayers.forEach((e9) => {
    e9.material = { color: d };
  }) : e8.symbolLayers.forEach((e9) => {
    "icon" !== e9.type || e9.resource && e9.resource.href ? e9.material = { color: h3 } : (e9.material = { color: b3 }, e9.outline = { color: d, size: 1.5 });
  });
}
function M(l7) {
  var _a, _b;
  const t7 = r3();
  if ("cim" === l7.type)
    I(l7, new l2(h3));
  else if (l7.type.includes("line"))
    l7.color = d;
  else if (l7.color = t7 ? d : b3, "simple-marker" === l7.type)
    if (l7.outline) {
      const e8 = (_b = (_a = l7.outline) == null ? void 0 : _a.color) == null ? void 0 : _b.toHex();
      "#ffffff" === e8 && (l7.outline.color = d);
    } else
      l7.outline = { color: d, width: 1.5 };
}
async function D(e8, l7, o4, s13) {
  const n6 = (await import("./visualVariableUtils-OE36ZSO6.js")).getSizeRangeAtScale(e8, o4, s13), i8 = n6 && E2(n6);
  if (!n6 && !i8)
    return;
  let r9 = i8.map((l8) => T(l8, e8, n6));
  r9 = u2(r9);
  for (let t7 = 1; t7 < r9.length - 1; t7++) {
    const n7 = await q2(e8, l7, r9[t7], r9[t7 - 1], o4, s13);
    n7 && (r9[t7] = n7[0], i8[t7] = n7[1]);
  }
  return r9;
}
function E2(e8) {
  const l7 = e8.minSize, t7 = e8.maxSize, o4 = g, s13 = (t7 - l7) / (o4 - 1), n6 = [];
  for (let i8 = 0; i8 < o4; i8++)
    n6.push(l7 + s13 * i8);
  return n6;
}
function T(e8, l7, t7) {
  const o4 = t7.minSize, s13 = t7.maxSize, n6 = l7.minDataValue, i8 = l7.maxDataValue;
  let r9 = null;
  if (e8 <= o4)
    r9 = n6;
  else if (e8 >= s13)
    r9 = i8;
  else {
    r9 = (e8 - o4) / (s13 - o4) * (i8 - n6) + n6;
  }
  return r9;
}
async function q2(e8, l7, n6, i8, r9, a12) {
  const u9 = await B(e8, l7, n6, r9, a12), c4 = await B(e8, l7, i8, r9, a12), m4 = i3(n6), f5 = m4.fractional, p4 = w2;
  let y5 = m4.integer, b5 = null, h6 = null;
  n6 > 0 && n6 < 1 && (b5 = 10 ** f5, y5 = i3(n6 *= b5).integer);
  for (let o4 = y5 - 1; o4 >= 0; o4--) {
    const i9 = 10 ** o4;
    let m5 = Math.floor(n6 / i9) * i9, f6 = Math.ceil(n6 / i9) * i9;
    null != b5 && (m5 /= b5, f6 /= b5);
    let y6 = (m5 + f6) / 2;
    [, y6] = u2([m5, y6, f6], { indexes: [1] });
    const d3 = await B(e8, l7, m5, r9, a12), w5 = await B(e8, l7, f6, r9, a12), g3 = await B(e8, l7, y6, r9, a12), S5 = l3(u9, d3, c4, null), v7 = l3(u9, w5, c4, null), z3 = l3(u9, g3, c4, null);
    let j6 = S5.previous <= p4, V2 = v7.previous <= p4;
    if (j6 && V2 && (S5.previous <= v7.previous ? (j6 = true, V2 = false) : (V2 = true, j6 = false)), j6 ? h6 = [m5, d3] : V2 ? h6 = [f6, w5] : z3.previous <= p4 && (h6 = [y6, g3]), h6)
      break;
  }
  return h6;
}
async function B(e8, l7, t7, o4, s13) {
  const { getSize: n6 } = await import("./visualVariableUtils-OE36ZSO6.js");
  return n6(e8, t7, { scale: o4, view: s13, shape: "simple-marker" === l7.type ? l7.style : null });
}
function P(e8, t7) {
  const o4 = e8.clone();
  if (x2(o4))
    w(o4) || o4.symbolLayers.forEach((e9) => {
      "fill" !== e9.type && (e9.size = t7);
    });
  else if (S4(o4))
    o4.size = t7;
  else if (v3(o4)) {
    const e9 = o4.width, l7 = o4.height;
    o4.height = t7, o4.width = t7 * (e9 / l7);
  } else
    z(o4) ? o4.width = t7 : j3(o4) && o4.font && (o4.font.size = t7);
  return o4;
}

// node_modules/@arcgis/core/widgets/smartMapping/support/utils.js
function s11(t7) {
  const n6 = 2, i8 = Math.floor(Math.log10(Math.abs(t7))) + 1, e8 = i8 < 4 || i8 > 6 ? 4 : i8, r9 = 1e6, a12 = Math.abs(t7) >= r9 ? "compact" : "standard";
  return m(t7, { notation: a12, minimumSignificantDigits: n6, maximumSignificantDigits: e8 });
}

// node_modules/@arcgis/core/widgets/Legend/support/ActiveLayerInfo.js
var le = "https://utility.arcgis.com/sharing/tools/legend";
var re2 = "esri.layers.ImageryLayer";
var ie = "esri.layers.ImageryTileLayer";
var ne = "esri.layers.WCSLayer";
var ae = /^\s*(return\s+)?\$view\.scale\s*(;)?\s*$/i;
var oe = new s3({ esriGeometryPoint: "point", esriGeometryMultipoint: "multipoint", esriGeometryPolyline: "polyline", esriGeometryPolygon: "polygon", esriGeometryMultiPatch: "multipatch" });
var ue = new y2({ size: 6, outline: { color: [128, 128, 128, 0.5], width: 0.5 } });
var ce = new S({ style: "solid" });
function de(e8) {
  return "flow" === e8.type;
}
function ye(e8) {
  return "vector-field" === e8.type;
}
function he(e8) {
  return "raster-colormap" === e8.type;
}
function me(e8) {
  return "raster-stretch" === e8.type;
}
function fe(e8) {
  return "raster-shaded-relief" === e8.type;
}
function pe(e8) {
  return "esri.renderers.SimpleRenderer" === e8.declaredClass;
}
function ge(e8) {
  return "esri.renderers.ClassBreaksRenderer" === e8.declaredClass;
}
function be(e8) {
  return "esri.renderers.UniqueValueRenderer" === e8.declaredClass;
}
function Se(e8) {
  return "esri.renderers.HeatmapRenderer" === e8.declaredClass;
}
function _e(e8) {
  return ve(e8) || we(e8) || Ee(e8) || Le(e8);
}
function Le(e8) {
  return "esri.renderers.PointCloudRGBRenderer" === e8.declaredClass;
}
function ve(e8) {
  return "esri.renderers.PointCloudClassBreaksRenderer" === e8.declaredClass;
}
function we(e8) {
  return "esri.renderers.PointCloudStretchRenderer" === e8.declaredClass;
}
function Ee(e8) {
  return "esri.renderers.PointCloudUniqueValueRenderer" === e8.declaredClass;
}
function Ce(e8) {
  return "esri.renderers.DotDensityRenderer" === e8.declaredClass;
}
function Ie(e8) {
  return "esri.renderers.PieChartRenderer" === e8.declaredClass;
}
function Re(e8, t7) {
  return pe(e8) || ge(e8) || be(e8) || Se(e8) || Ce(e8) || Ie(e8) ? "2d" === t7.type || s10(e8) : me(e8) || he(e8) || fe(e8) || ve(e8) || we(e8) || Ee(e8) || ye(e8) || de(e8);
}
function Fe(e8) {
  return "esri.layers.BuildingSceneLayer" === e8.declaredClass;
}
function Ve(e8) {
  return "esri.layers.SubtypeGroupLayer" === e8.declaredClass;
}
function Te(e8) {
  return "esri.layers.VoxelLayer" === e8.declaredClass;
}
function ze(e8) {
  return "esri.layers.WMSLayer" === e8.declaredClass;
}
function xe(e8) {
  return "esri.layers.WMTSLayer" === e8.declaredClass;
}
function je(e8) {
  return "esri.layers.MapImageLayer" === e8.declaredClass;
}
function De(e8) {
  return "esri.layers.TileLayer" === e8.declaredClass;
}
function Oe(e8) {
  return "esri.layers.FeatureLayer" === e8.declaredClass;
}
function Pe(e8) {
  return e8.declaredClass === re2;
}
function Me(e8) {
  return e8.declaredClass === ie;
}
function Ae(e8) {
  return e8.declaredClass === ne;
}
function Be(e8) {
  return "stretch-ramp" === e8.type;
}
function ke(e8) {
  var _a;
  return "univariate-color-size" === ((_a = "authoringInfo" in e8 && (e8 == null ? void 0 : e8.authoringInfo)) == null ? void 0 : _a.type);
}
function Ue(e8) {
  const t7 = "authoringInfo" in e8 && (e8 == null ? void 0 : e8.authoringInfo);
  return "univariate-color-size" === (t7 == null ? void 0 : t7.type) && "above-and-below" === (t7 == null ? void 0 : t7.univariateTheme);
}
var Ne = new y2({ style: "path", path: "M10,5 L5,0 0,5 M5,0 L5,15", size: 15, outline: { width: 1, color: [85, 85, 85, 1] } });
var qe = {};
var $e = class extends v {
  constructor(e8) {
    super(e8), this._handles = new t2(), this._hasColorRamp = false, this._hasOpacityRamp = false, this._hasSizeRamp = false, this._webStyleSymbolCache = /* @__PURE__ */ new Map(), this._dotDensityUrlCache = /* @__PURE__ */ new Map(), this._scaleDrivenSizeVariable = null, this._hasClusterSizeVariable = false, this.children = new j(), this.layerView = null, this.layer = null, this.legendElements = [], this.parent = null, this.hideLayersNotInCurrentView = false, this.keepCacheOnDestroy = false, this.respectLayerVisibility = true, this.sublayerIds = [], this.title = null, this.view = null;
  }
  initialize() {
    const e8 = () => this.notifyChange("ready");
    this._handles.add([a3(() => this.children, "change", (t7) => {
      const { added: s13, removed: l7 } = t7, r9 = this._handles;
      s13.forEach((t8) => {
        const s14 = `activeLayerInfo-ready-watcher-${t8.layer.uid}`;
        r9.add(l(() => t8.ready, e8, h), s14);
      }), l7.forEach((e9) => r9.remove(e9.layer.uid)), e8();
    })]), this.keepCacheOnDestroy || (qe = {});
  }
  destroy() {
    this._handles.destroy(), this._handles = null, this._webStyleSymbolCache = null, this._dotDensityUrlCache = null, this._scaleDrivenSizeVariable = null, this.keepCacheOnDestroy || (qe = null);
  }
  get effectList() {
    const e8 = this.layer;
    let t7 = null;
    return "effect" in e8 && e8.effect && (t7 = new a6(), t7.effect = e8.effect, t7.endTransitions(), t7.scale = this.scale), t7;
  }
  get opacity() {
    var _a;
    const e8 = this.layer.opacity, t7 = (_a = this.parent) == null ? void 0 : _a.opacity, s13 = this.layer.parent, l7 = s13 && "uid" in s13 ? this._getParentLayerOpacity(s13) : null;
    return null != t7 ? t7 * e8 : null != l7 ? l7 * e8 : e8;
  }
  get ready() {
    return null === this.layer || (this.children.length > 0 ? this._isGroupActive() : this.legendElements.length > 0);
  }
  get scale() {
    return this.view && this.view.scale;
  }
  get isScaleDriven() {
    const e8 = this.layer;
    if (null === e8)
      return false;
    if ("effect" in e8 && e8.effect && Array.isArray(e8.effect))
      return true;
    if ("featureReduction" in e8 && e8.featureReduction) {
      if ("cluster" === e8.featureReduction.type)
        return true;
      if ("binning" === e8.featureReduction.type && "renderer" in e8.featureReduction && e8.featureReduction.renderer)
        return this._isRendererScaleDriven(e8.featureReduction.renderer);
    }
    return "renderer" in e8 && e8.renderer ? this._isRendererScaleDriven(e8.renderer) : this._isLayerScaleDriven(this.layer);
  }
  get version() {
    return this._get("version") + 1;
  }
  async buildLegendElementsForFeatureCollections(e8) {
    if (!(!this.hideLayersNotInCurrentView || await this._isLayerInCurrentView()))
      return this.legendElements = [], void this.notifyChange("ready");
    const t7 = Array.from(e8, (e9) => {
      if (Oe(e9))
        return this._getRendererLegendElements(e9.renderer, { title: e9.title });
      if (e9.featureSet && e9.featureSet.features.length) {
        const t8 = e9.layerDefinition, s13 = t8 && t8.drawingInfo, l7 = s13 && t4(s13.renderer), r9 = oe.read(t8.geometryType);
        return l7 ? this._getRendererLegendElements(l7, { title: e9.name, geometryType: r9 }) : (s.getLogger(this.declaredClass).warn("drawingInfo not available!"), null);
      }
      return null;
    });
    try {
      const e9 = [];
      await E(t7).then((t8) => {
        t8.forEach(({ value: t9 }) => t9 && e9.push(...t9));
      }), this.legendElements = e9, this.notifyChange("ready");
    } catch (s13) {
      s.getLogger(this.declaredClass).warn("error while building legend for layer!", s13);
    }
  }
  async buildLegendElementsForRenderer(e8) {
    try {
      const t7 = !this.hideLayersNotInCurrentView || await this._isLayerInCurrentView();
      this.legendElements = t7 ? await this._getRendererLegendElements(e8) : [], this.notifyChange("ready");
    } catch (t7) {
      s.getLogger(this.declaredClass).warn("error while building legend for layer!", t7);
    }
  }
  async buildLegendElementsForFeatureReduction(e8) {
    try {
      const t7 = !this.hideLayersNotInCurrentView || await this._isLayerInCurrentView();
      this.legendElements = t7 ? await this._getLegendElementsForFeatureReduction(e8) : [], this.notifyChange("ready");
    } catch (t7) {
      s.getLogger(this.declaredClass).warn("error while building legend for layer!", t7);
    }
  }
  async buildLegendElementsForTools() {
    var _a, _b;
    const e8 = this.layer;
    if (Te(e8))
      this._constructLegendElementsForVoxellayer();
    else if (xe(e8))
      this._constructLegendElementsForWMTSlayer();
    else if (ze(e8))
      await this._constructLegendElementsForWMSSublayers();
    else if (Fe(e8))
      await this._constructLegendElementsForBuildingSceneLayer();
    else if (je(e8) || De(e8) || Ve(e8))
      await this._constructLegendElementsForSublayers();
    else {
      this._handles.remove("imageryLayers-watcher");
      let t7 = "default";
      if (Pe(e8)) {
        t7 = (((_a = e8 == null ? void 0 : e8.renderingRule) == null ? void 0 : _a.functionName) || "default") + "_" + (((_b = e8.bandIds) == null ? void 0 : _b.length) ? e8.bandIds.join("") : "###");
      }
      await this._getLegendLayers(`${e8.uid}-${t7}`).then(async (t8) => {
        this.legendElements = [], this.notifyChange("ready");
        const s13 = t8.map(async (t9) => {
          if (Pe(e8) || Me(e8)) {
            const t10 = l(() => ["renderingRule" in e8 && e8.renderingRule, e8.bandIds], () => x(async () => {
              qe.default = null, e8.renderer ? await this.buildLegendElementsForRenderer(e8.renderer) : await this.buildLegendElementsForTools();
            })());
            this._handles.add(t10, "imageryLayers-watcher");
          }
          const s14 = this._generateSymbolTableElementForLegendLayer(t9);
          s14 && s14.infos.length && (Pe(e8) && (s14.title = e8.title), this.legendElements.push(s14)), this.notifyChange("ready");
        });
        await E(s13);
      }).catch((e9) => {
        s.getLogger(this.declaredClass).warn("Request to server for legend has failed!", e9);
      });
    }
  }
  async _isLayerInCurrentView() {
    const e8 = this.layer, t7 = this.layerView, s13 = t7 && "createQuery" in t7 && "queryFeatureCount" in t7;
    if (!s13 && !(t7 && "createQuery" in e8 && "queryFeatureCount" in e8))
      return true;
    await j2(() => !t7.updating);
    const l7 = s13 ? "createQuery" in t7 && t7.createQuery() : "createQuery" in e8 && e8.createQuery();
    l7.geometry = this.view.extent;
    return 0 !== (s13 ? "queryFeatureCount" in t7 && await t7.queryFeatureCount(l7) : "queryFeatureCount" in e8 && await e8.queryFeatureCount(l7));
  }
  _getParentLayerOpacity(e8) {
    let t7 = 1;
    const s13 = e8.parent;
    return s13 && "uid" in s13 && (t7 = this._getParentLayerOpacity(s13)), e8.opacity * t7;
  }
  _isGroupActive() {
    const e8 = this.children;
    return !!e8.length && e8.some((e9) => e9.ready);
  }
  _isRendererScaleDriven(e8) {
    if ("dot-density" === e8.type)
      return true;
    const t7 = "valueExpression" in e8 && e8.valueExpression;
    if (ae.test(t7))
      return true;
    const s13 = "visualVariables" in e8 && e8.visualVariables;
    return !!s13 && s13.some((e9) => this._isScaleDrivenSizeVariable(e9));
  }
  _isScaleDrivenSizeVariable(e8) {
    if (e8 && "size" !== e8.type)
      return false;
    const t7 = e8, s13 = t7.minSize, l7 = t7.maxSize;
    return "object" == typeof s13 && s13 ? this._isScaleDrivenSizeVariable(s13) : "object" == typeof l7 && l7 ? this._isScaleDrivenSizeVariable(l7) : !!t7.expression || ae.test(t7.valueExpression);
  }
  _isLayerScaleDriven(e8) {
    if ("minScale" in e8 && e8.minScale > 0 || "maxScale" in e8 && e8.maxScale > 0)
      return true;
    if ("sublayers" in e8 && e8.sublayers)
      return e8.sublayers.some((e9) => this._isLayerScaleDriven(e9));
    const t7 = e8.parent;
    if (false === e8.loaded && t7 && je(t7) && "source" in e8 && e8.source && "map-layer" === e8.source.type) {
      for (const s13 of t7.sourceJSON.layers)
        if (s13.id === e8.source.mapLayerId && (s13.minScale > 0 || s13.maxScale > 0))
          return true;
    }
    return false;
  }
  async _constructLegendElementsForVoxellayer() {
    var _a;
    this.legendElements = [], this._handles.remove("voxel-style-watcher"), this._handles.remove("voxel-current-variable");
    const e8 = this.layer;
    this._handles.add(l(() => e8.currentVariableId, () => this._constructLegendElementsForVoxellayer()), "voxel-current-variable"), this._handles.add(l(() => e8.getVariableStyles(), () => this._constructLegendElementsForVoxellayer()), "voxel-style-watcher");
    const t7 = e2(e8.getVariableStyle(null)), s13 = [];
    if (t7) {
      if ((_a = t7.uniqueValues) == null ? void 0 : _a.length) {
        const e9 = [];
        t7.uniqueValues.forEach((t8) => {
          t8.enabled && e9.push({ label: t8.label || `${t8.value}`, value: t8.value, symbol: new S({ color: t8.color, outline: null }) });
        }), e9.length && s13.push({ type: "symbol-table", title: t7.label, infos: e9 });
      } else if (t7.transferFunction) {
        const { colorStops: e9, stretchRange: l8 } = t7.transferFunction, r10 = e9.toArray().reverse(), i8 = l8.map((e10, t8) => `${0 === t8 ? s8 : i4} ${s11(e10)}`).reverse(), n6 = r10.map((e10) => ({ color: e10.color, value: null, label: null }));
        n6[0].label = i8[0], n6[n6.length - 1].label = i8[1], s13.push({ type: "color-ramp", title: t7.label, infos: n6, preview: x3(r10.map((e10) => e10.color)) });
      }
    }
    const l7 = e8.opacity, r9 = s13.reduce((e9, t8) => e9.concat(this._getAllInfos(t8)), []).filter((e9) => !!(e9 == null ? void 0 : e9.symbol)).map((e9) => this._getSymbolPreview(e9, l7));
    await E(r9), this.legendElements = s13, this.notifyChange("ready");
  }
  _constructLegendElementsForWMTSlayer() {
    this.legendElements = [], this._handles.remove("wmts-activeLayer-watcher");
    const e8 = this.layer.activeLayer;
    if (this._handles.add(l(() => {
      const { layer: e9 } = this;
      return e9 && "activeLayer" in e9 && e9.activeLayer;
    }, () => this._constructLegendElementsForWMTSlayer()), "wmts-activeLayer-watcher"), e8.styleId && e8.styles) {
      let t7 = null;
      e8.styles.some((s13) => e8.styleId === s13.id && (t7 = s13.legendUrl, true)), t7 && (this.legendElements = [{ type: "symbol-table", title: e8.title, infos: [{ src: t7, opacity: this.opacity }] }]);
    }
    this.notifyChange("ready");
  }
  async _constructLegendElementsForWMSSublayers() {
    this.legendElements = [], this._handles.remove("wms-sublayers-watcher");
    const e8 = this.layer;
    let t7 = null;
    (e8.customParameters || e8.customLayerParameters) && (t7 = { ...e8.customParameters, ...e8.customLayerParameters }), this._handles.add(l(() => {
      const { layer: e9 } = this;
      return e9 && "sublayers" in e9 && e9.sublayers;
    }, () => this._constructLegendElementsForWMSSublayers()), "wms-sublayers-watcher"), this.legendElements = await this._generateLegendElementsForWMSSublayers(e8.sublayers, t7), this.notifyChange("ready");
  }
  async _generateLegendElementsForWMSSublayers(e8, t7) {
    const s13 = [];
    this._handles.add(e8.on("change", () => this._constructLegendElementsForWMSSublayers()), "wms-sublayers-watcher");
    const l7 = e8.toArray();
    for (const r9 of l7) {
      const e9 = l(() => [r9.title, r9.visible, r9.legendEnabled], () => this._constructLegendElementsForWMSSublayers());
      if (this._handles.add(e9, "wms-sublayers-watcher"), !this.respectLayerVisibility || r9.visible && r9.legendEnabled) {
        const e10 = await this._generateSymbolTableElementForWMSSublayer(r9, t7);
        e10 && e10.infos.length && s13.unshift(e10);
      }
    }
    return s13;
  }
  async _generateSymbolTableElementForWMSSublayer(e8, t7) {
    if (!e8.legendUrl && e8.sublayers) {
      const s13 = (await this._generateLegendElementsForWMSSublayers(e8.sublayers, t7)).filter((e9) => e9);
      return { type: "symbol-table", title: e8.title, infos: s13 };
    }
    return this._generateSymbolTableElementForLegendUrl(e8, t7);
  }
  async _generateSymbolTableElementForLegendUrl(e8, t7) {
    var _a;
    let s13 = e8.legendUrl;
    if (!s13)
      return;
    const r9 = { type: "symbol-table", title: e8.title || e8.name || e8.id && e8.id + "", infos: [] };
    t7 && (s13 = Et(s13, t7));
    let i8 = null;
    const n6 = (_a = e8.layer) == null ? void 0 : _a.opacity;
    try {
      i8 = (await U(s13, { responseType: "image" })).data, i8 && (i8.style.opacity = n6);
    } catch {
    }
    return r9.infos.push({ src: s13, preview: i8, opacity: n6 }), r9;
  }
  _getLegendLayers(e8, t7) {
    const s13 = qe && qe[e8];
    return s13 ? Promise.resolve(s13) : this._legendRequest(t7).then((t8) => {
      const s14 = t8.layers;
      return qe[e8] = s14, s14;
    });
  }
  _legendRequest(e8) {
    const t7 = this.layer;
    let s13 = { f: "json", dynamicLayers: e8 };
    if (Pe(t7)) {
      const e9 = t7.exportImageServiceParameters.renderingRule;
      if (e9 && (s13.renderingRule = JSON.stringify(e9.rasterFunctionDefinition || e9.toJSON())), t7.bandIds && (s13.bandIds = t7.bandIds.join()), t7.raster || t7.viewId || t7.customParameters) {
        const { raster: e10, viewId: l7, customParameters: r10 } = t7;
        s13 = { raster: e10, viewId: l7, ...s13, ...r10 };
      }
    }
    let r9 = t7.url.replace(/(\/)+$/, "");
    if ("version" in t7 && t7.version >= 10.01) {
      const e9 = r9.indexOf("?");
      e9 > -1 ? r9 = r9.substring(0, e9) + "/legend" + r9.substring(e9) : r9 += "/legend";
    } else {
      const e9 = r9.toLowerCase().indexOf("/rest/"), t8 = r9.substring(0, e9) + r9.substring(e9 + 5, r9.length);
      r9 = le + "?soapUrl=" + encodeURI(t8) + "&returnbytes=true";
    }
    return U(r9, { query: s13 }).then((e9) => e9.data);
  }
  async _constructLegendElementsForBuildingSceneLayer() {
    this.legendElements = [], this._handles.remove("sublayers-watcher");
    const e8 = this.layer;
    this._handles.add(l(() => e8.sublayers, () => this._constructLegendElementsForBuildingSceneLayer()), "sublayers-watcher");
    try {
      this.legendElements = await this._generateLegendElementsForBuildingSublayers(e8.sublayers, this.opacity), this.notifyChange("ready");
    } catch (t7) {
      s.getLogger(this.declaredClass).warn("Request to server for legend has failed!", t7);
    }
  }
  async _generateLegendElementsForBuildingSublayers(e8, t7) {
    let s13 = [];
    this._handles.add(e8.on("change", () => this._constructLegendElementsForBuildingSceneLayer()), "sublayers-watcher");
    const l7 = e8.toArray();
    for (const r9 of l7) {
      const e9 = l(() => ["renderer" in r9 && r9.renderer, r9.opacity, r9.title, r9.visible], () => this._constructLegendElementsForBuildingSceneLayer());
      if (this._handles.add(e9, "sublayers-watcher"), !this.respectLayerVisibility || r9.visible) {
        const e10 = r9 && null != r9.opacity ? r9.opacity : null, l8 = null != e10 ? e10 * t7 : t7;
        if ("building-group" === r9.type) {
          const e11 = { type: "symbol-table", title: r9.title, infos: [] }, t8 = await this._generateLegendElementsForBuildingSublayers(r9.sublayers, l8);
          e11.infos.push(...t8), s13 = [e11, ...s13];
        } else if (r9.renderer) {
          s13 = [...await this._getRendererLegendElements(r9.renderer, { title: r9.title, opacity: l8, sublayer: r9 }), ...s13];
        }
      }
    }
    return s13.filter((e9) => !!e9 && (!("infos" in e9) || e9.infos.length > 0));
  }
  async _constructLegendElementsForSublayers() {
    this.legendElements = [], this._handles.remove("sublayers-watcher");
    const e8 = this.layer;
    this._handles.add(l(() => e8.sublayers, () => this._constructLegendElementsForSublayers), "sublayers-watcher");
    try {
      this.legendElements = await this._generateLegendElementsForSublayers(e8.sublayers, this.opacity), this.notifyChange("ready");
    } catch (t7) {
      s.getLogger(this.declaredClass).warn("Request to server for legend has failed!", t7);
    }
  }
  async _generateLegendElementsForSublayers(e8, t7, s13) {
    const l7 = this.layer;
    let r9 = [];
    this._handles.add(e8.on("change", () => this._constructLegendElementsForSublayers()), "sublayers-watcher");
    let i8 = e8.toArray();
    !s13 && this.sublayerIds && this.sublayerIds.length && (i8 = this.sublayerIds.map((e9) => l7.findSublayerById(e9)).filter(Boolean));
    for (const n6 of i8) {
      const e9 = l(() => [n6.renderer, n6.opacity, n6.title, n6.visible, n6.legendEnabled], () => this._constructLegendElementsForSublayers());
      if (this._handles.add(e9, "sublayers-watcher"), !this.respectLayerVisibility || n6.visible && n6.legendEnabled && this._isSublayerInScale(n6)) {
        const e10 = n6 && null != n6.opacity ? n6.opacity : null, i9 = null != e10 ? e10 * t7 : t7, a12 = !!Ve(l7) || n6.originIdOf("renderer") > r2.SERVICE;
        if (n6.renderer && !n6.sublayers && a12) {
          await n6.load();
          r9 = [...await this._getRendererLegendElements(n6.renderer, { title: n6.title, opacity: i9, sublayer: n6 }), ...r9];
        } else {
          const e11 = await this._generateSymbolTableElementForSublayer(n6, i9, s13);
          e11 && r9.unshift(e11);
        }
      }
    }
    return r9.filter((e9) => !!e9 && (!("infos" in e9) || e9.infos.length > 0));
  }
  async _generateSymbolTableElementForSublayer(e8, t7, s13) {
    if (!s13) {
      s13 = /* @__PURE__ */ new Map();
      const t8 = this.layer, l8 = e8.source;
      let r9 = null;
      if (!(!l8 || "map-layer" === l8.type && l8.mapLayerId === e8.id && (!l8.gdbVersion || l8.gdbVersion === ("gdbVersion" in t8 && t8.gdbVersion))) || e8.originIdOf("renderer") > r2.SERVICE || e8.originIdOf("labelingInfo") > r2.SERVICE || e8.originIdOf("labelsVisible") > r2.SERVICE) {
        const e9 = new c({ layer: this.layer });
        r9 = e9.hasDynamicLayers ? e9.dynamicLayers : null, e9.destroy();
      }
      const i8 = r9 || `${t8.uid}-default`;
      (await this._getLegendLayers(i8, r9)).forEach((e9) => s13.set(e9.layerId, e9));
    }
    const l7 = s13.get(e8.id);
    if ((!l7 || (l7 == null ? void 0 : l7.subLayerIds) && l7.defaultVisibility) && e8.sublayers) {
      const l8 = await this._generateLegendElementsForSublayers(e8.sublayers, t7, s13);
      return { type: "symbol-table", title: e8.title, infos: l8 };
    }
    return this._generateSymbolTableElementForLegendLayer(l7, e8, t7);
  }
  _generateSymbolTableElementForLegendLayer(e8, t7, s13) {
    var _a;
    if (!e8 || !e8.legend || this.respectLayerVisibility && !this._isLegendLayerInScale(e8, t7))
      return null;
    const l7 = t7 == null ? void 0 : t7.renderer;
    let r9 = (t7 == null ? void 0 : t7.title) || e8.layerName;
    if (l7 && (!t7 || (t7 == null ? void 0 : t7.originIdOf("renderer")) > r2.SERVICE)) {
      const e9 = (t7 == null ? void 0 : t7.title) || this._getRendererTitle(l7, t7);
      e9 && (r9 && "string" != typeof e9 && "title" in e9 && (e9.title = r9), r9 = e9);
    }
    const i8 = { type: "symbol-table", title: r9, legendType: e8.legendType ? e8.legendType : null, infos: [] }, n6 = t7 ? this._sanitizeLegendForSublayer(e8.legend.slice(), t7) : e8.legend;
    return ((_a = e8.legendGroups) == null ? void 0 : _a.length) > 0 ? e8.legendGroups.forEach((t8) => {
      var _a2;
      const l8 = { type: "symbol-table", title: t8.heading, legendType: e8.legendType ? e8.legendType : null, infos: this._generateSymbolTableElementInfosForLegendLayer(n6.filter((e9) => e9.groupId === t8.id), e8.layerId, s13) };
      ((_a2 = l8.infos) == null ? void 0 : _a2.length) > 0 && i8.infos.push(l8);
    }) : i8.infos = this._generateSymbolTableElementInfosForLegendLayer(n6, e8.layerId, s13), i8.infos.length > 0 ? i8 : null;
  }
  _generateSymbolTableElementInfosForLegendLayer(e8, t7, l7) {
    return e8.map((e9) => {
      let r9 = e9.url;
      if (e9.imageData && e9.imageData.length > 0)
        r9 = `data:image/png;base64,${e9.imageData}`;
      else {
        if (0 === r9.indexOf("http"))
          return null;
        r9 = o(`${this.layer.url}/${t7}/images/${r9}`);
      }
      return { label: e9.label, src: r9, opacity: l7 ?? this.opacity, width: e9.width, height: e9.height };
    }).filter((e9) => !!e9);
  }
  _isSublayerInScale(e8) {
    const t7 = e8.minScale || 0, s13 = e8.maxScale || 0;
    return !(t7 > 0 && t7 < this.scale || s13 > this.scale);
  }
  _isLegendLayerInScale(e8, t7) {
    const s13 = t7 || this.layer;
    let l7 = null, r9 = null, i8 = true;
    return !s13.minScale && 0 !== s13.minScale || !s13.maxScale && 0 !== s13.maxScale ? (0 === e8.minScale && s13.tileInfo && (l7 = s13.tileInfo.lods[0].scale), 0 === e8.maxScale && s13.tileInfo && (r9 = s13.tileInfo.lods[s13.tileInfo.lods.length - 1].scale)) : (l7 = Math.min(s13.minScale, e8.minScale) || s13.minScale || e8.minScale, r9 = Math.max(s13.maxScale, e8.maxScale)), (l7 > 0 && l7 < this.scale || r9 > this.scale) && (i8 = false), i8;
  }
  _sanitizeLegendForSublayer(e8, t7) {
    if ("version" in this.layer && this.layer.version < 10.1 || 0 === e8.length)
      return e8;
    const s13 = t7.renderer, l7 = e8.some((e9) => e9.values);
    let r9 = null, i8 = null;
    return l7 && e8.some((e9, t8) => (e9.values || (r9 = t8, i8 = e9, i8.label || (i8.label = "others")), null != i8)), s13 ? "unique-value" === s13.type ? i8 && (e8.splice(r9, 1), e8.push(i8)) : "class-breaks" === s13.type && (i8 && e8.splice(r9, 1), e8.reverse(), i8 && e8.push(i8)) : i8 && (e8.splice(r9, 1), e8.push(i8)), e8;
  }
  async _getRendererLegendElements(e8, t7 = {}) {
    if (!Re(e8, this.view))
      return s.getLogger(this.declaredClass).warn(`Renderer of type '${e8.type}' not supported!`), [];
    if (_e(e8))
      return this._constructPointCloudRendererLegendElements(e8, t7);
    if (Ce(e8))
      return this._constructDotDensityRendererLegendElements(e8);
    const s13 = await this._loadRenderer(e8);
    return Ie(s13) ? this._constructPieChartRendererLegendElements(s13) : this._constructRendererLegendElements(s13, t7);
  }
  async _getLegendElementsForFeatureReduction(e8) {
    let t7 = null;
    return "binning" === e8.type ? t7 = e8.renderer : "cluster" === e8.type && (t7 = this._getClusterRenderer(e8)), t7 ? this._getRendererLegendElements(t7) : [];
  }
  _getPointCloudRendererTitle(e8) {
    return e8.legendOptions && e8.legendOptions.title || e8.field;
  }
  _constructPointCloudRendererLegendElements(e8, t7 = {}) {
    const s13 = t7.title, l7 = [];
    let r9 = null, i8 = null;
    if (ve(e8))
      r9 = { type: "symbol-table", title: s13 || this._getPointCloudRendererTitle(e8), infos: [] }, e8.colorClassBreakInfos.forEach((e9) => {
        r9.infos.unshift({ label: e9.label || e9.minValue + " - " + e9.maxValue, value: [e9.minValue, e9.maxValue], symbol: this._getAppliedCloneSymbol(ue, e9.color) });
      });
    else if (we(e8)) {
      const t8 = e8.stops;
      let l8 = null;
      if (t8.length && (1 === t8.length && (l8 = t8[0].color), !l8)) {
        const e9 = t8[0].value, s14 = t8[t8.length - 1].value;
        if (null != e9 && null != s14) {
          l8 = u4(e9 + (s14 - e9) / 2, t8);
        }
      }
      r9 = { type: "symbol-table", title: null, infos: [{ label: null, value: null, symbol: this._getAppliedCloneSymbol(ue, l8 || ue.color) }] };
      const n7 = a5(e8.stops);
      i8 = { type: "color-ramp", title: s13 || this._getPointCloudRendererTitle(e8), infos: n7, preview: x3(n7.map((e9) => e9.color)) };
    } else
      Ee(e8) && (r9 = { type: "symbol-table", title: s13 || this._getPointCloudRendererTitle(e8), infos: [] }, e8.colorUniqueValueInfos.forEach((e9) => {
        r9.infos.push({ label: e9.label || e9.values.join(", "), value: e9.values.join(", "), symbol: this._getAppliedCloneSymbol(ue, e9.color) });
      }));
    r9 && r9.infos.length && l7.push(r9), i8 && i8.infos.length && l7.push(i8);
    const n6 = l7.reduce((e9, t8) => e9.concat(t8.infos), []).filter((e9) => !!e9.symbol).map((t8) => this._getSymbolPreview(t8, this.opacity, { symbolConfig: { applyColorModulation: !!e8.colorModulation } }));
    return E(n6).then(() => l7);
  }
  _getElementInfoForDotDensity(e8, t7) {
    var _a;
    const { backgroundColor: s13, outline: l7, dotSize: r9 } = e8, i8 = (_a = this.effectList) == null ? void 0 : _a.effects.map((e9) => e9.toJSON()), n6 = i2(i8), a12 = r9 + "-" + t7 + "-" + s13 + "-" + (l7 && JSON.stringify(l7.toJSON())) + "-" + n6, o4 = this._dotDensityUrlCache, u9 = o4.has(a12) ? o4.get(a12) : S2(e8, t7);
    o4.set(a12, u9);
    const c4 = { shape: { type: "image", x: 0, y: 0, width: u9.width, height: u9.height, src: u9.src }, fill: null, stroke: null, offset: [0, 0] }, d3 = l4([[c4]], [u9.width, u9.height], { effectView: this.effectList });
    return { opacity: 1, src: u9.src, preview: d3, width: u9.width, height: u9.height };
  }
  _constructDotDensityRendererLegendElements(e8) {
    const t7 = e8.calculateDotValue(this.view.scale), s13 = e8.legendOptions && e8.legendOptions.unit, l7 = { type: "symbol-table", title: { value: t7 && Math.round(t7), unit: s13 || "" }, infos: [] };
    return e8.attributes.forEach((t8) => {
      const s14 = this._getElementInfoForDotDensity(e8, t8.color);
      s14.label = t8.label || t8.valueExpressionTitle || t8.field, l7.infos.push(s14);
    }), Promise.resolve([l7]);
  }
  async _constructPieChartRendererLegendElements(e8) {
    var _a, _b, _c, _d;
    const t7 = this.layer.opacity, s13 = [];
    let l7 = null;
    const r9 = e8.outline;
    e8.attributes.forEach((e9) => {
      const t8 = new y2({ color: e9.color, outline: r9 }), l8 = e9.label || e9.valueExpressionTitle || e9.field;
      s13.push({ label: l8, symbol: t8 });
    });
    const i8 = s13.length ? [...s13] : [];
    if (((_a = e8.othersCategory) == null ? void 0 : _a.color) && 0 !== ((_b = e8.othersCategory) == null ? void 0 : _b.threshold)) {
      const t8 = new y2({ color: e8.othersCategory.color, outline: r9 });
      l7 = e8.othersCategory.label || "Other", s13.push({ label: l7, symbol: t8 });
    }
    if ((_c = e8.defaultColor) == null ? void 0 : _c.a) {
      const t8 = new y2({ color: e8.defaultColor, outline: r9 });
      s13.push({ label: e8.defaultLabel, symbol: t8 });
    }
    const n6 = await this._getVisualVariableLegendElements(e8, this.layer) || [];
    if (s13.length) {
      n6.unshift({ type: "symbol-table", title: null, infos: s13 });
      const t8 = i8.filter((e9) => e9.label !== l7).map((e9) => e9.symbol.color).filter(Boolean), a13 = v2(t8, { holePercentage: e8.holePercentage, backgroundColor: (_d = e8.backgroundFillSymbol) == null ? void 0 : _d.color, effectList: this.effectList, outline: r9 });
      n6.unshift({ type: "pie-chart-ramp", title: this._getRendererTitle(e8, this.layer), infos: s13, preview: a13 });
    }
    const a12 = n6.reduce((e9, t8) => e9.concat(this._getAllInfos(t8)), []).filter((e9) => !!(e9 == null ? void 0 : e9.symbol) && !(e9 == null ? void 0 : e9.preview)).map((e9) => this._getSymbolPreview(e9, t7, { effectList: this.effectList }));
    return await E(a12), n6;
  }
  async _constructRendererLegendElements(e8, t7 = {}) {
    var _a;
    const { title: s13, sublayer: l7 } = t7, r9 = l7 || this.layer;
    this._hasColorRamp = false, this._hasOpacityRamp = false, this._hasSizeRamp = false, this._scaleDrivenSizeVariable = null;
    const i8 = await this._getVisualVariableLegendElements(e8, r9) || [], n6 = { type: "symbol-table", title: s13 || this._getRendererTitle(e8, r9), infos: [] };
    let a12 = null, o4 = false;
    const c4 = /* @__PURE__ */ new Set();
    if (de(e8) && !this._hasSizeRamp) {
      const t8 = await u3(e8);
      n6.infos.push({ label: null, symbol: t8 });
    } else if (ke(e8)) {
      let t8 = s13;
      const l8 = Ue(e8) ? "univariate-above-and-below-ramp" : "univariate-color-size-ramp", r10 = i8.findIndex((e9) => "color-ramp" === e9.type), n7 = -1 !== r10 ? i8.splice(r10, 1)[0] : null, a13 = i8.findIndex((e9) => "size-ramp" === e9.type), o5 = -1 !== a13 ? i8.splice(a13, 1)[0] : null, u9 = [];
      n7 && (t8 = n7.title, u9.push(n7)), o5 && (t8 = o5.title, u9.push(o5)), u9.length > 0 && i8.push({ type: l8, title: t8, infos: u9 });
    } else if (Se(e8)) {
      const t8 = r5(e8);
      i8.push({ type: "heatmap-ramp", title: s13 || this._getRendererTitle(e8, r9), infos: t8, preview: x3(t8.map((e9) => e9.color), { effectList: this.effectList }) });
    } else if (be(e8)) {
      const t8 = e8 && e8.authoringInfo;
      if (t8 && "relationship" === t8.type) {
        const { focus: s14, numClasses: l8, field1: a13, field2: o5 } = t8;
        if (l8 && a13 && o5) {
          const t9 = [a13, o5];
          let u9 = u5(s14) || 0;
          for (const e9 of t9) {
            const { field: t10, normalizationField: s15, label: l9 } = e9, i9 = l9 || { field: this._getFieldAlias(t10, r9), normField: s15 && this._getFieldAlias(s15, r9) }, a14 = Ne.clone();
            a14.angle = u9, n6.infos.push({ label: i9, symbol: a14 }), c4.add(a14), u9 += 90;
          }
          const d3 = i6({ focus: s14, numClasses: l8, infos: e8.uniqueValueInfos });
          i8.unshift(d3);
        }
      } else if (Pe(this.layer) || Me(this.layer))
        e8.uniqueValueInfos.forEach((e9) => {
          e9.symbol && n6.infos.push({ label: e9.label || e9.value, value: e9.value, symbol: e9.symbol });
        });
      else {
        const { field: t9, field2: l8, field3: i9, fieldDelimiter: a13, valueExpression: u9, defaultSymbol: c5 } = e8, d3 = !(!t9 && !u9 || !l8 && !i9), y6 = [];
        if (e8.uniqueValueGroups.forEach((e9) => {
          const s14 = { type: "symbol-table", title: e9.heading, infos: [] };
          e9.classes.forEach((e10) => {
            const { symbol: n7, values: o5 } = e10;
            if (n7) {
              const c6 = [], y7 = [];
              for (const e11 of o5) {
                const { value: s15, value2: n8, value3: o6 } = e11, h8 = [], m6 = [];
                (t9 || u9) && (h8.push(s15), m6.push(this._getDomainName(t9, s15, r9))), l8 && (h8.push(n8), m6.push(this._getDomainName(l8, n8, r9))), i9 && (h8.push(o6), m6.push(this._getDomainName(i9, o6, r9))), c6.push(d3 ? h8.join(a13 || "") : h8[0]), y7.push(m6.join(" - "));
              }
              const h7 = c6.join(", ");
              let m5 = e10.label;
              if (!m5) {
                const e11 = y7.filter(Boolean);
                m5 = e11.length ? e11.join(", ") : h7;
              }
              s14.infos.push({ label: m5, value: h7, symbol: n7 });
            }
          }), s14.infos.length && y6.push(s14);
        }), y6.length) {
          const t10 = y6[0];
          1 === y6.length && "title" in t10 && !t10.title ? n6.infos.push(...t10.infos) : (c5 && (y6.push({ type: "symbol-table", infos: [{ label: e8.defaultLabel || "others", symbol: c5 }] }), o4 = true), n6.infos.push(...y6)), s13 || e8.legendOptions && e8.legendOptions.title || e8.valueExpressionTitle || (n6.title = null);
        }
      }
      e8.defaultSymbol && !o4 && (n6.infos.push({ label: e8.defaultLabel || "others", symbol: e8.defaultSymbol }), o4 = true);
    } else if (ge(e8)) {
      a12 = this._isUnclassedRenderer(e8);
      (!a12 || !this._hasSizeRamp) && (e8.classBreakInfos.forEach((e9) => {
        e9.symbol && n6.infos.unshift({ label: e9.label || (a12 ? null : e9.minValue + " - " + e9.maxValue), value: [e9.minValue, e9.maxValue], symbol: e9.symbol });
      }), a12 && (n6.title = null), this._updateInfosforClassedSizeRenderer(e8, n6.infos)), e8.defaultSymbol && !a12 && (n6.infos.push({ label: e8.defaultLabel || "others", symbol: e8.defaultSymbol }), o4 = true);
    } else if (me(e8))
      if (Me(this.layer) || Ae(this.layer)) {
        const t8 = this._constructTileImageryStretchRendererElements(e8);
        Be(t8) ? i8.push(t8) : n6.infos = t8;
      } else {
        const t8 = this.layer;
        let s14, l8;
        e8.statistics && e8.statistics.length && (s14 = null != e8.statistics[0].min ? e8.statistics[0].min : e8.statistics[0][0], l8 = null != e8.statistics[0].max ? e8.statistics[0].max : e8.statistics[0][1]);
        let r10 = [];
        const a13 = e2(t8.renderingRule ? await t8.generateRasterInfo(t8.renderingRule) : t8.serviceRasterInfo), o5 = a13.keyProperties.BandProperties, c5 = s6(a13.pixelType);
        if (1 === a13.bandCount) {
          const r11 = ((_a = t8.bandIds) == null ? void 0 : _a[0]) || 0;
          s14 = null != s14 ? s14 : a13.statistics ? a13.statistics[r11].min : c5[0], l8 = null != l8 ? l8 : a13.statistics ? a13.statistics[r11].max : c5[1], s14 || l8 ? i8.push(this._getStretchLegendElements(e8, { min: s14, max: l8 })) : this._getServerSideLegend();
        } else
          t8.bandIds && 1 === t8.bandIds.length ? (s14 = null != s14 ? s14 : a13.statistics ? a13.statistics[t8.bandIds[0]].min : c5[0], l8 = null != l8 ? l8 : a13.statistics ? a13.statistics[t8.bandIds[0]].max : c5[1], s14 || l8 ? i8.push(this._getStretchLegendElements(e8, { min: s14, max: l8 })) : this._getServerSideLegend()) : a13.bandCount >= 3 ? o5 && o5.length >= a13.bandCount ? t8.bandIds && 3 === t8.bandIds.length ? (r10 = t8.bandIds.map((e9) => o5[e9].BandName), n6.infos = this._createSymbolTableElementMultiBand(r10)) : "lerc" === t8.format ? (r10 = [0, 1, 2].map((e9) => o5[e9].BandName), n6.infos = this._createSymbolTableElementMultiBand(r10)) : this._getServerSideLegend() : "lerc" === t8.format ? (r10 = ["band1", "band2", "band3"], n6.infos = this._createSymbolTableElementMultiBand(r10)) : this._getServerSideLegend() : this._getServerSideLegend();
      }
    else if (he(e8))
      e8.colormapInfos.forEach((e9) => {
        n6.infos.push({ label: e9.label, value: e9.value, symbol: this._getAppliedCloneSymbol(ce, e9.color) });
      });
    else if (pe(e8)) {
      let s14 = e8.symbol;
      switch (t7.geometryType) {
        case "point":
          s14 = "pointSymbol" in r9 && r9.pointSymbol;
          break;
        case "polyline":
          s14 = "lineSymbol" in r9 && r9.lineSymbol;
          break;
        case "polygon":
          s14 = "polygonSymbol" in r9 && r9.polygonSymbol;
      }
      const l8 = this._hasClusterSizeVariable && this._getClusterSymbol() || !this._hasSizeRamp;
      e8.symbol && l8 && n6.infos.push({ label: e8.label, symbol: s14 });
    } else if (ye(e8)) {
      e8.outputUnit && (this.title = "(" + e8.toJSON().outputUnit + ")"), n6.title = e8.attributeField;
      const t8 = e8.getClassBreakInfos();
      (t8 == null ? void 0 : t8.length) ? t8.forEach((e9) => {
        n6.infos.push({ label: e9.minValue + " - " + e9.maxValue, symbol: e9.symbol });
      }) : n6.infos.push({ label: e8.attributeField, symbol: e8.getDefaultSymbol() });
    } else
      fe(e8) && i8.push(this._getStretchLegendElements(e8, { min: 0, max: 255 }));
    const y5 = e8.defaultSymbol;
    !y5 || o4 || pe(e8) || a12 && !this._hasColorRamp && !this._hasSizeRamp && !this._hasOpacityRamp || i8.push({ type: "symbol-table", infos: [{ label: e8.defaultLabel || "others", symbol: y5 }] }), n6.infos.length && i8.unshift(n6);
    const h6 = null == t7.opacity ? this.opacity : t7.opacity, m4 = this._isTallSymbol("visualVariables" in e8 && e8.visualVariables), f5 = Pe(this.layer) || Me(this.layer), p4 = i8.reduce((e9, t8) => e9.concat(this._getAllInfos(t8)), []).filter((e9) => !!(e9 == null ? void 0 : e9.symbol)).map((e9) => this._getSymbolPreview(e9, h6, { isDefault: e9.symbol === y5, applyScaleDrivenSize: !c4.has(e9.symbol), symbolConfig: { isTall: m4, isSquareFill: f5 }, effectList: c4.has(e9.symbol) ? null : this.effectList }));
    return e8 = null, await E(p4), i8;
  }
  _getServerSideLegend() {
    setTimeout(() => this.buildLegendElementsForTools(), 0);
  }
  _getAllInfos(e8) {
    const t7 = e8 == null ? void 0 : e8.infos;
    return t7 ? t7.reduce((e9, t8) => e9.concat(this._getAllInfos(t8)), []) : [e8];
  }
  _constructTileImageryStretchRendererElements(e8) {
    var _a, _b;
    const t7 = this.layer, { rasterInfo: s13 } = t7.raster, l7 = s13.bandCount || e8.statistics.length;
    let r9, i8, n6 = [];
    const a12 = s13.keyProperties && s13.keyProperties.BandProperties, o4 = ((_a = e8 == null ? void 0 : e8.statistics) == null ? void 0 : _a.length) ? e8.statistics : s13 == null ? void 0 : s13.statistics;
    if (o4)
      r9 = void 0 !== o4[0].min ? o4[0].min : o4[0][0], i8 = o4[0].max || o4[0][1];
    else {
      const e9 = s6(s13.pixelType);
      r9 = e9[0], i8 = e9[1];
    }
    if (t7.hasStandardTime() && (r9 = t7.getStandardTimeValue(r9), i8 = t7.getStandardTimeValue(i8)), 1 === s13.bandCount || 1 === ((_b = t7.bandIds) == null ? void 0 : _b.length))
      return this._getStretchLegendElements(e8, { min: r9, max: i8 });
    function u9(e9) {
      var _a2;
      const l8 = (((_a2 = t7 == null ? void 0 : t7.bandIds) == null ? void 0 : _a2.length) ? t7.bandIds : Array.from(Array(Math.min(s13.bandCount, 3)).keys())).map((t8) => e9 && e9[t8] && e9[t8].BandName || "band" + (t8 + 1));
      return l8.length < 3 ? l8.push(l8[1]) : l8.length > 3 && l8.splice(3), l8;
    }
    return n6 = a12 && a12.length >= l7 ? u9(a12) : u9(), this._createSymbolTableElementMultiBand(n6);
  }
  _getStretchLegendElements(e8, t7) {
    const s13 = e8.colorRamp, l7 = i5(s13, t7);
    return { type: "stretch-ramp", title: "", infos: l7, preview: x3(l7.map((e9) => e9.color)) };
  }
  _getClusterSymbol() {
    var _a;
    const e8 = this.layer, t7 = "featureReduction" in e8 && e8.featureReduction, s13 = t7 && "symbol" in t7 && t7.renderer;
    return s13 && true !== ((_a = s13 == null ? void 0 : s13.authoringInfo) == null ? void 0 : _a.isAutoGenerated) ? null : t7 && "symbol" in t7 && t7.symbol;
  }
  async _getSizeLegendElement(e8, t7, s13, l7) {
    return { type: "size-ramp", title: this._hasClusterSizeVariable ? this._getClusterTitle(t7) : e8, infos: await k(s13, t7, await e5(s13), this.scale, this.view.type, l7, this._hasClusterSizeVariable ? this._getClusterSymbol() : null) };
  }
  _createSymbolTableElementMultiBand(e8) {
    const t7 = [], s13 = ["red", "green", "blue"];
    return e8.forEach((e9, l7) => {
      t7.push({ label: { colorName: s13[l7], bandName: e9 }, src: n3[l7], opacity: this.opacity ?? 1 });
    }), t7;
  }
  _updateInfosforClassedSizeRenderer(e8, t7) {
    const s13 = e8.authoringInfo && "class-breaks-size" === e8.authoringInfo.type, l7 = e8.classBreakInfos.some((e9) => w(e9.symbol));
    if (s13 && l7) {
      const s14 = p, l8 = y3, r9 = e8.classBreakInfos.length, i8 = (s14 - l8) / (r9 > 1 ? r9 - 1 : r9);
      t7.forEach((e9, t8) => {
        e9.size = s14 - i8 * t8;
      });
    }
  }
  _isTallSymbol(e8) {
    let t7 = false, s13 = false;
    if (e8)
      for (let l7 = 0; l7 < e8.length && (!t7 || !s13); l7++) {
        const r9 = e8[l7];
        "size" === r9.type && ("height" === r9.axis && (t7 = true), "width-and-depth" === r9.axis && (s13 = true));
      }
    return t7 && s13;
  }
  async _getSymbolPreview(e8, t7, s13) {
    let l7 = !(s13 == null ? void 0 : s13.isDefault) && null == e8.size && this._hasSizeRamp ? e4(t5.size) : e8.size;
    if (this._scaleDrivenSizeVariable && (s13 == null ? void 0 : s13.applyScaleDrivenSize)) {
      const { getSize: t8 } = await import("./visualVariableUtils-OE36ZSO6.js");
      l7 = t8(this._scaleDrivenSizeVariable, null, { view: this.view.type, scale: this.scale, shape: "simple-marker" === e8.symbol.type ? e8.symbol.style : null });
    }
    return C(e8.symbol, { size: l7, opacity: t7, scale: false, symbolConfig: s13 == null ? void 0 : s13.symbolConfig, effectView: s13 == null ? void 0 : s13.effectList }).then((t8) => (e8.preview = t8, e8)).catch(() => (e8.preview = null, e8));
  }
  _getClusterRenderer(e8) {
    var _a, _b;
    this._hasClusterSizeVariable = false;
    const t7 = "renderer" in this.layer && this.layer.renderer, s13 = ((_a = e8.renderer) == null ? void 0 : _a.clone()) || (t7 == null ? void 0 : t7.clone()), l7 = e2(a8(this.layerView._effectiveRenderer, this.view));
    if (l7 && "visualVariables" in s13) {
      const t8 = (_b = s13.visualVariables) == null ? void 0 : _b.some((e9) => "size" === e9.type && "outline" !== e9.target && !ae.test(e9.valueExpression));
      if (!t8) {
        if ("clusterMinSize" in e8 && "clusterMaxSize" in e8) {
          const { clusterMinSize: t10, clusterMaxSize: s14 } = e8;
          l7.legendOptions = new a4({ showLegend: t10 !== s14 });
        }
        const t9 = s13.visualVariables || [];
        s13.visualVariables = t9.concat([l7]), this._hasClusterSizeVariable = true;
      }
    }
    return s13;
  }
  async _loadRenderer(e8) {
    const t7 = [], s13 = e8.clone(), l7 = await e5(s13);
    if (ge(s13) || be(s13)) {
      const e9 = (s13.classBreakInfos || s13.uniqueValueInfos).map((e10) => this._fetchSymbol(e10.symbol, l7).then((t8) => {
        e10.symbol = t8;
      }).catch(() => {
        e10.symbol = null;
      }));
      Array.prototype.push.apply(t7, e9);
    }
    return t7.push(this._fetchSymbol(s13.symbol || s13.defaultSymbol, s13.defaultSymbol ? null : l7).then((e9) => {
      this._applySymbolToRenderer(s13, e9, pe(s13));
    }).catch(() => {
      this._applySymbolToRenderer(s13, null, pe(s13));
    })), E(t7).then(() => s13);
  }
  _applySymbolToRenderer(e8, t7, s13) {
    s13 ? e8.symbol = t7 : e8.defaultSymbol = t7;
  }
  async _fetchSymbol(e8, t7) {
    if (!e8)
      throw new Error();
    if ("web-style" === e8.type) {
      const s13 = this._webStyleSymbolCache;
      try {
        const l7 = await ("2d" === this.view.type ? e8.fetchCIMSymbol({ cache: s13 }) : e8.fetchSymbol({ cache: s13 }));
        return this._getAppliedCloneSymbol(l7, t7);
      } catch {
        throw s.getLogger(this.declaredClass).warn("Fetching web-style failed!"), new Error();
      }
    }
    return this._getAppliedCloneSymbol(e8, t7);
  }
  _getAppliedCloneSymbol(e8, s13) {
    if (!e8 || !s13)
      return e8;
    const l7 = e8.clone(), r9 = s13 && s13.toRgba();
    return l7.type.includes("3d") ? this._applyColorTo3dSymbol(l7, r9) : "cim" === l7.type ? I(l7, s13) : l7.color && (l7.color = new l2(r9 || l7.color)), l7;
  }
  _applyColorTo3dSymbol(e8, s13) {
    s13 && e8.symbolLayers.forEach((e9) => {
      e9 && (e9.material || (e9.material = {}), e9.material.color = new l2(s13));
    });
  }
  async _getVisualVariableLegendElements(e8, t7) {
    if (!("visualVariables" in e8) || !e8.visualVariables || "vector-field" === e8.type)
      return null;
    const s13 = e8.visualVariables, l7 = [], r9 = [], i8 = [];
    for (const c4 of s13)
      "color" === c4.type ? l7.push(c4) : "size" === c4.type ? r9.push(c4) : "opacity" === c4.type && i8.push(c4);
    const n6 = [...l7, ...r9, ...i8];
    let a12, o4;
    if (0 === l7.length && ge(e8) && e8.classBreakInfos && 1 === e8.classBreakInfos.length) {
      const t8 = e8.classBreakInfos[0];
      a12 = t8 && t8.symbol;
    }
    if (0 === l7.length && pe(e8) && (a12 = e8.symbol), a12)
      if (a12.type.includes("3d")) {
        const e9 = a12.symbolLayers.getItemAt(0);
        "water" === e9.type ? r(e9.color) && (o4 = e9.color) : r(e9.material) && r(e9.material.color) && (o4 = e9.material.color);
      } else
        a12.url || (o4 = a12.color);
    const u9 = this.effectList;
    return (await Promise.all(n6.map(async (s14) => {
      if (!s14.legendOptions || false !== s14.legendOptions.showLegend) {
        const l8 = de(e8) ? s14.field : this._getRampTitle(s14, t7);
        let r10 = null;
        const i9 = "getField" in t7 && t7.getField && t7.getField(s14.field), n7 = i9 && re(i9);
        if ("color" === s14.type) {
          const e9 = await r4(s14, null, n7);
          r10 = { type: "color-ramp", title: l8, infos: e9, preview: x3(e9.map((e10) => e10.color), { effectList: u9 }) }, this._hasColorRamp || (this._hasColorRamp = !(null == r10.infos || !r10.infos.length));
        } else if ("size" === s14.type && "outline" !== s14.target)
          ae.test(s14.valueExpression) ? this._hasClusterSizeVariable || (this._scaleDrivenSizeVariable = s14) : (r10 = await this._getSizeLegendElement(l8, s14, e8, n7), this._hasSizeRamp || (this._hasSizeRamp = !(null == r10.infos || !r10.infos.length)));
        else if ("opacity" === s14.type) {
          const e9 = await r4(s14, o4, n7);
          r10 = { type: "opacity-ramp", title: l8, infos: e9, preview: x3(e9.map((e10) => e10.color), { effectList: u9 }) }, this._hasOpacityRamp || (this._hasOpacityRamp = !(null == r10.infos || !r10.infos.length));
        }
        return r10 && r10.infos ? r10 : null;
      }
    }))).filter((e9) => !!e9);
  }
  _getDomainName(e8, t7, s13) {
    if (e8 && "function" != typeof e8) {
      const l7 = "getField" in s13 && s13.getField && s13.getField(e8), r9 = l7 && "getFieldDomain" in s13 && s13.getFieldDomain ? s13.getFieldDomain(l7.name) : null;
      return r9 && "coded-value" === r9.type ? r9.getName(t7) : null;
    }
    return null;
  }
  _getClusterTitle(e8) {
    const t7 = this.layer, s13 = e8.field;
    if ("featureReduction" in t7 && t7.featureReduction && "cluster" === t7.featureReduction.type) {
      const e9 = t7.featureReduction, l7 = "popupTemplate" in e9 && e9.popupTemplate, r9 = l7 && l7.fieldInfos;
      if (r9) {
        for (const t8 of r9)
          if (t8.fieldName === s13)
            return "cluster_count" === s13 ? t8.label || { showCount: true } : t8.label;
      }
    }
    return { showCount: true };
  }
  _getRampTitle(e8, t7) {
    let s13 = e8.field, l7 = e8.normalizationField, r9 = false, i8 = false, n6 = false, a12 = null;
    s13 = "function" == typeof s13 ? null : s13, l7 = "function" == typeof l7 ? null : l7;
    const o4 = e8.legendOptions && e8.legendOptions.title;
    if (null != o4)
      a12 = o4;
    else if (e8.valueExpressionTitle)
      a12 = e8.valueExpressionTitle;
    else {
      if ("renderer" in t7 && t7.renderer && "authoringInfo" in t7.renderer && t7.renderer.authoringInfo && t7.renderer.authoringInfo.visualVariables) {
        const e9 = t7.renderer.authoringInfo.visualVariables;
        for (let t8 = 0; t8 < e9.length; t8++) {
          const s14 = e9[t8];
          if ("color" === s14.type) {
            if ("ratio" === s14.style) {
              r9 = true;
              break;
            }
            if ("percent" === s14.style) {
              i8 = true;
              break;
            }
            if ("percent-of-total" === s14.style) {
              n6 = true;
              break;
            }
          }
        }
      }
      a12 = { field: s13 && this._getFieldAlias(s13, t7), normField: l7 && this._getFieldAlias(l7, t7), ratio: r9, ratioPercent: i8, ratioPercentTotal: n6 };
    }
    return a12;
  }
  _getRendererTitle(e8, t7) {
    const s13 = e8;
    if (s13.legendOptions && s13.legendOptions.title)
      return s13.legendOptions.title;
    if (s13.valueExpressionTitle)
      return s13.valueExpressionTitle;
    let l7 = s13.field, r9 = null, i8 = null;
    if (ge(s13) && (r9 = s13.normalizationField, i8 = "percent-of-total" === s13.normalizationType), l7 = "function" == typeof l7 ? null : l7, r9 = "function" == typeof r9 ? null : r9, be(s13)) {
      const { field2: e9, field3: r10, fieldDelimiter: i9 } = s13;
      let n7 = l7 && this._getFieldAlias(l7, t7);
      return e9 && (n7 = `<${n7}>${i9}<${this._getFieldAlias(e9, t7)}>`, r10 && (n7 = `${n7}${i9}<${this._getFieldAlias(r10, t7)}>`)), n7;
    }
    let n6 = null;
    return (l7 || r9) && (n6 = { field: l7 && this._getFieldAlias(l7, t7), normField: r9 && this._getFieldAlias(r9, t7), normByPct: i8 }), n6;
  }
  _getFieldAlias(e8, t7) {
    const s13 = "popupTemplate" in t7 && t7.popupTemplate, l7 = s13 && s13.fieldInfos;
    let r9 = null;
    l7 && l7.some((t8) => e8 === t8.fieldName && (r9 = t8, true));
    let i8 = null;
    "getField" in t7 && t7.getField ? i8 = t7.getField(e8) : "fieldsIndex" in t7 && t7.fieldsIndex && (i8 = t7.fieldsIndex.get(e8));
    let n6 = null;
    const a12 = "featureReduction" in t7 && t7.featureReduction;
    a12 && (!r9 && "popupTemplate" in a12 && a12.popupTemplate && a12.popupTemplate.fieldInfos && a12.popupTemplate.fieldInfos.some((t8) => {
      var _a;
      return (e8 == null ? void 0 : e8.toLowerCase()) === ((_a = t8.fieldName) == null ? void 0 : _a.toLowerCase()) && (r9 = t8, true);
    }), "fields" in a12 && a12.fields && (n6 = a12.fields.find((t8) => {
      var _a;
      return ((_a = t8.name) == null ? void 0 : _a.toLowerCase()) === (e8 == null ? void 0 : e8.toLowerCase());
    })));
    const o4 = r9 || i8 || n6;
    let u9 = null;
    return o4 && (u9 = (r9 == null ? void 0 : r9.label) || (i8 == null ? void 0 : i8.alias) || (n6 == null ? void 0 : n6.alias) || "name" in o4 && o4.name || "fieldName" in o4 && o4.fieldName), u9;
  }
  _isUnclassedRenderer(e8) {
    const t7 = e8.visualVariables;
    let s13 = false;
    return ge(e8) && e8.classBreakInfos && 1 === e8.classBreakInfos.length && t7 && (s13 = e8.field ? t7.some((t8) => !(!t8 || e8.field !== t8.field || (e8.normalizationField || t8.normalizationField) && e8.normalizationField !== t8.normalizationField)) : !!t7.length), s13;
  }
};
e([y()], $e.prototype, "children", void 0), e([y({ readOnly: true })], $e.prototype, "effectList", null), e([y()], $e.prototype, "layerView", void 0), e([y()], $e.prototype, "layer", void 0), e([y()], $e.prototype, "legendElements", void 0), e([y({ readOnly: true })], $e.prototype, "opacity", null), e([y()], $e.prototype, "parent", void 0), e([y({ readOnly: true, dependsOn: [] })], $e.prototype, "ready", null), e([y()], $e.prototype, "hideLayersNotInCurrentView", void 0), e([y()], $e.prototype, "keepCacheOnDestroy", void 0), e([y()], $e.prototype, "respectLayerVisibility", void 0), e([y({ readOnly: true })], $e.prototype, "scale", null), e([y()], $e.prototype, "sublayerIds", void 0), e([y({ readOnly: true })], $e.prototype, "isScaleDriven", null), e([y()], $e.prototype, "title", void 0), e([y({ readOnly: true, dependsOn: ["ready"], value: 0 })], $e.prototype, "version", null), e([y()], $e.prototype, "view", void 0), $e = e([a2("esri.widgets.Legend.support.ActiveLayerInfo")], $e);
var We = $e;

// node_modules/@arcgis/core/widgets/Legend/LegendViewModel.js
var h4 = { state: "state", view: "view", allLayerViews: "all-layer-views", legendProperties: "legend-properties" };
var c2 = j.ofType(We);
var L3 = ["esri.layers.BuildingSceneLayer", "esri.layers.CSVLayer", "esri.layers.FeatureLayer", "esri.layers.GeoJSONLayer", "esri.layers.GeoRSSLayer", "esri.layers.GroupLayer", "esri.layers.HeatmapLayer", "esri.layers.ImageryLayer", "esri.layers.ImageryTileLayer", "esri.layers.MapImageLayer", "esri.layers.OGCFeatureLayer", "esri.layers.PointCloudLayer", "esri.layers.StreamLayer", "esri.layers.SceneLayer", "esri.layers.SubtypeGroupLayer", "esri.layers.TileLayer", "esri.layers.VoxelLayer", "esri.layers.WFSLayer", "esri.layers.WMSLayer", "esri.layers.WMTSLayer", "esri.layers.WCSLayer", "esri.layers.LinkChartLayer", "esri.layers.knowledgeGraph.KnowledgeGraphSubLayer"];
var u6 = "view.basemapView.baseLayerViews";
var _ = "view.groundView.layerViews";
var f3 = "view.basemapView.referenceLayerViews";
var p2 = [u6, _, "view.layerViews", f3];
var v4 = class extends v {
  constructor(e8) {
    super(e8), this._handles = new t2(), this._layerViewByLayerId = {}, this._layerInfosByLayerViewId = {}, this._activeLayerInfosByLayerViewId = {}, this._activeLayerInfosWithNoParent = new j(), this.activeLayerInfos = new c2(), this.basemapLegendVisible = false, this.groundLegendVisible = false, this.hideLayersNotInCurrentView = false, this.keepCacheOnDestroy = false, this.respectLayerVisibility = true, this.layerInfos = [], this.view = null;
  }
  initialize() {
    this._handles.add(l(() => this.view, () => this._viewHandles(), h), h4.view), this._handles.add(s4(() => this._refresh()));
  }
  destroy() {
    this._destroyViewActiveLayerInfos(), this._handles.destroy(), this._handles = null, this.view = null;
  }
  get state() {
    return this.get("view.ready") ? "ready" : "disabled";
  }
  _viewHandles() {
    this._handles.remove(h4.state), this.view && this._handles.add(l(() => this.state, () => this._stateHandles(), h), h4.state);
  }
  _stateHandles() {
    this._resetAll(), "ready" === this.state && this._watchPropertiesAndAllLayerViews();
  }
  _resetAll() {
    this._handles.remove([h4.allLayerViews, h4.legendProperties]), this._destroyViewActiveLayerInfos(), this.activeLayerInfos.removeAll();
  }
  _destroyViewActiveLayerInfos() {
    Object.keys(this._activeLayerInfosByLayerViewId).forEach(this._destroyViewActiveLayerInfo, this);
  }
  _destroyViewActiveLayerInfo(e8) {
    this._handles.remove(e8);
    const r9 = this._activeLayerInfosByLayerViewId[e8];
    delete this._activeLayerInfosByLayerViewId[e8], r9 && r9.parent && r9.parent.children.remove(r9);
  }
  _watchPropertiesAndAllLayerViews() {
    const { allLayerViews: e8 } = this.view;
    e8.length && this._refresh(), this._handles.add(e8.on("change", (e9) => this._allLayerViewsChangeHandle(e9)), h4.allLayerViews), this._handles.add(l(() => [this.layerInfos, this.basemapLegendVisible, this.groundLegendVisible], () => this._propertiesChangeHandle()), h4.legendProperties);
  }
  _allLayerViewsChangeHandle(e8) {
    e8.removed.forEach((e9) => this._destroyViewActiveLayerInfo(e9.uid)), this._refresh();
  }
  _propertiesChangeHandle() {
    this._destroyViewActiveLayerInfos(), this._refresh();
  }
  _refresh() {
    this._layerInfosByLayerViewId = {}, this.activeLayerInfos.removeAll(), this._generateLayerViews().filter(this._filterLayerViewsByLayerInfos, this).filter(this._isLayerViewSupported, this).forEach(this._generateActiveLayerInfo, this), this._sortActiveLayerInfos(this.activeLayerInfos);
  }
  _sortActiveLayerInfos(e8) {
    if (e8.length < 2)
      return;
    const r9 = [];
    e8.forEach((i9) => {
      if (!i9.parent) {
        const t7 = i9.layer.parent, s13 = t7 && "uid" in t7 && this._layerViewByLayerId[t7.uid], a12 = s13 && this._activeLayerInfosByLayerViewId[s13.uid];
        a12 && e8.includes(a12) && (r9.push(i9), i9.parent = a12, a12.children.add(i9), this._sortActiveLayerInfos(a12.children));
      }
    }), e8.removeMany(r9);
    const i8 = {};
    this.view.allLayerViews.forEach((e9, r10) => i8[e9.layer.uid] = r10), e8.sort((e9, r10) => {
      const t7 = i8[e9.layer.uid] || 0;
      return (i8[r10.layer.uid] || 0) - t7;
    });
  }
  _generateLayerViews() {
    const e8 = [];
    return p2.filter(this._filterLayerViews, this).map(this.get, this).filter((e9) => null != e9).forEach(this._collectLayerViews("layerViews", e8)), e8;
  }
  _filterLayerViews(e8) {
    const r9 = !this.basemapLegendVisible && (e8 === u6 || e8 === f3), i8 = !this.groundLegendVisible && e8 === _;
    return !r9 && !i8;
  }
  _collectLayerViews(e8, r9) {
    const i8 = (t7) => (t7 && t7.forEach((t8) => {
      r9.push(t8), i8(t8[e8]);
    }), r9);
    return i8;
  }
  _filterLayerViewsByLayerInfos(e8) {
    const r9 = this.layerInfos;
    return !r9 || !r9.length || r9.some((r10) => this._hasLayerInfo(r10, e8));
  }
  _hasLayerInfo(e8, r9) {
    const i8 = this._isLayerUIDMatching(e8.layer, r9.layer.uid);
    return i8 && (this._layerInfosByLayerViewId[r9.uid] = e8), i8;
  }
  _isLayerUIDMatching(e8, r9) {
    return e8 && (e8.uid === r9 || this._hasLayerUID(e8.layers, r9));
  }
  _hasLayerUID(e8, r9) {
    return e8 && e8.some((e9) => this._isLayerUIDMatching(e9, r9));
  }
  _isLayerViewSupported(e8) {
    return !!L3.includes(e8.layer.declaredClass) && (this._layerViewByLayerId[e8.layer.uid] = e8, true);
  }
  _generateActiveLayerInfo(e8) {
    this._isLayerActive(e8) ? this._buildActiveLayerInfo(e8) : (this._handles.remove(e8.uid), this._handles.add(l(() => {
      var _a;
      return [e8.legendEnabled, (_a = e8.layer) == null ? void 0 : _a.legendEnabled];
    }, () => this._layerActiveHandle(e8)), e8.uid));
  }
  _layerActiveHandle(e8) {
    this._isLayerActive(e8) && (this._handles.remove(e8.uid), this._buildActiveLayerInfo(e8));
  }
  _isLayerActive(e8) {
    return !this.respectLayerVisibility || e8.legendEnabled && e8.get("layer.legendEnabled");
  }
  _buildActiveLayerInfo(e8) {
    var _a;
    const r9 = e8.layer, i8 = e8.uid, t7 = this._layerInfosByLayerViewId[i8];
    let o4 = this._activeLayerInfosByLayerViewId[i8];
    if (!o4) {
      const s13 = t7 && void 0 !== t7.title && t7.layer.uid === r9.uid;
      o4 = new We({ layer: r9, layerView: e8, title: s13 ? t7.title : r9.title, view: this.view, respectLayerVisibility: this.respectLayerVisibility, hideLayersNotInCurrentView: this.hideLayersNotInCurrentView, keepCacheOnDestroy: this.keepCacheOnDestroy, sublayerIds: t7 && t7.sublayerIds || [] }), this._activeLayerInfosByLayerViewId[i8] = o4;
    }
    const l7 = r9.parent && "uid" in r9.parent && this._layerViewByLayerId[(_a = r9.parent) == null ? void 0 : _a.uid];
    if (o4.parent = this._activeLayerInfosByLayerViewId[l7 == null ? void 0 : l7.uid], !this._handles.has(i8)) {
      const t8 = [l(() => r9.title, (e9) => this._titleHandle(e9, o4)), l(() => [r9.opacity, "renderer" in r9 && r9.renderer, "pointSymbol" in r9 && r9.pointSymbol, "lineSymbol" in r9 && r9.lineSymbol, "polygonSymbol" in r9 && r9.polygonSymbol], () => this._constructLegendElements(o4)), f(() => {
        var _a2;
        return true === ((_a2 = this.view) == null ? void 0 : _a2.stationary);
      }, () => this._scaleHandle(o4), h), l(() => e8._effectiveRenderer, () => this._constructLegendElements(o4)), l(() => "effect" in r9 && r9.effect, () => this._constructLegendElements(o4))];
      if (this.respectLayerVisibility) {
        const i9 = l(() => e8.legendEnabled, (e9) => this._legendEnabledHandle(e9, o4)), a12 = l(() => r9.legendEnabled, (e9) => this._legendEnabledHandle(e9, o4));
        t8.push(i9, a12);
      }
      this._handles.add(t8, i8);
    }
    o4.isScaleDriven || this._constructLegendElements(o4), this._addActiveLayerInfo(o4);
  }
  _titleHandle(e8, r9) {
    r9.title = e8, this._constructLegendElements(r9);
  }
  _legendEnabledHandle(e8, r9) {
    e8 ? this._addActiveLayerInfo(r9) : this._removeActiveLayerInfo(r9);
  }
  _scaleHandle(e8) {
    (e8.isScaleDriven || e8.hideLayersNotInCurrentView) && this._constructLegendElements(e8);
  }
  _addActiveLayerInfo(e8) {
    var _a;
    const { layerView: r9, layer: i8 } = e8;
    if (this._isLayerActive(r9) && !this.activeLayerInfos.includes(e8)) {
      const r10 = e8.parent;
      if (r10)
        r10.children.includes(e8) || r10.children.push(e8), this._sortActiveLayerInfos(r10.children);
      else {
        const r11 = (_a = this.layerInfos) == null ? void 0 : _a.some((e9) => e9.layer.uid === i8.uid);
        i8.parent && "uid" in i8.parent && !r11 ? this._activeLayerInfosWithNoParent.add(e8) : (this.activeLayerInfos.add(e8), this._sortActiveLayerInfos(this.activeLayerInfos));
      }
      if (this._activeLayerInfosWithNoParent.length) {
        const e9 = [];
        this._activeLayerInfosWithNoParent.forEach((r11) => {
          const i9 = r11.layer.parent, t7 = i9 && "uid" in i9 && this._layerViewByLayerId[i9 == null ? void 0 : i9.uid], s13 = this._activeLayerInfosByLayerViewId[t7 == null ? void 0 : t7.uid];
          s13 && (e9.push(r11), r11.parent = s13);
        }), e9.length && (this._activeLayerInfosWithNoParent.removeMany(e9), e9.forEach((e10) => this._addActiveLayerInfo(e10)));
      }
    }
  }
  _removeActiveLayerInfo(e8) {
    const r9 = e8.parent;
    r9 ? r9.children.remove(e8) : this.activeLayerInfos.remove(e8);
  }
  _constructLegendElements(e8) {
    const r9 = e8.layer;
    "featureCollections" in r9 && r9.featureCollections ? e8.buildLegendElementsForFeatureCollections(r9.featureCollections) : "featureReduction" in r9 && r9.featureReduction && "renderer" in r9.featureReduction && ("binning" === r9.featureReduction.type || "cluster" === r9.featureReduction.type) ? e8.buildLegendElementsForFeatureReduction(r9.featureReduction) : "renderer" in r9 && r9.renderer && !("sublayers" in r9) ? e8.buildLegendElementsForRenderer(r9.renderer) : "url" in r9 && r9.url ? e8.buildLegendElementsForTools() : e8.children.forEach((e9) => this._constructLegendElements(e9));
  }
};
e([y({ type: c2 })], v4.prototype, "activeLayerInfos", void 0), e([y()], v4.prototype, "basemapLegendVisible", void 0), e([y()], v4.prototype, "groundLegendVisible", void 0), e([y()], v4.prototype, "hideLayersNotInCurrentView", void 0), e([y()], v4.prototype, "keepCacheOnDestroy", void 0), e([y()], v4.prototype, "respectLayerVisibility", void 0), e([y()], v4.prototype, "layerInfos", void 0), e([y({ readOnly: true })], v4.prototype, "state", null), e([y()], v4.prototype, "view", void 0), v4 = e([a2("esri.widgets.Legend.LegendViewModel")], v4);
var I3 = v4;

// node_modules/@arcgis/core/widgets/Legend/styles/CardCSS.js
var e6 = "esri-legend--card";
var a9 = "esri-legend";
var r6 = { activated: `${e6}__carousel-indicator--activated`, base: e6, stacked: `${a9}--stacked`, carouselTitle: `${e6}__carousel-title`, indicator: `${e6}__carousel-indicator`, intervalSeparator: `${e6}__interval-separator`, imageryLayerStretchedImage: `${e6}__imagery-layer-image--stretched`, imageLabel: `${e6}__image-label`, layerCaption: `${e6}__layer-caption`, labelElement: `${e6}__label-element`, layerRow: `${e6}__layer-row`, labelCell: `${e6}__label-cell`, message: `${e6}__message`, rampLabel: `${e6}__ramp-label`, section: `${e6}__section`, relationshipSection: `${e6}__relationship-section`, serviceCaptionText: `${e6}__service-caption-text`, serviceContent: `${e6}__service-content`, service: `${e6}__service`, groupLayer: `${e6}__group-layer`, groupLayerChild: `${e6}__group-layer-child`, symbol: `${e6}__symbol`, sizeRampRow: `${e6}__size-ramp-row`, symbolRow: `${e6}__symbol-row`, symbolCell: `${e6}__symbol-cell`, indicatorContainer: `${e6}__carousel-indicator-container`, intervalSeparatorsContainer: `${e6}__interval-separators-container`, relationshipLabelContainer: `${e6}__relationship-label-container`, labelContainer: `${e6}__label-container`, serviceCaptionContainer: `${e6}__service-caption-container`, symbolContainer: `${e6}__symbol-container`, sizeRampContainer: `${e6}__size-ramp-container`, sizeRampPreview: `${e6}__size-ramp-preview`, pieChartRampPreview: `${e6}__pie-chart-ramp-preview`, rampContainer: `${a9}__ramps`, sizeRampHorizontal: `${a9}__size-ramp--horizontal`, rampLabelsContainer: `${a9}__ramp-labels`, layerInfo: `${a9}__layer-cell ${a9}__layer-cell--info`, univariateAboveAndBelowColorRamp: "esri-univariate-above-and-below-ramp__color--card", hidden: "esri-hidden" };

// node_modules/@arcgis/core/widgets/Legend/styles/support/univariateUtils.js
var n4 = i();
var l6 = 10;
var r7 = 20;
var s12 = 10;
var a10 = 20;
var c3 = { univariateAboveAndBelowSymbol: "esri-univariate-above-and-below-ramp__symbol", colorRamp: "esri-legend__color-ramp" };
function f4(e8 = "vertical") {
  const t7 = "stroke:rgb(200, 200, 200);stroke-width:1";
  return "vertical" === e8 ? n("svg", { height: "4", width: "10" }, n("line", { x1: "0", y1: "2", x2: "10", y2: "2", style: t7 })) : n("svg", { height: "10", width: "10" }, n("line", { x1: "5", y1: "0", x2: "5", y2: "10", style: t7 }));
}
function p3(e8, t7 = "vertical") {
  const o4 = document.createElement("div");
  return o4.style.height = `${r7}px`, o4.className = c3.univariateAboveAndBelowSymbol, null != e8 && (o4.style.opacity = e8.toString()), n4.append(o4, f4.bind(null, t7)), o4;
}
function m3(t7, o4, i8 = "vertical", n6) {
  t7.infos.forEach((t8, l7) => {
    if (n6 && 2 === l7)
      t8.preview = p3(o4, i8);
    else {
      const o5 = u(t8.size) + ("horizontal" === i8 ? a10 : s12), n7 = "div" === t8.preview.tagName.toLowerCase(), l8 = n7 ? t8.preview : document.createElement("div");
      l8.className = c3.univariateAboveAndBelowSymbol, "horizontal" === i8 ? l8.style.width = `${o5}px` : l8.style.height = `${o5}px`, n7 || l8.appendChild(t8.preview), t8.preview = l8;
    }
  });
}
function u7(t7, o4 = "classic") {
  const i8 = t7.infos;
  return "classic" === o4 ? (u(i8[0].size) + s12) / 2 : (u(i8[0].size) - u(i8[i8.length - 1].size)) / 2;
}
function v5(e8, t7) {
  if (!e8)
    return null;
  const i8 = e8.infos.map((e9) => e9.color), n6 = x3("full" === t7.type ? i8 : "above" === t7.type ? i8.slice(0, 3) : i8.slice(2, 5), { width: t7.width, height: t7.height, align: t7.rampAlignment, effectList: t7.effectList });
  return n6.className = c3.colorRamp, null != t7.opacity && (n6.style.opacity = t7.opacity.toString()), n6;
}
function h5(t7, o4, i8, n6 = "vertical") {
  let c4 = 0;
  const f5 = t7.infos, p4 = Math.floor(f5.length / 2), m4 = "full" === o4 || "above" === o4 ? 0 : p4, u9 = "full" === o4 || "below" === o4 ? f5.length - 1 : p4;
  for (let v7 = m4; v7 <= u9; v7++)
    if (i8 && v7 === p4)
      c4 += "horizontal" === n6 ? l6 : r7;
    else {
      c4 += u(f5[v7].size) + ("horizontal" === n6 ? a10 : s12);
    }
  return Math.round(c4);
}
function y4(t7, o4, i8, n6 = "vertical") {
  const c4 = h5(t7, o4, i8, n6), f5 = t7.infos, p4 = Math.floor(f5.length / 2), m4 = "full" === o4 || "above" === o4 ? 0 : p4, u9 = "full" === o4 || "below" === o4 ? f5.length - 1 : p4, v7 = "full" === o4 ? f5[m4].size + f5[u9].size : "above" === o4 ? f5[m4].size : f5[u9].size, y5 = i8 ? "vertical" === n6 ? r7 : l6 : 0, d3 = "vertical" === n6 ? s12 * ("full" === o4 ? 2 : 1) : a10 * ("full" === o4 ? 2 : 1);
  return Math.round(c4 - (u(v7) / 2 + y5 / 2 + d3 / 2));
}
function d2(e8, t7, o4 = "vertical") {
  const i8 = e8.infos;
  let n6 = i8.find(({ type: e9 }) => "size-ramp" === e9), l7 = i8.find(({ type: e9 }) => "color-ramp" === e9);
  return n6 && (n6 = { ...n6 }, n6.infos = [...n6.infos], m3(n6, t7, o4, true)), l7 && (l7 = { ...l7 }, l7.infos = [...l7.infos]), "horizontal" === o4 && (n6 == null ? void 0 : n6.infos.reverse(), l7 == null ? void 0 : l7.infos.reverse()), { sizeRampElement: n6, colorRampElement: l7 };
}
function b4(e8, t7 = "vertical") {
  const o4 = e8.infos;
  let i8 = o4.find(({ type: e9 }) => "size-ramp" === e9), n6 = o4.find(({ type: e9 }) => "color-ramp" === e9);
  return i8 && (i8 = { ...i8 }, i8.infos = [...i8.infos], m3(i8, null, t7, false)), n6 && (n6 = { ...n6 }, n6.infos = [...n6.infos]), "horizontal" === t7 && (i8 == null ? void 0 : i8.infos.reverse(), n6 == null ? void 0 : n6.infos.reverse()), { sizeRampElement: i8, colorRampElement: n6 };
}

// node_modules/@arcgis/core/widgets/Legend/support/styleUtils.js
function n5(e8, n6) {
  return n6;
}
function t6(e8) {
  const n6 = this;
  e8.appendChild(n6);
}
function r8(t7, r9, i8) {
  if (!r9)
    return;
  if ("string" == typeof r9 || "number" == typeof r9)
    return r9;
  if ("value" in r9 || "unit" in r9)
    return s5(t7.dotValue, r9);
  if ("colorName" in r9 && "bandName" in r9)
    return t7[r9.colorName] + ": " + (t7[r9.bandName] || r9.bandName);
  if ("showCount" in r9)
    return r9.showCount ? t7.clusterCountTitle : null;
  let l7 = null;
  return n5(r9, i8) ? l7 = r9.ratioPercentTotal ? "showRatioPercentTotal" : r9.ratioPercent ? "showRatioPercent" : r9.ratio ? "showRatio" : r9.normField ? "showNormField" : r9.field ? "showField" : null : o3(r9, i8) && (l7 = r9.normField ? "showNormField" : r9.normByPct ? "showNormPct" : r9.field ? "showField" : null), l7 ? s5("showField" === l7 ? "{field}" : t7[l7], { field: r9.field, normField: r9.normField }) : null;
}
function o3(e8, n6) {
  return !n6;
}
function i7(e8, n6) {
  return !!(n6 && "Stretched" === n6 && e8.version >= 10.3 && "esri.layers.ImageryLayer" === e8.declaredClass);
}

// node_modules/@arcgis/core/widgets/Legend/styles/Card.js
var R2 = 25;
var I4 = 25;
var k2 = 768;
var z2 = 100;
var N;
!function(e8) {
  e8.Auto = "auto", e8.Stack = "stack", e8.SideBySide = "side-by-side";
}(N || (N = {}));
var A = "#ddd";
var j4 = window.devicePixelRatio;
function E3(e8) {
  if (e8) {
    if (e8.type.includes("3d")) {
      const t7 = e8.symbolLayers && e8.symbolLayers.length;
      if (!t7)
        return;
      const s13 = e8.symbolLayers.getItemAt(t7 - 1), i8 = s13.resource && s13.resource.primitive;
      return "circle" === i8 || "cross" === i8 || "kite" === i8 || "sphere" === i8 || "cube" === i8 || "diamond" === i8;
    }
    {
      const t7 = e8.style;
      return "circle" === t7 || "diamond" === t7 || "cross" === t7;
    }
  }
}
function F(e8) {
  if (e8) {
    if (e8.type.includes("3d")) {
      const t7 = e8.symbolLayers && e8.symbolLayers.length;
      if (!t7)
        return;
      const s13 = e8.symbolLayers.getItemAt(t7 - 1).get("resource.primitive");
      return "triangle" === s13 || "cone" === s13 || "tetrahedron" === s13;
    }
    return "triangle" === e8.style;
  }
}
var T2 = class extends W {
  constructor(e8, s13) {
    super(e8, s13), this._handles = new t2(), this._hasIndicators = false, this._selectedSectionName = null, this._sectionNames = [], this._sectionMap = /* @__PURE__ */ new Map(), this.activeLayerInfos = null, this.headingLevel = 3, this.layout = N.Stack, this.messages = null, this.messagesCommon = null, this.type = "card", this.view = null;
  }
  initialize() {
    this.addHandles(l(() => this.activeLayerInfos, (e8) => {
      this._handles.removeAll(), this._watchForSectionChanges(e8);
    }));
  }
  destroy() {
    this._handles.destroy(), this._handles = null;
  }
  render() {
    this._hasIndicators = this.layout === N.Auto && this.view.container.clientWidth <= k2 || this.layout === N.Stack;
    const e8 = this.activeLayerInfos, t7 = e8 && e8.toArray().map((e9) => this._renderLegendForLayer(e9)).filter((e9) => !!e9);
    this._hasIndicators ? this._selectedSectionName && this._sectionNames.includes(this._selectedSectionName) || (this._selectedSectionName = this._sectionNames && this._sectionNames[0]) : this._selectedSectionName = null;
    const s13 = this._sectionNames.length, i8 = this._sectionNames.map((e9, t8) => {
      const i9 = s5(this.messagesCommon.pagination.pageText, { index: t8 + 1, total: s13 });
      return n("div", { key: e9, role: "tab", id: e9, "aria-label": i9, "aria-controls": `${e9}-panel`, "aria-selected": (this._selectedSectionName === e9).toString(), tabIndex: this._selectedSectionName === e9 ? 0 : -1, title: i9, onclick: this._selectSection, onkeydown: this._focusSection, bind: this, class: this.classes(r6.indicator, { [r6.activated]: this._selectedSectionName === e9 }), "data-section-name": e9 });
    }), o4 = this._hasIndicators && s13 > 1 ? n("div", { class: r6.indicatorContainer, key: "carousel-navigation", role: "tablist" }, i8) : null, a12 = this._hasIndicators ? this._sectionMap.get(this._selectedSectionName) : t7 && t7.length ? t7 : null, r9 = { [r6.stacked]: this._hasIndicators };
    return n("div", { class: this.classes(r6.base, r9) }, a12 || n("div", { class: r6.message }, this.messages.noLegend), o4);
  }
  _selectSection(e8) {
    const t7 = e8.target.getAttribute("data-section-name");
    t7 && (this._selectedSectionName = t7);
  }
  _focusSection(e8) {
    switch (e8.key) {
      case "ArrowLeft":
      case "ArrowRight":
        this._switchSectionOnArrowPress(e8);
        break;
      case "Enter":
      case " ":
        this._selectSection(e8);
    }
  }
  _switchSectionOnArrowPress(e8) {
    const t7 = e8.key, s13 = "ArrowLeft" === t7 ? -1 : 1, i8 = e8.target.getAttribute("data-section-name"), o4 = this._sectionNames.indexOf(i8), a12 = this._sectionNames;
    let r9 = null;
    -1 !== o4 && (a12[o4 + s13] ? r9 = document.getElementById(a12[o4 + s13]) : "ArrowLeft" === t7 ? r9 = document.getElementById(a12[a12.length - 1]) : "ArrowRight" === t7 && (r9 = document.getElementById(a12[0])), r9 && r9.focus());
  }
  _watchForSectionChanges(e8) {
    if (this._generateSectionNames(), e8) {
      e8.forEach((e9) => {
        const t8 = `activeLayerInfo-${e9.layer.uid}-version-change`;
        this._handles.remove(t8), this._watchForSectionChanges(e9.children), this._handles.add(l(() => e9.version, () => this._generateSectionNames()), t8);
      });
      const t7 = "activeLayerInfos-collection-change";
      this._handles.remove(t7), this._handles.add(e8.on("change", () => this._watchForSectionChanges(e8)), t7);
    }
  }
  _generateSectionNames() {
    this._sectionNames.length = 0, this._selectedSectionName = null, this.activeLayerInfos && this.activeLayerInfos.forEach(this._generateSectionNamesForActiveLayerInfo, this);
  }
  _getSectionName(e8, t7, s13) {
    return `${this.id}${e8.uid}-type-${t7.type}-${s13}`;
  }
  _generateSectionNamesForActiveLayerInfo(e8) {
    e8.children.forEach(this._generateSectionNamesForActiveLayerInfo, this), e8.legendElements && e8.legendElements.forEach((t7, s13) => {
      this._sectionNames.push(this._getSectionName(e8.layer, t7, s13));
    });
  }
  _renderLegendForLayer(e8) {
    if (!e8.ready)
      return null;
    if (e8.children.length) {
      const t7 = e8.children.map((e9) => this._renderLegendForLayer(e9)).toArray();
      return n("div", { key: e8.layer.uid, class: this.classes(r6.service, r6.groupLayer) }, n("div", { class: r6.serviceCaptionContainer }, e8.title), t7);
    }
    {
      const t7 = e8.legendElements;
      if (t7 && !t7.length)
        return null;
      const s13 = t7.some((e9) => "relationship-ramp" === e9.type), i8 = t7.map((t8, i9) => this._renderLegendForElement(t8, e8, i9, s13)).filter((e9) => !!e9);
      if (!i8.length)
        return null;
      const o4 = { [r6.groupLayerChild]: !!e8.parent };
      return n("div", { key: e8.layer.uid, class: this.classes(r6.service, o4) }, n("div", { class: r6.serviceCaptionContainer }, n("div", { class: r6.serviceCaptionText }, e8.title)), n("div", { class: r6.serviceContent }, i8));
    }
  }
  _renderLegendForElement(e8, t7, s13, i8 = false, o4 = false) {
    const a12 = "color-ramp" === e8.type, r9 = "opacity-ramp" === e8.type, l7 = "size-ramp" === e8.type, n6 = t7.layer;
    let p4 = null;
    if ("string" == typeof e8.title)
      p4 = e8.title;
    else if (e8.title) {
      const t8 = e8.title, s14 = r8(this.messages, t8, a12 || r9);
      p4 = t8.title ? `${t8.title} (${s14})` : s14;
    }
    const h6 = this._getSectionName(n6, e8, s13), m4 = this._hasIndicators && !o4 ? n("div", null, n(n2, { level: this.headingLevel, class: r6.carouselTitle }, t7.title), n(n2, { level: s7(this.headingLevel), class: r6.layerCaption }, p4)) : p4 ? n(n2, { level: this.headingLevel, class: r6.layerCaption }, p4) : null, y5 = t7.effectList;
    let f5 = null;
    if ("symbol-table" === e8.type) {
      const s14 = e8.infos.map((s15, i9) => this._renderLegendForElementInfo(s15, t7, e8.legendType, i9)).filter((e9) => !!e9);
      if (s14.length) {
        const e9 = s14[0].properties.classes && s14[0].properties.classes[r6.symbolRow], t8 = { [r6.labelContainer]: !e9 && !i8, [r6.relationshipLabelContainer]: i8 };
        f5 = n("div", { class: this.classes(t8) }, s14);
      }
    } else
      "color-ramp" === e8.type || "opacity-ramp" === e8.type || "heatmap-ramp" === e8.type ? f5 = this._renderLegendForRamp(e8, n6.opacity, y5) : l7 ? f5 = this._renderSizeRamp(e8, n6.opacity) : "pie-chart-ramp" === e8.type ? f5 = this._renderPieChartRamp(e8) : "relationship-ramp" === e8.type ? f5 = h2(e8, this.id, n6.opacity, y5) : "univariate-above-and-below-ramp" === e8.type ? f5 = this._renderUnivariateAboveAndBelowRamp(e8, n6.opacity, y5) : "univariate-color-size-ramp" === e8.type && (f5 = this._renderUnivariateColorSizeRamp(e8, n6.opacity, y5));
    if (!f5)
      return null;
    const u9 = n("div", { key: h6, class: r6.section, id: `${h6}-panel`, role: "tabpanel", "aria-labelledby": h6, tabIndex: 0 }, [m4, f5]);
    return o4 || this._sectionMap.set(h6, u9), u9;
  }
  _renderPieChartRamp(e8) {
    return n("div", { class: r6.pieChartRampPreview, bind: e8.preview, afterCreate: t6 });
  }
  _renderUnivariateAboveAndBelowRamp(e8, t7, s13) {
    const { sizeRampElement: i8, colorRampElement: o4 } = d2(e8, t7, "horizontal");
    if (!i8)
      return null;
    const a12 = h5(i8, "full", true, "horizontal"), r9 = y4(i8, "above", true, "horizontal"), l7 = y4(i8, "below", true, "horizontal"), n6 = 12, d3 = v5(o4, { width: r9, height: n6, rampAlignment: "horizontal", opacity: t7, type: "above", effectList: s13 }), u9 = v5(o4, { width: l7, height: n6, rampAlignment: "horizontal", opacity: t7, type: "below", effectList: s13 }), g3 = u7(i8, "card"), b5 = i8.infos.map((e9) => e9.label), _3 = b5.length - 1, w5 = b5.map((e9, t8) => 0 === t8 || t8 === _3 ? n("div", { key: t8 }, e9) : null), L5 = { display: "flex", flexDirection: "column" }, x5 = { display: "flex", flexDirection: "row" }, $ = { marginTop: "3px", display: "flex" };
    f2(this.container) ? $.marginRight = `${g3}px` : $.marginLeft = `${g3}px`;
    const R4 = { width: `${a12}px`, display: "flex", flexDirection: "row", justifyContent: "space-between" };
    return n("div", { class: r6.layerRow, key: "size-ramp-preview", styles: L5 }, n("div", { class: this.classes(r6.symbolContainer, r6.sizeRampHorizontal), styles: x5 }, i8.infos.map((e9, t8) => n("div", { key: t8, class: r6.symbol, bind: e9.preview, afterCreate: t6 }))), d3 ? n("div", { class: r6.univariateAboveAndBelowColorRamp, styles: $, key: "color-ramp-preview" }, n("div", { bind: d3, afterCreate: t6 }), n("div", { bind: u9, afterCreate: t6 })) : null, n("div", { class: r6.layerInfo }, n("div", { class: r6.rampLabelsContainer, styles: R4 }, w5)));
  }
  _renderUnivariateColorSizeRamp(e8, t7, s13) {
    const { sizeRampElement: i8, colorRampElement: o4 } = b4(e8, "horizontal");
    if (!i8)
      return null;
    const a12 = h5(i8, "full", false, "horizontal"), r9 = y4(i8, "full", false, "horizontal"), l7 = v5(o4, { width: r9, height: 12, rampAlignment: "horizontal", opacity: t7, type: "full", effectList: s13 }), n6 = u7(i8, "card"), d3 = i8.infos.length - 1, p4 = i8.infos.map((e9, t8) => 0 === t8 || t8 === d3 ? n("div", { key: t8 }, e9.label) : null), g3 = { display: "flex", flexDirection: "column" }, b5 = { display: "flex", flexDirection: "row" }, _3 = { marginTop: "3px", display: "flex" };
    f2(this.container) ? _3.marginRight = `${n6}px` : _3.marginLeft = `${n6}px`;
    const w5 = { width: `${a12}px`, display: "flex", flexDirection: "row", justifyContent: "space-between" };
    return n("div", { class: r6.layerRow, key: "size-ramp-preview", styles: g3 }, n("div", { class: this.classes(r6.symbolContainer, r6.sizeRampHorizontal), styles: b5 }, i8.infos.map((e9, t8) => n("div", { key: t8, class: r6.symbol, bind: e9.preview, afterCreate: t6 }))), n("div", { class: r6.univariateAboveAndBelowColorRamp, styles: _3, key: "color-ramp-preview" }, n("div", { bind: l7, afterCreate: t6 })), n("div", { class: r6.layerInfo }, n("div", { class: r6.rampLabelsContainer, styles: w5 }, p4)));
  }
  _renderLegendForElementInfo(e8, t7, s13, i8) {
    var _a;
    const o4 = t7.layer;
    if (e8.type)
      return this._renderLegendForElement(e8, t7, i8, false, true);
    const a12 = i7(o4, s13);
    if (e8.preview) {
      if (!e8.symbol || !e8.symbol.type.includes("simple-fill")) {
        if (!e8.label)
          return n("div", { key: i8, bind: e8.preview, afterCreate: t6 });
        const t8 = { [r6.symbolCell]: this._hasIndicators };
        return n("div", { key: i8, class: this.classes(r6.layerRow, { [r6.symbolRow]: this._hasIndicators }) }, n("div", { class: this.classes(t8), bind: e8.preview, afterCreate: t6 }), n("div", { class: this.classes(r6.imageLabel, { [r6.labelCell]: this._hasIndicators }) }, r8(this.messages, e8.label, false) || ""));
      }
      let s14 = 255, a13 = 255, r9 = 255, n6 = 0, d3 = 255, p4 = 255, h6 = 255, m4 = 0;
      const y5 = e8.symbol.color && e8.symbol.color.a, f5 = e8.symbol.outline && e8.symbol.outline.color && e8.symbol.outline.color.a;
      y5 && (s14 = e8.symbol.color.r, a13 = e8.symbol.color.g, r9 = e8.symbol.color.b, n6 = e8.symbol.color.a * o4.opacity), f5 && (d3 = e8.symbol.outline.color.r, p4 = e8.symbol.outline.color.g, h6 = e8.symbol.outline.color.b, m4 = e8.symbol.outline.color.a * o4.opacity);
      const u9 = ((_a = e8.symbol.color) == null ? void 0 : _a.isBright) ?? true, b5 = u9 ? "rgba(255, 255, 255, .6)" : "rgba(0, 0, 0, .6)", _3 = { background: y5 ? `rgba(${s14}, ${a13}, ${r9}, ${n6})` : "none", color: u9 ? "black" : "white", textShadow: `-1px -1px 0 ${b5},
                                              1px -1px 0 ${b5},
                                              -1px 1px 0 ${b5},
                                              1px 1px 0 ${b5}`, border: f5 ? `1px solid rgba(${d3}, ${p4}, ${h6}, ${m4})` : "none", filter: q(t7.effectList) };
      return n("div", { key: i8, class: r6.layerRow }, n("div", { class: r6.labelElement, styles: _3 }, " ", e8.label, " "));
    }
    if (e8.src) {
      const t8 = this._renderImage(e8, o4, a12);
      return n("div", { key: i8, class: r6.layerRow }, t8, n("div", { class: r6.imageLabel }, e8.label || ""));
    }
  }
  _renderImage(e8, t7, s13) {
    const { label: i8, src: o4, opacity: a12 } = e8, r9 = { [r6.imageryLayerStretchedImage]: s13, [r6.symbol]: !s13 }, l7 = { opacity: `${null != a12 ? a12 : t7.opacity}` };
    return n("img", { alt: r8(this.messages, i8, false), src: o4, border: 0, width: e8.width, height: e8.height, class: this.classes(r9), styles: l7 });
  }
  _renderSizeRampLines(e8) {
    const t7 = e8.infos, s13 = t7[0], o4 = t7[t7.length - 1], a12 = s13.symbol, r9 = this._hasIndicators, l7 = u(s13.size + s13.outlineSize) * j4, n6 = u(o4.size + o4.outlineSize) * j4, c4 = r9 ? l7 : l7 + 50 * j4, d3 = r9 ? l7 / 2 + 50 * j4 : l7, p4 = F(a12), h6 = E3(a12), m4 = document.createElement("canvas");
    m4.width = c4, m4.height = d3, m4.style.width = m4.width / j4 + "px", m4.style.height = m4.height / j4 + "px";
    const y5 = m4.getContext("2d");
    if (r9) {
      y5.beginPath();
      const e9 = 0, t8 = 0, s14 = c4 / 2 - n6 / 2, i8 = d3;
      y5.moveTo(e9, t8), y5.lineTo(s14, i8);
      const o5 = c4, a13 = 0, r10 = c4 / 2 + n6 / 2, l8 = d3;
      y5.moveTo(o5, a13), y5.lineTo(r10, l8);
    } else {
      y5.beginPath();
      const e9 = 0, t8 = d3 / 2 - n6 / 2, s14 = c4, i8 = 0;
      y5.moveTo(e9, t8), y5.lineTo(s14, i8);
      const o5 = 0, a13 = d3 / 2 + n6 / 2, r10 = c4, l8 = d3;
      y5.moveTo(o5, a13), y5.lineTo(r10, l8);
    }
    return y5.strokeStyle = A, y5.stroke(), n("div", { bind: m4, afterCreate: t6, styles: r9 ? { display: "flex", marginTop: `-${p4 ? 0 : h6 ? l7 / 2 : 0}px`, marginBottom: `-${p4 ? n6 : h6 ? n6 / 2 : 0}px` } : { display: "flex", marginRight: `-${p4 ? 0 : h6 ? l7 / 2 : 0}px`, marginLeft: `-${p4 ? 0 : h6 ? n6 / 2 : 0}px` } });
  }
  _renderSizeRamp(e8, t7) {
    const s13 = e8.infos, i8 = s13[0].label, o4 = s13[s13.length - 1].label;
    let a12 = s13[0].preview, r9 = s13[s13.length - 1].preview;
    const l7 = this._hasIndicators, n6 = { "flex-direction": l7 ? "column" : "row-reverse" };
    a12 && (a12 = a12.cloneNode(true), a12.style.display = "flex"), r9 && (r9 = r9.cloneNode(true), r9.style.display = "flex");
    const d3 = { opacity: null != t7 ? `${t7}` : "" };
    return n("div", { class: this.classes(r6.layerRow, { [r6.sizeRampRow]: l7 }) }, n("div", { class: r6.rampLabel }, l7 ? i8 : o4), n("div", { class: r6.sizeRampContainer, styles: n6 }, n("div", { bind: a12, afterCreate: t6, class: r6.sizeRampPreview, styles: d3 }), this._renderSizeRampLines(e8), n("div", { bind: r9, afterCreate: t6, class: r6.sizeRampContainer, styles: d3 })), n("div", { class: r6.rampLabel }, l7 ? o4 : i8));
  }
  _renderLegendForRamp(e8, t7, s13) {
    const i8 = e8.infos, o4 = "heatmap-ramp" === e8.type, a12 = i8.length - 1, n6 = I4, d3 = a12 > 2 && !o4 ? R2 * a12 : z2, p4 = d3 + 20, h6 = 10, m4 = i8.slice(0).reverse();
    m4.forEach((e9, t8) => {
      e9.offset = o4 ? e9.ratio : t8 / a12;
    });
    const y5 = m4.length - 1, f5 = m4.length % 2 != 0 && m4[m4.length / 2 | 0], u9 = f5 && n("div", { class: r6.intervalSeparatorsContainer }, n("div", { class: r6.intervalSeparator }, "|"), n("div", { class: r6.rampLabel }, f5.label)), g3 = i8[i8.length - 1].label, v7 = i8[0].label, b5 = [[{ shape: { type: "path", path: `M0 ${n6 / 2} L${h6} 0 L${h6} ${n6} Z` }, fill: m4[0].color, stroke: { width: 0 } }, { shape: { type: "rect", x: h6, y: 0, width: d3, height: n6 }, fill: { type: "linear", x1: h6, y1: 0, x2: d3 + h6, y2: 0, colors: m4 }, stroke: { width: 0 } }, { shape: { type: "path", path: `M${d3 + h6} 0 L${p4} ${n6 / 2} L${d3 + h6} ${n6} Z` }, fill: m4[y5].color, stroke: { width: 0 } }]], _3 = R(b5, p4, n6), { messages: w5 } = this, L5 = { filter: q(s13), opacity: null == t7 ? null : `${t7}` }, x5 = { justifyContent: "center" };
    return n("div", { class: r6.layerRow, styles: x5 }, n("div", { class: r6.rampLabel }, o4 ? w5[g3] : g3), n("div", { class: r6.symbolContainer }, n("div", { styles: L5 }, _3), u9), n("div", { class: r6.rampLabel }, o4 ? w5[v7] : v7));
  }
};
e([y()], T2.prototype, "activeLayerInfos", void 0), e([y()], T2.prototype, "headingLevel", void 0), e([y()], T2.prototype, "layout", void 0), e([y(), e3("esri/widgets/Legend/t9n/Legend")], T2.prototype, "messages", void 0), e([y(), e3("esri/t9n/common")], T2.prototype, "messagesCommon", void 0), e([y({ readOnly: true })], T2.prototype, "type", void 0), e([y()], T2.prototype, "view", void 0), e([t3()], T2.prototype, "_selectSection", null), T2 = e([a2("esri.widgets.Legend.styles.Card")], T2);
var U3 = T2;

// node_modules/@arcgis/core/widgets/Legend/styles/ClassicCSS.js
var e7 = "esri-legend";
var a11 = { service: `${e7}__service`, label: `${e7}__service-label`, layer: `${e7}__layer`, groupLayer: `${e7}__group-layer`, groupLayerChild: `${e7}__group-layer-child`, layerTable: `${e7}__layer-table`, layerTableSizeRamp: `${e7}__layer-table--size-ramp`, layerChildTable: `${e7}__layer-child-table`, layerCaption: `${e7}__layer-caption`, layerBody: `${e7}__layer-body`, layerRow: `${e7}__layer-row`, layerCell: `${e7}__layer-cell`, layerInfo: `${e7}__layer-cell ${e7}__layer-cell--info`, imageryLayerStretchedImage: `${e7}__imagery-layer-image--stretched`, imageryLayerCellStretched: `${e7}__imagery-layer-cell--stretched`, imageryLayerInfoStretched: `${e7}__imagery-layer-info--stretched`, symbolContainer: `${e7}__layer-cell esri-legend__layer-cell--symbols`, symbol: `${e7}__symbol`, rampContainer: `${e7}__ramps`, sizeRamp: `${e7}__size-ramp`, colorRamp: `${e7}__color-ramp`, opacityRamp: `${e7}__opacity-ramp`, borderlessRamp: `${e7}__borderless-ramp`, rampTick: `${e7}__ramp-tick`, rampFirstTick: `${e7}__ramp-tick-first`, rampLastTick: `${e7}__ramp-tick-last`, rampLabelsContainer: `${e7}__ramp-labels`, rampLabel: `${e7}__ramp-label`, univariateAboveAndBelowSymbol: "esri-univariate-above-and-below-ramp__symbol", univariateAboveAndBelowLabel: "esri-univariate-above-and-below-ramp__label", message: `${e7}__message`, header: "esri-widget__heading", hidden: "esri-hidden" };

// node_modules/@arcgis/core/widgets/Legend/styles/Classic.js
var L4 = `${e7}__`;
var w3 = 24;
var C3 = { display: "flex", alignItems: "flex-start" };
var _2 = { marginLeft: "3px" };
var R3 = { display: "table-cell", verticalAlign: "middle" };
var A2 = class extends W {
  constructor(e8, t7) {
    super(e8, t7), this.activeLayerInfos = null, this.headingLevel = 3, this.messages = null, this.type = "classic";
  }
  render() {
    const e8 = this.activeLayerInfos, t7 = e8 && e8.toArray().map((e9) => this._renderLegendForLayer(e9)).filter((e9) => !!e9);
    return n("div", null, t7 && t7.length ? t7 : n("div", { class: a11.message }, this.messages.noLegend));
  }
  _renderLegendForLayer(e8) {
    if (!e8.ready)
      return null;
    const t7 = !!e8.children.length, s13 = `${L4}${e8.layer.uid}-version-${e8.version}`, r9 = e8.title ? n2({ level: this.headingLevel, class: this.classes(a11.header, a11.label) }, e8.title) : null;
    if (t7) {
      const t8 = e8.children.map((e9) => this._renderLegendForLayer(e9)).toArray();
      return n("div", { key: s13, class: this.classes(a11.service, a11.groupLayer) }, r9, t8);
    }
    {
      const t8 = e8.legendElements;
      if (t8 && !t8.length)
        return null;
      const l7 = t8.map((t9) => this._renderLegendForElement(t9, e8.layer, e8.effectList)).filter((e9) => !!e9);
      if (!l7.length)
        return null;
      const i8 = { [a11.groupLayerChild]: !!e8.parent };
      return n("div", { key: s13, class: this.classes(a11.service, i8), tabIndex: 0 }, r9, n("div", { class: a11.layer }, l7));
    }
  }
  _renderLegendForElement(e8, t7, s13, r9) {
    const l7 = "color-ramp" === e8.type, n6 = "opacity-ramp" === e8.type, o4 = "size-ramp" === e8.type;
    let p4 = null;
    if ("symbol-table" === e8.type || o4) {
      const r10 = e8.infos.map((r11) => this._renderLegendForElementInfo(r11, t7, s13, o4, e8.legendType)).filter((e9) => !!e9);
      r10.length && (p4 = n("div", { class: a11.layerBody }, r10));
    } else
      "color-ramp" === e8.type || "opacity-ramp" === e8.type || "heatmap-ramp" === e8.type || "stretch-ramp" === e8.type ? p4 = this._renderLegendForRamp(e8, t7.opacity) : "relationship-ramp" === e8.type ? p4 = h2(e8, this.id, t7.opacity, s13) : "pie-chart-ramp" === e8.type ? p4 = this._renderPieChartRamp(e8) : "univariate-above-and-below-ramp" === e8.type ? p4 = this._renderUnivariateAboveAndBelowRamp(e8, t7.opacity, s13) : "univariate-color-size-ramp" === e8.type && (p4 = this._renderUnivariateColorSizeRamp(e8, t7.opacity, s13));
    if (!p4)
      return null;
    const d3 = e8.title;
    let c4 = null;
    if ("string" == typeof d3)
      c4 = d3;
    else if (d3) {
      const e9 = r8(this.messages, d3, l7 || n6);
      c4 = o3(d3, l7 || n6) && d3.title ? `${d3.title} (${e9})` : e9;
    }
    const v7 = r9 ? a11.layerChildTable : a11.layerTable, h6 = c4 ? n("div", { class: a11.layerCaption }, c4) : null, u9 = { [a11.layerTableSizeRamp]: o4 || !r9 };
    return n("div", { class: this.classes(v7, u9) }, h6, p4);
  }
  _renderPieChartRamp(e8) {
    return n("div", { bind: e8.preview, afterCreate: t6 });
  }
  _renderUnivariateAboveAndBelowRamp(e8, t7, s13) {
    const { sizeRampElement: r9, colorRampElement: l7 } = d2(e8, t7);
    if (!r9)
      return null;
    const i8 = y4(r9, "above", true), c4 = y4(r9, "below", true), m4 = 12, y5 = v5(l7, { width: m4, height: i8, rampAlignment: "vertical", opacity: t7, type: "above", effectList: s13 }), h6 = v5(l7, { width: m4, height: c4, rampAlignment: "vertical", opacity: t7, type: "below", effectList: s13 }), u9 = u7(r9), g3 = r9.infos.map((e9) => e9.label), b5 = g3.map((e9, t8) => {
      const s14 = 2 === t8;
      return 0 === t8 ? n("div", { key: t8, class: e9 ? y5 ? a11.univariateAboveAndBelowLabel : a11.rampLabel : null }, e9) : s14 ? n("div", null) : null;
    }), L5 = g3.length - 1, w5 = Math.floor(g3.length / 2), A3 = g3.map((e9, t8) => t8 === w5 || t8 === L5 ? n("div", { key: t8, class: e9 ? y5 ? a11.univariateAboveAndBelowLabel : a11.rampLabel : null }, e9) : null), j6 = { display: "table-cell", verticalAlign: "middle" }, S5 = { marginTop: `${u9}px` }, I5 = { height: `${i8}px` }, $ = { height: `${c4}px` };
    return n("div", { key: "univariate-above-and-below-ramp-preview", styles: C3 }, n("div", { class: a11.layerBody }, r9.infos.map((e9, t8) => n("div", { class: this.classes(a11.layerRow, a11.sizeRamp) }, n("div", { class: a11.symbol, styles: j6, bind: e9.preview, afterCreate: t6 }), y5 || t8 % 2 != 0 ? null : n("div", { class: a11.layerInfo }, g3[t8])))), y5 ? n("div", { styles: S5, key: "color-ramp-preview" }, n("div", { styles: _2 }, n("div", { styles: R3 }, n("div", { class: a11.rampContainer, bind: y5, afterCreate: t6 })), n("div", { styles: R3 }, n("div", { class: a11.rampLabelsContainer, styles: I5 }, b5))), n("div", { styles: _2 }, n("div", { styles: R3 }, n("div", { class: a11.rampContainer, bind: h6, afterCreate: t6 })), n("div", { styles: R3 }, n("div", { class: a11.rampLabelsContainer, styles: $ }, A3)))) : null);
  }
  _renderUnivariateColorSizeRamp(e8, t7, s13) {
    const { sizeRampElement: r9, colorRampElement: l7 } = b4(e8);
    if (!r9)
      return null;
    const i8 = u7(r9), n6 = 12, m4 = y4(r9, "full", false), y5 = v5(l7, { width: n6, height: m4, rampAlignment: "vertical", opacity: t7, type: "full", effectList: s13 }), h6 = r9.infos.length - 1, u9 = r9.infos.map((e9, t8) => 0 === t8 || t8 === h6 ? n("div", { key: t8, class: e9.label ? l7 ? a11.univariateAboveAndBelowLabel : a11.rampLabel : null }, e9.label) : null), g3 = { display: "table-cell", verticalAlign: "middle" }, b5 = { marginTop: `${i8}px` }, L5 = { height: `${m4}px` };
    return n("div", { key: "univariate-above-and-below-ramp-preview", styles: C3 }, n("div", { class: a11.layerBody }, r9.infos.map((e9) => n("div", { class: this.classes(a11.layerRow, a11.sizeRamp) }, n("div", { class: a11.symbol, styles: g3, bind: e9.preview, afterCreate: t6 })))), n("div", { styles: b5, key: "color-ramp-preview" }, n("div", { styles: _2 }, n("div", { styles: R3 }, n("div", { class: a11.rampContainer, bind: y5, afterCreate: t6 })), n("div", { styles: R3 }, n("div", { class: a11.rampLabelsContainer, styles: L5 }, u9)))));
  }
  _renderLegendForRamp(e8, t7) {
    const s13 = e8.infos, r9 = "opacity-ramp" === e8.type, l7 = "heatmap-ramp" === e8.type, i8 = "stretch-ramp" === e8.type, n6 = e8.preview, o4 = r9 ? a11.opacityRamp : "";
    n6.className = `${a11.colorRamp} ${o4}`, null != t7 && (n6.style.opacity = t7.toString());
    const p4 = s13.map((e9) => n("div", { class: e9.label ? a11.rampLabel : null }, l7 ? this.messages[e9.label] || e9.label : i8 ? this._getStretchStopLabel(e9) : e9.label)), d3 = { width: `${w3}px` }, c4 = { height: n6.style.height };
    return n("div", { class: a11.layerRow }, n("div", { class: a11.symbolContainer, styles: d3 }, n("div", { class: a11.rampContainer, bind: n6, afterCreate: t6 })), n("div", { class: a11.layerInfo }, n("div", { class: a11.rampLabelsContainer, styles: c4 }, p4)));
  }
  _getStretchStopLabel(e8) {
    return e8.label ? this.messages[e8.label] + ": " + ("string" == typeof e8.value ? e8.value : m(e8.value, { style: "decimal", notation: e8.value.toString().includes("e") ? "scientific" : "standard" })) : "";
  }
  _renderLegendForElementInfo(e8, t7, s13, r9, l7) {
    if (e8.type)
      return this._renderLegendForElement(e8, t7, s13, true);
    let i8 = null;
    const n6 = i7(t7, l7);
    if (e8.preview ? i8 = n("div", { class: a11.symbol, bind: e8.preview, afterCreate: t6 }) : e8.src && (i8 = this._renderImage(e8, t7, n6)), !i8)
      return null;
    const o4 = { [a11.imageryLayerInfoStretched]: n6 }, p4 = { [a11.imageryLayerInfoStretched]: n6, [a11.sizeRamp]: !n6 && r9 };
    return n("div", { class: a11.layerRow }, n("div", { class: this.classes(a11.symbolContainer, p4) }, i8), n("div", { class: this.classes(a11.layerInfo, o4) }, r8(this.messages, e8.label, false) || ""));
  }
  _renderImage(e8, t7, s13) {
    const { label: r9, src: l7, opacity: i8 } = e8, n6 = { [a11.imageryLayerStretchedImage]: s13, [a11.symbol]: !s13 }, o4 = { opacity: `${null != i8 ? i8 : t7.opacity}` };
    return n("img", { alt: r8(this.messages, r9, false), src: l7, border: 0, width: e8.width, height: e8.height, class: this.classes(n6), styles: o4 });
  }
};
e([y()], A2.prototype, "activeLayerInfos", void 0), e([y()], A2.prototype, "headingLevel", void 0), e([y(), e3("esri/widgets/Legend/t9n/Legend")], A2.prototype, "messages", void 0), e([y({ readOnly: true })], A2.prototype, "type", void 0), A2 = e([a2("esri.widgets.Legend.styles.Classic")], A2);
var j5 = A2;

// node_modules/@arcgis/core/widgets/Legend.js
var v6 = { base: "esri-legend", widget: "esri-widget", panel: "esri-widget--panel", widgetIcon: "esri-icon-layer-list" };
var u8 = class extends W {
  constructor(e8, s13) {
    super(e8, s13), this._handles = new t2(), this.headingLevel = 3, this.iconClass = v6.widgetIcon, this.messages = null, this.style = new j5(), this.viewModel = new I3();
  }
  initialize() {
    this.addHandles([a3(() => this.view, "resize", () => this.scheduleRender()), a3(() => this.activeLayerInfos, "change", () => this._refreshActiveLayerInfos(this.activeLayerInfos)), l(() => this.headingLevel, (e8) => {
      const { style: t7 } = this;
      t7 && (t7.headingLevel = e8);
    }), l(() => this.style, (e8, t7) => {
      t7 && e8 !== t7 && t7.destroy(), e8 && (e8.activeLayerInfos = this.activeLayerInfos, "card" === e8.type && (e8.view = this.view), e8.headingLevel = this.headingLevel);
    }, h)]);
  }
  destroy() {
    this._handles = a(this._handles);
  }
  get activeLayerInfos() {
    return this.viewModel.activeLayerInfos;
  }
  set activeLayerInfos(e8) {
    this.viewModel.activeLayerInfos = e8;
  }
  get basemapLegendVisible() {
    return this.viewModel.basemapLegendVisible;
  }
  set basemapLegendVisible(e8) {
    this.viewModel.basemapLegendVisible = e8;
  }
  get groundLegendVisible() {
    return this.viewModel.groundLegendVisible;
  }
  set groundLegendVisible(e8) {
    this.viewModel.groundLegendVisible = e8;
  }
  get hideLayersNotInCurrentView() {
    return this.viewModel.hideLayersNotInCurrentView;
  }
  set hideLayersNotInCurrentView(e8) {
    this.viewModel.hideLayersNotInCurrentView = e8;
  }
  get keepCacheOnDestroy() {
    return this.viewModel.keepCacheOnDestroy;
  }
  set keepCacheOnDestroy(e8) {
    this.viewModel.keepCacheOnDestroy = e8;
  }
  get respectLayerVisibility() {
    return this.viewModel.respectLayerVisibility;
  }
  set respectLayerVisibility(e8) {
    this.viewModel.respectLayerVisibility = e8;
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e8) {
    this._overrideIfSome("label", e8);
  }
  get layerInfos() {
    return this.viewModel.layerInfos;
  }
  set layerInfos(e8) {
    this.viewModel.layerInfos = e8;
  }
  castStyle(e8) {
    if (e8 instanceof U3 || e8 instanceof j5)
      return e8;
    if ("string" == typeof e8)
      return "card" === e8 ? new U3() : new j5();
    if (e8 && "string" == typeof e8.type) {
      const t7 = { ...e8 };
      delete t7.type;
      return new ("card" === e8.type ? U3 : j5)(t7);
    }
    return new j5();
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e8) {
    this.viewModel.view = e8;
  }
  render() {
    return n("div", { class: this.classes(v6.base, v6.widget, this.style instanceof j5 ? v6.panel : null) }, this.style.render());
  }
  _refreshActiveLayerInfos(e8) {
    this._handles.removeAll(), e8.forEach((e9) => this._renderOnActiveLayerInfoChange(e9)), this.scheduleRender();
  }
  _renderOnActiveLayerInfoChange(e8) {
    const t7 = l(() => e8.version, () => this.scheduleRender());
    this._handles.add(t7, `version_${e8.layer.uid}`);
    const s13 = a3(() => e8.children, "change", () => e8.children.forEach((e9) => this._renderOnActiveLayerInfoChange(e9)), h);
    this._handles.add(s13, `children_${e8.layer.uid}`), e8.children.forEach((e9) => this._renderOnActiveLayerInfoChange(e9));
  }
};
e([y()], u8.prototype, "activeLayerInfos", null), e([y()], u8.prototype, "basemapLegendVisible", null), e([y()], u8.prototype, "groundLegendVisible", null), e([y()], u8.prototype, "headingLevel", void 0), e([y()], u8.prototype, "hideLayersNotInCurrentView", null), e([y()], u8.prototype, "keepCacheOnDestroy", null), e([y()], u8.prototype, "respectLayerVisibility", null), e([y()], u8.prototype, "iconClass", void 0), e([y()], u8.prototype, "label", null), e([y()], u8.prototype, "layerInfos", null), e([y(), e3("esri/widgets/Legend/t9n/Legend")], u8.prototype, "messages", void 0), e([y()], u8.prototype, "style", void 0), e([s2("style")], u8.prototype, "castStyle", null), e([y()], u8.prototype, "view", null), e([y()], u8.prototype, "viewModel", void 0), u8 = e([a2("esri.widgets.Legend")], u8);
var w4 = u8;
export {
  w4 as default
};
//# sourceMappingURL=@arcgis_core_widgets_Legend__js.js.map
