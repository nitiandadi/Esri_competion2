import {
  e as e4
} from "./chunk-X5VQRQNB.js";
import {
  W,
  c,
  e2 as e3,
  t2
} from "./chunk-5A27WSNG.js";
import {
  n as n2
} from "./chunk-LTDEG6HG.js";
import {
  g
} from "./chunk-PWTNABVI.js";
import "./chunk-QPO5PHJF.js";
import "./chunk-5EUH7VZ3.js";
import "./chunk-JTNRBNRF.js";
import {
  d,
  n as n5
} from "./chunk-NM622CMD.js";
import {
  a as a3
} from "./chunk-PDVN7WNU.js";
import {
  a as a2
} from "./chunk-DVXVSJ4Q.js";
import "./chunk-JP4RU5GX.js";
import {
  s as s3
} from "./chunk-JXFYWRST.js";
import "./chunk-DZRQI3AN.js";
import "./chunk-RDUTTOQ3.js";
import {
  T,
  l as l2,
  n as n3
} from "./chunk-LTLJB4NW.js";
import {
  h,
  j as j2,
  l,
  w
} from "./chunk-K4GDMMIW.js";
import {
  n as n4
} from "./chunk-VWOAL3VX.js";
import "./chunk-ZAXOBWTR.js";
import "./chunk-UR5ZL7QS.js";
import "./chunk-NYBVPXLA.js";
import "./chunk-UOK6MY3O.js";
import {
  j as j3
} from "./chunk-SBEZGBGP.js";
import "./chunk-IDL7KEA3.js";
import {
  L,
  S
} from "./chunk-SNENIRPY.js";
import {
  n
} from "./chunk-RPE6WNJU.js";
import "./chunk-PEP3ZFMY.js";
import "./chunk-4RBXYEIR.js";
import {
  s as s4
} from "./chunk-DIKILJRD.js";
import "./chunk-RWPKU4WQ.js";
import "./chunk-6WBEWKC5.js";
import "./chunk-ZHZNKRB4.js";
import "./chunk-AAIQ5NT5.js";
import "./chunk-RNYXVOXZ.js";
import {
  a2 as a,
  v2 as v,
  y3 as y
} from "./chunk-UYIBQQOZ.js";
import {
  e as e2
} from "./chunk-BLEZNFSU.js";
import "./chunk-6VTYOWNK.js";
import {
  b
} from "./chunk-LZCD2BP3.js";
import {
  U,
  i as i2,
  j
} from "./chunk-A5MHXMXH.js";
import {
  s,
  s2
} from "./chunk-T77WQ6PL.js";
import "./chunk-UATAPXHW.js";
import "./chunk-CLOVXMDE.js";
import "./chunk-OTJR6V66.js";
import {
  i
} from "./chunk-WGUAPKDX.js";
import {
  e,
  o,
  r,
  t
} from "./chunk-APYNTT7Z.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/widgets/Slider/SliderViewModel.js
var o2 = class extends v {
  constructor(t4) {
    super(t4), this.precision = 4, this.thumbsConstrained = true;
  }
  set effectiveMax(t4) {
    this.setEffectiveMax(t4);
  }
  set effectiveMin(t4) {
    this.setEffectiveMin(t4);
  }
  set labelFormatFunction(t4) {
    this._set("labelFormatFunction", t4);
  }
  set inputFormatFunction(t4) {
    this._set("inputFormatFunction", t4);
  }
  set inputParseFunction(t4) {
    this._set("inputParseFunction", t4);
  }
  get labels() {
    const { max: t4, min: e5, values: i4 } = this, s5 = i4 && i4.length ? i4.map((t5, e6) => this.getLabelForValue(t5, "value", e6)) : [];
    return { max: this.getLabelForValue(t4, "max"), min: this.getLabelForValue(e5, "min"), values: s5 };
  }
  set max(t4) {
    this.setMax(t4);
  }
  set min(t4) {
    this.setMin(t4);
  }
  get state() {
    const { max: t4, min: e5 } = this;
    return null != t4 && null != e5 && t4 > e5 ? "ready" : "disabled";
  }
  set values(t4) {
    const { max: e5, min: i4 } = this, s5 = this.values;
    s5 && t4 && s5.length === t4.length && s5.every((e6, i5) => e6 === t4[i5]) || (this._set("values", null), t4 && t4.length && (null != i4 && t4.some((t5) => t5 < i4) && (this.min = Math.min(...t4)), null != e5 && t4.some((t5) => t5 > e5) && (this.max = Math.max(...t4))), this._set("values", t4));
  }
  toPrecision(t4) {
    return parseFloat(t4.toFixed(this.precision));
  }
  defaultLabelFormatFunction(t4) {
    const { max: e5, min: i4, precision: s5 } = this, r2 = null != e5 && null != i4 && e5 - i4 > 10 ? 2 : s5;
    return parseFloat(t4.toFixed(r2)).toString();
  }
  defaultInputFormatFunction(t4) {
    return t4.toString();
  }
  defaultInputParseFunction(t4) {
    return parseFloat(t4);
  }
  getBounds() {
    const { effectiveMax: t4, effectiveMin: e5, max: i4, min: s5 } = this;
    return { min: null != e5 && null != s5 ? Math.max(s5, e5) : s5, max: null != t4 && null != i4 ? Math.min(i4, t4) : i4 };
  }
  getBoundsForValueAtIndex(t4) {
    const { thumbsConstrained: e5, values: i4 } = this, { min: s5, max: r2 } = this.getBounds();
    if (e5 && i4) {
      const e6 = t4 - 1, n6 = t4 + 1;
      return { min: null != i4[e6] ? i4[e6] : s5, max: null != i4[n6] ? i4[n6] : r2 };
    }
    return { min: s5, max: r2 };
  }
  getLabelForValue(t4, e5, i4) {
    return null == t4 ? null : this.labelFormatFunction ? this.labelFormatFunction(t4, e5, i4) : this.defaultLabelFormatFunction(t4);
  }
  setMax(t4) {
    const { max: e5, values: i4 } = this;
    if (null == t4)
      return void this._set("max", null);
    if (isNaN(t4))
      return void this._logError("slider:invalid-value", "Supplied value for property 'max' is NaN.");
    const s5 = this.toPrecision(t4);
    if (e5 !== s5 && (this._set("max", s5), i4 && i4.length))
      for (let r2 = 0; r2 < i4.length; r2++)
        s5 < i4[r2] && this.setValue(r2, s5);
  }
  setMin(t4) {
    const { min: e5, values: i4 } = this;
    if (null == t4)
      return void this._set("min", null);
    if (isNaN(t4))
      return void this._logError("slider:invalid-value", "Supplied value for property 'min' is NaN.");
    const s5 = this.toPrecision(t4);
    if (e5 !== s5 && (this._set("min", s5), i4 && i4.length))
      for (let r2 = 0; r2 < i4.length; r2++)
        s5 > i4[r2] && this.setValue(r2, s5);
  }
  setEffectiveMax(t4) {
    if (null == t4)
      return void this._set("effectiveMax", null);
    if (isNaN(t4))
      return void this._logError("slider:invalid-value", "Supplied value for property 'effectiveMax' is NaN.");
    const e5 = this.toPrecision(t4);
    this.effectiveMax !== e5 && this._set("effectiveMax", this._applyBoundsToValue(e5));
  }
  setEffectiveMin(t4) {
    if (null == t4)
      return void this._set("effectiveMin", null);
    if (isNaN(t4))
      return void this._logError("slider:invalid-value", "Supplied value for property 'effectiveMin' is NaN.");
    const e5 = this.toPrecision(t4);
    this.effectiveMin !== e5 && this._set("effectiveMin", this._applyBoundsToValue(e5));
  }
  setValue(t4, e5) {
    if (isNaN(e5))
      return void this._logError("slider:invalid-value", "Supplied value for member of property 'values' is NaN.");
    const { values: i4 } = this;
    if (null == i4)
      return void this._logError("slider:invalid-value", "Supplied value for member of property 'values' is null.");
    const s5 = i4[t4], r2 = this.toPrecision(e5);
    if (s5 === r2)
      return;
    const n6 = [...i4];
    n6[t4] = r2, this._set("values", n6), this.notifyChange("labels");
  }
  _applyBoundsToValue(t4) {
    const { max: e5, min: i4 } = this;
    return null != i4 && t4 < i4 ? i4 : null != e5 && t4 > e5 ? e5 : t4;
  }
  _logError(t4, e5, r2) {
    s.getLogger(this.declaredClass).error(new s2(t4, e5, r2));
  }
};
e2([y()], o2.prototype, "effectiveMax", null), e2([y()], o2.prototype, "effectiveMin", null), e2([y()], o2.prototype, "labelFormatFunction", null), e2([y()], o2.prototype, "inputFormatFunction", null), e2([y()], o2.prototype, "inputParseFunction", null), e2([y({ readOnly: true })], o2.prototype, "labels", null), e2([y()], o2.prototype, "max", null), e2([y()], o2.prototype, "min", null), e2([y()], o2.prototype, "precision", void 0), e2([y({ readOnly: true })], o2.prototype, "state", null), e2([y()], o2.prototype, "thumbsConstrained", void 0), e2([y()], o2.prototype, "values", null), o2 = e2([a("esri.widgets.Slider.SliderViewModel")], o2);
var l3 = o2;

// node_modules/@arcgis/core/widgets/Slider.js
var _ = "esri-slider";
var p = { base: _, reversed: `${_}--reversed`, horizontalLayout: `${_}--horizontal`, verticalLayout: `${_}--vertical`, contentElement: `${_}__content`, extraContentElement: `${_}__extra-content`, trackElement: `${_}__track`, ticksContainerElement: `${_}__ticks`, tickElement: `${_}__tick`, tickLabelElement: `${_}__tick-label`, maxElement: `${_}__max`, minElement: `${_}__min`, maxElementInteractive: `${_}__max--interactive`, minElementInteractive: `${_}__min--interactive`, rangeElementActive: `${_}__range--active`, rangeInput: `${_}__range-input`, anchorElement: `${_}__anchor`, movingAnchorElement: `${_}__anchor--moving`, lastMovedAnchorElement: `${_}__anchor--moved`, anchorElementActive: `${_}__anchor--active`, anchorElementIndexPrefix: `${_}__anchor-`, segmentElement: `${_}__segment`, segmentElementIndexPrefix: `${_}__segment-`, segmentElementInteractive: `${_}__segment--interactive`, segmentElementActive: `${_}__segment--active`, effectiveSegmentElement: `${_}__effective-segment`, effectiveMaxSegmentElement: `${_}__effective-max-segment`, effectiveMinSegmentElement: `${_}__effective-min-segment`, thumbElement: `${_}__thumb`, labelElement: `${_}__label`, labelElementInteractive: `${_}__label--interactive`, labelInput: `${_}__label-input`, esriWidget: "esri-widget", widgetIcon: "esri-icon-edit", disabled: "esri-disabled", hidden: "esri-hidden" };
var v2 = { showInput: "Enter", hideInput1: "Enter", hideInput2: "Escape", hideInput3: "Tab", moveAnchorUp: "ArrowUp", moveAnchorDown: "ArrowDown", moveAnchorLeft: "ArrowLeft", moveAnchorRight: "ArrowRight", moveAnchorToMax: "End", moveAnchorToMin: "Home" };
var g2 = "esri.widgets.Slider";
var f = { labels: false, rangeLabels: false };
var b2 = class extends W {
  constructor(e5, i4) {
    super(e5, i4), this._activeLabelInputIndex = null, this._anchorElements = [], this._dragged = false, this._dragStartInfo = null, this._focusedAnchorIndex = null, this._isMinInputActive = false, this._isMaxInputActive = false, this._lastMovedHandleIndex = null, this._positionPrecision = 5, this._segmentDragStartInfo = null, this._trackHeight = null, this._trackWidth = null, this._zIndices = null, this._zIndexOffset = 3, this.disabled = false, this.draggableSegmentsEnabled = true, this.effectiveSegmentElements = new j3(), this.extraNodes = [], this.inputCreatedFunction = null, this.labelElements = new j3(), this.labelInputsEnabled = false, this.maxLabelElement = null, this.messages = null, this.minLabelElement = null, this.rangeLabelInputsEnabled = false, this.segmentElements = new j3(), this.snapOnClickEnabled = true, this.steps = null, this.syncedSegmentsEnabled = false, this.thumbCreatedFunction = null, this.thumbElements = new j3(), this.tickElements = new j3(), this.trackElement = null, this.viewModel = new l3(), this.visibleElements = { ...f }, this._onAnchorPointerDown = this._onAnchorPointerDown.bind(this), this._onAnchorPointerMove = this._onAnchorPointerMove.bind(this), this._onAnchorPointerUp = this._onAnchorPointerUp.bind(this), this._onLabelPointerDown = this._onLabelPointerDown.bind(this), this._onLabelPointerUp = this._onLabelPointerUp.bind(this), this._onSegmentPointerDown = this._onSegmentPointerDown.bind(this), this._onSegmentPointerMove = this._onSegmentPointerMove.bind(this), this._onSegmentPointerUp = this._onSegmentPointerUp.bind(this), this._onTrackPointerDown = this._onTrackPointerDown.bind(this), this._onTrackPointerMove = this._onTrackPointerMove.bind(this), this._onTrackPointerUp = this._onTrackPointerUp.bind(this);
  }
  destroy() {
    document.removeEventListener("pointerup", this._onLabelPointerUp), document.removeEventListener("pointermove", this._onLabelPointerMove), document.removeEventListener("pointerup", this._onAnchorPointerUp), document.removeEventListener("pointermove", this._onAnchorPointerMove), this.labelElements.removeAll(), this.labelElements.destroy(), this.segmentElements.removeAll(), this.segmentElements.destroy(), this.effectiveSegmentElements.removeAll(), this.effectiveSegmentElements.destroy(), this.thumbElements.removeAll(), this.thumbElements.destroy(), this.tickElements.removeAll(), this.tickElements.destroy();
  }
  get effectiveMax() {
    return this.viewModel.effectiveMax;
  }
  set effectiveMax(e5) {
    this.viewModel.effectiveMax = e5;
  }
  get effectiveMin() {
    return this.viewModel.effectiveMin;
  }
  set effectiveMin(e5) {
    this.viewModel.effectiveMin = e5;
  }
  get inputFormatFunction() {
    return this.viewModel.inputFormatFunction;
  }
  set inputFormatFunction(e5) {
    this.viewModel.inputFormatFunction = e5;
  }
  get inputParseFunction() {
    return this.viewModel.inputParseFunction;
  }
  set inputParseFunction(e5) {
    this.viewModel.inputParseFunction = e5;
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e5) {
    this._overrideIfSome("label", e5);
  }
  get labelFormatFunction() {
    return this.viewModel.labelFormatFunction;
  }
  set labelFormatFunction(e5) {
    this.viewModel.labelFormatFunction = e5;
  }
  get labels() {
    return this.viewModel.labels;
  }
  set layout(e5) {
    ["vertical", "vertical-reversed", "horizontal", "horizontal-reversed"].includes(e5) || (e5 = "horizontal"), this._set("layout", e5);
  }
  get max() {
    return this.viewModel.max;
  }
  set max(e5) {
    this.viewModel.max = e5;
  }
  get min() {
    return this.viewModel.min;
  }
  set min(e5) {
    this.viewModel.min = e5;
  }
  get precision() {
    return this.viewModel.precision;
  }
  set precision(e5) {
    this.viewModel.precision = e5;
  }
  get state() {
    const { _activeLabelInputIndex: e5, _isMaxInputActive: t4, _isMinInputActive: i4, _dragStartInfo: n6, _segmentDragStartInfo: o3, disabled: a4, viewModel: r2 } = this, l4 = r(n6) || r(o3);
    return a4 ? "disabled" : !(null === e5 && !t4 && !i4) ? "editing" : l4 ? "dragging" : r2.state;
  }
  get thumbsConstrained() {
    return this.viewModel.thumbsConstrained;
  }
  set thumbsConstrained(e5) {
    this.viewModel.thumbsConstrained = e5;
  }
  set tickConfigs(e5) {
    this._set("tickConfigs", e5), this.scheduleRender();
  }
  get values() {
    return this.viewModel.values;
  }
  set values(e5) {
    this.viewModel.values = e5;
  }
  castVisibleElements(e5) {
    return { ...f, ...e5 };
  }
  render() {
    const { label: e5 } = this, t4 = this.classes(p.base, p.esriWidget, this._isHorizontalLayout() ? p.horizontalLayout : p.verticalLayout, this._isReversedLayout() ? p.reversed : null, this._isDisabled() ? p.disabled : null);
    return this._storeTrackDimensions(), n2("div", { "aria-label": e5, class: t4, "touch-action": "none", bind: this, afterCreate: this._afterContainerCreate }, this.renderContent());
  }
  toNextStep(e5) {
    this._toStep(e5, 1);
  }
  toPreviousStep(e5) {
    this._toStep(e5, -1);
  }
  renderContent() {
    const { max: e5, min: t4 } = this;
    if (!(t(t4) || t(e5) || t4 >= e5))
      return [this.renderMin(), this.renderSliderContainer(), this.renderMax()];
  }
  renderSliderContainer() {
    return n2("div", { key: "slider-container", bind: this, class: p.contentElement }, this.renderTrackElement(), this.renderTicksContainer(), this.renderExtraContentElements());
  }
  renderTrackElement() {
    return n2("div", { afterCreate: this._afterTrackCreate, afterRemoved: this._afterTrackRemoved, bind: this, class: p.trackElement, "touch-action": "none" }, this.renderEffectiveSegmentElements(), this.renderSegmentElements(), this.renderAnchorElements());
  }
  renderEffectiveSegmentElements() {
    if (!this.trackElement || !this.values || !this.values.length)
      return;
    const e5 = r(this.effectiveMax), t4 = r(this.effectiveMin);
    if (!e5 && !t4)
      return;
    const { max: i4, min: n6, viewModel: o3 } = this, a4 = o3.getBounds(), r2 = [];
    return t4 && r2.push(this.renderEffectiveSegmentElement(n6, a4.min, true)), e5 && r2.push(this.renderEffectiveSegmentElement(a4.max, i4, false)), r2;
  }
  renderSegmentElements() {
    if (!this.trackElement || !this.values || !this.values.length)
      return;
    const e5 = this.values.length, t4 = [];
    for (let i4 = 0; i4 <= e5; i4++)
      t4.push(this.renderSegmentElement(i4));
    return t4;
  }
  renderSegmentElement(e5) {
    const { _trackHeight: t4, _trackWidth: i4, draggableSegmentsEnabled: n6, id: o3, state: a4, values: r2 } = this, l4 = this._isHorizontalLayout(), h2 = l4 ? i4 : t4, c2 = this.viewModel.getBounds(), d2 = this._positionFromValue(c2.max), m = this._positionFromValue(c2.min), _4 = e5 === r2.length ? null : e5, v3 = 0 === e5 ? null : e5 - 1, g3 = r(_4), f2 = r(v3);
    let b4, E2;
    const x = [...r2].sort((e6, t5) => e6 - t5);
    this._isReversedLayout() ? (b4 = f2 ? this._positionFromValue(x[v3]) : m, E2 = g3 ? this._positionFromValue(x[_4]) : d2) : (b4 = g3 ? this._positionFromValue(x[_4]) : d2, E2 = f2 ? this._positionFromValue(x[v3]) : m);
    const y2 = this._applyPrecisionToPosition(100 * E2 / h2), k = (b4 - E2) / h2, I2 = l4 ? `transform: translate(${y2}%, 0px) scale(${k}, 1);` : `transform: translate(0px, ${y2}%) scale(1, ${k});`, P = this.classes(p.segmentElement, p.segmentElementIndexPrefix + e5, n6 && g3 && f2 && "disabled" !== a4 ? p.segmentElementInteractive : null);
    return n2("div", { afterCreate: this._afterSegmentCreate, afterRemoved: this._afterSegmentRemoved, bind: this, class: P, "data-max-thumb-index": _4, "data-min-thumb-index": v3, "data-segment-index": e5, key: `${o3}-segment-${e5}`, style: I2, "touch-action": "none" });
  }
  renderEffectiveSegmentElement(e5, t4, i4) {
    const { _trackHeight: n6, _trackWidth: s5, layout: o3 } = this, a4 = this._positionFromValue(e5), r2 = this._positionFromValue(t4), l4 = this._isHorizontalLayout(), h2 = l4 ? s5 : n6, c2 = this._applyPrecisionToPosition(100 * a4 / h2);
    let d2 = null;
    if ("horizontal" === o3) {
      const e6 = i4 ? h2 - r2 : r2, t5 = a4 === h2 ? 0 : c2;
      d2 = `clip-path: inset(0% ${r2 === h2 ? 0 : this._applyPrecisionToPosition(e6 / h2 * 100)}% 0% ${t5}%);`;
    } else {
      const e6 = (r2 - a4) / h2;
      d2 = l4 ? `transform: translate(${c2}%, 0px) scale(${e6}, 1);` : `transform: translate(0px, ${c2}%) scale(1, ${e6});`;
    }
    const m = i4 ? p.effectiveMinSegmentElement : p.effectiveMaxSegmentElement, _4 = this.classes(p.segmentElement, p.effectiveSegmentElement, m);
    return n2("div", { afterCreate: this._afterEffectiveSegmentCreate, afterRemoved: this._afterEffectiveSegmentRemoved, bind: this, class: _4, style: d2, "touch-action": "none" });
  }
  renderAnchorElements() {
    const { trackElement: e5, values: t4 } = this;
    if (t4 && t4.length)
      return this._zIndices = t4.map((e6, i4) => {
        const n6 = this._positionFromValue(e6), s5 = this._positionToPercent(n6), o3 = (this._isHorizontalLayout() ? s5 > 50 : s5 < 50) ? -1 : 1;
        return this._zIndexOffset + (t4.length + o3 * i4);
      }), e5 && t4 && t4.length ? t4.map((e6, t5) => this.renderAnchorElement(e6, t5)) : null;
  }
  renderAnchorElement(e5, t4) {
    const i4 = this._positionFromValue(e5), s5 = this._valueFromPosition(i4);
    if (t(s5) || isNaN(s5))
      return;
    const { _dragStartInfo: o3, _lastMovedHandleIndex: a4, id: r2, layout: l4, values: h2, visibleElements: { labels: c2 } } = this, d2 = o3 && o3.index === t4, _4 = a4 === t4, v3 = this.classes(p.anchorElement, p.anchorElementIndexPrefix + t4, d2 ? p.movingAnchorElement : null, _4 ? p.lastMovedAnchorElement : null), g3 = this.labels.values[t4], f2 = this._getStyleForAnchor(e5, t4, d2 || _4), { min: b4, max: E2 } = this.viewModel.getBoundsForValueAtIndex(t4), { disabled: x, messages: y2 } = this, k = 2 === h2.length ? s3(0 === t4 ? y2.rangeMinimum : y2.rangeMaximum, { value: e5 }) : g3, I2 = 1 === h2.length ? null : 0 === t4 ? `${r2}-handle-${t4 + 1}` : t4 === h2.length - 1 ? `${r2}-handle-${t4 - 1}` : `${r2}-handle-${t4 - 1} ${r2}-handle-${t4 + 1}`;
    return n2("div", { afterCreate: this._afterAnchorCreate, afterUpdate: this._afterAnchorUpdate, afterRemoved: this._afterAnchorRemoved, "aria-controls": I2, "aria-label": y2.sliderValue, "aria-labelledby": c2 ? `${r2}-label-${t4}` : null, "aria-orientation": l4, "aria-valuemax": E2.toString(), "aria-valuemin": b4.toString(), "aria-valuenow": e5.toString(), "aria-valuetext": k, bind: this, class: v3, "data-thumb-index": t4, "data-value": e5, id: `${r2}-handle-${t4}`, key: `${r2}-handle-${t4}`, onkeydown: this._onAnchorKeyDown, "touch-action": "none", role: "slider", style: f2, tabIndex: x ? -1 : 0 }, n2("span", { afterCreate: this._afterThumbCreate, afterRemoved: this._afterThumbRemoved, bind: this, class: p.thumbElement, "data-thumb-index": t4, "touch-action": "none" }), this.renderThumbLabel(t4));
  }
  renderThumbLabel(e5) {
    const { id: t4, labels: i4, labelInputsEnabled: n6, state: s5 } = this, o3 = this.visibleElements.labels, a4 = i4.values[e5], r2 = this.classes(p.labelElement, o3 ? null : p.hidden, n6 && "disabled" !== s5 ? p.labelElementInteractive : null);
    return n2("span", { afterCreate: this._afterLabelCreate, afterRemoved: this._afterLabelRemoved, "aria-hidden": (!o3).toString(), bind: this, class: r2, "data-thumb-index": e5, key: `${t4}-label-${e5}`, id: `${t4}-label-${e5}`, role: n6 ? "button" : null, "touch-action": "none" }, this._activeLabelInputIndex === e5 ? this.renderValueInput(e5) : a4);
  }
  renderValueInput(e5) {
    const { disabled: t4, values: i4 } = this, n6 = i4[e5];
    return n2("input", { key: `value-input-${e5}`, afterCreate: this._afterInputCreate, "aria-label": this.messages.sliderValue, bind: this, class: p.labelInput, "data-input-type": "thumb", "data-input-index": e5, required: true, tabIndex: t4 ? -1 : 0, type: "text", value: this._formatInputValue(n6, "value", e5), onblur: this._onLabelInputBlur, onkeydown: this._onInputKeyDown });
  }
  renderMax() {
    const { _isMaxInputActive: e5, labels: t4, rangeLabelInputsEnabled: i4, state: n6 } = this, s5 = this.visibleElements.rangeLabels, o3 = this.classes(p.maxElement, { [p.hidden]: !s5, [p.maxElementInteractive]: i4 && "disabled" !== n6, [p.rangeElementActive]: e5 });
    return n2("div", { "aria-hidden": (!s5).toString(), afterCreate: this._afterMaxLabelCreate, bind: this, class: o3, onclick: this._onMaxLabelClick, onkeydown: this._onMaxLabelKeyDown, role: i4 ? "button" : null, tabIndex: !this.disabled && i4 ? 0 : -1 }, e5 ? this.renderMaxInput() : t4.max);
  }
  renderMin() {
    const { _isMinInputActive: e5, labels: t4, rangeLabelInputsEnabled: i4, state: n6 } = this, s5 = this.visibleElements.rangeLabels, o3 = this.classes(p.minElement, { [p.hidden]: !s5, [p.minElementInteractive]: i4 && "disabled" !== n6, [p.rangeElementActive]: e5 });
    return n2("div", { "aria-hidden": (!s5).toString(), afterCreate: this._afterMinLabelCreate, bind: this, class: o3, onclick: this._onMinLabelClick, onkeydown: this._onMinLabelKeyDown, role: i4 ? "button" : null, tabIndex: !this.disabled && i4 ? 0 : -1 }, e5 ? this.renderMinInput() : t4.min);
  }
  renderMaxInput() {
    return n2("input", { afterCreate: this._afterInputCreate, "aria-label": this.messages.maximumValue, bind: this, class: p.rangeInput, "data-input-type": "max", required: true, tabIndex: this.disabled ? -1 : 0, type: "text", value: this._formatInputValue(this.max, "max"), onblur: this._onMaxInputBlur, onkeydown: this._onInputKeyDown });
  }
  renderMinInput() {
    return n2("input", { afterCreate: this._afterInputCreate, "aria-label": this.messages.minimumValue, bind: this, class: p.rangeInput, "data-input-type": "min", required: true, tabIndex: this.disabled ? -1 : 0, type: "text", value: this._formatInputValue(this.min, "min"), onblur: this._onMinInputBlur, onkeydown: this._onInputKeyDown });
  }
  renderExtraContentElements() {
    return n2("div", { bind: this, class: p.extraContentElement }, this.extraNodes);
  }
  renderTicksContainer() {
    if (this.tickConfigs && this.trackElement && (0 !== this._trackHeight || 0 !== this._trackWidth))
      return this.tickConfigs.map((e5, t4) => n2("div", { key: "ticks-container", class: this.classes(p.ticksContainerElement) }, this.renderTicks(e5, t4)));
  }
  renderTicks(e5, i4) {
    const { mode: n6, values: s5 } = e5;
    if (this.tickElements.getItemAt(i4) || this.tickElements.add(new j3(), i4), "position" === n6) {
      const t4 = Array.isArray(s5) ? s5 : [s5];
      return this._calculateTickPositions(t4).map((t5, n7) => this.renderTickGroup(e5, n7, i4, t5));
    }
    if ("percent" === n6 && Array.isArray(s5)) {
      const { max: t4, min: n7 } = this, o4 = t4 - n7, a5 = s5.map((e6) => this._applyPrecisionToPosition(e6 / 100 * o4 + n7));
      return this._calculateTickPositions(a5).map((t5, n8) => this.renderTickGroup(e5, n8, i4, t5));
    }
    const o3 = Array.isArray(s5) && s5.length ? s5[0] : isNaN(s5) ? null : s5, a4 = this._getTickCounts(o3, e5);
    return this._calculateEquidistantTickPositions(a4).map((t4, n7) => this.renderTickGroup(e5, n7, i4, t4));
  }
  renderTickGroup(e5, t4, i4, s5) {
    const o3 = "position" === e5.mode ? Array.isArray(e5.values) ? e5.values[t4] : e5.values : this._valueFromPosition(s5);
    if (!t(o3) && !isNaN(o3))
      return n2("div", { afterCreate: this._afterTickGroupCreate, afterRemoved: this._afterTickGroupRemoved, bind: this, "data-config": e5, "data-position": s5, "data-tick-config-index": i4, "data-tick-group-index": t4, "data-value": o3, onclick: this._onTickGroupClick, key: `tick-group-${t4}` }, this.renderTickLine(e5, t4, i4, o3), e5.labelsVisible ? this.renderTickLabel(e5, t4, i4, o3) : null);
  }
  renderTickLine(e5, t4, i4, n6) {
    return n2("div", { afterCreate: this._afterTickLineCreate, "aria-valuenow": n6.toString(), bind: this, class: p.tickElement, "data-config": e5, "data-tick-config-index": i4, "data-tick-group-index": t4, "data-value": n6, key: `tick-label-${t4}`, style: this._getPositionStyleForElement(n6) });
  }
  renderTickLabel(e5, t4, i4, n6) {
    const s5 = e5.labelFormatFunction ? e5.labelFormatFunction(n6, "tick", t4) : this.viewModel.getLabelForValue(n6, "tick", t4);
    return n2("div", { afterCreate: this._afterTickLabelCreate, "aria-label": s5, "aria-valuenow": n6.toString(), "aria-valuetext": s5, bind: this, class: p.tickLabelElement, "data-config": e5, "data-tick-config-index": i4, "data-tick-group-index": t4, "data-value": n6, key: `tick-label-${t4}`, style: `transform: translate(-50%); ${this._getPositionStyleForElement(n6)}` }, s5);
  }
  _afterContainerCreate(e5) {
    this.addHandles(g(e5, () => this.scheduleRender()));
  }
  _afterTrackCreate(e5) {
    this._set("trackElement", e5), e5.addEventListener("pointerdown", this._onTrackPointerDown), this.scheduleRender();
  }
  _afterTrackRemoved(e5) {
    e5.removeEventListener("pointerdown", this._onTrackPointerDown), document.removeEventListener("pointermove", this._onTrackPointerMove), document.removeEventListener("pointerup", this._onTrackPointerUp);
  }
  _afterSegmentCreate(e5) {
    this.segmentElements.add(e5), e5.addEventListener("pointerdown", this._onSegmentPointerDown);
  }
  _afterSegmentRemoved(e5) {
    this.segmentElements.remove(e5), e5.removeEventListener("pointerdown", this._onSegmentPointerDown);
  }
  _afterEffectiveSegmentCreate(e5) {
    this.effectiveSegmentElements.add(e5);
  }
  _afterEffectiveSegmentRemoved(e5) {
    this.effectiveSegmentElements.remove(e5);
  }
  _afterAnchorCreate(e5) {
    if (this._anchorElements.push(e5), e5.addEventListener("pointerdown", this._onAnchorPointerDown), this.thumbCreatedFunction) {
      const t4 = e5["data-thumb-index"], i4 = e5["data-value"], n6 = this.thumbElements.getItemAt(t4) || null, s5 = this.labelElements.getItemAt(t4) || null;
      this.thumbCreatedFunction(t4, i4, n6, s5);
    }
  }
  _afterAnchorUpdate(e5) {
    if (r(this._focusedAnchorIndex)) {
      e5["data-thumb-index"] === this._focusedAnchorIndex && (e5.focus(), this._focusedAnchorIndex = null);
    }
  }
  _afterAnchorRemoved(e5) {
    const t4 = this._anchorElements.indexOf(e5, 0);
    t4 > -1 && this._anchorElements.splice(t4, 1), e5.removeEventListener("pointerdown", this._onAnchorPointerDown);
  }
  _afterThumbCreate(e5) {
    this.thumbElements.add(e5);
  }
  _afterThumbRemoved(e5) {
    this.thumbElements.remove(e5);
  }
  _afterLabelCreate(e5) {
    this.labelElements.add(e5), e5.addEventListener("pointerdown", this._onLabelPointerDown), e5.addEventListener("pointerup", this._onLabelPointerUp);
  }
  _afterLabelRemoved(e5) {
    this.labelElements.remove(e5), e5.removeEventListener("pointerdown", this._onLabelPointerDown), e5.removeEventListener("pointerup", this._onLabelPointerUp);
  }
  _afterInputCreate(e5) {
    if (e5.focus(), e5.select(), this.inputCreatedFunction) {
      const t4 = e5.getAttribute("data-input-type"), i4 = "thumb" === t4 ? e5["data-input-index"] : null;
      this.inputCreatedFunction(e5, t4, i4);
    }
  }
  _afterTickLineCreate(e5) {
    const t4 = e5["data-tick-config-index"], i4 = e5["data-tick-group-index"], n6 = this.tickElements.getItemAt(t4);
    n6.getItemAt(i4) ? n6.getItemAt(i4).tickElement = e5 : n6.add({ groupElement: null, tickElement: e5, labelElement: null }, i4);
  }
  _afterTickLabelCreate(e5) {
    const t4 = e5["data-tick-config-index"], i4 = e5["data-tick-group-index"], n6 = this.tickElements.getItemAt(t4);
    n6.getItemAt(i4) ? n6.getItemAt(i4).labelElement = e5 : n6.add({ groupElement: null, labelElement: e5, tickElement: null }, i4);
  }
  _afterTickGroupRemoved(e5) {
    const t4 = e5["data-tick-config-index"], i4 = this.tickElements.items[t4], n6 = i4 == null ? void 0 : i4.find((t5) => t5.groupElement === e5);
    n6 && i4.remove(n6);
  }
  _afterTickGroupCreate(e5) {
    var _a, _b;
    const t4 = e5["data-config"];
    if (t4 && t4.tickCreatedFunction) {
      const i4 = e5["data-tick-config-index"], n6 = e5["data-tick-group-index"], s5 = e5["data-value"], o3 = (_b = (_a = this.tickElements) == null ? void 0 : _a.getItemAt(i4)) == null ? void 0 : _b.getItemAt(n6);
      if (o3) {
        o3.groupElement = e5;
        const i5 = o3.tickElement || null, n7 = o3.labelElement || null;
        t4.tickCreatedFunction(s5, i5, n7);
      }
    }
  }
  _afterMaxLabelCreate(e5) {
    this._set("maxLabelElement", e5);
  }
  _afterMinLabelCreate(e5) {
    this._set("minLabelElement", e5);
  }
  _onAnchorKeyDown(e5) {
    if (this._isDisabled() || "editing" === this.state)
      return;
    const { target: t4 } = e5, n6 = i2(e5), { _anchorElements: o3, values: a4 } = this, r2 = t4["data-thumb-index"], l4 = o3[r2], h2 = a4[r2], c2 = [v2.moveAnchorUp, v2.moveAnchorDown, v2.moveAnchorLeft, v2.moveAnchorRight];
    if (n6 === v2.showInput && this.labelInputsEnabled)
      this._activeLabelInputIndex = r2, this.notifyChange("state");
    else if (c2.includes(n6)) {
      e5.preventDefault();
      const { steps: t5 } = this, i4 = n6 === v2.moveAnchorUp || n6 === v2.moveAnchorRight ? 1 : -1;
      if (r(t5))
        this._toStep(r2, this._isReversedLayout() ? -1 * i4 : i4);
      else {
        const { precision: e6 } = this, t6 = this._getPositionOfElement(l4), n7 = this._valueFromPosition(t6), s5 = this._isHorizontalLayout() ? i4 : -1 * i4;
        let o5;
        o5 = 0 === e6 ? this._positionFromValue(n7 + s5) : 1 === e6 ? this._positionFromValue(n7 + 0.1 * s5) : t6 + s5, this._toPosition(r2, o5);
      }
      const o4 = this.values[r2];
      h2 !== o4 && this._emitThumbChangeEvent({ index: r2, oldValue: h2, value: o4 });
    } else if (n6 === v2.moveAnchorToMax || n6 === v2.moveAnchorToMin) {
      e5.preventDefault();
      const { min: t5, max: i4 } = this._getAnchorBoundsInPixels(r2), s5 = this._isPositionInverted() ? n6 === v2.moveAnchorToMax ? t5 : i4 : n6 === v2.moveAnchorToMin ? t5 : i4;
      this._toPosition(r2, s5);
      const o4 = this.values[r2];
      h2 !== o4 && this._emitThumbChangeEvent({ index: r2, oldValue: h2, value: o4 });
    }
  }
  _onAnchorPointerDown(e5) {
    if (this._isDisabled())
      return;
    const { target: t4, clientX: i4, clientY: n6 } = e5, s5 = t4["data-thumb-index"];
    void 0 !== s5 && (e5.preventDefault(), this._anchorElements[s5] && this._anchorElements[s5].focus(), this._storeTrackDimensions(), this._dragStartInfo = { clientX: i4, clientY: n6, index: s5, position: this._getPositionOfElement(this._anchorElements[s5]) }, this.notifyChange("state"), document.addEventListener("pointerup", this._onAnchorPointerUp), document.addEventListener("pointermove", this._onAnchorPointerMove));
  }
  _onAnchorPointerMove(e5) {
    if ("editing" === this.state || !this._dragStartInfo)
      return;
    e5.preventDefault();
    const { values: t4, _anchorElements: i4, _dragged: n6, _dragStartInfo: s5, _dragStartInfo: { index: o3, position: a4 } } = this, { clientX: r2, clientY: l4 } = e5, h2 = n6 ? "drag" : "start", c2 = i4[o3], d2 = this._getPositionOfElement(c2), u = this._applyPrecisionToPosition(this._isHorizontalLayout() ? a4 + r2 - s5.clientX : a4 + l4 - s5.clientY);
    if (d2 === u)
      return;
    const m = t4[o3];
    this._dragged = true, this._toPosition(o3, u);
    const _4 = this.values[o3];
    n6 ? m !== _4 && this._emitThumbDragEvent({ index: o3, state: h2, value: _4 }) : this._emitThumbDragEvent({ index: o3, state: h2, value: m });
  }
  _onAnchorPointerUp(e5) {
    if (document.removeEventListener("pointerup", this._onAnchorPointerUp), document.removeEventListener("pointermove", this._onAnchorPointerMove), !this._dragStartInfo)
      return;
    e5.preventDefault();
    const { index: t4 } = this._dragStartInfo, i4 = this._dragged, n6 = this.values[t4];
    this._dragged = false, this._dragStartInfo = null, this._lastMovedHandleIndex = t4, this.notifyChange("state"), i4 ? this._emitThumbDragEvent({ index: t4, state: "stop", value: n6 }) : (this.scheduleRender(), "editing" !== this.state && this._emitThumbClickEvent({ index: t4, value: n6 }));
  }
  _onTrackPointerDown(e5) {
    const { _dragStartInfo: t4, snapOnClickEnabled: i4, state: o3, values: a4 } = this;
    if (this._isDisabled() || "editing" === o3 || t4)
      return;
    if (document.addEventListener("pointermove", this._onTrackPointerMove), document.addEventListener("pointerup", this._onTrackPointerUp), !i4 || !a4.length)
      return;
    const { steps: r2 } = this, { clientX: l4, clientY: h2 } = e5, c2 = this._getCursorPositionFromEvent(e5), d2 = this._valueFromPosition(c2), u = this._getIndexOfNearestValue(d2), m = a4[u], _4 = a4.some((e6, t5) => e6 === m && t5 !== u) && d2 > m ? this.values.lastIndexOf(m) : u;
    if (t(_4))
      return;
    const p2 = a4[_4], v3 = r(r2) ? this._calculateNearestStepPosition(c2) : c2;
    this._toPosition(_4, v3), this._dragged = true, this._dragStartInfo = { clientX: l4, clientY: h2, index: _4, position: v3 }, this._focusedAnchorIndex = _4, this.notifyChange("state"), this._emitThumbDragEvent({ index: _4, state: "start", value: p2 });
    const g3 = this.values[_4];
    p2 !== g3 && this._emitThumbDragEvent({ index: _4, state: "drag", value: g3 }), document.addEventListener("pointerup", this._onAnchorPointerUp), document.addEventListener("pointermove", this._onAnchorPointerMove);
  }
  _onTrackPointerMove(e5) {
    e5.preventDefault(), this._dragged = true;
  }
  _onTrackPointerUp(e5) {
    if (e5.preventDefault(), document.removeEventListener("pointermove", this._onTrackPointerMove), document.removeEventListener("pointerup", this._onTrackPointerUp), this.snapOnClickEnabled || (this._dragged = false), !this._dragged) {
      const t4 = this._getCursorPositionFromEvent(e5), i4 = this._valueFromPosition(t4);
      this._emitTrackClickEvent({ value: i4 });
    }
  }
  _onSegmentPointerDown(e5) {
    var _a, _b;
    e5.preventDefault();
    const t4 = e5.target, i4 = t4["data-segment-index"], s5 = t4["data-min-thumb-index"], o3 = t4["data-max-thumb-index"];
    if (this._isDisabled() || t(s5) || t(o3))
      return;
    e5.stopPropagation(), this._storeTrackDimensions(), document.addEventListener("pointerup", this._onSegmentPointerUp);
    const a4 = this._getAnchorDetails(s5), r2 = this._getAnchorDetails(o3);
    this.syncedSegmentsEnabled ? (this.segmentElements.forEach((e6) => e6.classList.add(p.segmentElementActive)), this._anchorElements.forEach((e6) => e6.classList.add(p.anchorElementActive))) : (this.segmentElements.getItemAt(i4).classList.add(p.segmentElementActive), (_a = this._anchorElements[a4.index]) == null ? void 0 : _a.classList.add(p.anchorElementActive), (_b = this._anchorElements[r2.index]) == null ? void 0 : _b.classList.add(p.anchorElementActive)), this._segmentDragStartInfo = { cursorPosition: this._getCursorPositionFromEvent(e5), index: i4, details: this._normalizeSegmentDetails({ min: a4, max: r2 }) }, this.draggableSegmentsEnabled && (document.addEventListener("pointermove", this._onSegmentPointerMove), this.notifyChange("state"), this._emitSegmentDragEvent({ index: i4, state: "start", thumbIndices: [s5, o3] }));
  }
  _onSegmentPointerMove(e5) {
    if (!this._segmentDragStartInfo)
      return;
    e5.preventDefault();
    const { _trackHeight: t4, _trackWidth: i4, _segmentDragStartInfo: { index: n6, cursorPosition: s5, details: { min: o3, max: a4 } } } = this, { index: r2, position: l4, value: h2 } = o3, { index: c2, position: d2, value: u } = a4;
    this._dragged = true;
    const m = this._getCursorPositionFromEvent(e5);
    if (m === s5)
      return;
    const _4 = this._positionToPercent(s5), p2 = this._positionToPercent(m) - _4, v3 = this._positionToPercent(l4) + p2, g3 = this._positionToPercent(d2) + p2, { min: f2 } = this._getAnchorBoundsAsPercents(r2), { max: b4 } = this._getAnchorBoundsAsPercents(c2);
    let E2 = false, x = false;
    if (v3 < f2 ? E2 = true : g3 > b4 && (x = true), E2) {
      const { min: e6, max: t5 } = this.viewModel.getBoundsForValueAtIndex(r2), i5 = this._isPositionInverted() ? t5 : e6, n7 = i5, s6 = u + (i5 - h2), o4 = s6 - this.values[c2];
      return void (this.syncedSegmentsEnabled ? this._updateAnchorValuesByDifference(o4) : this._updateAnchorValues([r2, c2], [n7, s6]));
    }
    if (x) {
      const { min: e6, max: t5 } = this.viewModel.getBoundsForValueAtIndex(c2), i5 = this._isPositionInverted() ? e6 : t5, n7 = i5, s6 = h2 + (i5 - u), o4 = s6 - this.values[r2];
      return void (this.syncedSegmentsEnabled ? this._updateAnchorValuesByDifference(o4) : this._updateAnchorValues([r2, c2], [s6, n7]));
    }
    const y2 = this._isHorizontalLayout() ? i4 : t4, k = g3 / 100 * y2, I2 = v3 / 100 * y2, P = this.values, A2 = [P[r2], P[c2]], L2 = this._getValueForAnchorAtPosition(r2, I2), M2 = this._getValueForAnchorAtPosition(c2, k);
    this.syncedSegmentsEnabled ? this._updateAnchorValuesByDifference(L2 - A2[0]) : this._updateAnchorValues([r2, c2], [L2, M2]);
    [this.values[r2], this.values[c2]].every((e6, t5) => e6 === A2[t5]) || this._emitSegmentDragEvent({ index: n6, state: "drag", thumbIndices: [r2, c2] });
  }
  _onSegmentPointerUp(e5) {
    if (e5.preventDefault(), document.removeEventListener("pointerup", this._onSegmentPointerUp), document.removeEventListener("pointermove", this._onSegmentPointerMove), !this._segmentDragStartInfo)
      return;
    const { _dragged: t4, max: i4, min: n6, values: s5 } = this, { index: o3, details: { min: { index: a4 }, max: { index: r2 } } } = this._segmentDragStartInfo;
    if (this.segmentElements.forEach((e6) => e6.classList.remove(p.segmentElementActive)), this._anchorElements.forEach((e6) => e6.classList.remove(p.anchorElementActive)), this.draggableSegmentsEnabled) {
      const e6 = i4 - n6, t5 = s5[a4], l4 = s5[r2];
      this._lastMovedHandleIndex = t5 === l4 ? t5 > e6 / 2 ? a4 : r2 : null, this._dragged = false, this._segmentDragStartInfo = null, this.notifyChange("state"), this._emitSegmentDragEvent({ index: o3, state: "stop", thumbIndices: [a4, r2] });
    }
    if (!t4) {
      const t5 = this._getCursorPositionFromEvent(e5), i5 = this._valueFromPosition(t5);
      this._emitSegmentClickEvent({ index: o3, value: i5, thumbIndices: [a4, r2] });
    }
  }
  _onTickGroupClick(e5) {
    const t4 = e5.target;
    if (t4["data-config"]) {
      const e6 = t4["data-tick-config-index"], i4 = t4["data-tick-group-index"], n6 = t4["data-value"];
      this._emitTickClickEvent({ configIndex: e6, groupIndex: i4, value: n6 });
    }
  }
  _storeTrackDimensions() {
    if (this.trackElement) {
      const e5 = this._getDimensions(this.trackElement);
      this._trackHeight = e5.height, this._trackWidth = e5.width;
    }
  }
  _onLabelPointerDown() {
    this._isDisabled() || (this._dragged = false, document.addEventListener("pointerup", this._onAnchorPointerUp), document.addEventListener("pointermove", this._onAnchorPointerMove));
  }
  _onLabelPointerMove() {
    this._isDisabled() || (this._dragged = true);
  }
  _onLabelPointerUp(e5) {
    if (this._isDisabled())
      return;
    const t4 = e5.target["data-thumb-index"];
    this.labelInputsEnabled && !this._dragged && r(t4) && (this._activeLabelInputIndex = t4), this._dragged = false, this.notifyChange("state"), document.removeEventListener("pointerup", this._onLabelPointerUp), document.removeEventListener("pointermove", this._onLabelPointerMove);
  }
  _onLabelInputBlur(e5) {
    const { _activeLabelInputIndex: t4, values: i4, viewModel: n6 } = this, s5 = e5.target.value;
    if (this._activeLabelInputIndex = null, this.notifyChange("state"), !s5)
      return;
    const o3 = this._parseInputValue(s5, "value", t4), a4 = i4[t4], { min: r2, max: l4 } = this.viewModel.getBoundsForValueAtIndex(t4);
    if (o3 < r2 || o3 > l4)
      return;
    n6.setValue(t4, o3);
    const h2 = this.values[t4];
    a4 !== h2 && this._emitThumbChangeEvent({ index: t4, oldValue: a4, value: h2 });
  }
  _onInputKeyDown(e5) {
    if (this._isDisabled())
      return;
    const { target: t4 } = e5, n6 = i2(e5), { hideInput1: o3, hideInput2: a4, hideInput3: r2 } = v2, { _activeLabelInputIndex: l4, _anchorElements: h2 } = this, c2 = t4;
    if (n6 === o3 || n6 === a4 || n6 === r2) {
      e5.stopPropagation();
      const t5 = l4;
      c2.blur(), r(t5) ? h2[t5].focus() : c2.parentElement.focus();
    }
  }
  _onMaxLabelClick() {
    this._isDisabled() || (this._emitRangeLabelClickEvent({ type: "max-click", value: this.max }), this.rangeLabelInputsEnabled && (this._isMaxInputActive = true, this.notifyChange("state")));
  }
  _onMaxLabelKeyDown(e5) {
    this._isDisabled() || i2(e5) !== v2.showInput || (this._isMaxInputActive = true, this.notifyChange("state"));
  }
  _onMaxInputBlur(e5) {
    const t4 = e5.target.value;
    if (this._isMaxInputActive = false, this.notifyChange("state"), !t4)
      return;
    const i4 = this.max, n6 = this._parseInputValue(t4, "max");
    n6 <= this.min || (this.viewModel.set("max", n6), this.max !== i4 && this._emitMaxChangeEvent({ oldValue: i4, value: this.max }));
  }
  _onMinLabelClick() {
    this._isDisabled() || (this._emitRangeLabelClickEvent({ type: "min-click", value: this.min }), this.rangeLabelInputsEnabled && (this._isMinInputActive = true, this.notifyChange("state")));
  }
  _onMinLabelKeyDown(e5) {
    this._isDisabled() || i2(e5) !== v2.showInput || (this._isMinInputActive = true, this.notifyChange("state"));
  }
  _onMinInputBlur(e5) {
    const t4 = e5.target.value;
    if (this._isMinInputActive = false, this.notifyChange("state"), !t4)
      return;
    const i4 = this.min, n6 = this._parseInputValue(t4, "min");
    n6 >= this.max || (this.viewModel.set("min", n6), this.min !== i4 && this._emitMinChangeEvent({ oldValue: i4, value: this.min }));
  }
  _isDisabled() {
    return this.disabled || "disabled" === this.state;
  }
  _positionFromValue(e5) {
    const { max: t4, min: i4 } = this, n6 = t4 - i4;
    if (0 === n6)
      return 0;
    const { _trackHeight: s5, _trackWidth: o3 } = this, a4 = this._isHorizontalLayout();
    let r2 = a4 ? parseFloat((o3 * (e5 - i4) / n6).toFixed(2)) : parseFloat((s5 * (t4 - e5) / n6).toFixed(2));
    return this._isReversedLayout() && (r2 = a4 ? o3 - r2 : s5 - r2), r2;
  }
  _valueFromPosition(e5) {
    const { _trackHeight: t4, _trackWidth: i4, max: n6, min: s5, precision: o3 } = this, a4 = n6 - s5;
    let r2 = this._isHorizontalLayout() ? e5 * a4 / i4 + s5 : a4 * (1e3 - e5 / t4 * 1e3) / 1e3 + s5;
    return this._isReversedLayout() && (r2 = n6 + s5 - r2), parseFloat(r2.toFixed(o3));
  }
  _positionToPercent(e5) {
    const { _trackHeight: t4, _trackWidth: i4 } = this, n6 = 100 * e5 / (this._isHorizontalLayout() ? i4 : t4);
    return this._applyPrecisionToPosition(n6);
  }
  _applyPrecisionToPosition(e5) {
    return parseFloat(e5.toFixed(this._positionPrecision));
  }
  _isPositionInverted() {
    const { layout: e5 } = this;
    return "horizontal-reversed" === e5 || "vertical" === e5;
  }
  _isHorizontalLayout() {
    return this.layout.includes("horizontal");
  }
  _isReversedLayout() {
    return this.layout.includes("reversed");
  }
  _normalizeSegmentDetails(e5) {
    if (this._isPositionInverted()) {
      const { min: t4, max: i4 } = e5;
      return { min: i4, max: t4 };
    }
    return e5;
  }
  _parseInputValue(e5, t4, i4) {
    return this.inputParseFunction ? this.inputParseFunction(e5, t4, i4) : this.viewModel.defaultInputParseFunction(e5);
  }
  _formatInputValue(e5, t4, i4) {
    return this.inputFormatFunction ? this.inputFormatFunction(e5, t4, i4) : this.viewModel.defaultInputFormatFunction(e5);
  }
  _getAnchorDetails(e5) {
    const t4 = [...this.values].sort((e6, t5) => e6 - t5)[e5], i4 = this.values.indexOf(t4);
    return { index: i4, position: this._getPositionOfElement(this._anchorElements[i4]), value: t4 };
  }
  _updateAnchorStyle(e5, t4) {
    const i4 = this._anchorElements[e5];
    i4 && (this._isHorizontalLayout() ? i4.style.left = `${t4}` : i4.style.top = `${t4}`);
  }
  _getStyleForAnchor(e5, t4, i4) {
    const n6 = this._getPositionStyleForElement(e5);
    if (1 === this.values.length)
      return `${n6}`;
    const s5 = this._zIndices[t4];
    return `${n6}; z-index: ${i4 ? this._zIndexOffset + s5 : s5}`;
  }
  _getPositionStyleForElement(e5) {
    const t4 = this._positionFromValue(e5), i4 = this._positionToPercent(t4);
    return `${this._isHorizontalLayout() ? "left" : "top"}: ${i4 + "%"}`;
  }
  _getPositionOfElement(e5) {
    const t4 = this._getDimensions(e5.offsetParent), i4 = this._getDimensions(e5);
    return this._isHorizontalLayout() ? this._applyPrecisionToPosition(i4.left - t4.left) : this._applyPrecisionToPosition(i4.top - t4.top);
  }
  _updateAnchorValues(e5, t4) {
    e5.forEach((e6, i4) => this._toValue(e6, t4[i4]));
  }
  _updateAnchorValuesByDifference(e5) {
    const { min: t4, max: i4, values: n6 } = this;
    n6.forEach((n7, s5) => this._toValue(s5, Math.max(Math.min(n7 + e5, i4), t4)));
  }
  _toValue(e5, t4) {
    if (r(this.steps)) {
      t4 = this._getStepValues()[this._getIndexOfNearestStepValue(t4)];
    }
    this._updateAnchorStyle(e5, this._getPositionStyleForElement(t4)), this.viewModel.setValue(e5, t4);
  }
  _toPosition(e5, t4) {
    const i4 = r(this.steps) ? this._getStepValueForAnchorAtPosition(e5, t4) : this._getValueForAnchorAtPosition(e5, t4);
    this._updateAnchorStyle(e5, this._getPositionStyleForElement(i4)), this.viewModel.setValue(e5, i4);
  }
  _getValueForAnchorAtPosition(e5, t4) {
    const { min: i4, max: n6 } = this._getAnchorBoundsInPixels(e5), { min: s5, max: o3 } = this.viewModel.getBoundsForValueAtIndex(e5);
    let a4, r2, l4 = null;
    return this._isPositionInverted() ? (a4 = s5, r2 = o3) : (a4 = o3, r2 = s5), l4 = t4 > n6 ? a4 : t4 < i4 ? r2 : this._valueFromPosition(t4), l4 > o3 ? l4 = o3 : l4 < s5 && (l4 = s5), l4;
  }
  _getStepValueForAnchorAtPosition(e5, t4) {
    const i4 = this._getStepValues(), n6 = this._calculateNearestStepPosition(t4), s5 = this._getValueForAnchorAtPosition(e5, n6);
    return i4[this._getIndexOfNearestStepValue(s5)];
  }
  _getAnchorBoundsAsPercents(e5) {
    const { min: t4, max: i4 } = this._getAnchorBoundsInPixels(e5);
    return { min: this._positionToPercent(t4), max: this._positionToPercent(i4) };
  }
  _getAnchorBoundsInPixels(e5) {
    const { _anchorElements: t4, _trackHeight: i4, _trackWidth: n6, effectiveMax: o3, effectiveMin: a4, thumbsConstrained: r2 } = this, l4 = t4[e5 - 1], h2 = t4[e5 + 1], c2 = this._isHorizontalLayout() ? n6 : i4;
    let d2, u;
    return this._isPositionInverted() ? (d2 = r(a4) ? this._positionFromValue(a4) : c2, u = r(o3) ? this._positionFromValue(o3) : 0) : (d2 = r(o3) ? this._positionFromValue(o3) : c2, u = r(a4) ? this._positionFromValue(a4) : 0), r2 ? this._isPositionInverted() ? { max: l4 ? this._getPositionOfElement(l4) : d2, min: h2 ? this._getPositionOfElement(h2) : u } : { max: h2 ? this._getPositionOfElement(h2) : d2, min: l4 ? this._getPositionOfElement(l4) : u } : { max: d2, min: u };
  }
  _getIndexOfNearestValue(e5) {
    return this.values.indexOf(this.values.reduce((t4, i4) => Math.abs(i4 - e5) < Math.abs(t4 - e5) ? i4 : t4));
  }
  _getCursorPositionFromEvent(e5) {
    const t4 = this._getDimensions(this.trackElement);
    return this._isHorizontalLayout() ? e5.clientX - t4.left : e5.clientY - t4.top;
  }
  _getStepValues() {
    const { steps: e5 } = this;
    if (Array.isArray(e5))
      return e5;
    const { max: t4, min: i4 } = this, n6 = Math.ceil((t4 - i4) / e5), s5 = [];
    for (let o3 = 0; o3 <= n6; o3++) {
      const n7 = i4 + e5 * o3;
      s5.push(n7 > t4 ? t4 : n7);
    }
    return s5;
  }
  _toStep(e5, t4) {
    const { values: i4, viewModel: n6 } = this, s5 = i4[e5], o3 = this._getStepValues(), a4 = o3.indexOf(s5);
    let r2 = null;
    if (a4 > -1) {
      let i5 = o3[a4 + t4];
      isNaN(i5) && (i5 = o3[a4]);
      const n7 = this._positionFromValue(i5);
      r2 = this._getStepValueForAnchorAtPosition(e5, n7);
    } else {
      r2 = o3[this._getIndexOfNearestStepValue(s5) + t4];
    }
    n6.setValue(e5, r2);
  }
  _getIndexOfNearestStepValue(e5) {
    const { steps: t4 } = this;
    if (t(t4))
      return null;
    const i4 = this._getStepValues(), s5 = i4.reduce((t5, i5) => Math.abs(i5 - e5) < Math.abs(t5 - e5) ? i5 : t5);
    return i4.indexOf(s5);
  }
  _calculateNearestStepPosition(e5) {
    const t4 = this._valueFromPosition(e5), i4 = this._getIndexOfNearestStepValue(t4), n6 = this._getStepValues();
    return this._positionFromValue(n6[i4]);
  }
  _getTickCounts(e5, t4) {
    const { mode: i4 } = t4;
    return "count" === i4 || "position" === i4 ? e5 || 0 : "percent" === i4 && 100 / e5 || 0;
  }
  _calculateTickPositions(e5) {
    return e5.map((e6) => this._positionFromValue(e6));
  }
  _calculateEquidistantTickPositions(e5) {
    const { _trackWidth: t4, _trackHeight: i4 } = this, n6 = this._isHorizontalLayout() ? t4 : i4, s5 = n6 / (e5 - 1), o3 = [];
    if (1 === e5)
      return [n6 / 2];
    for (let a4 = 0; a4 < e5; a4++) {
      const e6 = a4 * s5;
      e6 <= n6 && o3.push(e6);
    }
    return o3;
  }
  _getDimensions(e5) {
    try {
      return e5.getBoundingClientRect();
    } catch (t4) {
      if ("object" == typeof t4 && null !== t4)
        return new DOMRect(0, 0, 0, 0);
      throw t4;
    }
  }
  _emitTrackClickEvent(e5) {
    this.emit("track-click", { ...e5, type: "track-click" });
  }
  _emitTickClickEvent(e5) {
    this.emit("tick-click", { ...e5, type: "tick-click" });
  }
  _emitMaxChangeEvent(e5) {
    this.emit("max-change", { ...e5, type: "max-change" });
  }
  _emitMinChangeEvent(e5) {
    this.emit("min-change", { ...e5, type: "min-change" });
  }
  _emitThumbChangeEvent(e5) {
    this.emit("thumb-change", { ...e5, type: "thumb-change" });
  }
  _emitThumbClickEvent(e5) {
    this.emit("thumb-click", { ...e5, type: "thumb-click" });
  }
  _emitThumbDragEvent(e5) {
    this.emit("thumb-drag", { ...e5, type: "thumb-drag" });
  }
  _emitSegmentClickEvent(e5) {
    this.emit("segment-click", { ...e5, type: "segment-click" });
  }
  _emitSegmentDragEvent(e5) {
    this.emit("segment-drag", { ...e5, type: "segment-drag" });
  }
  _emitRangeLabelClickEvent(e5) {
    this.emit(e5.type, { ...e5 });
  }
};
e2([y()], b2.prototype, "disabled", void 0), e2([y()], b2.prototype, "draggableSegmentsEnabled", void 0), e2([y()], b2.prototype, "effectiveMax", null), e2([y()], b2.prototype, "effectiveMin", null), e2([y({ readOnly: true })], b2.prototype, "effectiveSegmentElements", void 0), e2([y()], b2.prototype, "extraNodes", void 0), e2([y()], b2.prototype, "inputCreatedFunction", void 0), e2([y()], b2.prototype, "inputFormatFunction", null), e2([y()], b2.prototype, "inputParseFunction", null), e2([y()], b2.prototype, "label", null), e2([y({ readOnly: true })], b2.prototype, "labelElements", void 0), e2([y()], b2.prototype, "labelInputsEnabled", void 0), e2([y()], b2.prototype, "labelFormatFunction", null), e2([y({ readOnly: true })], b2.prototype, "labels", null), e2([y({ value: "horizontal" })], b2.prototype, "layout", null), e2([y()], b2.prototype, "max", null), e2([y({ readOnly: true })], b2.prototype, "maxLabelElement", void 0), e2([y(), e3("esri/widgets/Slider/t9n/Slider")], b2.prototype, "messages", void 0), e2([y()], b2.prototype, "min", null), e2([y({ readOnly: true })], b2.prototype, "minLabelElement", void 0), e2([y()], b2.prototype, "precision", null), e2([y()], b2.prototype, "rangeLabelInputsEnabled", void 0), e2([y({ readOnly: true })], b2.prototype, "segmentElements", void 0), e2([y()], b2.prototype, "snapOnClickEnabled", void 0), e2([y({ readOnly: true })], b2.prototype, "state", null), e2([y()], b2.prototype, "steps", void 0), e2([y()], b2.prototype, "syncedSegmentsEnabled", void 0), e2([y()], b2.prototype, "thumbsConstrained", null), e2([y()], b2.prototype, "thumbCreatedFunction", void 0), e2([y({ readOnly: true })], b2.prototype, "thumbElements", void 0), e2([y()], b2.prototype, "tickConfigs", null), e2([y({ readOnly: true })], b2.prototype, "tickElements", void 0), e2([y({ readOnly: true })], b2.prototype, "trackElement", void 0), e2([y()], b2.prototype, "values", null), e2([y()], b2.prototype, "viewModel", void 0), e2([y()], b2.prototype, "visibleElements", void 0), e2([s4("visibleElements")], b2.prototype, "castVisibleElements", null), b2 = e2([a(g2)], b2);
var E = b2;

// node_modules/@arcgis/core/widgets/TimeSlider/css.js
var t3 = "esri-time-slider";
var i3 = { widgetIcon: "esri-icon-time-clock", esriWidget: "esri-widget", esriWidgetButton: "esri-widget--button", esriButtonDisabled: "esri-button--disabled", esriDisabled: "esri-disabled", timeSlider: `${t3}`, timeSliderOutOfBounds: `${t3}--out-of-bounds`, timeSliderMode: `${t3}__mode--`, timeSliderLayout: `${t3}__layout--`, timeSliderRow: `${t3}__row`, animation: `${t3}__animation`, animationButton: `${t3}__animation-button`, animationPlay: "esri-icon-play", animationPause: "esri-icon-pause", timeExtent: `${t3}__time-extent`, timeExtentGroup: `${t3}__time-extent-group`, timeExtentDate: `${t3}__time-extent-date`, timeExtentTime: `${t3}__time-extent-time`, timeExtentSeparator: `${t3}__time-extent-separator`, playbackControls: `${t3}__playback-controls`, min: `${t3}__min`, minDate: `${t3}__min-date`, minTime: `${t3}__min-time`, slider: `${t3}__slider`, sliderMajorTick: "majorTick", sliderMinorTick: "minorTick", max: `${t3}__max`, maxDate: `${t3}__max-date`, maxTime: `${t3}__max-time`, previous: `${t3}__previous`, previousButton: `${t3}__previous-button`, previousIcon: "esri-icon-reverse", next: `${t3}__next`, nextButton: `${t3}__next-button`, nextIcon: "esri-icon-forward", warning: `${t3}__warning`, warningIcon: "esri-icon-notice-triangle", warningText: `${t3}__warning-text`, hasActions: `${t3}--has-actions`, actions: `${t3}__actions`, actionsButton: `${t3}__actions-button` };

// node_modules/@arcgis/core/widgets/TimeSlider/TimeSliderViewModel.js
var _2 = 1e4;
function b3(t4) {
  return r(t4) && void 0 !== t4.count;
}
function C(t4) {
  return r(t4) && void 0 !== t4.interval;
}
function S2(t4) {
  return r(t4) && void 0 !== t4.dates;
}
function j4(t4) {
  return "esri.WebMap" === t4.declaredClass;
}
var A = class extends a2(n.EventedAccessor) {
  constructor(t4) {
    super(t4), this._animationController = null, this._isViewTimeExtentInitialized = false, this._timerId = null, this.actions = new j3(), this.fullTimeExtent = null, this.loop = false, this.mode = "time-window", this.stops = { count: 10 }, this.timeExtent = null, this.view = null;
  }
  initialize() {
    this.handles.add([l(() => this.effectiveStops, () => {
      t(this.timeExtent) && (this.timeExtent = this._getDefaultTimeExtent());
    }, h), l(() => this.view, (t4, e5) => {
      this._unregisterWidget(e5), this._registerWidget(t4);
    }, w), l(() => this.timeExtent, (t4) => {
      if (t(this.view))
        return;
      const e5 = this.view.timeExtent;
      (t(t4) || t4.isAllTime) && (t(e5) || e5.isAllTime) || r(t4) && r(e5) && t4.equals(e5) || (this.view.timeExtent = e(t4));
    }, h), l(() => o(this.view, (t4) => t4.timeExtent), (t4) => {
      this._isViewTimeExtentInitialized ? (t(t4) || t4.isAllTime) && (t(this.timeExtent) || this.timeExtent.isAllTime) || r(t4) && r(this.timeExtent) && t4.equals(this.timeExtent) || (this.timeExtent = t4) : this._isViewTimeExtentInitialized = true;
    })]);
  }
  destroy() {
    r(this._timerId) && (clearInterval(this._timerId), this._timerId = null), this._unregisterWidget(this.view), this.view = null, r(this._animationController) && (this._animationController.abort(), this._animationController = null);
  }
  get effectiveStops() {
    const { fullTimeExtent: t4, stops: e5 } = this;
    if (S2(e5)) {
      const { dates: i4 } = e5;
      if (null == i4 || 0 === i4.length)
        return null;
      const n6 = i4.sort((t5, e6) => t5.getTime() - e6.getTime());
      if (t(t4))
        return n6;
      const { start: s5, end: r2 } = t4;
      if (t(s5) || t(r2))
        return n6;
      return n6.filter((t5) => !(t5.getTime() < s5.getTime() || t5.getTime() > r2.getTime()));
    }
    if (b3(e5)) {
      const i4 = e5.timeExtent ?? e(t4);
      return this._divideTimeExtentByCount(i4, e5.count);
    }
    if (C(e5)) {
      const i4 = e5.timeExtent ?? e(t4);
      return this._divideTimeExtentByInterval(i4, e5.interval);
    }
    return [];
  }
  set playRate(t4) {
    t4 <= 0 || t4 > 36e5 || ("playing" === this.state && this._startAnimation(), this._set("playRate", t4));
  }
  get state() {
    return t(this.fullTimeExtent) ? "disabled" : r(this._animationController) ? "playing" : "ready";
  }
  get timeExtentValues() {
    const { mode: t4, timeExtent: e5 } = this;
    if (t(e5) || e5.isAllTime || e5.isEmpty)
      return null;
    const { start: i4, end: n6 } = e5;
    switch (t4) {
      case "cumulative-from-end":
      case "instant":
        return r(i4) ? [i4.getTime()] : null;
      case "cumulative-from-start":
        return r(n6) ? [n6.getTime()] : null;
      case "time-window":
        return r(i4) && r(n6) ? [i4.getTime(), n6.getTime()] : null;
    }
  }
  static async getPropertiesFromWebMap(t4, e5) {
    var _a;
    if (t(t4) || !j4(t4))
      return null;
    await t4.load({ signal: e5 });
    const i4 = (_a = t4 == null ? void 0 : t4.widgets) == null ? void 0 : _a.timeSlider;
    if (!i4)
      return null;
    const { getFullTimeExtentFromWebDocument: n6, getModeFromTimeSlider: s5, getStopsFromTimeSlider: r2, getTimeExtentFromTimeSlider: o3 } = await import("./utils-77WR7H5I.js"), l4 = await n6(t4, e5), m = i4.loop, u = s5(i4);
    return { fullTimeExtent: l4, loop: m, mode: u, playRate: i4.stopDelay ?? 2e3, stops: r2(i4), timeExtent: o3(i4, u) };
  }
  next() {
    this._step({ forward: true, allowRestart: false });
  }
  play() {
    this._startAnimation();
  }
  previous() {
    this._step({ forward: false, allowRestart: false });
  }
  stop() {
    this._stopAnimation();
  }
  triggerAction(t4) {
    this.emit("trigger-action", { action: t4 });
  }
  updateWebDocument(t4) {
    if (j4(t4)) {
      const e5 = new d({ currentTimeExtent: this.timeExtent, fullTimeExtent: this.fullTimeExtent, loop: this.loop, numStops: b3(this.stops) ? this.stops.count : null, numThumbs: "time-window" === this.mode ? 2 : 1, stopDelay: this.playRate, stopInterval: C(this.stops) ? this.stops.interval : null, stops: S2(this.stops) ? this.stops.dates : null });
      t4.widgets ? t4.widgets.timeSlider = e5 : t4.widgets = new n5({ timeSlider: e5 });
    }
  }
  valuesToTimeExtent(t4) {
    if (t(t4))
      return null;
    const i4 = t4.sort((t5, e5) => t5 - e5).map((t5) => new Date(t5)), n6 = i4.length > 0 ? i4[0] : null, s5 = i4.length > 1 ? i4[1] : null;
    switch (this.mode) {
      case "time-window":
        return new T({ start: n6, end: s5 });
      case "instant":
        return new T({ start: n6, end: n6 });
      case "cumulative-from-start":
        return new T({ start: null, end: n6 });
      case "cumulative-from-end":
        return new T({ start: n6, end: null });
      default:
        return T.allTime;
    }
  }
  async _animate() {
    try {
      const t4 = this.view, e5 = o(this._animationController, (t5) => t5.signal);
      await Promise.all([U(this.playRate, null, e5), r(t4) && j2(() => false === t4.updating, e5)]);
    } catch (t4) {
      return j(t4) || s.getLogger(this.declaredClass).error(t4), void (this._animationController = null);
    }
    this._step({ forward: true, allowRestart: false }), t(this._animationController) || this._animate();
  }
  _divideTimeExtentByCount(t4, e5 = 10) {
    if (!t4 || !e5)
      return [];
    const { start: i4, end: n6 } = t4;
    if (t(i4) || t(n6))
      return [];
    if (e5 > _2)
      return this._divideTimeExtentByCount(t4);
    const s5 = [], r2 = i4.getTime(), o3 = n6.getTime() - r2;
    for (let l4 = 0; l4 <= e5; l4++)
      s5.push(new Date(r2 + l4 / e5 * o3));
    return s5;
  }
  _divideTimeExtentByInterval(t4, e5, i4 = _2) {
    if (!t4 || !e5)
      return [];
    const { start: n6, end: s5 } = t4;
    if (t(n6) || t(s5))
      return [];
    const r2 = s5.getTime() - n6.getTime(), o3 = e5.toMilliseconds();
    if (o3 <= 0 || r2 / o3 > i4)
      return this._divideTimeExtentByCount(t4);
    const l4 = [], { value: m, unit: u } = e5;
    let p2 = n6;
    for (; p2.getTime() <= s5.getTime(); )
      l4.push(new Date(p2.getTime())), p2 = n3(p2, m, u);
    return l4;
  }
  _getDefaultTimeExtent() {
    const { effectiveStops: t4, mode: i4 } = this;
    if (t(t4) || !i4)
      return null;
    switch (i4) {
      case "time-window":
        return t4.length > 1 ? new T({ start: t4[0], end: t4[1] }) : null;
      case "cumulative-from-start":
        return t4.length > 0 ? new T({ start: null, end: t4[0] }) : null;
      case "cumulative-from-end":
        return t4.length > 0 ? new T({ start: t4[0], end: null }) : null;
      case "instant":
        return t4.length > 0 ? new T({ start: t4[0], end: t4[0] }) : null;
      default:
        return null;
    }
  }
  _registerWidget(t4) {
    if (r(t4)) {
      t4.persistableViewModels.includes(this) || t4.persistableViewModels.add(this);
    }
  }
  _startAnimation() {
    this._stopAnimation(), this._animationController = new AbortController(), this._step({ forward: true, allowRestart: true }), this._animate();
  }
  _step(t4) {
    const { forward: e5, allowRestart: i4 } = t4, { effectiveStops: n6 } = this;
    if (t(this.timeExtentValues) || t(n6))
      return;
    const s5 = n6.map((t5) => t5.getTime()), r2 = this.timeExtentValues.map((t5) => {
      const e6 = s5.indexOf(t5);
      if (-1 !== e6)
        return e6;
      const i5 = s5.reduce((e7, i6) => Math.abs(i6 - t5) < Math.abs(e7 - t5) ? i6 : e7);
      return s5.indexOf(i5);
    }), o3 = r2.map((t5) => t5 + (e5 ? 1 : -1)), l4 = o3.some((t5) => t5 < 0 || t5 > s5.length - 1), { loop: m, state: u } = this;
    if (l4)
      if (m || i4) {
        const t5 = Math.min(...r2), i5 = Math.max(...r2), n7 = (e5 ? r2.map((e6) => e6 - t5) : r2.map((t6) => t6 + (s5.length - 1 - i5))).map((t6) => s5[t6]);
        this.timeExtent = this.valuesToTimeExtent(n7);
      } else
        "playing" === u && this.stop();
    else {
      const t5 = o3.map((t6) => s5[t6]);
      this.timeExtent = this.valuesToTimeExtent(t5);
    }
  }
  _stopAnimation() {
    r(this._animationController) && (this._animationController.abort(), this._animationController = null);
  }
  _unregisterWidget(t4) {
    r(t4) && t4.persistableViewModels.remove(this);
  }
};
e2([y()], A.prototype, "_animationController", void 0), e2([y({ type: j3 })], A.prototype, "actions", void 0), e2([y({ readOnly: true })], A.prototype, "effectiveStops", null), e2([y({ type: T })], A.prototype, "fullTimeExtent", void 0), e2([y({ nonNullable: true })], A.prototype, "loop", void 0), e2([y({ nonNullable: true })], A.prototype, "mode", void 0), e2([y({ nonNullable: true, value: 1e3 })], A.prototype, "playRate", null), e2([y({ readOnly: true })], A.prototype, "state", null), e2([y({ cast: (t4) => t(t4) ? null : (C(t4) && (t4.interval = b(a3, t4.interval)), (C(t4) || b3(t4)) && (t4.timeExtent = b(T, t4.timeExtent)), t4) })], A.prototype, "stops", void 0), e2([y({ type: T })], A.prototype, "timeExtent", void 0), e2([y({ readOnly: true })], A.prototype, "timeExtentValues", null), e2([y()], A.prototype, "view", void 0), e2([y()], A.prototype, "next", null), e2([y()], A.prototype, "play", null), e2([y()], A.prototype, "previous", null), e2([y()], A.prototype, "stop", null), e2([y()], A.prototype, "updateWebDocument", null), A = e2([a("esri.widgets.TimeSlider.TimeSliderViewModel")], A);
var I = A;

// node_modules/@arcgis/core/widgets/TimeSlider.js
var _3 = 3;
var M = 858;
var S3 = new j3([{ minor: new a3({ value: 100, unit: "milliseconds" }), major: new a3({ value: 1, unit: "seconds" }), format: { second: "numeric" } }, { minor: new a3({ value: 500, unit: "milliseconds" }), major: new a3({ value: 5, unit: "seconds" }), format: { second: "numeric" } }, { minor: new a3({ value: 1, unit: "seconds" }), major: new a3({ value: 20, unit: "seconds" }), format: { minute: "numeric", second: "numeric" } }, { minor: new a3({ value: 2, unit: "seconds" }), major: new a3({ value: 30, unit: "seconds" }), format: { minute: "numeric", second: "numeric" } }, { minor: new a3({ value: 10, unit: "seconds" }), major: new a3({ value: 1, unit: "minutes" }), format: { minute: "numeric" } }, { minor: new a3({ value: 15, unit: "seconds" }), major: new a3({ value: 5, unit: "minutes" }), format: { hour: "numeric", minute: "numeric" } }, { minor: new a3({ value: 1, unit: "minutes" }), major: new a3({ value: 20, unit: "minutes" }), format: { hour: "numeric", minute: "numeric" } }, { minor: new a3({ value: 5, unit: "minutes" }), major: new a3({ value: 2, unit: "hours" }), format: { hour: "numeric", minute: "numeric" } }, { minor: new a3({ value: 15, unit: "minutes" }), major: new a3({ value: 6, unit: "hours" }), format: { hour: "numeric", minute: "numeric" } }, { minor: new a3({ value: 1, unit: "hours" }), major: new a3({ value: 1, unit: "days" }), format: { day: "numeric", month: "short" } }, { minor: new a3({ value: 6, unit: "hours" }), major: new a3({ value: 1, unit: "weeks" }), format: { day: "numeric", month: "short" } }, { minor: new a3({ value: 1, unit: "days" }), major: new a3({ value: 1, unit: "months" }), format: { month: "long" } }, { minor: new a3({ value: 2, unit: "days" }), major: new a3({ value: 1, unit: "months" }), format: { month: "short" } }, { minor: new a3({ value: 3, unit: "days" }), major: new a3({ value: 1, unit: "months" }), format: { month: "short" } }, { minor: new a3({ value: 4, unit: "days" }), major: new a3({ value: 3, unit: "months" }), format: { month: "short", year: "numeric" } }, { minor: new a3({ value: 1, unit: "weeks" }), major: new a3({ value: 1, unit: "years" }), format: { year: "numeric" } }, { minor: new a3({ value: 1, unit: "months" }), major: new a3({ value: 1, unit: "years" }), format: { year: "numeric" } }, { minor: new a3({ value: 2, unit: "months" }), major: new a3({ value: 2, unit: "years" }), format: { year: "numeric" } }, { minor: new a3({ value: 1, unit: "years" }), major: new a3({ value: 1, unit: "decades" }), format: { year: "numeric" } }, { minor: new a3({ value: 2, unit: "years" }), major: new a3({ value: 5, unit: "decades" }), format: { year: "numeric" } }, { minor: new a3({ value: 5, unit: "decades" }), major: new a3({ value: 10, unit: "centuries" }), format: { era: "short", year: "numeric" } }, { minor: new a3({ value: 1, unit: "centuries" }), major: new a3({ value: 10, unit: "centuries" }), format: { era: "short", year: "numeric" } }, { minor: new a3({ value: 2, unit: "centuries" }), major: new a3({ value: 20, unit: "centuries" }), format: { era: "short", year: "numeric" } }, { minor: new a3({ value: 5, unit: "centuries" }), major: new a3({ value: 50, unit: "centuries" }), format: { era: "short", year: "numeric" } }, { minor: new a3({ value: 10, unit: "centuries" }), major: new a3({ value: 100, unit: "centuries" }), format: { era: "short", year: "numeric" } }, { minor: new a3({ value: 20, unit: "centuries" }), major: new a3({ value: 200, unit: "centuries" }), format: { era: "short", year: "numeric" } }, { minor: new a3({ value: 50, unit: "centuries" }), major: new a3({ value: 500, unit: "centuries" }), format: { era: "short", year: "numeric" } }, { minor: new a3({ value: 100, unit: "centuries" }), major: new a3({ value: 1e3, unit: "centuries" }), format: { era: "short", year: "numeric" } }, { minor: new a3({ value: 200, unit: "centuries" }), major: new a3({ value: 1e3, unit: "centuries" }), format: { era: "short", year: "numeric" } }, { minor: new a3({ value: 500, unit: "centuries" }), major: new a3({ value: 5e3, unit: "centuries" }), format: { era: "short", year: "numeric" } }, { minor: new a3({ value: 1e3, unit: "centuries" }), major: new a3({ value: 1e4, unit: "centuries" }), format: { era: "short", year: "numeric" } }]);
var C2 = class extends W {
  constructor(e5, t4) {
    super(e5, t4), this._ignoreNextSliderUpdate = false, this._slider = new E({ precision: 0, visibleElements: { rangeLabels: false }, rangeLabelInputsEnabled: false, thumbsConstrained: false }), this._tickFormat = null, this.disabled = false, this.iconClass = i3.widgetIcon, this.labelFormatFunction = null, this.messages = null, this.messagesCommon = null, this.tickConfigs = null, this.timeVisible = false, this.viewModel = new I();
  }
  initialize() {
    this.addHandles([l(() => this._slider.values, (e5) => {
      if (this._ignoreNextSliderUpdate)
        return void (this._ignoreNextSliderUpdate = false);
      const t4 = this.viewModel.valuesToTimeExtent(e5);
      r(this.timeExtent) ? r(t4) ? this.timeExtent.equals(t4) || (this.timeExtent = t4) : this.timeExtent = null : r(t4) && (this.timeExtent = t4);
    }), l(() => this.effectiveStops, () => this._updateSliderSteps(), h)]);
  }
  loadDependencies() {
    return Promise.all([import("./calcite-action-5SIJA2CD.js"), import("./calcite-action-menu-QWOXCFLS.js")]);
  }
  destroy() {
    this._slider.destroy(), this._tickFormat = null;
  }
  get actions() {
    return this.viewModel.actions;
  }
  set actions(e5) {
    this.viewModel.actions = e5;
  }
  get effectiveStops() {
    return this.viewModel.effectiveStops;
  }
  get fullTimeExtent() {
    return this.viewModel.fullTimeExtent;
  }
  set fullTimeExtent(e5) {
    this.viewModel.fullTimeExtent = e5;
  }
  get interactive() {
    var _a;
    return !this.disabled && "disabled" !== ((_a = this.viewModel) == null ? void 0 : _a.state);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e5) {
    this._overrideIfSome("label", e5);
  }
  set layout(e5) {
    ["auto", "compact", "wide"].includes(e5) || (e5 = "auto"), this._set("layout", e5);
  }
  get loop() {
    return this.viewModel.loop;
  }
  set loop(e5) {
    this.viewModel.loop = e5;
  }
  get mode() {
    return this.viewModel.mode;
  }
  set mode(e5) {
    this.viewModel.mode = e5;
  }
  get playRate() {
    return this.viewModel.playRate;
  }
  set playRate(e5) {
    this.viewModel.playRate = e5;
  }
  get stops() {
    return this.viewModel.stops;
  }
  set stops(e5) {
    this.viewModel.stops = e5;
  }
  get timeExtent() {
    return this.viewModel.timeExtent;
  }
  set timeExtent(e5) {
    this.viewModel.timeExtent = e5;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e5) {
    this.viewModel.view = e5;
  }
  static async getPropertiesFromWebMap(e5, t4) {
    return I.getPropertiesFromWebMap(e5, t4);
  }
  next() {
    return this.viewModel.next();
  }
  play() {
    return this.viewModel.play();
  }
  previous() {
    return this.viewModel.previous();
  }
  stop() {
    return this.viewModel.stop();
  }
  render() {
    var _a;
    const { _slider: e5, actions: t4, domNode: s5, effectiveStops: n6, fullTimeExtent: l4, interactive: m, messages: u, messagesCommon: d2, mode: c2, tickConfigs: p2, timeExtent: h2, timeVisible: w2, viewModel: { state: f2, timeExtentValues: y2 } } = this;
    if (r(l4)) {
      const { start: t5, end: i4 } = l4;
      if (r(t5) && r(i4)) {
        const s6 = t5.getTime(), n7 = i4.getTime(), o3 = e5.min !== s6 || e5.max !== n7;
        if (o3 && (e5.min = s6, e5.max = n7), r(p2))
          e5.tickConfigs !== p2 && (e5.tickConfigs = p2);
        else {
          const t6 = (n7 - s6) / (((_a = e5.trackElement) == null ? void 0 : _a.offsetWidth) || 400), i5 = S3.find((e6) => e6.minor.toMilliseconds() > _3 * t6), a4 = this._tickFormat !== i5 && null != i5;
          if (a4 && (this._tickFormat = i5), o3 || a4) {
            const t7 = { mode: "position", values: this._getTickPositions(i5.minor), labelsVisible: false, tickCreatedFunction: (e6, t8) => {
              t8.classList.add(i3.sliderMinorTick);
            } }, s7 = { mode: "position", values: this._getTickPositions(i5.major), labelsVisible: true, tickCreatedFunction: (e6, t8) => {
              t8.classList.add(i3.sliderMajorTick);
            }, labelFormatFunction: (e6) => L(e6, i5.format) };
            e5.tickConfigs = [t7, s7];
          }
        }
      }
    }
    const b4 = t(this.fullTimeExtent) || t(this.timeExtent) || this.timeExtent.isAllTime || this.timeExtent.isEmpty || r(this.timeExtent.start) && (this.timeExtent.start < this.fullTimeExtent.start || this.timeExtent.start > this.fullTimeExtent.end) || r(this.timeExtent.end) && (this.timeExtent.end > this.fullTimeExtent.end || this.timeExtent.end < this.fullTimeExtent.start);
    if (b4)
      switch (this._ignoreNextSliderUpdate = true, c2) {
        case "time-window":
          e5.values = [e5.min, e5.max];
          break;
        case "instant":
        case "cumulative-from-end":
          e5.values = [e5.min];
          break;
        case "cumulative-from-start":
          e5.values = [e5.max];
      }
    else
      r(y2) ? i(e5.values, y2) || (e5.values = y2) : e5.values = null;
    e5.disabled = !m;
    const g3 = "ready" === f2, E2 = "playing" === f2, C3 = b4 || !m || t(n6) || 0 === n6.length, F2 = "auto" === this.layout ? s5.clientWidth < M ? "compact" : "wide" : this.layout, D = n2("div", { class: i3.animation }, n2("button", { "aria-disabled": C3 ? "true" : "false", "aria-label": E2 ? d2.control.stop : d2.control.play, bind: this, class: this.classes(i3.esriWidgetButton, i3.animationButton, C3 && i3.esriButtonDisabled), disabled: C3, title: E2 ? d2.control.stop : d2.control.play, onclick: this._playOrStopClick, type: "button" }, n2("div", { class: this.classes((g3 || C3) && i3.animationPlay, E2 && i3.animationPause) }))), B = r(this.labelFormatFunction) ? n2("div", { key: "extent", bind: this, class: i3.timeExtentDate, "data-type": "extent", "data-layout": F2, "data-date": o(h2, (e6) => [e6.start, e6.end]), afterCreate: this._createLabel, afterUpdate: this._createLabel }) : t(h2) || r(h2) && h2.isAllTime ? [n2("div", { class: this.classes(i3.warning, i3.warningIcon) }), n2("div", { key: "warning-text", class: i3.warningText }, u.noTimeExtent)] : h2.isEmpty ? [n2("div", { class: this.classes(i3.warning, i3.warningIcon) }), n2("div", { key: "warning-text", class: i3.warningText }, u.emptyTimeExtent)] : [r(h2.start) && n2("div", { key: "start-date-group", class: i3.timeExtentGroup }, n2("div", { key: "start-date", class: i3.timeExtentDate }, this._formatDate(h2.start)), w2 && n2("div", { key: "start-time", class: i3.timeExtentTime }, this._formatTime(h2.start))), r(h2.start) && r(h2.end) && h2.start.getTime() !== h2.end.getTime() && n2("div", { key: "separator", class: i3.timeExtentSeparator }, "–"), r(h2.end) && (t(h2.start) || h2.start.getTime() !== h2.end.getTime()) && n2("div", { key: "end-date-group", class: i3.timeExtentGroup }, n2("div", { key: "end-date", class: i3.timeExtentDate }, this._formatDate(h2.end)), w2 && n2("div", { key: "end-time", class: i3.timeExtentTime }, this._formatTime(h2.end)))], L2 = n2("div", { class: this.classes(i3.timeExtent, !m && i3.esriButtonDisabled) }, [B]), U2 = r(this.labelFormatFunction) ? n2("div", { key: "min-date", bind: this, class: i3.minDate, "data-date": o(l4, (e6) => e6.start), "data-type": "min", "data-layout": F2, afterCreate: this._createLabel, afterUpdate: this._createLabel }) : r(l4) && r(l4.start) && [n2("div", { key: "min-date", class: i3.minDate }, this._formatDate(l4.start)), w2 && n2("div", { key: "min-time", class: i3.minTime }, this._formatTime(l4.start))], W2 = n2("div", { class: this.classes(i3.min, !m && i3.esriButtonDisabled) }, [U2]), R = n2("div", { class: i3.slider }, e5.render()), I2 = r(this.labelFormatFunction) ? n2("div", { key: "max-date", bind: this, class: i3.maxDate, "data-date": o(l4, (e6) => e6.end), "data-type": "max", "data-layout": F2, afterCreate: this._createLabel, afterUpdate: this._createLabel }) : r(l4) && r(l4.end) && [n2("div", { key: "max-date", class: i3.maxDate }, this._formatDate(l4.end)), w2 && n2("div", { key: "max-time", class: i3.maxTime }, this._formatTime(l4.end))], P = n2("div", { class: this.classes(i3.max, !m && i3.esriButtonDisabled) }, [I2]), A2 = n2("div", { class: i3.previous }, n2("button", { "aria-disabled": C3 ? "true" : "false", "aria-label": d2.pagination.previous, bind: this, class: this.classes(i3.esriWidgetButton, i3.previousButton, (E2 || C3) && i3.esriButtonDisabled), disabled: C3, title: d2.pagination.previous, onclick: this._previousClick, type: "button" }, n2("div", { class: i3.previousIcon }))), V = n2("div", { class: i3.next }, n2("button", { "aria-disabled": C3 ? "true" : "false", "aria-label": d2.pagination.next, bind: this, class: this.classes(i3.esriWidgetButton, i3.nextButton, (E2 || C3) && i3.esriButtonDisabled), disabled: C3, title: d2.pagination.next, onclick: this._nextClick, type: "button" }, n2("div", { class: i3.nextIcon }))), N = (t4 == null ? void 0 : t4.length) > 0, O = N && n2("div", { class: i3.actions, title: d2.options }, n2("calcite-action-menu", { label: d2.options, class: i3.actionsButton }, t4.toArray().map((e6) => n2("calcite-action", { bind: this, icon: e6.icon, id: e6.id, onclick: () => this.viewModel.triggerAction(e6), text: e6.title, textEnabled: true }))));
    return n2("div", { class: this.classes(i3.timeSlider, i3.esriWidget, `${i3.timeSliderMode}${c2}`, `${i3.timeSliderLayout}${F2}`, !m && i3.esriDisabled, b4 && i3.timeSliderOutOfBounds, N && i3.hasActions, c()), afterCreate: (e6) => {
      this.addHandles(g(e6, () => this.scheduleRender()));
    }, "aria-label": u.widgetLabel }, "wide" === F2 && n2("div", { class: i3.timeSliderRow }, n2("div", { class: i3.playbackControls }, [D, L2, W2, R, P, A2, V]), O), "compact" === F2 && [n2("div", { key: "time-slider-row-1", class: i3.timeSliderRow }, [L2, O]), n2("div", { key: "time-slider-row-2", class: i3.timeSliderRow }, [R]), n2("div", { key: "time-slider-row-3", class: i3.timeSliderRow }, [W2, A2, D, V, P])]);
  }
  updateWebDocument(e5) {
    var _a;
    (_a = this.viewModel) == null ? void 0 : _a.updateWebDocument(e5);
  }
  _createLabel(e5) {
    if (t(this.labelFormatFunction))
      return;
    const t4 = e5.getAttribute("data-type"), i4 = e5.getAttribute("data-layout"), s5 = e5["data-date"];
    this.labelFormatFunction(s5, t4, e5, i4);
  }
  _getTickPositions(e5) {
    const { fullTimeExtent: t4 } = this;
    if (t(t4) || t(t4.start) || t(t4.end))
      return [];
    const { start: i4, end: s5 } = t4, n6 = [], { value: a4, unit: r2 } = e5;
    let l4 = l2(i4, r2);
    for (; l4.getTime() <= s5.getTime(); )
      l4.getTime() >= i4.getTime() && n6.push(l4.getTime()), l4 = n3(l4, a4, r2);
    return n6;
  }
  _formatDate(e5) {
    return e5 ? L(e5, S("short-date")) : null;
  }
  _formatTime(e5) {
    return e5 ? L(e5, S("long-time")) : null;
  }
  _updateSliderSteps() {
    this._slider.steps = r(this.effectiveStops) && this.effectiveStops.length > 0 ? this.effectiveStops.map((e5) => e5.getTime()) : null;
  }
  _playOrStopClick() {
    switch (this.viewModel.state) {
      case "ready":
        this.viewModel.play();
        break;
      case "playing":
        this.viewModel.stop();
        break;
      case "disabled":
        break;
      default:
        n4(this.viewModel.state);
    }
  }
  _previousClick() {
    this.viewModel.previous();
  }
  _nextClick() {
    this.viewModel.next();
  }
};
e2([y()], C2.prototype, "actions", null), e2([y()], C2.prototype, "disabled", void 0), e2([y()], C2.prototype, "effectiveStops", null), e2([y()], C2.prototype, "fullTimeExtent", null), e2([y()], C2.prototype, "iconClass", void 0), e2([y({ readOnly: true })], C2.prototype, "interactive", null), e2([y()], C2.prototype, "label", null), e2([y()], C2.prototype, "labelFormatFunction", void 0), e2([y({ value: "auto" })], C2.prototype, "layout", null), e2([y()], C2.prototype, "loop", null), e2([y(), e3("esri/widgets/TimeSlider/t9n/TimeSlider")], C2.prototype, "messages", void 0), e2([y(), e3("esri/t9n/common")], C2.prototype, "messagesCommon", void 0), e2([y()], C2.prototype, "mode", null), e2([y()], C2.prototype, "playRate", null), e2([y()], C2.prototype, "stops", null), e2([y()], C2.prototype, "tickConfigs", void 0), e2([y()], C2.prototype, "timeExtent", null), e2([y({ nonNullable: true })], C2.prototype, "timeVisible", void 0), e2([y()], C2.prototype, "view", null), e2([y({ type: I }), e4("trigger-action")], C2.prototype, "viewModel", void 0), e2([t2()], C2.prototype, "_playOrStopClick", null), e2([t2()], C2.prototype, "_previousClick", null), e2([t2()], C2.prototype, "_nextClick", null), C2 = e2([a("esri.widgets.TimeSlider")], C2);
var F = C2;
export {
  F as default
};
//# sourceMappingURL=@arcgis_core_widgets_TimeSlider__js.js.map
