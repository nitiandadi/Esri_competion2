import {
  v
} from "./chunk-G7E2UCT4.js";
import {
  a as a3
} from "./chunk-R7FMJULK.js";
import "./chunk-J7OMJ47S.js";
import "./chunk-5MOZZS3P.js";
import "./chunk-7XVHXPW5.js";
import {
  i
} from "./chunk-J5CNSFEW.js";
import {
  f,
  u
} from "./chunk-F6PAWSTX.js";
import "./chunk-GR3QAE4S.js";
import "./chunk-XBPKFV6W.js";
import "./chunk-J6VS6FXY.js";
import "./chunk-AZEN5UFW.js";
import "./chunk-R3MRUDAD.js";
import "./chunk-R6XKQWZ7.js";
import "./chunk-63WRUMNA.js";
import "./chunk-O2JKCGK6.js";
import "./chunk-WAPZ634R.js";
import "./chunk-53FPJYCC.js";
import "./chunk-RURSJOSG.js";
import {
  l as l2
} from "./chunk-4VJYSN4O.js";
import "./chunk-23AC3IC7.js";
import "./chunk-GKD7ZY5C.js";
import "./chunk-TQAOUM4T.js";
import "./chunk-RRNRSHX3.js";
import "./chunk-IEBU4QQL.js";
import "./chunk-4M3AMTD4.js";
import "./chunk-5VDXKCKM.js";
import "./chunk-PNAN35AP.js";
import "./chunk-D2UI2BQN.js";
import "./chunk-34FJTA26.js";
import "./chunk-DUEDINK5.js";
import "./chunk-MZ267CZB.js";
import "./chunk-3DBV4JBL.js";
import "./chunk-CJ2YD4VU.js";
import "./chunk-PRXITTX7.js";
import "./chunk-JGIZLXNQ.js";
import "./chunk-TE3PC254.js";
import "./chunk-3IDKVHSA.js";
import "./chunk-NOYTM57S.js";
import "./chunk-OPQ632ST.js";
import "./chunk-U6GC73UT.js";
import "./chunk-LC5BGIRA.js";
import "./chunk-ST7DNJJS.js";
import {
  b
} from "./chunk-FNGJTVTP.js";
import "./chunk-CVSP2FBZ.js";
import "./chunk-UNUPXPO6.js";
import "./chunk-OF6BJKPA.js";
import "./chunk-PELFA5QO.js";
import "./chunk-EPJSBV4J.js";
import "./chunk-REIXEATJ.js";
import "./chunk-CCNZLEW5.js";
import "./chunk-FGXNBIU5.js";
import {
  l
} from "./chunk-FXMJJBXP.js";
import "./chunk-BHQVXYUV.js";
import "./chunk-P26WTKBK.js";
import "./chunk-WAN4YZSB.js";
import "./chunk-DKH5QOVM.js";
import "./chunk-LVRAFE6T.js";
import "./chunk-Y3KJPDCE.js";
import "./chunk-LSUFI7PR.js";
import "./chunk-5CMPUNQG.js";
import "./chunk-M3KO43BW.js";
import "./chunk-BQXNXAP2.js";
import "./chunk-JT54I3AY.js";
import "./chunk-TNTTCGVB.js";
import "./chunk-DC3QI5ZE.js";
import "./chunk-EGHLQERQ.js";
import "./chunk-7OAHPHOV.js";
import "./chunk-SZO7ZKE4.js";
import "./chunk-I2U7UK6N.js";
import "./chunk-FQ7L63IU.js";
import "./chunk-YHZVWABO.js";
import "./chunk-WATRS3LJ.js";
import "./chunk-CPUYSXBP.js";
import "./chunk-MJFFZ3MM.js";
import "./chunk-B6GJAETG.js";
import "./chunk-FC74MT6E.js";
import {
  w2 as w
} from "./chunk-H2ENCYR3.js";
import "./chunk-SVHG5VY2.js";
import "./chunk-S47644HM.js";
import "./chunk-QXPN4D5D.js";
import "./chunk-DLM7WQKI.js";
import {
  a2,
  e,
  y3 as y
} from "./chunk-7GTATSRF.js";
import "./chunk-MTJ2HM2W.js";
import "./chunk-PXVSWY3C.js";
import {
  j
} from "./chunk-QLY5H3XF.js";
import {
  s,
  s2
} from "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import {
  a
} from "./chunk-WHB7G7RI.js";
import "./chunk-DFKQJ226.js";

// node_modules/@arcgis/core/views/layers/WMSLayerView.js
var i2 = (i3) => {
  let m = class extends i3 {
    initialize() {
      this.exportImageParameters = new l2({ layer: this.layer });
    }
    destroy() {
      this.exportImageParameters = a(this.exportImageParameters);
    }
    get exportImageVersion() {
      var _a;
      return (_a = this.exportImageParameters) == null ? void 0 : _a.commitProperty("version"), this.commitProperty("timeExtent"), (this._get("exportImageVersion") || 0) + 1;
    }
    fetchPopupFeatures(e2) {
      const { layer: t } = this;
      if (!e2)
        return Promise.reject(new s2("wmslayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: t }));
      const { popupEnabled: o } = t;
      if (!o)
        return Promise.reject(new s2("wmslayerview:fetchPopupFeatures", "popupEnabled should be true", { popupEnabled: o }));
      const s3 = this.createFetchPopupFeaturesQuery(e2);
      if (!s3)
        return Promise.resolve([]);
      const { extent: p, width: a4, height: i4, x: m2, y: n } = s3;
      if (!(p && a4 && i4))
        throw new s2("wmslayerview:fetchPopupFeatures", "WMSLayer does not support fetching features.", { extent: p, width: a4, height: i4 });
      return t.fetchFeatureInfo(p, a4, i4, m2, n);
    }
  };
  return e([y()], m.prototype, "exportImageParameters", void 0), e([y({ readOnly: true })], m.prototype, "exportImageVersion", null), e([y()], m.prototype, "layer", void 0), e([y(b)], m.prototype, "timeExtent", void 0), m = e([a2("esri.layers.mixins.WMSLayerView")], m), m;
};

// node_modules/@arcgis/core/views/2d/layers/WMSLayerView2D.js
var y2 = class extends i2(i(f(u))) {
  constructor() {
    super(...arguments), this.bitmapContainer = new a3();
  }
  supportsSpatialReference(e2) {
    return this.layer.serviceSupportsSpatialReference(e2);
  }
  update(e2) {
    this.strategy.update(e2).catch((e3) => {
      j(e3) || s.getLogger(this.declaredClass).error(e3);
    });
  }
  attach() {
    const { layer: e2 } = this, { imageMaxHeight: t, imageMaxWidth: r } = e2;
    this.bitmapContainer = new a3(), this.container.addChild(this.bitmapContainer), this.strategy = new v({ container: this.bitmapContainer, fetchSource: this.fetchImage.bind(this), requestUpdate: this.requestUpdate.bind(this), imageMaxHeight: t, imageMaxWidth: r, imageRotationSupported: false, imageNormalizationSupported: false, hidpi: false }), this.addAttachHandles(l(() => this.exportImageVersion, () => this.requestUpdate()));
  }
  detach() {
    this.strategy = a(this.strategy), this.container.removeAllChildren();
  }
  moveStart() {
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  createFetchPopupFeaturesQuery(e2) {
    const { view: t, bitmapContainer: r } = this, { x: i3, y: s3 } = e2, { spatialReference: a4 } = t;
    let o, n = 0, m = 0;
    if (r.children.some((e3) => {
      const { width: t2, height: r2, resolution: h2, x: c2, y: d2 } = e3, u2 = c2 + h2 * t2, y3 = d2 - h2 * r2;
      return i3 >= c2 && i3 <= u2 && s3 <= d2 && s3 >= y3 && (o = new w({ xmin: c2, ymin: y3, xmax: u2, ymax: d2, spatialReference: a4 }), n = t2, m = r2, true);
    }), !o)
      return null;
    const h = o.width / n, c = Math.round((i3 - o.xmin) / h), d = Math.round((o.ymax - s3) / h);
    return { extent: o, width: n, height: m, x: c, y: d };
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  fetchImage(e2, t, r, i3) {
    return this.layer.fetchImageBitmap(e2, t, r, { timeExtent: this.timeExtent, ...i3 });
  }
};
e([y()], y2.prototype, "strategy", void 0), e([y()], y2.prototype, "updating", void 0), y2 = e([a2("esri.views.2d.layers.WMSLayerView2D")], y2);
var l3 = y2;
export {
  l3 as default
};
//# sourceMappingURL=WMSLayerView2D-4WO24HCZ.js.map
