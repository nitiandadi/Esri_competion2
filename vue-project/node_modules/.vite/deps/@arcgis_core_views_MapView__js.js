import {
  e as e8,
  l as l8,
  r as r10,
  s as s6,
  w as w5
} from "./chunk-SD3MRWWY.js";
import {
  Gt,
  H,
  St,
  Y,
  Z,
  _ as _2,
  e as e7,
  ft,
  gt,
  ht,
  jt,
  lt,
  ot,
  pt,
  tt,
  ut,
  wt,
  xt,
  yt
} from "./chunk-L6HCXW4T.js";
import {
  c as c5
} from "./chunk-5VDXKCKM.js";
import "./chunk-XAGRIALY.js";
import "./chunk-6NPCB5RV.js";
import "./chunk-DDAW6PTY.js";
import {
  d as d3
} from "./chunk-5XL4MQBR.js";
import {
  h as h3
} from "./chunk-PNAN35AP.js";
import "./chunk-HNKLBBNC.js";
import "./chunk-D2UI2BQN.js";
import "./chunk-5MV6T7MH.js";
import {
  l as l7
} from "./chunk-U3IHIDSP.js";
import {
  r as r9,
  t as t10
} from "./chunk-UUBCK4NC.js";
import "./chunk-34FJTA26.js";
import {
  a as a9,
  i as i5,
  l as l6
} from "./chunk-XU3CQCW6.js";
import {
  t as t9
} from "./chunk-DUEDINK5.js";
import {
  e as e6
} from "./chunk-MZ267CZB.js";
import {
  r as r8
} from "./chunk-3DBV4JBL.js";
import {
  l as l5
} from "./chunk-KZZBROE4.js";
import {
  n as n8
} from "./chunk-CJ2YD4VU.js";
import "./chunk-TW64FC7J.js";
import {
  M as M2,
  h as h2,
  i as i2,
  r as r6,
  s as s5
} from "./chunk-PRXITTX7.js";
import {
  a as a7,
  m as m2,
  o as o5,
  r as r5,
  z
} from "./chunk-JGIZLXNQ.js";
import {
  j as j5,
  p as p3
} from "./chunk-TE3PC254.js";
import "./chunk-3IDKVHSA.js";
import {
  D,
  R as R2
} from "./chunk-QARU3EBQ.js";
import "./chunk-PXPM76YN.js";
import {
  L as L2,
  m as m4
} from "./chunk-KDTUUGQU.js";
import {
  u
} from "./chunk-YWFASVWM.js";
import "./chunk-QDVPDB2P.js";
import "./chunk-REIKIWGL.js";
import "./chunk-OUJER2CY.js";
import "./chunk-DLEEZ5CX.js";
import {
  l as l4
} from "./chunk-BRSYQXRG.js";
import {
  j as j6
} from "./chunk-3QYVV4A6.js";
import {
  P,
  i as i6,
  o as o6,
  u as u2
} from "./chunk-GUVJ2XOH.js";
import "./chunk-WPDUA6LU.js";
import "./chunk-QZ7VBFRS.js";
import "./chunk-5SBOPOJJ.js";
import {
  n as n7
} from "./chunk-NWZTRS6O.js";
import {
  e as e5,
  f as f5,
  i as i3,
  r as r7
} from "./chunk-77E52HT5.js";
import "./chunk-WOEVHDZW.js";
import "./chunk-ENW65ERW.js";
import "./chunk-26N6FACI.js";
import "./chunk-6XE2FUT4.js";
import {
  t2 as t11
} from "./chunk-SQ32YP2P.js";
import "./chunk-QJLUXU6I.js";
import "./chunk-2WS4DQ5K.js";
import "./chunk-KS4KMM5S.js";
import "./chunk-HBVUBDHI.js";
import "./chunk-OVTZY4DK.js";
import "./chunk-WCDQWDOM.js";
import "./chunk-CKJU52SK.js";
import "./chunk-2JB37XX2.js";
import "./chunk-D4SYZIFV.js";
import "./chunk-WL7ITUMO.js";
import "./chunk-CP43AUSV.js";
import "./chunk-2VRWGZDB.js";
import "./chunk-5JG6YWQJ.js";
import "./chunk-7Q77X7UJ.js";
import "./chunk-NOYTM57S.js";
import "./chunk-OPQ632ST.js";
import "./chunk-U6GC73UT.js";
import {
  n as n6
} from "./chunk-BITXW4TL.js";
import {
  W,
  e as e3,
  e2 as e4,
  o as o4,
  r as r4,
  t as t7,
  t2 as t8
} from "./chunk-VPGE46JA.js";
import {
  f as f4,
  i,
  n2 as n5
} from "./chunk-2DA2JOWA.js";
import "./chunk-SGLDT3EC.js";
import "./chunk-NXQHXTQL.js";
import "./chunk-5ZDDV642.js";
import "./chunk-QS7JATZ7.js";
import "./chunk-JPG2AHMD.js";
import "./chunk-WNFESMMI.js";
import "./chunk-6ZICJ4HF.js";
import "./chunk-6N2I7LNE.js";
import "./chunk-52DUL4NM.js";
import "./chunk-ED3H44RD.js";
import "./chunk-C5E4KZMK.js";
import {
  v as v5
} from "./chunk-XWFAINWU.js";
import "./chunk-NNXHBH3J.js";
import "./chunk-2S24CH2D.js";
import "./chunk-6XL4E25K.js";
import "./chunk-ZHIUMSNA.js";
import "./chunk-66ZWVXB2.js";
import "./chunk-YB6BDEHT.js";
import "./chunk-4YR3FESC.js";
import "./chunk-UWJ3NERY.js";
import "./chunk-E4ZXXRPV.js";
import "./chunk-AJY7W6KP.js";
import "./chunk-SJOFHDQC.js";
import "./chunk-VV4LINSF.js";
import "./chunk-XSYADQXL.js";
import {
  a as a5
} from "./chunk-YIJX6PSI.js";
import "./chunk-TCH7H3BB.js";
import "./chunk-CV32ONPW.js";
import "./chunk-NCSDM2FH.js";
import "./chunk-GHN5ZUCM.js";
import "./chunk-B4X5M3MB.js";
import "./chunk-CNIE5HLE.js";
import {
  c as c4
} from "./chunk-L46P5ZGI.js";
import "./chunk-AOER6TTF.js";
import "./chunk-N5RJDK35.js";
import "./chunk-NBE2OON5.js";
import "./chunk-W55YAZ7T.js";
import "./chunk-ZMJYBENP.js";
import "./chunk-DGWYZRQH.js";
import "./chunk-424YCWGU.js";
import "./chunk-QM63DB4O.js";
import "./chunk-MSSVX4MF.js";
import "./chunk-D47GNCYL.js";
import "./chunk-B4KXWO6Z.js";
import "./chunk-ITOWSLB4.js";
import "./chunk-WIR7P2UT.js";
import "./chunk-4YJQ46TP.js";
import "./chunk-LC5BGIRA.js";
import "./chunk-N44T6V5D.js";
import "./chunk-ST7DNJJS.js";
import "./chunk-QSDDU4NM.js";
import "./chunk-FNGJTVTP.js";
import "./chunk-3MIQEU54.js";
import "./chunk-Q3FHJWKB.js";
import "./chunk-VB6BMHUU.js";
import "./chunk-H66NMTBW.js";
import "./chunk-K7L4V6NL.js";
import "./chunk-UZL5FYFX.js";
import "./chunk-HM62IZSE.js";
import "./chunk-CCAF47ZU.js";
import "./chunk-HFRO4PG3.js";
import "./chunk-763HXOZK.js";
import "./chunk-TEBHEW3L.js";
import "./chunk-QF2PMVYK.js";
import "./chunk-BRWDGS6Y.js";
import "./chunk-L6EWR437.js";
import {
  d as d2
} from "./chunk-HZKQDRDV.js";
import "./chunk-CVSP2FBZ.js";
import {
  T
} from "./chunk-UNUPXPO6.js";
import "./chunk-OF6BJKPA.js";
import {
  a as a8,
  c as c3,
  d
} from "./chunk-PELFA5QO.js";
import "./chunk-2CREJO6O.js";
import {
  b as b2,
  j as j4
} from "./chunk-FAK3SJAD.js";
import "./chunk-FFJQJQND.js";
import "./chunk-YMSHUIGU.js";
import "./chunk-EPJSBV4J.js";
import {
  An,
  en,
  rn,
  tn
} from "./chunk-RCZJUTGU.js";
import "./chunk-REIXEATJ.js";
import "./chunk-YEFLZ2OV.js";
import "./chunk-W42YI6TX.js";
import "./chunk-ICG3HFWD.js";
import "./chunk-XP5MC636.js";
import "./chunk-CCNZLEW5.js";
import "./chunk-FGXNBIU5.js";
import "./chunk-MYKXVBXI.js";
import "./chunk-TM5UW7VI.js";
import "./chunk-WVLEGBEW.js";
import "./chunk-JLHQIHZ7.js";
import "./chunk-4GJORDIY.js";
import {
  U as U2,
  a as a6,
  f as f3,
  h,
  j as j3,
  l as l3,
  w as w4
} from "./chunk-FXMJJBXP.js";
import "./chunk-6YBCJ6DZ.js";
import {
  g as g3
} from "./chunk-MS6YQPPG.js";
import "./chunk-CRF4O3Y3.js";
import "./chunk-ONU3G4LF.js";
import "./chunk-KSENJC5Z.js";
import "./chunk-BHQVXYUV.js";
import "./chunk-P26WTKBK.js";
import "./chunk-WAN4YZSB.js";
import "./chunk-DKH5QOVM.js";
import "./chunk-YZRPNTZZ.js";
import "./chunk-EVKJKYHI.js";
import {
  m as m3
} from "./chunk-TNQLNDIQ.js";
import "./chunk-FA3YUERM.js";
import "./chunk-LVRAFE6T.js";
import "./chunk-Y3KJPDCE.js";
import "./chunk-LSUFI7PR.js";
import {
  _,
  m
} from "./chunk-5CMPUNQG.js";
import "./chunk-YT74S35I.js";
import "./chunk-U5I7FQWJ.js";
import "./chunk-M3KO43BW.js";
import {
  c as c2
} from "./chunk-BQXNXAP2.js";
import {
  a as a4,
  b
} from "./chunk-JT54I3AY.js";
import {
  g as g2
} from "./chunk-TNTTCGVB.js";
import "./chunk-DC3QI5ZE.js";
import {
  r as r3
} from "./chunk-EGHLQERQ.js";
import "./chunk-CNEENAOZ.js";
import {
  i as i4
} from "./chunk-7OAHPHOV.js";
import {
  j as j2
} from "./chunk-SZO7ZKE4.js";
import "./chunk-YMLMMCYX.js";
import "./chunk-I2U7UK6N.js";
import "./chunk-UADQEL54.js";
import {
  n as n4
} from "./chunk-FQ7L63IU.js";
import {
  l as l2,
  s as s4
} from "./chunk-6K5VVUVI.js";
import "./chunk-YHZVWABO.js";
import "./chunk-WATRS3LJ.js";
import "./chunk-CPUYSXBP.js";
import "./chunk-MJFFZ3MM.js";
import "./chunk-7FMLQXIT.js";
import "./chunk-B6GJAETG.js";
import {
  o as o3,
  v2 as v4
} from "./chunk-FC74MT6E.js";
import {
  E,
  M,
  R3 as R,
  c3 as c,
  f2,
  r3 as r2,
  w as w2,
  w2 as w3
} from "./chunk-H2ENCYR3.js";
import "./chunk-SVHG5VY2.js";
import {
  s as s3
} from "./chunk-S47644HM.js";
import "./chunk-QXPN4D5D.js";
import {
  l
} from "./chunk-DLM7WQKI.js";
import {
  A as A2,
  a2 as a3,
  e as e2,
  n2 as n,
  n4 as n2,
  o as o2,
  t as t2,
  t2 as t3,
  t6,
  v as v2,
  v2 as v3,
  y3 as y
} from "./chunk-7GTATSRF.js";
import "./chunk-MTJ2HM2W.js";
import {
  n as n3,
  t as t4
} from "./chunk-PXVSWY3C.js";
import {
  A,
  C,
  L,
  U,
  a as a2,
  f,
  g,
  j,
  p as p2,
  t as t5,
  v
} from "./chunk-QLY5H3XF.js";
import {
  s,
  s2
} from "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import {
  has
} from "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import {
  a,
  e,
  o,
  p,
  r,
  t,
  w
} from "./chunk-WHB7G7RI.js";
import "./chunk-DFKQJ226.js";

// node_modules/@arcgis/core/views/BreakpointsOwner.js
var n9 = { widthBreakpoint: { getValue(e15) {
  const i24 = e15.viewSize[0], s18 = e15.breakpoints, a29 = this.values;
  return i24 <= s18.xsmall ? a29.xsmall : i24 <= s18.small ? a29.small : i24 <= s18.medium ? a29.medium : i24 <= s18.large ? a29.large : a29.xlarge;
}, values: { xsmall: "xsmall", small: "small", medium: "medium", large: "large", xlarge: "xlarge" }, valueToClassName: { xsmall: "esri-view-width-xsmall esri-view-width-less-than-small esri-view-width-less-than-medium esri-view-width-less-than-large esri-view-width-less-than-xlarge", small: "esri-view-width-small esri-view-width-greater-than-xsmall esri-view-width-less-than-medium esri-view-width-less-than-large esri-view-width-less-than-xlarge", medium: "esri-view-width-medium esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-less-than-large esri-view-width-less-than-xlarge", large: "esri-view-width-large esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-greater-than-medium esri-view-width-less-than-xlarge", xlarge: "esri-view-width-xlarge esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-greater-than-medium esri-view-width-greater-than-large" } }, heightBreakpoint: { getValue(e15) {
  const i24 = e15.viewSize[1], s18 = e15.breakpoints, a29 = this.values;
  return i24 <= s18.xsmall ? a29.xsmall : i24 <= s18.small ? a29.small : i24 <= s18.medium ? a29.medium : i24 <= s18.large ? a29.large : a29.xlarge;
}, values: { xsmall: "xsmall", small: "small", medium: "medium", large: "large", xlarge: "xlarge" }, valueToClassName: { xsmall: "esri-view-height-xsmall esri-view-height-less-than-small esri-view-height-less-than-medium esri-view-height-less-than-large esri-view-height-less-than-xlarge", small: "esri-view-height-small esri-view-height-greater-than-xsmall esri-view-height-less-than-medium esri-view-height-less-than-large esri-view-height-less-than-xlarge", medium: "esri-view-height-medium esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-less-than-large esri-view-height-less-than-xlarge", large: "esri-view-height-large esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-greater-than-medium esri-view-height-less-than-xlarge", xlarge: "esri-view-height-xlarge esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-greater-than-medium esri-view-height-greater-than-large" } }, orientation: { getValue(e15) {
  const i24 = e15.viewSize, s18 = i24[0], a29 = i24[1], t24 = this.values;
  return a29 >= s18 ? t24.portrait : t24.landscape;
}, values: { portrait: "portrait", landscape: "landscape" }, valueToClassName: { portrait: "esri-view-orientation-portrait", landscape: "esri-view-orientation-landscape" } } };
var o7 = { xsmall: 544, small: 768, medium: 992, large: 1200 };
function m5(e15) {
  const i24 = e15;
  return i24 && i24.xsmall < i24.small && i24.small < i24.medium && i24.medium < i24.large;
}
function g4(e15, i24) {
  return i24 ? n9[e15].valueToClassName[i24].split(" ") : [];
}
var w6 = (w10) => {
  let d12 = class extends w10 {
    constructor(...e15) {
      super(...e15), this._breakpointsHandles = new t3(), this.orientation = null, this.widthBreakpoint = null, this.heightBreakpoint = null, this.breakpoints = o7;
    }
    initialize() {
      this._breakpointsHandles.add(l3(() => [this.breakpoints, this.size], () => this._updateClassNames(), h));
    }
    destroy() {
      this.destroyed || (this._removeActiveClassNames(), this._breakpointsHandles = a(this._breakpointsHandles));
    }
    set breakpoints(e15) {
      if (e15 === this._get("breakpoints"))
        return;
      const i24 = m5(e15);
      if (!i24) {
        const e16 = JSON.stringify(o7, null, 2);
        console.warn("provided breakpoints are not valid, using defaults:" + e16);
      }
      e15 = i24 ? e15 : o7, this._set("breakpoints", { ...e15 });
    }
    _updateClassNames() {
      if (!this.container)
        return;
      const e15 = t4.acquire(), s18 = t4.acquire();
      let a29, t24 = false;
      for (a29 in n9) {
        const i24 = this[a29], r20 = n9[a29].getValue({ viewSize: this.size, breakpoints: this.breakpoints });
        i24 !== r20 && (t24 = true, this[a29] = r20, g4(a29, i24).forEach((e16) => s18.push(e16)), g4(a29, r20).forEach((i25) => e15.push(i25)));
      }
      t24 && (this._applyClassNameChanges(e15, s18), t4.release(e15), t4.release(s18));
    }
    _applyClassNameChanges(e15, i24) {
      const s18 = this.container;
      s18 && (i24.forEach((e16) => s18.classList.remove(e16)), e15.forEach((e16) => s18.classList.add(e16)));
    }
    _removeActiveClassNames() {
      const e15 = this.container;
      if (!e15)
        return;
      let i24;
      for (i24 in n9)
        g4(i24, this[i24]).forEach((i25) => e15.classList.remove(i25));
    }
  };
  return e2([y()], d12.prototype, "breakpoints", null), e2([y()], d12.prototype, "orientation", void 0), e2([y()], d12.prototype, "widthBreakpoint", void 0), e2([y()], d12.prototype, "heightBreakpoint", void 0), d12 = e2([a3("esri.views.BreakpointsOwner")], d12), d12;
};

// node_modules/@arcgis/core/views/overlay/ViewOverlay.js
var a10 = class extends v3 {
  constructor() {
    super(...arguments), this.items = new j2(), this._watchUpdatingTracking = new c3(), this._callbacks = /* @__PURE__ */ new Map(), this._projector = i(), this._hiddenProjector = i();
  }
  get needsRender() {
    return this.items.length > 0;
  }
  get updating() {
    var _a;
    return ((_a = this._watchUpdatingTracking) == null ? void 0 : _a.updating) ?? false;
  }
  initialize() {
    const t24 = document.createElement("div");
    t24.className = "esri-overlay-surface", this._set("surface", t24), this._hiddenSurface = document.createElement("div"), this._hiddenSurface.setAttribute("style", "visibility: hidden;"), t24.appendChild(this._hiddenSurface), this._watchUpdatingTracking.addOnCollectionChange(() => this.items, (t25) => {
      for (const e15 of t25.added) {
        const t26 = () => e15.render();
        this._callbacks.set(e15, t26), this._projector.append(this.surface, t26);
      }
      for (const e15 of t25.removed) {
        const t26 = this._projector.detach(this._callbacks.get(e15));
        this.surface.removeChild(t26.domNode), this._callbacks.delete(e15);
      }
    });
  }
  addItem(t24) {
    this.items.add(t24);
  }
  removeItem(t24) {
    this.items.remove(t24);
  }
  destroy() {
    this.items.removeAll(), this._callbacks.forEach((t24) => this._projector.detach(t24)), this._callbacks = null, this._projector = null, this._watchUpdatingTracking.destroy();
  }
  render() {
    this._projector.renderNow();
  }
  computeBoundingRect(t24) {
    const e15 = this._hiddenSurface, r20 = this._hiddenProjector;
    let o21;
    const s18 = () => (o21 = t24.render(), o21);
    r20.append(e15, s18), r20.renderNow();
    const i24 = { left: 0, top: 0, right: 0, bottom: 0 };
    if (o21 && o21.domNode) {
      const t25 = o21.domNode.getBoundingClientRect();
      i24.left = t25.left, i24.top = t25.top, i24.right = t25.right, i24.bottom = t25.bottom;
    }
    for (r20.detach(s18); e15.firstChild; )
      e15.removeChild(e15.firstChild);
    return i24;
  }
  overlaps(t24, e15) {
    const r20 = this.computeBoundingRect(t24), o21 = this.computeBoundingRect(e15);
    return Math.max(r20.left, o21.left) <= Math.min(r20.right, o21.right) && Math.max(r20.top, o21.top) <= Math.min(r20.bottom, o21.bottom);
  }
  get hasVisibleItems() {
    return this.items.some((t24) => t24.visible);
  }
  async prepare() {
    await document.fonts.load(this._fontString()).catch(() => {
    });
  }
  renderCanvas(t24) {
    if (!this.items.some((t25) => t25.visible))
      return;
    const e15 = t24.getContext("2d");
    e15.save(), e15.font = this._fontString(), this.items.forEach((t25) => {
      e15.save(), t25.renderCanvas(e15), e15.restore();
    }), e15.restore();
  }
  _fontString() {
    return `10px ${getComputedStyle(this.surface).fontFamily}`;
  }
};
e2([y({ readOnly: true })], a10.prototype, "surface", void 0), e2([y({ readOnly: true })], a10.prototype, "items", void 0), e2([y({ readOnly: true })], a10.prototype, "needsRender", null), e2([y({ readOnly: true })], a10.prototype, "_watchUpdatingTracking", void 0), e2([y({ readOnly: true })], a10.prototype, "updating", null), a10 = e2([a3("esri.views.overlay.ViewOverlay")], a10);
var c6 = a10;

// node_modules/@arcgis/core/views/DOMContainer.js
var m6 = [0, 0];
function f6(e15) {
  const t24 = (e15.ownerDocument || window.document).defaultView, s18 = e15.getBoundingClientRect();
  return m6[0] = s18.left + ((t24 == null ? void 0 : t24.pageXOffset) ?? 0), m6[1] = s18.top + ((t24 == null ? void 0 : t24.pageYOffset) ?? 0), m6;
}
function y2(e15) {
  e15 && (t7(e15), e15.parentNode && e15.parentNode.removeChild(e15));
}
function v6(e15) {
  const t24 = document.createElement("div");
  return e15.appendChild(t24), t24;
}
var _3 = 16;
var g5 = 750;
var w7 = 512;
var C2 = 2;
var z2 = (i24) => {
  let m14 = class extends i24 {
    constructor(...e15) {
      var _a;
      super(...e15), this._freqInfo = { freq: _3, time: g5 }, this._overlayRenderTaskHandle = null, this.height = 0, this.overlay = null, this.position = null, this.resizing = false, this.root = null, this.surface = null, this.suspended = true, this.ui = null, this.userContent = null, this.width = 0, this.widthBreakpoint = null, 0 !== e15.length && void 0 !== ((_a = e15[0]) == null ? void 0 : _a.popup) || (this.popup = new j6({ view: this })), this.handles.add([l3(() => this.cursor, (e16) => {
        const { surface: t24 } = this;
        t24 && t24.setAttribute("data-cursor", e16);
      }), l3(() => this.interacting, (e16) => {
        const { surface: t24 } = this;
        t24 && t24.setAttribute("data-interacting", e16.toString());
      })]);
    }
    initialize() {
      this.handles.add(l3(() => this.ui, (e15, t24) => this._handleUIChange(e15, t24))), this._wireUI(this.ui), this.handles.add([this.on("focus", () => this.notifyChange("focused")), this.on("blur", () => this.notifyChange("focused"))]);
    }
    destroy() {
      this.destroyed || (this.ui = a(this.ui), this.popup && !this.popup.destroyed && this.popup.destroy(), this.container = null);
    }
    get container() {
      return this._get("container") ?? null;
    }
    set container(e15) {
      const i25 = this._get("container"), r20 = e3(e15);
      if (r20 || "string" != typeof e15 || s.getLogger(this.declaredClass).error("#container", `element with id '${e15}' not found`), i25 === r20)
        return;
      const l17 = "dom-size";
      if (this.handles.remove(l17), this._stopMeasuring(), i25 && (i25.classList.remove("esri-view"), this._overlayRenderTaskHandle && (this._overlayRenderTaskHandle.remove(), this._overlayRenderTaskHandle = null), this.overlay && (this.overlay.destroy(), this._set("overlay", null)), this.root && (y2(this.root), this._set("root", null)), this.userContent && (r4(this.userContent, i25), y2(this.userContent), this._set("userContent", null))), !r20)
        return this._set("width", 0), this._set("height", 0), this._set("position", null), this._set("suspended", true), this._set("surface", null), void this._set("container", null);
      r20.classList.add("esri-view");
      const u13 = document.createElement("div");
      u13.className = "esri-view-user-storage", r4(r20, u13), r20.appendChild(u13), this._set("userContent", u13);
      const c21 = document.createElement("div");
      c21.className = "esri-view-root", r20.insertBefore(c21, r20.firstChild), this._set("root", c21);
      const m15 = document.createElement("div");
      m15.className = "esri-view-surface", m15.setAttribute("role", "application"), m15.tabIndex = 0, c21.appendChild(m15), this._set("surface", m15);
      const f11 = new c6();
      c21.appendChild(f11.surface), this._set("overlay", f11), l3(() => f11.needsRender, (e16) => {
        e16 && !this._overlayRenderTaskHandle ? this._overlayRenderTaskHandle = A2({ render: () => {
          var _a;
          return (_a = this.overlay) == null ? void 0 : _a.render();
        } }) : this._overlayRenderTaskHandle = p(this._overlayRenderTaskHandle);
      }), this.forceDOMReadyCycle(), this.handles.add(l3(() => this.size, (e16) => {
        const [t24, s18] = e16, i26 = "esri-view-surface--inset-outline";
        t24 >= document.body.clientWidth || s18 >= document.body.clientHeight ? m15.classList.add(i26) : m15.classList.remove(i26);
      }, h), l17), this._set("container", r20), this._startMeasuring();
    }
    get focused() {
      const e15 = document.activeElement === this.surface;
      return document.hasFocus() && e15;
    }
    set popup(e15) {
      const t24 = this._get("popup");
      t24 && t24 !== e15 && t24.destroy(), this._set("popup", e15);
    }
    get size() {
      return [this.width, this.height];
    }
    blur() {
      this.surface && this.surface.blur();
    }
    focus() {
      this.surface && this.surface.focus();
    }
    pageToContainer(e15, t24, s18) {
      const i25 = this.position;
      return e15 -= i25 ? i25[0] : 0, t24 -= i25 ? i25[1] : 0, s18 ? (s18[0] = e15, s18[1] = t24) : s18 = [e15, t24], s18;
    }
    containerToPage(e15, t24, s18) {
      const i25 = this.position;
      return e15 += i25 ? i25[0] : 0, t24 += i25 ? i25[1] : 0, s18 ? (s18[0] = e15, s18[1] = t24) : s18 = [e15, t24], s18;
    }
    _handleUIChange(e15, t24) {
      t24 && (this.handles.remove("ui"), t24.destroy()), e15 && this._wireUI(e15), this._set("ui", e15);
    }
    _wireUI(e15) {
      this.handles.remove("ui"), e15 && (e15.view = this, this.handles.add([l3(() => this.root, (t24) => {
        e15.container = t24 ? v6(t24) : null;
      }, h), l3(() => this.popup, (t24, s18) => {
        const i25 = "popup", o21 = "manual";
        s18 && e15.remove(s18, i25), t24 && (t24.view = e15.view, e15.add(t24, { key: i25, position: o21 }));
      }, h)], "ui"));
    }
    _stopMeasuring() {
      this.handles.remove("measuring"), this._get("resizing") && this._set("resizing", false);
    }
    _startMeasuring() {
      const e15 = this._freqInfo;
      e15.freq = _3, e15.time = g5, this.handles.add([(() => {
        const t24 = () => {
          e15.freq = _3, e15.time = g5;
        };
        return window.addEventListener("resize", t24), { remove() {
          window.removeEventListener("resize", t24);
        } };
      })(), A2({ prepare: (e16) => {
        const t24 = this._measure(), s18 = this._freqInfo;
        if (s18.time += e16.deltaTime, t24 && (s18.freq = _3, this._get("resizing") || this._set("resizing", true)), s18.time < s18.freq)
          return;
        s18.time = 0;
        const i25 = this._position();
        s18.freq = i25 || t24 ? _3 : Math.min(g5, s18.freq * C2), !t24 && s18.freq >= w7 && this._get("resizing") && this._set("resizing", false);
      } })], "measuring"), this._measure(), this._position();
    }
    _measure() {
      const e15 = this.container, t24 = e15 ? e15.clientWidth : 0, s18 = e15 ? e15.clientHeight : 0;
      if (0 === t24 || 0 === s18)
        return this.suspended || this._set("suspended", true), false;
      const i25 = this.width, o21 = this.height;
      return t24 === i25 && s18 === o21 ? (this.suspended && this._set("suspended", false), false) : (this._set("width", t24), this._set("height", s18), this.suspended && this._set("suspended", false), this.emit("resize", { oldWidth: i25, oldHeight: o21, width: t24, height: s18 }), true);
    }
    _position() {
      const e15 = this.container, t24 = this.position, s18 = e15 && f6(e15);
      return !!s18 && ((!t24 || s18[0] !== t24[0] || s18[1] !== t24[1]) && (this._set("position", [s18[0], s18[1]]), true));
    }
    forceDOMReadyCycle() {
    }
  };
  return e2([y()], m14.prototype, "container", null), e2([y({ readOnly: true })], m14.prototype, "focused", null), e2([y({ readOnly: true })], m14.prototype, "height", void 0), e2([y({ type: j6 })], m14.prototype, "popup", null), e2([y({ type: c6 })], m14.prototype, "overlay", void 0), e2([y({ readOnly: true })], m14.prototype, "position", void 0), e2([y({ readOnly: true })], m14.prototype, "resizing", void 0), e2([y({ readOnly: true })], m14.prototype, "root", void 0), e2([y({ value: null, readOnly: true })], m14.prototype, "size", null), e2([y({ readOnly: true })], m14.prototype, "surface", void 0), e2([y({ readOnly: true })], m14.prototype, "suspended", void 0), e2([y()], m14.prototype, "ui", void 0), e2([y({ readOnly: true })], m14.prototype, "userContent", void 0), e2([y({ readOnly: true })], m14.prototype, "width", void 0), e2([y()], m14.prototype, "widthBreakpoint", void 0), m14 = e2([a3("esri.views.DOMContainer")], m14), m14;
};

// node_modules/@arcgis/core/views/PopupView.js
var a11 = (a29) => {
  let p20 = class extends a29 {
    async fetchPopupFeatures(e15, r20) {
      await this.when();
      const { location: i24, queryArea: a30, layerViewsAndGraphics: p21, clientOnlyGraphics: t24 } = await this._prepareFetchPopupFeatures(e15, r20), o21 = Promise.resolve(t24), c21 = this._queryLayerPopupFeatures(a30, p21, r20), n24 = c21.map((e16) => e16.promise);
      return { location: i24, clientOnlyGraphics: t24, allGraphicsPromise: L([o21, ...n24]).then((e16) => Array.from(new Set(e16.flat()))), promisesPerLayerView: c21 };
    }
    _queryLayerPopupFeatures(e15, s18, i24) {
      return s18.map(({ layerView: s19, graphics: a30 }) => {
        const p21 = { clientGraphics: a30, event: r(i24) ? i24.event : void 0, signal: r(i24) ? i24.signal : void 0, defaultPopupTemplateEnabled: !!r(i24) && !!i24.defaultPopupTemplateEnabled }, t24 = s19.fetchPopupFeatures(e15, p21);
        return { layerView: s19, promise: t24 };
      });
    }
    _isValidPopupGraphic(e15, s18) {
      return e15 && !!e15.getEffectivePopupTemplate(r(s18) && s18.defaultPopupTemplateEnabled);
    }
    async _prepareFetchPopupFeatures(e15, r20) {
      const { clientGraphics: s18, queryArea: i24, location: a30 } = await this._popupHitTestGraphics(e15, r20), p21 = this._getFetchPopupLayerViews(), { layerViewsAndGraphics: t24, clientOnlyGraphics: o21 } = this._graphicsPerFetchPopupLayerView(s18, p21);
      return { clientOnlyGraphics: o21, layerViewsAndGraphics: t24, queryArea: i24, location: a30 };
    }
    async _popupHitTestGraphics(e15, r20) {
      const s18 = await this.popupHitTest(e15), i24 = s18.results, a30 = s18.mapPoint, p21 = i24.filter((e16) => "graphic" === e16.type && this._isValidPopupGraphic(e16.graphic, r20)), t24 = p21.length ? p21[0].mapPoint : null;
      return { clientGraphics: p21.map((e16) => e16.graphic), queryArea: a30, location: a30 || t24 };
    }
    _getFetchPopupLayerViews() {
      const e15 = [];
      return this.allLayerViews.forEach((r20) => {
        this._isValidPopupLayerView(r20) && e15.push(r20);
      }), r(this.graphicsView) && this._isValidPopupLayerView(this.graphicsView) && e15.push(this.graphicsView), e15.reverse();
    }
    _isValidPopupLayerView(e15) {
      return r(e15) && (!("layer" in e15) || !e15.suspended) && "fetchPopupFeatures" in e15;
    }
    _graphicsPerFetchPopupLayerView(e15, r20) {
      const s18 = [], i24 = /* @__PURE__ */ new Map(), a30 = r20.map((e16) => {
        const r21 = [];
        return "layer" in e16 ? i24.set(e16.layer, r21) : i24.set(e16.graphics, r21), { layerView: e16, graphics: r21 };
      });
      for (const p21 of e15) {
        const e16 = i24.get(p21.layer) || i24.get(p21.sourceLayer) || null;
        e16 ? e16.push(p21) : s18.push(p21);
      }
      return { layerViewsAndGraphics: a30, clientOnlyGraphics: s18 };
    }
  };
  return p20 = e2([a3("esri.views.PopupView")], p20), p20;
};

// node_modules/@arcgis/core/support/AnalysesCollection.js
var i7 = class extends l6 {
  constructor(e15) {
    super(e15), this.handles.add(this.on("before-add", (e16) => {
      t(e16.item) || e16.item.parent === this.owner && (s.getLogger(this.declaredClass).warn("Analysis inside the collection must be unique. Not adding this element again."), e16.preventDefault());
    }));
  }
  _own(e15) {
    e15.parent = this.owner;
  }
  _release(e15) {
    e15.parent = null;
  }
};
i7 = e2([a3("esri.support.AnalysesCollection")], i7);

// node_modules/@arcgis/core/views/BasemapView.js
var p4 = class extends v3 {
  constructor(e15) {
    super(e15), this.view = null, this.baseLayerViews = new j2(), this.referenceLayerViews = new j2(), this._loadingHandle = l3(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.basemap;
    }, (e16) => {
      e16 && e16.load().catch(() => {
      });
    }, h);
  }
  destroy() {
    this._set("view", null), this._loadingHandle && (this._loadingHandle.remove(), this._loadingHandle = null);
  }
  get suspended() {
    return !this.view || this.view.suspended;
  }
  get updating() {
    var _a, _b;
    if (this.view && this.view.suspended)
      return false;
    const e15 = (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.basemap;
    return !!e15 && (!!e15.loaded && (this.baseLayerViews.some((e16) => e16.updating) || this.referenceLayerViews.some((e16) => e16.updating)));
  }
};
e2([y({ constructOnly: true })], p4.prototype, "view", void 0), e2([y({ readOnly: true })], p4.prototype, "baseLayerViews", void 0), e2([y({ readOnly: true })], p4.prototype, "referenceLayerViews", void 0), e2([y({ readOnly: true })], p4.prototype, "suspended", null), e2([y({ type: Boolean, readOnly: true })], p4.prototype, "updating", null), p4 = e2([a3("esri.views.BasemapView")], p4);

// node_modules/@arcgis/core/views/LayerViewManager.js
function v7(e15) {
  return "tryRecycleWith" in e15;
}
var V = class {
  constructor(e15, r20, t24) {
    this.layer = e15, this.view = r20, this.layerViewImporter = t24, this._controller = new AbortController(), this._deferred = A(), this._started = false, this.done = false, this.promise = this._deferred.promise, v(this._controller.signal, () => {
      const r21 = new s2("cancelled:layerview-create", "layerview creation cancelled", { layer: e15 });
      this._deferred.reject(r21);
    });
  }
  tryRecycle(e15) {
    if (!this.done || !this.layerView || !v7(this.layerView))
      return null;
    const r20 = this.layer.type, i24 = this._controller.signal;
    for (let t24 = 0; t24 < e15.length; t24++) {
      const s18 = e15[t24];
      if (s18.type !== r20)
        continue;
      const a29 = this.layerView.tryRecycleWith(s18, { signal: i24 });
      if (a29) {
        e15.splice(t24, 1), this.layer = s18;
        const r21 = this.layerView, i25 = r21.view;
        return this.promise = Promise.race([a29.then(() => (f(this._controller.signal), s18.emit("layerview-destroy", { view: i25, layerView: r21 }), i25.emit("layerview-destroy", { view: i25, layerView: r21 }), s18.emit("layerview-create", { view: i25, layerView: r21 }), i25.emit("layerview-create", { view: i25, layerView: r21 }), r21)), new Promise((e16, r22) => v(this._controller.signal, () => r22(a2())))]), this.promise;
      }
    }
    return null;
  }
  destroy() {
    this._controller.abort();
    const { layerView: e15 } = this;
    if (!e15)
      return;
    const { layer: r20, view: i24 } = this;
    r20.emit("layerview-destroy", { view: i24, layerView: e15 }), i24.emit("layerview-destroy", { layer: r20, layerView: e15 }), this.done = true, this.layer = null, this.layerView = null, this.view = null, this.layerViewImporter = null;
  }
  async start() {
    var _a, _b, _c;
    if (this._started)
      return;
    this._started = true;
    const { _controller: { signal: e15 }, layer: r20, view: t24 } = this;
    this._map = t24.map;
    try {
      let a29, o21;
      if (await r20.load({ signal: e15 }), "prefetchResources" in r20 && await ((_a = r20.prefetchResources) == null ? void 0 : _a.call(r20, { signal: e15 })), I(r20))
        a29 = await r20.createLayerView(t24, { signal: e15 });
      else {
        if (!this.layerViewImporter.hasLayerViewModule(r20))
          throw new s2("layer:view-not-supported", "No layerview implementation was found");
        const s18 = await this.layerViewImporter.importLayerView(r20);
        f(e15), a29 = "default" in s18 ? new s18.default({ layer: r20, view: t24 }) : new s18({ layer: r20, view: t24 });
      }
      const n24 = () => {
        o21 = p(o21), a29.destroyed || a29.destroy(), a29.layer = null, a29.parent = null, a29.view = null, this.done = true;
      };
      o21 = v(e15, n24), f(e15);
      try {
        await a29.when();
      } catch (s18) {
        throw n24(), s18;
      }
      const y7 = (_c = (_b = this._map) == null ? void 0 : _b.allLayers) == null ? void 0 : _c.includes(r20);
      if (!y7)
        return n24(), void this._deferred.reject(new s2("view:no-layerview-for-layer", "The layer has been removed from the map", { layer: r20 }));
      this.layerView = a29, r20.emit("layerview-create", { view: t24, layerView: a29 }), t24.emit("layerview-create", { layer: r20, layerView: a29 }), this.done = true, this._deferred.resolve(a29);
    } catch (s18) {
      r20.emit("layerview-create-error", { view: t24, error: s18 }), t24.emit("layerview-create-error", { layer: r20, error: s18 }), this.done = true, this._deferred.reject(new s2("layerview:create-error", "layerview creation failed", { layer: r20, error: s18 }));
    }
  }
};
var L3 = class extends v3 {
  constructor(e15) {
    super(e15), this._layerLayerViewInfoMap = /* @__PURE__ */ new Map(), this._recyclingInfoMap = /* @__PURE__ */ new Map(), this._watchUpdatingTracking = new c3(), this.supportsGround = true, this._preloadLayerViewModules = () => {
      var _a;
      const e16 = (_a = this.view.map) == null ? void 0 : _a.allLayers;
      if (e16)
        for (const r20 of e16)
          this.layerViewImporter.hasLayerViewModule(r20) && this.layerViewImporter.importLayerView(r20);
    }, this._reschedule = () => (t(this._workPromise) && (this._workPromise = A(), this._workPromise.promise.catch(() => {
    })), this.removeHandles("reschedule"), this.addHandles(v2(this._doWork), "reschedule"), this._workPromise.promise), this._doWork = () => {
      var _a, _b, _c;
      const e16 = this.view.map;
      if (this._map !== e16 && (this.clear(), this._map = e16), t(this._workPromise))
        return void this.notifyChange("updating");
      this.removeHandles("reschedule"), this.removeHandles("collection-change");
      const r20 = /* @__PURE__ */ new Set(), i24 = [], t24 = this.view.ready, s18 = (e17) => {
        if (!t(e17)) {
          for (const a29 of e17)
            if (a29) {
              r20.add(a29);
              const e18 = this._layerLayerViewInfoMap.get(a29);
              e18 && t24 ? e18.start() : e18 || this._recyclingInfoMap.has(a29) || i24.push(a29), "layers" in a29 && a29.layers && s18(a29.layers);
            }
        }
      };
      for (const a29 of this._rootCollectionNames)
        s18(this.get(a29));
      for (const [a29, l17] of this._layerLayerViewInfoMap)
        if (!r20.has(a29)) {
          this._layerLayerViewInfoMap.delete(l17.layer);
          const e17 = l17.tryRecycle(i24);
          e17 ? (this._recyclingInfoMap.set(l17.layer, l17), e17.then(() => {
            this._recyclingInfoMap.delete(l17.layer), this._layerLayerViewInfoMap.set(l17.layer, l17), this._reschedule();
          }).catch(() => {
            this._recyclingInfoMap.delete(l17.layer), l17.destroy(), this._reschedule();
          })) : l17.destroy();
        }
      for (const [a29, l17] of this._recyclingInfoMap)
        r20.has(a29) || (this._recyclingInfoMap.delete(l17.layer), l17.destroy());
      for (const a29 of i24)
        this._createLayerView(a29);
      this._refreshCollections();
      const o21 = [(_a = e16 == null ? void 0 : e16.ground) == null ? void 0 : _a.layers, (_b = e16 == null ? void 0 : e16.basemap) == null ? void 0 : _b.baseLayers, (_c = e16 == null ? void 0 : e16.basemap) == null ? void 0 : _c.referenceLayers, e16 == null ? void 0 : e16.layers].filter((e17) => !!e17);
      r20.forEach((e17) => "layers" in e17 && o21.push(e17.layers)), this.addHandles(o21.map((e17) => this._watchUpdatingTracking.addOnCollectionChange(() => e17, this._reschedule)), "collection-change"), this._workPromise.resolve(), this._workPromise = null;
    };
  }
  initialize() {
    this.own([a6(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.allLayers;
    }, "change", this._preloadLayerViewModules, { onListenerAdd: this._preloadLayerViewModules }), l3(() => {
      const e15 = this.view, r20 = e15 == null ? void 0 : e15.map;
      return [r20 == null ? void 0 : r20.basemap, r20 == null ? void 0 : r20.ground, r20 == null ? void 0 : r20.layers, e15 == null ? void 0 : e15.ready];
    }, () => this._reschedule(), w4)]), this._preloadLayerViewModules(), this._reschedule();
  }
  destroy() {
    this.clear(), this._watchUpdatingTracking.destroy(), this._map = null, r(this._workPromise) && (this._workPromise.reject(a2()), this._workPromise = null);
  }
  get _layersToLayerViews() {
    const e15 = [["view.map.basemap.baseLayers", "view.basemapView.baseLayerViews"], ["view.map.layers", "view.layerViews"], ["view.map.basemap.referenceLayers", "view.basemapView.referenceLayerViews"]];
    return this.supportsGround && e15.push(["view.map.ground.layers", "view.groundView.layerViews"]), new Map(e15);
  }
  get _rootCollectionNames() {
    return Array.from(this._layersToLayerViews.keys());
  }
  get updating() {
    return r(this._workPromise) || this._watchUpdatingTracking.updating || n3(this._layerLayerViewInfoMap, (e15) => !e15.done);
  }
  get updatingRemaining() {
    let e15 = 0;
    for (const r20 of this._layerLayerViewInfoMap.values())
      r20.done || ++e15;
    return e15;
  }
  clear() {
    if (!this.destroyed) {
      for (const e15 of this._layerLayerViewInfoMap.values())
        e15.destroy();
      this._layerLayerViewInfoMap.clear(), this._refreshCollections();
    }
  }
  async whenLayerView(e15) {
    if (await this._reschedule(), !this._layerLayerViewInfoMap.has(e15)) {
      if (this._recyclingInfoMap.has(e15))
        return this._recyclingInfoMap.get(e15).promise;
      throw new s2("view:no-layerview-for-layer", "No layerview has been found for the layer", { layer: e15 });
    }
    return this._layerLayerViewInfoMap.get(e15).promise;
  }
  _refreshCollections() {
    for (const [e15, r20] of this._layersToLayerViews)
      this._populateLayerViewsOwners(this.get(e15), this.get(r20), this.view);
    this.notifyChange("updating"), this.notifyChange("updatingRemaining");
  }
  _populateLayerViewsOwners(e15, r20, i24) {
    if (!e15 || !r20)
      return void (r20 && r20.removeAll());
    let t24 = 0;
    for (const s18 of e15) {
      const e16 = this._layerLayerViewInfoMap.get(s18);
      if (!e16 || !e16.layerView)
        continue;
      const a29 = e16.layerView;
      a29.layer = s18, a29.parent = i24, r20.getItemAt(t24) !== a29 && r20.splice(t24, 0, a29), s18.layers && this._populateLayerViewsOwners(s18.layers, a29.layerViews, a29), t24 += 1;
    }
    t24 < r20.length && r20.splice(t24, r20.length);
  }
  _createLayerView(e15) {
    e15.load().catch(() => {
    }), this.layerViewImporter.hasLayerViewModule(e15) && this.layerViewImporter.importLayerView(e15);
    const r20 = new V(e15, this.view, this.layerViewImporter);
    r20.promise.then(() => this._refreshCollections(), (r21) => {
      r21 && (j(r21) || "cancelled:layerview-create" === r21.name) || s.getLogger(this.declaredClass).error(`Failed to create layerview for layer title:'${e15.title ?? "no title"}', id:'${e15.id ?? "no id"}' of type '${e15.type}'.`, { layer: e15, error: r21 }), this._refreshCollections();
    }), this._layerLayerViewInfoMap.set(e15, r20), this.view.ready && r20.start(), this.notifyChange("updating"), this.notifyChange("updatingRemaining");
  }
};
e2([y()], L3.prototype, "_workPromise", void 0), e2([y({ readOnly: true })], L3.prototype, "_watchUpdatingTracking", void 0), e2([y({ readOnly: true })], L3.prototype, "_layersToLayerViews", null), e2([y({ readOnly: true })], L3.prototype, "_rootCollectionNames", null), e2([y()], L3.prototype, "layerViewImporter", void 0), e2([y()], L3.prototype, "supportsGround", void 0), e2([y({ readOnly: true })], L3.prototype, "updating", null), e2([y({ readOnly: true })], L3.prototype, "updatingRemaining", null), e2([y({ constructOnly: true })], L3.prototype, "view", void 0), L3 = e2([a3("esri.views.LayerViewManager")], L3);
var M3 = L3;
function I(e15) {
  return "createLayerView" in e15 && null != e15.createLayerView;
}

// node_modules/@arcgis/core/views/Magnifier.js
var i8 = class extends v3 {
  constructor(o21) {
    super(o21), this.factor = 1.5, this.offset = c2(0, 0), this.position = null, this.size = 120, this.maskUrl = null, this.maskEnabled = true, this.overlayUrl = null, this.overlayEnabled = true, this.visible = true;
  }
  get version() {
    return this.commitProperty("factor"), this.commitProperty("offset"), this.commitProperty("position"), this.commitProperty("visible"), this.commitProperty("size"), this.commitProperty("maskUrl"), this.commitProperty("maskEnabled"), this.commitProperty("overlayUrl"), this.commitProperty("overlayEnabled"), (this._get("version") || 0) + 1;
  }
};
e2([y({ type: Number })], i8.prototype, "factor", void 0), e2([y({ nonNullable: true })], i8.prototype, "offset", void 0), e2([y()], i8.prototype, "position", void 0), e2([y({ type: Number, range: { min: 0 } })], i8.prototype, "size", void 0), e2([y()], i8.prototype, "maskUrl", void 0), e2([y()], i8.prototype, "maskEnabled", void 0), e2([y()], i8.prototype, "overlayUrl", void 0), e2([y()], i8.prototype, "overlayEnabled", void 0), e2([y({ readOnly: true })], i8.prototype, "version", null), e2([y({ type: Boolean })], i8.prototype, "visible", void 0), i8 = e2([a3("esri.views.Magnifier")], i8);
var p5 = i8;

// node_modules/@arcgis/core/views/3d/support/TextureCollection.js
var n10 = class extends v3 {
  constructor(e15, t24) {
    super({}), this._stage = e15, this._textureRequests = /* @__PURE__ */ new Map(), this._frameTask = (t24 == null ? void 0 : t24.registerTask(R2.TEXTURE_UNLOAD)) ?? D;
  }
  normalizeCtorArgs() {
    return {};
  }
  destroy() {
    super.destroy(), this._frameTask.remove(), this._textureRequests.forEach((e15) => this._releaseTextureRequest(e15)), this._textureRequests.clear();
  }
  get updating() {
    return this._frameTask.updating;
  }
  fromData(e15, t24, r20) {
    const s18 = this.makeUid(e15);
    let o21 = this._textureRequests.get(s18);
    if (!o21) {
      const e16 = t24();
      o21 = { referenceCount: 0, texture: e16, textureAsync: null, abortController: null, onRemove: r20 }, this._stage && (this._stage.add(e16), this._stage.loadImmediate(e16)), this._textureRequests.set(s18, o21);
    }
    return o21.referenceCount++, { uid: s18, texture: o21.texture, release: () => this._release(s18) };
  }
  _release(e15) {
    const t24 = this._textureRequests.get(e15);
    t24 ? (t24.referenceCount < 1 && console.warn("TextureCollection: reference count is < 1 for " + e15), t24.referenceCount--, t24.referenceCount < 1 && this._frameTask.schedule(() => this._releaseNow(e15))) : console.warn(`TextureCollection: texture doesn't exist: '${e15}'`);
  }
  get test() {
    return { textureRequests: this._textureRequests };
  }
  _releaseNow(e15) {
    if (!this._textureRequests)
      return;
    const t24 = this._textureRequests.get(e15);
    !t24 || t24.referenceCount > 0 || (this._releaseTextureRequest(t24), this._textureRequests.delete(e15));
  }
  _releaseTextureRequest(e15) {
    var _a;
    e15.onRemove && e15.onRemove(), e15.texture ? (_a = this._stage) == null ? void 0 : _a.remove(e15.texture) : e15.abortController && (e15.abortController.abort(), e15.abortController = null);
  }
  makeUid(e15, t24 = null) {
    return r(t24) ? `${e15}.${t24}px` : e15;
  }
};
e2([y()], n10.prototype, "_frameTask", void 0), e2([y()], n10.prototype, "updating", null), n10 = e2([a3("esri.views.3d.support.TextureCollection")], n10);

// node_modules/@arcgis/core/views/input/IViewEvents.js
var t12;
!function(t24) {
  t24[t24.Left = 0] = "Left", t24[t24.Middle = 1] = "Middle", t24[t24.Right = 2] = "Right";
}(t12 || (t12 = {}));

// node_modules/@arcgis/core/views/input/ViewEvents.js
var r11 = ["click", "double-click", "immediate-click", "immediate-double-click", "hold", "drag", "key-down", "key-up", "pointer-down", "pointer-move", "pointer-up", "pointer-drag", "mouse-wheel", "pointer-enter", "pointer-leave", "gamepad", "focus", "blur"];
var i9 = {};
function o8(t24) {
  return !!i9[t24];
}
function s7(t24) {
  for (const e15 of t24)
    if (!o8(e15))
      return false;
  return true;
}
r11.forEach((t24) => {
  i9[t24] = true;
});
var p6 = class {
  constructor(t24) {
    this._handlers = /* @__PURE__ */ new Map(), this._counter = 0, this._handlerCounts = /* @__PURE__ */ new Map(), this.view = t24, this.inputManager = null;
  }
  connect(t24) {
    t24 && this.disconnect(), this.inputManager = t24, this._handlers.forEach(({ handler: t25, priority: e15 }, a29) => {
      var _a;
      return (_a = this.inputManager) == null ? void 0 : _a.installHandlers(a29, [t25], e15);
    });
  }
  disconnect() {
    this.inputManager && this._handlers.forEach((t24, e15) => {
      var _a;
      return (_a = this.inputManager) == null ? void 0 : _a.uninstallHandlers(e15);
    }), this.inputManager = null;
  }
  destroy() {
    this.disconnect(), this._handlers.clear(), this.view = null;
  }
  on(t24, e15, a29, r20) {
    const i24 = Array.isArray(t24) ? t24 : t24.split(",");
    if (!s7(i24))
      return i24.some(o8) && console.error("Error: registering input events and other events on the view at the same time is not supported."), null;
    let p20, l17;
    Array.isArray(e15) ? l17 = e15 : (p20 = e15, l17 = []), "function" == typeof a29 ? p20 = a29 : r20 = a29, r20 = null != r20 ? r20 : P.DEFAULT;
    const u13 = this._createUniqueGroupName(), m14 = new c7(this.view, i24, l17, p20);
    this._handlers.set(u13, { handler: m14, priority: r20 });
    for (const n24 of i24) {
      const t25 = this._handlerCounts.get(n24) || 0;
      this._handlerCounts.set(n24, t25 + 1);
    }
    return this.inputManager && this.inputManager.installHandlers(u13, [m14], r20), { remove: () => this._removeHandler(u13, i24) };
  }
  hasHandler(t24) {
    return !!this._handlerCounts.get(t24);
  }
  _removeHandler(t24, e15) {
    if (this._handlers.has(t24)) {
      this._handlers.delete(t24);
      for (const t25 of e15) {
        const e16 = this._handlerCounts.get(t25);
        void 0 === e16 ? console.error("Trying to remove handler for event that has no handlers registered: ", t25) : 1 === e16 ? this._handlerCounts.delete(t25) : this._handlerCounts.set(t25, e16 - 1);
      }
    }
    this.inputManager && this.inputManager.uninstallHandlers(t24);
  }
  _createUniqueGroupName() {
    return this._counter += 1, `viewEvents_${this._counter}`;
  }
};
var c7 = class extends i6 {
  constructor(t24, e15, a29, n24) {
    super(true), this._latestDragStart = void 0, this.view = t24;
    for (const r20 of e15)
      switch (r20) {
        case "click":
          this.registerIncoming("click", a29, (t25) => n24(this._wrapClick(t25)));
          break;
        case "double-click":
          this.registerIncoming("double-click", a29, (t25) => n24(this._wrapDoubleClick(t25)));
          break;
        case "immediate-click":
          this.registerIncoming("immediate-click", a29, (t25) => n24(this._wrapImmediateClick(t25)));
          break;
        case "immediate-double-click":
          this.registerIncoming("immediate-double-click", a29, (t25) => n24(this._wrapImmediateDoubleClick(t25)));
          break;
        case "hold":
          this.registerIncoming("hold", a29, (t25) => n24(this._wrapHold(t25)));
          break;
        case "drag":
          this.registerIncoming("drag", a29, (t25) => {
            const e16 = this._wrapDrag(t25);
            e16 && n24(e16);
          });
          break;
        case "key-down":
          this.registerIncoming("key-down", a29, (t25) => n24(this._wrapKeyDown(t25)));
          break;
        case "key-up":
          this.registerIncoming("key-up", a29, (t25) => n24(this._wrapKeyUp(t25)));
          break;
        case "pointer-down":
          this.registerIncoming("pointer-down", a29, (t25) => n24(this._wrapPointer(t25, "pointer-down")));
          break;
        case "pointer-move":
          this.registerIncoming("pointer-move", a29, (t25) => n24(this._wrapPointer(t25, "pointer-move")));
          break;
        case "pointer-up":
          this.registerIncoming("pointer-up", a29, (t25) => n24(this._wrapPointer(t25, "pointer-up")));
          break;
        case "pointer-drag":
          this.registerIncoming("pointer-drag", a29, (t25) => n24(this._wrapPointerDrag(t25)));
          break;
        case "mouse-wheel":
          this.registerIncoming("mouse-wheel", a29, (t25) => n24(this._wrapMouseWheel(t25)));
          break;
        case "pointer-enter":
          this.registerIncoming("pointer-enter", a29, (t25) => n24(this._wrapPointer(t25, "pointer-enter")));
          break;
        case "pointer-leave":
          this.registerIncoming("pointer-leave", a29, (t25) => n24(this._wrapPointer(t25, "pointer-leave")));
          break;
        case "gamepad":
          this.registerIncoming("gamepad", a29, (t25) => {
            n24(this._wrapGamepad(t25));
          });
          break;
        case "focus":
          this.registerIncoming("focus", a29, (t25) => {
            n24(this._wrapFocus(t25));
          });
          break;
        case "blur":
          this.registerIncoming("blur", a29, (t25) => {
            n24(this._wrapBlur(t25));
          });
      }
  }
  _wrapFocus(t24) {
    return { type: "focus", timestamp: t24.timestamp, native: t24.data.native, cancelable: t24.cancelable, stopPropagation: () => t24.stopPropagation(), async: (e15) => t24.async(e15), preventDefault: () => t24.preventDefault() };
  }
  _wrapBlur(t24) {
    return { type: "blur", timestamp: t24.timestamp, native: t24.data.native, cancelable: t24.cancelable, stopPropagation: () => t24.stopPropagation(), async: (e15) => t24.async(e15), preventDefault: () => t24.preventDefault() };
  }
  _wrapClick(t24) {
    const { pointerType: a29, button: n24, buttons: r20, x: i24, y: o21, native: s18, eventId: p20 } = t24.data, { cancelable: c21, timestamp: l17 } = t24;
    return { type: "click", pointerType: a29, button: n24, buttons: r20, x: i24, y: o21, native: s18, timestamp: l17, screenPoint: c2(i24, o21), mapPoint: this._getMapPoint(i24, o21), eventId: p20, cancelable: c21, stopPropagation: () => t24.stopPropagation(), async: (e15) => t24.async(e15), preventDefault: () => t24.preventDefault() };
  }
  _wrapDoubleClick(t24) {
    const { pointerType: e15, button: a29, buttons: n24, x: r20, y: i24, native: o21, eventId: s18 } = t24.data, { cancelable: p20, timestamp: c21 } = t24;
    return { type: "double-click", pointerType: e15, button: a29, buttons: n24, x: r20, y: i24, native: o21, timestamp: c21, mapPoint: this._getMapPoint(r20, i24), eventId: s18, cancelable: p20, stopPropagation: () => t24.stopPropagation(), async: (e16) => t24.async(e16), preventDefault: () => t24.preventDefault() };
  }
  _wrapImmediateClick(t24) {
    const { pointerType: e15, button: a29, buttons: n24, x: r20, y: i24, native: o21, eventId: s18 } = t24.data, p20 = o21.pointerId, { cancelable: c21, timestamp: l17 } = t24;
    return { type: "immediate-click", pointerId: p20, pointerType: e15, button: a29, buttons: n24, x: r20, y: i24, native: o21, timestamp: l17, mapPoint: this._getMapPoint(r20, i24), eventId: s18, cancelable: c21, stopPropagation: () => t24.stopPropagation(), async: (e16) => t24.async(e16), preventDefault: () => t24.preventDefault() };
  }
  _wrapImmediateDoubleClick(t24) {
    const { pointerType: e15, button: a29, buttons: n24, x: r20, y: i24, native: o21, eventId: s18 } = t24.data, p20 = o21.pointerId, { cancelable: c21, timestamp: l17 } = t24;
    return { type: "immediate-double-click", pointerId: p20, pointerType: e15, button: a29, buttons: n24, x: r20, y: i24, native: o21, timestamp: l17, mapPoint: this._getMapPoint(r20, i24), eventId: s18, cancelable: c21, stopPropagation: () => t24.stopPropagation(), async: (e16) => t24.async(e16), preventDefault: () => t24.preventDefault() };
  }
  _wrapHold(t24) {
    const { pointerType: e15, button: a29, buttons: n24, x: r20, y: i24, native: o21 } = t24.data, { cancelable: s18, timestamp: p20 } = t24;
    return { type: "hold", pointerType: e15, button: a29, buttons: n24, x: r20, y: i24, native: o21, timestamp: p20, mapPoint: this._getMapPoint(r20, i24), cancelable: s18, stopPropagation: () => t24.stopPropagation(), async: (e16) => t24.async(e16), preventDefault: () => t24.preventDefault() };
  }
  _getMapPoint(t24, a29) {
    return this.view.toMap(c2(t24, a29), { exclude: [] });
  }
  _wrapDrag(e15) {
    const a29 = e15.data, { x: n24, y: r20 } = a29.center, { action: i24, pointerType: o21, button: s18 } = a29;
    if ("start" === i24 && (this._latestDragStart = a29), !this._latestDragStart)
      return;
    const p20 = a29.pointer.native, c21 = a29.buttons, { cancelable: l17, timestamp: u13 } = e15, m14 = { x: this._latestDragStart.center.x, y: this._latestDragStart.center.y };
    return "end" === i24 && (this._latestDragStart = void 0), { type: "drag", action: i24, x: n24, y: r20, origin: m14, pointerType: o21, button: s18, buttons: c21, radius: a29.radius, angle: b(a29.angle), native: p20, timestamp: u13, cancelable: l17, stopPropagation: () => e15.stopPropagation(), async: (t24) => e15.async(t24), preventDefault: () => e15.preventDefault() };
  }
  _wrapKeyDown(t24) {
    const { key: e15, repeat: a29, native: n24 } = t24.data, { cancelable: r20, timestamp: i24 } = t24;
    return { type: "key-down", key: e15, repeat: a29, native: n24, timestamp: i24, cancelable: r20, stopPropagation: () => t24.stopPropagation(), async: (e16) => t24.async(e16), preventDefault: () => t24.preventDefault() };
  }
  _wrapKeyUp(t24) {
    const { key: e15, native: a29 } = t24.data, { cancelable: n24, timestamp: r20 } = t24;
    return { type: "key-up", key: e15, native: a29, timestamp: r20, cancelable: n24, stopPropagation: () => t24.stopPropagation(), async: (e16) => t24.async(e16), preventDefault: () => t24.preventDefault() };
  }
  _wrapPointer(t24, e15) {
    const { x: a29, y: n24, button: r20, buttons: i24, native: o21, eventId: s18 } = t24.data, p20 = o21.pointerId, c21 = o21.pointerType, { cancelable: l17, timestamp: u13 } = t24;
    return { type: e15, x: a29, y: n24, pointerId: p20, pointerType: c21, button: r20, buttons: i24, native: o21, timestamp: u13, eventId: s18, cancelable: l17, stopPropagation: () => t24.stopPropagation(), async: (e16) => t24.async(e16), preventDefault: () => t24.preventDefault() };
  }
  _wrapPointerDrag(t24) {
    const { x: e15, y: a29, buttons: n24, native: r20, eventId: i24 } = t24.data.currentEvent, { button: o21 } = t24.data.startEvent, s18 = t24.data.startEvent.native.pointerId, p20 = t24.data.startEvent.native.pointerType, c21 = t24.data.action, l17 = { x: t24.data.startEvent.x, y: t24.data.startEvent.y }, { cancelable: u13, timestamp: m14 } = t24;
    return { type: "pointer-drag", x: e15, y: a29, pointerId: s18, pointerType: p20, button: o21, buttons: n24, action: c21, origin: l17, native: r20, timestamp: m14, eventId: i24, cancelable: u13, stopPropagation: () => t24.stopPropagation(), async: (e16) => t24.async(e16), preventDefault: () => t24.preventDefault() };
  }
  _wrapMouseWheel(t24) {
    const { cancelable: e15, data: a29, timestamp: n24 } = t24, { x: r20, y: i24, deltaY: o21, native: s18 } = a29;
    return { type: "mouse-wheel", x: r20, y: i24, deltaY: o21, native: s18, timestamp: n24, cancelable: e15, stopPropagation: () => t24.stopPropagation(), async: (e16) => t24.async(e16), preventDefault: () => t24.preventDefault() };
  }
  _wrapGamepad(t24) {
    const { action: e15, state: a29, device: n24 } = t24.data, { cancelable: r20, timestamp: i24 } = t24, { buttons: o21, axes: s18 } = a29;
    return { type: "gamepad", device: n24, timestamp: i24, action: e15, buttons: o21, axes: s18, cancelable: r20, stopPropagation: () => t24.stopPropagation(), async: (e16) => t24.async(e16), preventDefault: () => t24.preventDefault() };
  }
};

// node_modules/@arcgis/core/views/interactive/interfaces.js
var o9;
var t13;
var u3;
!function(o21) {
  o21[o21.USER = 0] = "USER", o21[o21.MANAGER = 1] = "MANAGER";
}(o9 || (o9 = {})), function(o21) {
  o21[o21.None = 0] = "None", o21[o21.Unfocused = 1] = "Unfocused", o21[o21.Focused = 2] = "Focused", o21[o21.Unselected = 4] = "Unselected", o21[o21.Selected = 8] = "Selected", o21[o21.All = 15] = "All";
}(t13 || (t13 = {})), function(o21) {
  o21[o21.None = 0] = "None", o21[o21.Custom1 = 16] = "Custom1", o21[o21.Custom2 = 32] = "Custom2", o21[o21.Custom3 = 64] = "Custom3", o21[o21.Custom4 = 128] = "Custom4", o21[o21.Custom5 = 256] = "Custom5", o21[o21.Custom6 = 512] = "Custom6", o21[o21.Custom7 = 1024] = "Custom7", o21[o21.Custom8 = 2048] = "Custom8", o21[o21.Custom9 = 4096] = "Custom9", o21[o21.Custom10 = 8192] = "Custom10", o21[o21.Custom11 = 16384] = "Custom11", o21[o21.Custom12 = 32768] = "Custom12", o21[o21.All = 65520] = "All";
}(u3 || (u3 = {}));

// node_modules/@arcgis/core/views/interactive/interactiveToolUtils.js
function o10(t24) {
  return [t24.on("before-add", (o21) => {
    const i24 = o21.item;
    if (null == i24 || t24.includes(i24))
      return s.getLogger("esri.views.interactive.interactiveToolUtils").warn("Tool is either already in the list of tools or tool is `null`. Not adding tool."), void o21.preventDefault();
    i24.onAdd();
  }), t24.on("after-remove", (e15) => {
    const t25 = e15.item;
    t25.active && (t25.view.activeTool = null), t25.destroy();
  })];
}
function i10(e15) {
  return e15.visible && null != e15.getEditableFlag && e15.getEditableFlag(o9.USER) && e15.getEditableFlag(o9.MANAGER);
}

// node_modules/@arcgis/core/views/support/screenUtils.js
function n11(t24) {
  return c2(t24.x, t24.y);
}
function i12(t24, n24) {
  var _a;
  const c21 = (_a = t24 instanceof HTMLElement ? t24 : t24.surface) == null ? void 0 : _a.getBoundingClientRect();
  return c21 ? c2(n24.clientX - c21.left, n24.clientY - c21.top) : c2(0, 0);
}
function r12(e15, t24) {
  return t24 instanceof Event ? i12(e15, t24) : n11(t24);
}
function o11(e15) {
  if (e15 instanceof Event)
    return true;
  if ("object" == typeof e15 && "type" in e15) {
    switch (e15.type) {
      case "click":
      case "double-click":
      case "pointer-down":
      case "pointer-drag":
      case "pointer-enter":
      case "pointer-leave":
      case "pointer-up":
      case "pointer-move":
      case "immediate-click":
      case "immediate-double-click":
      case "hold":
      case "drag":
      case "mouse-wheel":
        return true;
      default:
        return false;
    }
  }
  return false;
}

// node_modules/@arcgis/core/views/interactive/ToolViewManagerManipulatorState.js
var c8 = class {
  constructor() {
    this._pointerLocations = /* @__PURE__ */ new Map(), this._hoveredManipulators = /* @__PURE__ */ new Map(), this._grabbedManipulators = /* @__PURE__ */ new Map(), this._draggedManipulators = /* @__PURE__ */ new Map(), this._stopDrag = false, this._revertToNullActiveTool = false, this._cursor = null;
  }
  get cursor() {
    return this._cursor;
  }
  handleInputEvent(t24, e15) {
    const s18 = () => t24.stopPropagation();
    switch (t24.type) {
      case "pointer-move":
        u4(t24.pointerType) && this._pointerLocations.set(t24.pointerId, { x: t24.x, y: t24.y, pointerType: t24.pointerType });
        break;
      case "drag":
        this._grabbedManipulators.size > 0 && (this._stopDrag = true), this._stopDrag && (s18(), "end" === t24.action && (this._stopDrag = false));
        break;
      case "pointer-down": {
        if (!h4(t24))
          break;
        const o21 = n11(t24), a29 = this._intersect(o21, t24.pointerType, e15.forEachTool);
        if (t(a29))
          break;
        const n24 = a29.manipulator, p20 = a29.tool;
        !(r(n24) && r(p20) && n24.interactive) || n24.grabbable && n24.grabbableForEvent(t24) || !n24.grabbing || n24.dragging || this._ungrabManipulatorBeforeDragging(n24, t24, e15), r(n24) && r(p20) && n24.interactive && n24.grabbable && n24.grabbableForEvent(t24) && !n24.grabbing && (this._grabbedManipulators.set(t24.pointerId, { manipulator: n24, tool: p20, start: o21, pointerType: t24.pointerType }), 1 === this._grabbedManipulators.size && t(e15.activeTool) && (this._revertToNullActiveTool = true, e15.setActiveTool(a29.tool)), n24.grabbing = true, n24.events.emit("grab-changed", { action: "start", pointerType: t24.pointerType, screenPoint: o21 }), s18());
        break;
      }
      case "pointer-up":
        this._draggedManipulators.has(t24.pointerId) || this._handlePointerEnd(t24, e15);
        break;
      case "pointer-drag": {
        if (!h4(t24))
          break;
        const r20 = this._grabbedManipulators.get(t24.pointerId), p20 = o(r20, ({ manipulator: t25 }) => t25), c21 = o(r20, ({ tool: t25 }) => t25);
        if (t(p20) || t(c21))
          break;
        const u13 = n11(t24);
        u13.x = a4(u13.x, 0, e15.view.width), u13.y = a4(u13.y, 0, e15.view.height);
        const d12 = e(r20).start, g11 = this._draggedManipulators.get(t24.pointerId);
        switch (t24.action) {
          case "start":
          case "update":
            "update" !== t24.action && 1 !== this._grabbedManipulators.size || (p20.dragging = true, g11 ? p20.events.emit("drag", { action: "update", start: d12, screenPoint: u13 }) : p20.events.emit("drag", { action: "start", start: d12, screenPoint: u13, pointerType: t24.pointerType }), this._draggedManipulators.set(t24.pointerId, { tool: c21, manipulator: p20, start: d12 }));
            break;
          case "end":
            p20.dragging = false, g11 && p20.events.emit("drag", { action: "end", start: d12, screenPoint: u13 }), this._draggedManipulators.delete(t24.pointerId), this._handlePointerEnd(t24, e15);
        }
        s18();
        break;
      }
      case "immediate-click": {
        const o21 = n11(t24), a29 = this._intersect(o21, t24.pointerType, e15.forEachTool);
        if (d4(t24) || e15.forEachTool((t25) => {
          if ((!r(a29) || a29.tool !== t25 || t25.automaticManipulatorSelection) && t25.manipulators) {
            let e16 = false;
            t25.manipulators.forEach(({ manipulator: t26 }) => {
              t26.selected && (t26.selected = false, e16 = true);
            }), e16 && t25.onManipulatorSelectionChanged && t25.onManipulatorSelectionChanged();
          }
        }), t(a29))
          break;
        const { manipulator: n24, tool: p20 } = a29;
        if (!n24.interactive)
          break;
        n24.selectable && p20.automaticManipulatorSelection && (n24.selected = !n24.selected, p20.onManipulatorSelectionChanged && p20.onManipulatorSelectionChanged());
        const c21 = t24.native.shiftKey;
        n24.events.emit("immediate-click", { screenPoint: o21, button: t24.button, pointerType: t24.pointerType, shiftKey: c21, stopPropagation: s18 });
        break;
      }
      case "click": {
        const o21 = n11(t24), a29 = this._intersect(o21, t24.pointerType, e15.forEachTool), n24 = r(a29) ? a29.manipulator : null;
        if (t(n24) || !n24.interactive)
          break;
        const p20 = t24.native.shiftKey;
        n24.events.emit(t24.type, { screenPoint: o21, button: t24.button, pointerType: t24.pointerType, shiftKey: p20 }), s18();
        break;
      }
      case "double-click": {
        const o21 = n11(t24), a29 = this._intersect(o21, t24.pointerType, e15.forEachTool), n24 = r(a29) ? a29.manipulator : null;
        if (t(n24) || !n24.interactive)
          break;
        const p20 = t24.native.shiftKey;
        n24.events.emit("double-click", { screenPoint: o21, button: t24.button, pointerType: t24.pointerType, shiftKey: p20, stopPropagation: s18 });
        break;
      }
      case "immediate-double-click": {
        const o21 = n11(t24), a29 = this._intersect(o21, t24.pointerType, e15.forEachTool), n24 = r(a29) ? a29.manipulator : null;
        if (t(n24) || !n24.interactive)
          break;
        const p20 = t24.native.shiftKey;
        n24.events.emit("immediate-double-click", { screenPoint: o21, button: t24.button, pointerType: t24.pointerType, shiftKey: p20, stopPropagation: s18 });
        break;
      }
    }
    this._onFocusChange(e15.forEachTool);
  }
  _ungrabManipulatorBeforeDragging(t24, e15, o21) {
    t24.grabbing = false, t24.events.emit("grab-changed", { action: "end", pointerType: e15.pointerType, screenPoint: n11(e15) }), this._grabbedManipulators.forEach(({ manipulator: e16 }, o22) => {
      e16 === t24 && this._grabbedManipulators.delete(o22);
    }), this._afterManipulatorUngrab(o21.setActiveTool);
  }
  _handlePointerEnd(t24, e15) {
    const o21 = o(this._grabbedManipulators.get(t24.pointerId), ({ manipulator: t25 }) => t25);
    t(o21) || o21.grabbing && (o21.grabbing = false, o21.events.emit("grab-changed", { action: "end", pointerType: t24.pointerType, screenPoint: n11(t24) }), this._grabbedManipulators.delete(t24.pointerId), this._afterManipulatorUngrab(e15.setActiveTool));
  }
  _cursorFromMap(t24) {
    let o21 = null;
    return n3(t24, ({ manipulator: t25 }) => !(t(t25) || !t25.interactive) && (t25.grabbing && t25.grabCursor ? (o21 = t25.grabCursor, true) : !!t25.cursor && (o21 = t25.cursor, true))), o21;
  }
  _onFocusChange(t24) {
    this._updateCursor(), this._updateFocusedManipulatorTools(t24);
  }
  _updateCursor() {
    this._grabbedManipulators.size > 0 ? this._cursor = this._cursorFromMap(this._grabbedManipulators) || "grabbing" : this._hoveredManipulators.size > 0 ? this._cursor = this._cursorFromMap(this._hoveredManipulators) || "pointer" : this._cursor = null;
  }
  _updateFocusedManipulatorTools(e15) {
    const o21 = /* @__PURE__ */ new Set(), i24 = /* @__PURE__ */ new Set();
    this._grabbedManipulators.forEach(({ tool: t24 }) => {
      o21.add(t24);
    }), this._hoveredManipulators.forEach(({ tool: t24 }) => {
      i24.add(t24);
    }), e15((e16) => {
      e16.hasGrabbedManipulators = o21.has(e16), e16.hasHoveredManipulators = i24.has(e16);
      const a29 = this._grabbedManipulators.values(), n24 = o2(a29, ({ tool: t24 }) => t24 === e16);
      e16.firstGrabbedManipulator = r(n24) ? n24.manipulator : null;
    });
  }
  clearPointers(t24, { forEachTool: e15, setActiveTool: o21 }, r20 = true, a29) {
    const n24 = (e16, o22) => e16 === t24 && (t(a29) || a29 === o22);
    this._grabbedManipulators.forEach(({ tool: t25, manipulator: e16, pointerType: o22 }, r21) => {
      n24(t25, e16) && (this._grabbedManipulators.delete(r21), e16.grabbing = false, e16.events.emit("grab-changed", { action: "end", screenPoint: null, pointerType: o22 }));
    }), this._draggedManipulators.forEach(({ tool: t25, manipulator: e16 }, o22) => {
      n24(t25, e16) && (this._draggedManipulators.delete(o22), e16.dragging = false, e16.events.emit("drag", { action: "cancel" }));
    }), r20 && this._hoveredManipulators.forEach(({ tool: t25, manipulator: e16 }, o22) => {
      n24(t25, e16) && (this._hoveredManipulators.delete(o22), e16.hovering = false);
    }), this._afterManipulatorUngrab(o21), this._onFocusChange(e15);
  }
  _intersect(t24, e15, o21) {
    let r20 = null;
    return o21((o22) => {
      if (null == o22.manipulators || !i10(o22))
        return false;
      const a29 = o22.manipulators.intersect(t24, e15);
      return !t(a29) && (r20 = { tool: o22, manipulator: a29 }, true);
    }), r20;
  }
  updateHoveredStateFromKnownPointers(t24) {
    this._pointerLocations.forEach((e15, o21) => {
      this._updateHoveredStateForPointerAtScreenPosition(c2(e15.x, e15.y), o21, e15.pointerType, t24);
    });
  }
  handleHoverEvent(t24, e15) {
    "pointer-up" !== t24.type && "immediate-click" !== t24.type && "pointer-move" !== t24.type || !u4(t24.pointerType) || this._updateHoveredStateForPointerAtScreenPosition(n11(t24), t24.pointerId, t24.pointerType, e15);
  }
  _updateHoveredStateForPointerAtScreenPosition(t24, e15, o21, i24) {
    let n24 = this._intersect(t24, o21, i24);
    const s18 = o(this._hoveredManipulators.get(e15), ({ manipulator: t25 }) => t25);
    r(n24) && !n24.manipulator.interactive && (n24 = null), r(n24) && s18 === n24.manipulator || (r(s18) && (s18.hovering = false), r(n24) ? (n24.manipulator.hovering = true, this._hoveredManipulators.set(e15, n24)) : this._hoveredManipulators.delete(e15), this._onFocusChange(i24));
  }
  _afterManipulatorUngrab(t24) {
    0 === this._grabbedManipulators.size && this._revertToNullActiveTool && (t24(null), this._revertToNullActiveTool = false);
  }
};
function u4(t24) {
  return "mouse" === t24;
}
function h4(t24) {
  return "mouse" !== t24.pointerType || 0 === t24.button;
}
function d4(t24) {
  return !!t24.native.shiftKey;
}

// node_modules/@arcgis/core/views/ToolViewManager.js
var E2 = "attached";
var g6 = "tools";
var w8 = class extends d {
  constructor(t24) {
    super(t24), this._manipulatorState = new c8(), this.tools = new j2(), this.cursor = null, this._forEachTool = (t25) => {
      for (const o21 of this.tools.items)
        if (t25(o21))
          return;
    };
  }
  initialize() {
    this.handles.add([this.view.on(r11, (t24) => {
      this._handleInputEvent(t24);
    }, P.TOOL), ...o10(this.tools), this.tools.on("before-add", ({ item: t24 }) => {
      this._updateToolEditableFlag(t24);
    }), this.tools.on("before-remove", ({ item: t24 }) => {
      this._manipulatorState.clearPointers(t24, this._manipulatorStateEventArgs), this._updateCursor();
    }), this.tools.on("change", () => {
      this._refreshToolWatchers();
    })]);
  }
  destroy() {
    this.detach(), this.handles.removeAll();
  }
  get _manipulatorStateEventArgs() {
    return { forEachTool: this._forEachTool, activeTool: this.activeTool, setActiveTool: (t24) => {
      this.activeTool = t24;
    }, view: this.view };
  }
  set activeTool(t24) {
    if (r(t24) && !this.view.ready)
      return void s.getLogger(this.declaredClass).error("Cannot set active tool while view is not ready.");
    if (t24 === this.activeTool)
      return;
    const o21 = this.activeTool;
    this._set("activeTool", t24), r(o21) && o21.deactivate(), r(t24) && t24.activate(), this._removeIncompleteTools(t24);
    for (const e15 of this.tools) {
      this._updateToolEditableFlag(e15);
      const t25 = i10(e15);
      !t(this.activeTool) && t25 || this._manipulatorState.clearPointers(e15, this._manipulatorStateEventArgs, !t25);
    }
    this._updateCursor();
  }
  get updating() {
    var _a;
    return this.updatingHandles.updating || this.tools.some((t24) => t24.updating) || (((_a = this.textures) == null ? void 0 : _a.updating) ?? false);
  }
  attach() {
    var _a;
    "3d" === this.view.type ? (this._set("textures", new n10(this.view._stage, this.view.resourceController.scheduler)), this.handles.add([l3(() => {
      const { state: t24 } = this.view;
      return "camera" in t24 && t24.camera;
    }, () => this._forEachManipulator((t24) => t24.onViewChange())), (_a = this.view.elevationProvider) == null ? void 0 : _a.on("elevation-change", (t24) => this._forEachManipulator((o21) => o21.onElevationChange(t24))), n(() => this._set("textures", a(this.textures)))], E2)) : this.handles.add(l3(() => this.view.extent, () => this._forEachManipulator((t24) => t24.onViewChange())));
  }
  detach() {
    r(this.activeTool) && (this.activeTool = null), this.tools.removeAll(), this.handles.remove(E2);
  }
  _forEachManipulator(t24) {
    this._forEachTool((o21) => {
      o21.manipulators && o21.manipulators.forEach(({ manipulator: e15 }) => t24(e15, o21));
    });
  }
  _handleInputEvent(t24) {
    let o21 = false;
    const e15 = { ...t24, stopPropagation: () => {
      o21 = true, t24.stopPropagation();
    } };
    r(this.activeTool) ? this.activeTool.handleInputEvent && this.activeTool.handleInputEvent(e15) : this._forEachTool((t25) => {
      !o21 && t25.visible && t25.handleInputEvent(e15);
    }), !o21 && "key-down" === t24.type && "Escape" === t24.key && this.activeTool && (t24.stopPropagation(), this.activeTool = null), this._manipulatorState.handleInputEvent(e15, this._manipulatorStateEventArgs), !o21 && r(this.activeTool) && this.activeTool.handleInputEventAfter(e15), this._manipulatorState.handleHoverEvent(e15, this._forEachTool), this._updateCursor();
  }
  _refreshToolWatchers() {
    this.handles.remove(g6), this._forEachTool((t24) => {
      if (t24 instanceof v3) {
        const o21 = l3(() => [t24.cursor, t24.visible, t24.editable], () => {
          i10(t24) || this._manipulatorState.clearPointers(t24, this._manipulatorStateEventArgs), this._updateCursor();
        });
        this.handles.add(o21, g6);
      }
      t24.manipulators && this.handles.add([t24.manipulators.on("after-remove", (o21) => {
        this._manipulatorState.clearPointers(t24, this._manipulatorStateEventArgs, true, o21.item.manipulator);
      }), t24.manipulators.on("change", () => {
        this._manipulatorState.updateHoveredStateFromKnownPointers(this._forEachTool), this._updateCursor();
      })], g6);
    }), this._manipulatorState.updateHoveredStateFromKnownPointers(this._forEachTool), this._updateCursor();
  }
  _updateToolEditableFlag(t24) {
    var _a;
    (_a = t24.setEditableFlag) == null ? void 0 : _a.call(t24, o9.MANAGER, t(this.activeTool) || t24 === this.activeTool);
  }
  _updateCursor() {
    let t24 = this._manipulatorState.cursor;
    t(t24) && this._forEachTool((o21) => !(!r(o21.cursor) || !o21.visible) && (t24 = o21.cursor, true)), this._get("cursor") !== t24 && this._set("cursor", t24);
  }
  _removeIncompleteTools(t24) {
    this.tools.filter((o21) => (t(t24) || o21 !== t24) && !o21.created && o21.removeIncompleteOnCancel).forEach((t25) => {
      this.tools.remove(t25);
    });
  }
};
e2([y({ constructOnly: true, nonNullable: true })], w8.prototype, "view", void 0), e2([y({ readOnly: true, nonNullable: true })], w8.prototype, "textures", void 0), e2([y({ value: null })], w8.prototype, "activeTool", null), e2([y({ readOnly: true, type: j2 })], w8.prototype, "tools", void 0), e2([y({ readOnly: true })], w8.prototype, "cursor", void 0), e2([y({ readOnly: true })], w8.prototype, "updating", null), w8 = e2([a3("esri.views.ToolViewManager")], w8);
var y3 = w8;

// node_modules/@arcgis/core/views/input/gamepad/GamepadInputDevice.js
var n12 = class extends v3 {
  constructor(e15) {
    super(), this.nativeIndex = null, this._detectedDeviceType = "unknown", "standard" === e15.mapping ? this._detectedDeviceType = "standard" : o12.test(e15.id) ? this._detectedDeviceType = "spacemouse" : this._detectedDeviceType = "unknown", this.nativeIndex = e15.index;
  }
  get native() {
    const e15 = navigator.getGamepads ? navigator.getGamepads() : [];
    return null != this.nativeIndex && this.nativeIndex < e15.length ? e15[this.nativeIndex] : null;
  }
  get deviceType() {
    return this._detectedDeviceType;
  }
  get axisThreshold() {
    return i13[this.deviceType];
  }
};
e2([y({ nonNullable: true, readOnly: true })], n12.prototype, "nativeIndex", void 0), e2([y({ type: String, readOnly: true })], n12.prototype, "deviceType", null), e2([y({ type: Number, readOnly: true })], n12.prototype, "axisThreshold", null), n12 = e2([a3("esri.views.input.gamepad.GamepadInputDevice")], n12);
var o12 = new RegExp("^(3dconnexion|space(mouse|navigator|pilot|explorer))", "i");
var i13 = { standard: 0.15, spacemouse: 0.025, unknown: 0 };
var a12 = n12;

// node_modules/@arcgis/core/views/input/gamepad/GamepadSettings.js
var c9 = class extends v3 {
  constructor(...e15) {
    super(...e15), this.devices = new j2(), this.enabledFocusMode = "document";
  }
};
e2([y({ type: j2.ofType(a12), readOnly: true })], c9.prototype, "devices", void 0), e2([y({ type: ["document", "view", "none"] })], c9.prototype, "enabledFocusMode", void 0), c9 = e2([a3("esri.views.input.gamepad.GamepadSettings")], c9);
var i14 = c9;

// node_modules/@arcgis/core/views/input/Input.js
var p7 = class extends v3 {
  constructor() {
    super(...arguments), this.gamepad = new i14();
  }
};
e2([y({ readOnly: true })], p7.prototype, "gamepad", void 0), p7 = e2([a3("esri.views.input.Input")], p7);
var a13 = p7;

// node_modules/@arcgis/core/views/navigation/gamepad/GamepadSettings.js
var s8 = class extends v3 {
  constructor(o21) {
    super(o21), this.enabled = true, this.device = null, this.mode = "pan", this.tiltDirection = "forward-down", this.velocityFactor = 1;
  }
};
e2([y({ type: Boolean, nonNullable: true })], s8.prototype, "enabled", void 0), e2([y({ type: a12 })], s8.prototype, "device", void 0), e2([y({ type: ["pan", "zoom"], nonNullable: true })], s8.prototype, "mode", void 0), e2([y({ type: ["forward-down", "forward-up"], nonNullable: true })], s8.prototype, "tiltDirection", void 0), e2([y({ type: Number, nonNullable: true })], s8.prototype, "velocityFactor", void 0), s8 = e2([a3("esri.views.navigation.gamepad.GamepadSettings")], s8);
var a14 = s8;

// node_modules/@arcgis/core/views/navigation/Navigation.js
var a15 = class extends v3 {
  constructor(o21) {
    super(o21), this.browserTouchPanEnabled = true, this.gamepad = new a14(), this.momentumEnabled = true, this.mouseWheelZoomEnabled = true;
  }
};
e2([y({ type: Boolean })], a15.prototype, "browserTouchPanEnabled", void 0), e2([y({ type: a14, nonNullable: true })], a15.prototype, "gamepad", void 0), e2([y({ type: Boolean })], a15.prototype, "momentumEnabled", void 0), e2([y({ type: Boolean })], a15.prototype, "mouseWheelZoomEnabled", void 0), a15 = e2([a3("esri.views.navigation.Navigation")], a15);
var p8 = a15;

// node_modules/@arcgis/core/geometry/support/heightModelInfoUtils.js
var s9;
function h5(e15) {
  var _a;
  const r20 = e15.url ? d2(e15.url) : void 0, o21 = (_a = e15.spatialReference) == null ? void 0 : _a.vcsWkid;
  return !(null == o21 && r(r20) && "ImageServer" === r20.serverType) && u5(e15) && e15.heightModelInfo ? e15.heightModelInfo : g7(e15) ? v5.deriveUnitFromSR(p9, e15.spatialReference) : null;
}
function u5(e15) {
  return "heightModelInfo" in e15;
}
function d5(e15) {
  if ("unknown" === e15.type || !("capabilities" in e15))
    return false;
  switch (e15.type) {
    case "csv":
    case "feature":
    case "geojson":
    case "subtype-group":
    case "ogc-feature":
    case "oriented-imagery":
    case "wfs":
    case "knowledge-graph-sublayer":
      return true;
    default:
      return false;
  }
}
function g7(e15) {
  return d5(e15) ? !!(e15.capabilities && e15.capabilities.data && e15.capabilities.data.supportsZ) : m7(e15);
}
function f7(e15) {
  return null != e15.layers || m7(e15) || d5(e15) || u5(e15);
}
function m7(e15) {
  switch (e15.type) {
    case "building-scene":
    case "elevation":
    case "integrated-mesh":
    case "point-cloud":
    case "scene":
    case "voxel":
      return true;
    case "base-dynamic":
    case "base-elevation":
    case "base-tile":
    case "bing-maps":
    case "csv":
    case "dimension":
    case "geojson":
    case "feature":
    case "subtype-group":
    case "geo-rss":
    case "graphics":
    case "group":
    case "imagery":
    case "imagery-tile":
    case "kml":
    case "knowledge-graph":
    case "link-chart":
    case "knowledge-graph-sublayer":
    case "line-of-sight":
    case "map-image":
    case "map-notes":
    case "media":
    case "ogc-feature":
    case "open-street-map":
    case "oriented-imagery":
    case "route":
    case "stream":
    case "tile":
    case "unknown":
    case "unsupported":
    case "vector-tile":
    case "wcs":
    case "web-tile":
    case "wfs":
    case "wms":
    case "wmts":
    case null:
      return false;
  }
  return false;
}
!function(e15) {
  e15[e15.Ok = 0] = "Ok", e15[e15.Units = 1] = "Units", e15[e15.HeightModel = 2] = "HeightModel", e15[e15.CRS = 3] = "CRS", e15[e15.Unsupported = 4] = "Unsupported";
}(s9 || (s9 = {}));
var p9 = new v5({ heightModel: "gravity-related-height" });

// node_modules/@arcgis/core/views/support/projectionUtils.js
var n13;
var s10 = null;
async function c10(r20) {
  s10 || (s10 = import("./geometryServiceUtils-IWX4T3MT.js").then((e15) => n13 = e15)), await s10, f(r20);
}
async function p10(e15, s18, a29, m14) {
  if (!e15)
    return null;
  const l17 = e15.spatialReference;
  return en() || An(l17, s18) ? rn(e15, s18) : n13 ? n13.projectGeometry(e15, s18, a29, m14) : (await Promise.race([c10(m14), tn(m14)]), p10(e15, s18, a29, m14));
}

// node_modules/@arcgis/core/views/support/DefaultsFromMap.js
var h6 = class extends v3 {
  constructor(e15) {
    super(e15), this.required = { tileInfo: false, heightModelInfo: false, extent: false }, this.defaultSpatialReference = null, this.userSpatialReference = null, this.sourcePreloadCount = 10, this.priorityCollection = null, this.requiresExtentInSpatialReference = true, this.suspended = false, this._projectExtentTask = { task: null, input: null, output: null, spatialReference: null };
  }
  destroy() {
    this._projectExtentTask.task && (this._projectExtentTask.task = w(this._projectExtentTask.task)), this._set("map", null);
  }
  get ready() {
    return !this._spatialReferenceTask.updating && !this._tileInfoTask.updating && !this._extentTask.updating;
  }
  get heightModelInfoReady() {
    return !this._heightModelInfoTask.updating;
  }
  get spatialReference() {
    return r(this.userSpatialReference) ? this.userSpatialReference : e(this._spatialReferenceTask.spatialReference);
  }
  get extent() {
    return e(this._extentTask.extent);
  }
  get heightModelInfo() {
    return e(this._heightModelInfoTask.heightModelInfo);
  }
  get vcsWkid() {
    return e(this._heightModelInfoTask.vcsWkid);
  }
  get latestVcsWkid() {
    return e(this._heightModelInfoTask.latestVcsWkid);
  }
  get viewingMode() {
    return t(this.userSpatialReference) || this.userSpatialReference.equals(e(this._spatialReferenceTask.spatialReference)) ? e(this._spatialReferenceTask.viewingMode) : null;
  }
  get tileInfo() {
    return e(this._tileInfoTask.tileInfo);
  }
  get mapCollections() {
    var _a, _b, _c, _d;
    const e15 = (_a = this.map) == null ? void 0 : _a.call(this), t24 = [];
    return r(this.priorityCollection) && t24.push(this.priorityCollection), t24.push({ parent: e15 == null ? void 0 : e15.basemap, layers: (_b = e15 == null ? void 0 : e15.basemap) == null ? void 0 : _b.baseLayers }, { layers: e15 == null ? void 0 : e15.layers }, { parent: e15 == null ? void 0 : e15.ground, layers: (_c = e15 == null ? void 0 : e15.ground) == null ? void 0 : _c.layers }, { parent: e15 == null ? void 0 : e15.basemap, layers: (_d = e15 == null ? void 0 : e15.basemap) == null ? void 0 : _d.referenceLayers }), t24;
  }
  get _allLayers() {
    return this._collectLayers(this.mapCollections);
  }
  get _spatialReferenceTask() {
    if (this.suspended)
      return this._get("_spatialReferenceTask") ?? { updating: false };
    const { layers: e15, updating: t24 } = this._allLayers;
    let a29 = null;
    for (const i24 of e15) {
      const e16 = this._getSupportedSpatialReferences(i24);
      if (e16.length > 0) {
        const t25 = this._narrowDownSpatialReferenceCandidates(a29, e16);
        r(t25) && (a29 = t25);
      }
      if (r(a29) && 1 === a29.length)
        break;
    }
    if (t24 && (t(a29) || 1 !== a29.length))
      return { updating: true };
    const n24 = this._pickSpatialReferenceCandidate(a29);
    return { spatialReference: r(n24) ? n24.spatialReference : null, viewingMode: r(n24) ? n24.viewingMode : null, updating: false };
  }
  get _tileInfoTask() {
    var _a, _b, _c, _d, _e2, _f, _g;
    if (!this.required.tileInfo)
      return this._get("_tileInfoTask") ?? { updating: false };
    if (!this.spatialReference)
      return { updating: this._spatialReferenceTask.updating };
    const { layers: e15, updating: t24 } = this._collectLayers([{ parent: (_b = (_a = this.map) == null ? void 0 : _a.call(this)) == null ? void 0 : _b.basemap, layers: (_e2 = (_d = (_c = this.map) == null ? void 0 : _c.call(this)) == null ? void 0 : _d.basemap) == null ? void 0 : _e2.baseLayers }, { layers: (_g = (_f = this.map) == null ? void 0 : _f.call(this)) == null ? void 0 : _g.layers }]);
    if (e15 && e15.length > 0 && "tileInfo" in e15[0]) {
      const t25 = e15[0].tileInfo;
      return { tileInfo: t25 && t25.spatialReference.equals(this.spatialReference) ? t25 : null, updating: false };
    }
    return { updating: t24 };
  }
  get _heightModelInfoTask() {
    var _a, _b, _c;
    if (!this.required.heightModelInfo || this.suspended && ((_a = this._get("_heightModelInfoTask")) == null ? void 0 : _a.heightModelInfo))
      return this._get("_heightModelInfoTask") ?? { updating: false };
    const { layers: e15, updating: t24 } = this._allLayers;
    for (const a29 of e15)
      if (f7(a29)) {
        const e16 = h5(a29);
        if (e16)
          return { heightModelInfo: e16, vcsWkid: (_b = a29.spatialReference) == null ? void 0 : _b.vcsWkid, latestVcsWkid: (_c = a29.spatialReference) == null ? void 0 : _c.latestVcsWkid, updating: false };
      }
    return { updating: t24 };
  }
  get _extentCandidatesTask() {
    if (this.suspended || !this.required.extent)
      return this._get("_extentCandidatesTask") ?? { updating: false };
    if (!this.spatialReference)
      return { updating: this._spatialReferenceTask.updating };
    const e15 = this._allLayers, t24 = e15.updating, a29 = [];
    for (const n24 of e15.layers) {
      const e16 = "fullExtents" in n24 && n24.fullExtents || (r(n24.fullExtent) ? [n24.fullExtent] : []), t25 = this.requiresExtentInSpatialReference ? null : e16[0], i24 = e16.find((e17) => e17.spatialReference.equals(this.spatialReference)) ?? t25;
      if (i24)
        return { candidates: [{ extent: i24, layer: n24 }], updating: false };
      if (this._getSupportedSpatialReferences(n24).length > 0)
        for (const s18 of e16)
          a29.push({ extent: s18, layer: n24 });
    }
    return { candidates: a29, updating: t24 };
  }
  get _extentTask() {
    const { candidates: e15, updating: t24 } = this._extentCandidatesTask;
    if (t24)
      return { updating: t24 };
    if (t(e15) || 0 === e15.length)
      return { updating: false };
    if (!this.spatialReference)
      return { updating: this._spatialReferenceTask.updating };
    const i24 = this._pickExtentCandidate(e15), o21 = this.spatialReference;
    return i24.extent.equals(this._projectExtentTask.input) && o21.equals(this._projectExtentTask.spatialReference) ? { extent: this._projectExtentTask.output, updating: r(this._projectExtentTask.task) && !this._projectExtentTask.task.finished } : (r(this._projectExtentTask.task) && (this._projectExtentTask.task = w(this._projectExtentTask.task)), this._projectExtentTask = { input: i24.extent.clone(), output: null, spatialReference: o21.clone(), task: j4(async (e16) => {
      try {
        const t25 = await p10(i24.extent, o21, i24.layer.portalItem, e16);
        this._projectExtentTask = { ...this._projectExtentTask, task: null, output: t25 };
      } catch (t25) {
        if (p2(e16))
          return;
        this._projectExtentTask = { ...this._projectExtentTask, task: null };
      }
    }) }, { updating: true });
  }
  _narrowDownSpatialReferenceCandidates(e15, t24) {
    if (t(e15))
      return t24;
    const a29 = [], n24 = (e16, t25) => r(e16) ? r(t25) ? e16 === t25 && e16 : e16 : t25;
    for (const s18 of e15)
      for (const e16 of t24) {
        if (!s18.spatialReference.equals(e16.spatialReference))
          continue;
        const t25 = n24(s18.viewingMode, e16.viewingMode);
        if (false !== t25) {
          a29.push({ spatialReference: s18.spatialReference, viewingMode: t25 });
          break;
        }
      }
    return a29.length > 0 ? a29 : null;
  }
  _pickSpatialReferenceCandidate(e15) {
    const t24 = this.defaultSpatialReference;
    return t(e15) || e15.length < 1 ? r(t24) ? { spatialReference: t24, viewingMode: null } : null : (r(t24) && e15.length > 1 && e15.some(({ spatialReference: e16 }) => e16.equals(t24)) && (e15 = e15.filter(({ spatialReference: e16 }) => e16.equals(t24))), e15.length > 1 && e15.some(({ viewingMode: e16 }) => e16 !== l5.Local) && (e15 = e15.filter(({ viewingMode: e16 }) => e16 !== l5.Local)), e15[0]);
  }
  _getSupportedSpatialReferences(e15) {
    const t24 = "supportedSpatialReferences" in e15 && e15.supportedSpatialReferences || (e15.spatialReference ? [e15.spatialReference] : []);
    if (0 === t24.length)
      return [];
    const a29 = [];
    for (const n24 of t24) {
      const t25 = this.getSpatialReferenceSupport({ spatialReference: n24, layer: e15 });
      if (r(t25)) {
        const e16 = r(t25.constraints) ? t25.constraints : [{ spatialReference: n24, viewingMode: null }];
        for (const { spatialReference: t26, viewingMode: n25 } of e16)
          (!this.requiresExtentInSpatialReference || t(this.userSpatialReference) || t26.equals(this.userSpatialReference)) && a29.push({ spatialReference: t26, viewingMode: n25 });
      }
    }
    return a29;
  }
  _pickExtentCandidate(e15) {
    const t24 = this.spatialReference;
    return e15.find(({ extent: e16 }) => t24.equals(e16.spatialReference)) || e15[0];
  }
  _collectLayers(e15) {
    var _a;
    if ("loaded" !== this._loadMaybe((_a = this.map) == null ? void 0 : _a.call(this)))
      return { layers: [], updating: true };
    const t24 = { layers: [], preloading: -1, updating: false };
    for (const a29 of e15)
      if (this._collectCollection(a29, t24), t24.preloading === this.sourcePreloadCount)
        break;
    return { layers: t24.layers, updating: t24.updating };
  }
  _collectCollection(e15, t24) {
    if (e15.layers) {
      switch (this._loadMaybe(e15.parent)) {
        case "loading":
          return t24.updating = true, void ++t24.preloading;
        case "failed":
          return;
      }
      for (const a29 of e15.layers) {
        switch (this._loadMaybe(a29)) {
          case "failed":
            continue;
          case "loading":
            t24.updating = true, ++t24.preloading;
            break;
          case "loaded":
            t24.updating || t24.layers.push(a29), "layers" in a29 && this._collectCollection({ layers: a29.layers }, t24);
        }
        if (t24.preloading === this.sourcePreloadCount)
          break;
      }
    }
  }
  _loadMaybe(e15) {
    return e15 && "loadStatus" in e15 && null != e15.loadStatus ? "not-loaded" === e15.loadStatus ? (e15.load().catch(() => {
    }), "loading") : e15.loadStatus : "loaded";
  }
};
e2([y()], h6.prototype, "required", void 0), e2([y({ constructOnly: true })], h6.prototype, "map", void 0), e2([y({ constructOnly: true })], h6.prototype, "getSpatialReferenceSupport", void 0), e2([y()], h6.prototype, "defaultSpatialReference", void 0), e2([y()], h6.prototype, "userSpatialReference", void 0), e2([y()], h6.prototype, "sourcePreloadCount", void 0), e2([y()], h6.prototype, "priorityCollection", void 0), e2([y()], h6.prototype, "requiresExtentInSpatialReference", void 0), e2([y()], h6.prototype, "suspended", void 0), e2([y({ readOnly: true })], h6.prototype, "ready", null), e2([y({ readOnly: true })], h6.prototype, "heightModelInfoReady", null), e2([y({ readOnly: true })], h6.prototype, "spatialReference", null), e2([y({ readOnly: true })], h6.prototype, "extent", null), e2([y({ readOnly: true })], h6.prototype, "heightModelInfo", null), e2([y({ readOnly: true })], h6.prototype, "vcsWkid", null), e2([y({ readOnly: true })], h6.prototype, "latestVcsWkid", null), e2([y({ readOnly: true })], h6.prototype, "viewingMode", null), e2([y({ readOnly: true })], h6.prototype, "tileInfo", null), e2([y({ readOnly: true })], h6.prototype, "mapCollections", null), e2([y({ readOnly: true })], h6.prototype, "_allLayers", null), e2([y({ readOnly: true })], h6.prototype, "_spatialReferenceTask", null), e2([y({ readOnly: true })], h6.prototype, "_tileInfoTask", null), e2([y({ readOnly: true })], h6.prototype, "_heightModelInfoTask", null), e2([y({ readOnly: true })], h6.prototype, "_extentCandidatesTask", null), e2([y()], h6.prototype, "_extentTask", null), e2([y()], h6.prototype, "_projectExtentTask", void 0), h6 = e2([a3("esri.views.support.DefaultsFromMap")], h6);

// node_modules/@arcgis/core/views/View.js
var W2;
var z3 = W2 = class extends a8(n4.EventedMixin(m(v3))) {
  constructor(e15) {
    super(e15), this._userSpatialReference = null, this._cursor = null, this.allLayerViews = new l4({ getCollections: () => {
      var _a, _b, _c;
      return [(_a = this.basemapView) == null ? void 0 : _a.baseLayerViews, (_b = this.groundView) == null ? void 0 : _b.layerViews, this.layerViews, (_c = this.basemapView) == null ? void 0 : _c.referenceLayerViews];
    }, getChildrenFunction: (e16) => e16.layerViews }), this.groundView = null, this.basemapView = null, this.fatalError = null, this.graphics = new i5(), this.analyses = new i7(), this.typeSpecificPreconditionsReady = true, this.layerViews = new j2(), this.magnifier = new p5(), this.padding = { left: 0, top: 0, right: 0, bottom: 0 }, this.ready = false, this.spatialReferenceWarningDelay = 1e3, this.supportsGround = true, this.timeExtent = null, this.timeReference = new a5(), this.type = null, this.scale = null, this.updating = false, this.initialExtentRequired = true, this.input = new a13(), this.navigation = new p8(), this.layerViewManager = null, this.analysisViewManager = null, this.isHeightModelInfoRequired = false, this.width = null, this.height = null, this.resizing = false, this.suspended = false, this.viewEvents = new p6(this), this.persistableViewModels = new j2(), this._isValid = false, this._readyCycleForced = false, this._currentSpatialReference = null, this.handles.add(l3(() => this.preconditionsReady, (e16) => {
      var _a, _b;
      e16 ? (this._currentSpatialReference = this.spatialReference, W2.views.add(this)) : (this._currentSpatialReference = null, W2.views.remove(this)), this.notifyChange("spatialReference"), !e16 && this.ready ? ((_a = this.toolViewManager) == null ? void 0 : _a.detach(), r(this.analysisViewManager) && this.analysisViewManager.detach(), (_b = this.layerViewManager) == null ? void 0 : _b.clear(), this._teardown()) : e16 && !this.ready && (this._startup(), r(this.analysisViewManager) && this.analysisViewManager.attach(), this.toolViewManager.attach());
    }, U2));
  }
  initialize() {
    this.addResolvingPromise(this.validate().then(() => (this._isValid = true, j3(() => this.ready)))), this.basemapView = new p4({ view: this }), this.layerViewManager = new M3({ view: this, layerViewImporter: { importLayerView: (e15) => this.importLayerView(e15), hasLayerViewModule: (e15) => this.hasLayerViewModule(e15) }, supportsGround: this.supportsGround }), this.toolViewManager = new y3({ view: this }), this._setupSpatialReferenceLogger(), this.handles.add([l3(() => this.initialExtentRequired, (e15) => this.defaultsFromMap.required = { ...this.defaultsFromMap.required, extent: e15 }, { sync: true, initial: true }), l3(() => this.ready, (e15) => {
      this.defaultsFromMap && (this.defaultsFromMap.suspended = e15, this.defaultsFromMap.userSpatialReference = e15 ? this.spatialReference : this._userSpatialReference);
    }, { sync: true }), l3(() => this._userSpatialReference, (e15) => {
      this.defaultsFromMap && (this.defaultsFromMap.userSpatialReference = e15);
    }, { sync: true, initial: true })]);
  }
  _setupSpatialReferenceLogger() {
    let e15 = null;
    this.handles.add([l3(() => {
      var _a;
      return (_a = this.defaultsFromMap) == null ? void 0 : _a.ready;
    }, (t24) => {
      var _a;
      const i24 = ((_a = this.map) == null ? void 0 : _a.allLayers.length) > 0;
      if (t24 && !this.spatialReference && i24) {
        if (r(e15))
          return;
        const t25 = n(() => e15 = w(e15));
        e15 = j4(async (t26) => {
          try {
            await U(this.spatialReferenceWarningDelay, null, t26);
          } catch {
            return;
          } finally {
            e15 = null;
          }
          s.getLogger(this.declaredClass).warn("#spatialReference", "no spatial reference could be derived from the currently added map layers");
        }), this.handles.add(t25, "spatial-reference-logger-task");
      } else
        this.handles.remove("spatial-reference-logger-task");
    }, { sync: true })]);
  }
  destroy() {
    if (this.destroyed)
      return;
    this.viewEvents.destroy(), this.allLayerViews.destroy(), this.navigation && (this.navigation.destroy(), this._set("navigation", null)), this.graphics = a(this.graphics), this.analyses = a(this.analyses), this.handles.remove("defaultsFromMap"), this.defaultsFromMap.destroy(), this._set("defaultsFromMap", null), a(this.analysisViewManager), this.toolViewManager = a(this.toolViewManager), this.layerViewManager = a(this.layerViewManager), this.basemapView = a(this.basemapView), this.invalidate(), this._emitter.clear(), this.handles.removeAll();
    const e15 = this.map;
    this.map = null, e15 == null ? void 0 : e15.destroy();
  }
  _startup() {
    this._set("ready", true);
  }
  _teardown() {
    this._set("ready", false);
  }
  whenReady() {
    return Promise.resolve(this);
  }
  toMap() {
    return s.getLogger(this.declaredClass).error("#toMap()", "Not implemented on this instance of View"), null;
  }
  get activeTool() {
    var _a;
    return (_a = this.toolViewManager) == null ? void 0 : _a.activeTool;
  }
  set activeTool(e15) {
    this.toolViewManager && (this.toolViewManager.activeTool = e15);
  }
  get animation() {
    return this._get("animation");
  }
  set animation(e15) {
    this._set("animation", e15);
  }
  get center() {
    return null;
  }
  get _defaultsFromMapSettings() {
    return {};
  }
  get defaultsFromMap() {
    return new h6({ required: { tileInfo: false, heightModelInfo: false, extent: false }, map: () => this.map, getSpatialReferenceSupport: (e15) => this.getSpatialReferenceSupport(e15), ...this._defaultsFromMapSettings });
  }
  get extent() {
    return this._get("extent");
  }
  set extent(e15) {
    this._set("extent", e15);
  }
  get heightModelInfo() {
    return this.getDefaultHeightModelInfo();
  }
  get interacting() {
    return this.navigating;
  }
  get navigating() {
    return false;
  }
  get preconditionsReady() {
    var _a;
    return !(this.fatalError || !this._isValid || this._readyCycleForced || !this.map || m3.isLoadable(this.map) && !this.map.loaded || 0 === this.width || 0 === this.height || !this.spatialReference || !this._validateSpatialReference(this.spatialReference) || !this._currentSpatialReference && !((_a = this.defaultsFromMap) == null ? void 0 : _a.ready) || !this.typeSpecificPreconditionsReady);
  }
  get resolution() {
    return 0;
  }
  set map(e15) {
    e15 !== this._get("map") && ((e15 == null ? void 0 : e15.destroyed) && (s.getLogger(this.declaredClass).warn("#map", "The provided map is already destroyed", { map: e15 }), e15 = null), m3.isLoadable(e15) && e15.load().catch(() => {
    }), this.constructed && (this.forceReadyCycle(), this._currentSpatialReference = null), this._set("map", e15));
  }
  get spatialReference() {
    var _a, _b;
    let e15 = this._userSpatialReference || this._currentSpatialReference || this.getDefaultSpatialReference() || null;
    return e15 && ((_b = (_a = this.defaultsFromMap) == null ? void 0 : _a.required) == null ? void 0 : _b.heightModelInfo) && (e15 = e15.clone(), e15.vcsWkid = this.defaultsFromMap.vcsWkid, e15.latestVcsWkid = this.defaultsFromMap.latestVcsWkid), e15;
  }
  set spatialReference(e15) {
    const t24 = !E(e15, this._get("spatialReference"));
    this._set("_userSpatialReference", e15), t24 && (this._set("spatialReference", e15), this._spatialReferenceChanged(e15));
  }
  _spatialReferenceChanged(e15) {
  }
  get stationary() {
    return !this.animation && !this.navigating && !this.resizing;
  }
  get tools() {
    var _a;
    return (_a = this.toolViewManager) == null ? void 0 : _a.tools;
  }
  get initialExtent() {
    var _a;
    return (_a = this.defaultsFromMap) == null ? void 0 : _a.extent;
  }
  get cursor() {
    const e15 = this.toolViewManager ? this.toolViewManager.cursor : null;
    return r(e15) ? e15 : this._cursor || "default";
  }
  set cursor(e15) {
    this._cursor = e15, this.notifyChange("cursor");
  }
  get size() {
    return [this.width, this.height];
  }
  whenLayerView(e15) {
    return this.layerViewManager.whenLayerView(e15);
  }
  getDefaultSpatialReference() {
    var _a;
    return (_a = this.defaultsFromMap) == null ? void 0 : _a.spatialReference;
  }
  getDefaultHeightModelInfo() {
    var _a;
    return (this.map && "heightModelInfo" in this.map ? this.map.heightModelInfo : void 0) ?? ((_a = this.defaultsFromMap) == null ? void 0 : _a.heightModelInfo) ?? null;
  }
  importLayerView(e15) {
    throw new s2("importLayerView() not implemented");
  }
  hasLayerViewModule(e15) {
    return false;
  }
  async validate() {
  }
  invalidate() {
    this._isValid = false;
  }
  getSpatialReferenceSupport() {
    return { constraints: null };
  }
  _validateSpatialReference(e15) {
    return r(this.getSpatialReferenceSupport({ spatialReference: e15 }));
  }
  when(e15, t24) {
    return this.isResolved() && !this.ready && s.getLogger(this.declaredClass).warn("#when()", "Calling view.when() while the view is no longer ready but was already resolved once will resolve immediately. Use reactiveUtils.whenOnce(() => view.ready).then(...) instead."), super.when(e15, t24);
  }
  forceReadyCycle() {
    this.ready && (f3(() => false === this.preconditionsReady, () => this._readyCycleForced = false, { once: true }), this._readyCycleForced = true);
  }
  addAndActivateTool(e15) {
    this.toolViewManager.tools.add(e15), this.activeTool = e15;
  }
  tryFatalErrorRecovery() {
    this.fatalError = null;
  }
};
z3.views = new j2(), e2([y()], z3.prototype, "_userSpatialReference", void 0), e2([y()], z3.prototype, "activeTool", null), e2([y({ readOnly: true })], z3.prototype, "allLayerViews", void 0), e2([y()], z3.prototype, "groundView", void 0), e2([y()], z3.prototype, "animation", null), e2([y()], z3.prototype, "basemapView", void 0), e2([y()], z3.prototype, "center", null), e2([y({ readOnly: true })], z3.prototype, "_defaultsFromMapSettings", null), e2([y()], z3.prototype, "defaultsFromMap", null), e2([y()], z3.prototype, "fatalError", void 0), e2([y({ type: w3 })], z3.prototype, "extent", null), e2([y(a9(i5, "graphics"))], z3.prototype, "graphics", void 0), e2([y(a9(i7, "analyses"))], z3.prototype, "analyses", void 0), e2([y({ readOnly: true, type: v5 })], z3.prototype, "heightModelInfo", null), e2([y({ readOnly: true })], z3.prototype, "interacting", null), e2([y({ readOnly: true })], z3.prototype, "navigating", null), e2([y({ readOnly: true, dependsOn: ["fatalError", "_isValid", "_readyCycleForced", "map", "map.loaded?", "width", "height", "spatialReference", "_currentSpatialReference", "defaultsFromMap.ready", "typeSpecificPreconditionsReady"] })], z3.prototype, "preconditionsReady", null), e2([y({ readOnly: true })], z3.prototype, "typeSpecificPreconditionsReady", void 0), e2([y({ type: j2, readOnly: true })], z3.prototype, "layerViews", void 0), e2([y()], z3.prototype, "resolution", null), e2([y({ type: p5 })], z3.prototype, "magnifier", void 0), e2([y({ value: null, type: L2 })], z3.prototype, "map", null), e2([y()], z3.prototype, "padding", void 0), e2([y({ readOnly: true })], z3.prototype, "ready", void 0), e2([y({ type: f2 })], z3.prototype, "spatialReference", null), e2([y()], z3.prototype, "spatialReferenceWarningDelay", void 0), e2([y()], z3.prototype, "stationary", null), e2([y({ readOnly: true })], z3.prototype, "supportsGround", void 0), e2([y({ type: T })], z3.prototype, "timeExtent", void 0), e2([y({ type: a5, nonNullable: true })], z3.prototype, "timeReference", void 0), e2([y()], z3.prototype, "tools", null), e2([y()], z3.prototype, "toolViewManager", void 0), e2([y({ readOnly: true })], z3.prototype, "type", void 0), e2([y({ type: Number })], z3.prototype, "scale", void 0), e2([y({ readOnly: true })], z3.prototype, "updating", void 0), e2([y({ readOnly: true })], z3.prototype, "initialExtentRequired", void 0), e2([y({ readOnly: true })], z3.prototype, "initialExtent", null), e2([y()], z3.prototype, "cursor", null), e2([y({ readOnly: true })], z3.prototype, "input", void 0), e2([y({ type: p8, nonNullable: true })], z3.prototype, "navigation", void 0), e2([y()], z3.prototype, "layerViewManager", void 0), e2([y()], z3.prototype, "analysisViewManager", void 0), e2([y()], z3.prototype, "width", void 0), e2([y()], z3.prototype, "height", void 0), e2([y({ readOnly: true })], z3.prototype, "resizing", void 0), e2([y({ value: null, readOnly: true })], z3.prototype, "size", null), e2([y({ readOnly: true })], z3.prototype, "suspended", void 0), e2([y({ readOnly: true })], z3.prototype, "viewEvents", void 0), e2([y({ readOnly: true })], z3.prototype, "persistableViewModels", void 0), e2([y()], z3.prototype, "_isValid", void 0), e2([y()], z3.prototype, "_readyCycleForced", void 0), e2([y()], z3.prototype, "_currentSpatialReference", void 0), z3 = W2 = e2([a3("esri.views.View")], z3);
var A3 = z3;

// node_modules/@arcgis/core/views/ViewAnimation.js
var n14 = class extends _ {
  constructor(t24) {
    super(t24), this.state = "running", this.target = null, this._dfd = null;
  }
  initialize() {
    this.addResolvingPromise(new Promise((t24, s18) => this._dfd = { resolve: t24, reject: s18 }));
  }
  get done() {
    return "finished" === this.state || "stopped" === this.state;
  }
  stop() {
    var _a;
    "stopped" !== this.state && "finished" !== this.state && (this._set("state", "stopped"), (_a = this._dfd) == null ? void 0 : _a.reject(new s2("ViewAnimation stopped")));
  }
  finish() {
    var _a;
    "stopped" !== this.state && "finished" !== this.state && (this._set("state", "finished"), (_a = this._dfd) == null ? void 0 : _a.resolve());
  }
  update(t24, s18) {
    s18 || (s18 = C(t24) ? "waiting-for-target" : "running"), this._set("target", t24), this._set("state", s18);
  }
};
e2([y({ readOnly: true })], n14.prototype, "done", null), e2([y({ readOnly: true, type: String })], n14.prototype, "state", void 0), e2([y()], n14.prototype, "target", void 0), n14 = e2([a3("esri.views.ViewAnimation")], n14), function(t24) {
  t24.State = { RUNNING: "running", STOPPED: "stopped", FINISHED: "finished", WAITING_FOR_TARGET: "waiting-for-target" };
}(n14 || (n14 = {}));
var p11 = n14;

// node_modules/@arcgis/core/views/2d/AnimationManager.js
var u6 = class {
  constructor(t24, i24, s18, e15) {
    const o21 = t24.targetGeometry, n24 = i24.targetGeometry;
    e15 ? "string" == typeof e15 && (e15 = r9(e15) || t10.ease) : e15 = t10.ease, this.easing = e15, this.duration = s18, this.sCenterX = o21.x, this.sCenterY = o21.y, this.sScale = t24.scale, this.sRotation = t24.rotation, this.tCenterX = n24.x, this.tCenterY = n24.y, this.tScale = i24.scale, this.tRotation = i24.rotation, this.dCenterX = this.tCenterX - this.sCenterX, this.dCenterY = this.tCenterY - this.sCenterY, this.dScale = this.tScale - this.sScale, this.dRotation = this.tRotation - this.sRotation, this.dRotation > 180 ? this.dRotation -= 360 : this.dRotation < -180 && (this.dRotation += 360);
  }
  applyRatio(t24, i24) {
    const s18 = this.easing(i24);
    let e15, o21, n24, a29;
    i24 >= 1 ? (e15 = this.tCenterX, o21 = this.tCenterY, n24 = this.tRotation, a29 = this.tScale) : (e15 = this.sCenterX + s18 * this.dCenterX, o21 = this.sCenterY + s18 * this.dCenterY, n24 = this.sRotation + s18 * this.dRotation, a29 = this.sScale + s18 * this.dScale), t24.targetGeometry.x = e15, t24.targetGeometry.y = o21, t24.scale = a29, t24.rotation = n24;
  }
};
var d6 = class extends v3 {
  constructor(t24) {
    super(t24), this.updateFunction = null, this.animation = null, this.duration = 200, this.transition = null, this.easing = t10.ease, this.view = null, this.viewpoint = new u({ targetGeometry: new w2(), scale: 0, rotation: 0 }), this._updateTask = A2({ postRender: this._postRender.bind(this) }), this._updateTask.pause();
  }
  destroy() {
    this._updateTask = p(this._updateTask);
  }
  animate(t24, i24, s18) {
    this.stop();
    const e15 = this.viewpoint;
    Z(e15, i24), this.transition = new u6(this.viewpoint, t24.target, s18 && s18.duration || this.duration, s18 && s18.easing || this.easing);
    const o21 = () => {
      var _a, _b;
      this.animation === t24 && this._updateTask && ("finished" === t24.state && ((_a = this.transition) == null ? void 0 : _a.applyRatio(this.viewpoint, 1), ((_b = this.view) == null ? void 0 : _b.state) && (this.view.state.viewpoint = this.viewpoint.clone())), this.animation = null, this.updateFunction = null);
    };
    return t24.when(o21, o21), this._startTime = performance.now(), this._updateTask.resume(), this.animation = t24, t24;
  }
  animateContinous(t24, i24) {
    this.stop(), this.updateFunction = i24, this.viewpoint = t24;
    const s18 = new p11({ target: t24.clone() }), e15 = () => {
      this.animation === s18 && this._updateTask && (this.animation = null, this.updateFunction = null);
    };
    return s18.when(e15, e15), this._startTime = performance.now(), this._updateTask.resume(), this.animation = s18, s18;
  }
  stop() {
    this.animation && (this.animation.stop(), this.animation = null, this.updateFunction = null);
  }
  _postRender(t24) {
    var _a, _b;
    const i24 = this.animation;
    if (i24 && i24.state !== p11.State.STOPPED) {
      if (this.updateFunction)
        this.updateFunction(this.viewpoint, t24.deltaTime);
      else {
        const t25 = this.transition, i25 = (performance.now() - this._startTime) / t25.duration, s18 = i25 >= 1;
        t25.applyRatio(this.viewpoint, i25), s18 && ((_a = this.animation) == null ? void 0 : _a.finish());
      }
      ((_b = this.view) == null ? void 0 : _b.state) && (this.view.state.viewpoint = this.viewpoint.clone());
    } else
      this._updateTask.pause();
  }
};
e2([y()], d6.prototype, "animation", void 0), e2([y()], d6.prototype, "duration", void 0), e2([y()], d6.prototype, "transition", void 0), e2([y()], d6.prototype, "easing", void 0), e2([y()], d6.prototype, "view", void 0), e2([y()], d6.prototype, "viewpoint", void 0), d6 = e2([a3("esri.views.2d.AnimationManager")], d6);
var l9 = d6;

// node_modules/@arcgis/core/views/2d/FrameTask.js
var s11 = class {
  constructor(t24) {
    this.view = t24, this._stationaryHandle = null, this._frameTaskHandle = null, this._updateParameters = null, this._updateRequested = false, this.stationary = true, this.animationInProgress = false, this.prepare = () => {
      this._updateParameters && (this._updateParameters.state = this.view.state, this._updateParameters.stationary = this.view.stationary, this._updateParameters.pixelRatio = window.devicePixelRatio, this._updateParameters.renderingOptions = this.view.renderingOptions);
    }, this.update = () => {
      var _a;
      this._updateRequested = false;
      const { basemapView: t25, graphicsView: a29, labelManager: s18, layerViews: i24, state: { id: r20 } } = this.view;
      t25 == null ? void 0 : t25.baseLayerViews.forEach(this._updateLayerView, this), i24.forEach(this._updateLayerView, this), t25 == null ? void 0 : t25.referenceLayerViews.forEach(this._updateLayerView, this), r(s18) && (s18.lastUpdateId !== r20 && (s18.viewChange(), s18.lastUpdateId = r20), s18.updateRequested && s18.processUpdate(this._updateParameters)), r(a29) && (a29.lastUpdateId !== r20 && (a29.viewChange(), a29.lastUpdateId = r20), a29.updateRequested && a29.processUpdate(this._updateParameters)), this.view.graphicsTileStore.setViewState(this._updateParameters.state), this.animationInProgress || this._updateRequested || ((_a = this._frameTaskHandle) == null ? void 0 : _a.pause());
    };
  }
  destroy() {
    this.stop();
  }
  start() {
    if (this._frameTaskHandle)
      return;
    const e15 = this.view;
    this.stationary = e15.stationary, this._updateParameters = { state: e15.state, pixelRatio: window.devicePixelRatio, stationary: this.stationary, renderingOptions: e15.renderingOptions }, this._stationaryHandle = l3(() => e15.stationary, (e16) => {
      this.stationary = e16, this.requestFrame();
    }), this._frameTaskHandle = A2(this), this.requestUpdate();
  }
  stop() {
    var _a;
    this._frameTaskHandle && (this._updateRequested = false, (_a = this._stationaryHandle) == null ? void 0 : _a.remove(), this._frameTaskHandle.remove(), this._updateParameters = this._stationaryHandle = this._frameTaskHandle = null, this.stationary = true, this.animationInProgress = false);
  }
  requestUpdate() {
    this._updateRequested || (this._updateRequested = true, this.requestFrame());
  }
  requestFrame() {
    this._frameTaskHandle && this._frameTaskHandle.resume();
  }
  _updateLayerView(e15) {
    if (!e15.attached)
      return void this.requestUpdate();
    const t24 = this.view.state, a29 = e15.lastUpdateId;
    null != a29 && (this.stationary || e15.moving) || (e15.moving = true, e15.moveStart()), a29 !== t24.id && e15.viewChange(), this.stationary && e15.moving && (e15.moving = false, e15.moveEnd()), e15.lastUpdateId = t24.id, e15.updateRequested && e15.processUpdate(this._updateParameters), "layerViews" in e15 && e15.layerViews.forEach(this._updateLayerView, this);
  }
};

// node_modules/@arcgis/core/views/2d/layerViewModuleImportUtils.js
function t14() {
  return Promise.all([import("./webglDeps-E26JV3XI.js"), import("./mapViewDeps-24DM4E4E.js")]);
}
var s12 = () => t14().then(() => import("./TileLayerView2D-HBTIRVEE.js"));
var i15 = () => t14().then(() => import("./FeatureLayerView2D-GSGT5W4G.js"));
var l10 = { "base-dynamic": () => t14().then(() => import("./BaseDynamicLayerView2D-UFJTIZKY.js")), "base-tile": s12, "bing-maps": s12, csv: i15, "geo-rss": () => t14().then(() => import("./GeoRSSLayerView2D-ACWGLYNB.js")), feature: i15, geojson: i15, graphics: () => t14().then(() => import("./GraphicsLayerView2D-PAG4LNR6.js")), group: () => t14().then(() => import("./GroupLayerView2D-CLDIREZQ.js")), imagery: () => t14().then(() => import("./ImageryLayerView2D-Q2WASR74.js")), "imagery-tile": () => t14().then(() => import("./ImageryTileLayerView2D-CC62RLT3.js")), kml: () => t14().then(() => import("./KMLLayerView2D-NF5AILN5.js")), "knowledge-graph": () => t14().then(() => import("./KnowledgeGraphLayerView2D-DSOIV6JX.js")), "link-chart": () => t14().then(() => import("./KnowledgeGraphLayerView2D-DSOIV6JX.js")), "knowledge-graph-sublayer": i15, "map-image": () => t14().then(() => import("./MapImageLayerView2D-SK6XTTAZ.js")), "map-notes": () => t14().then(() => import("./MapNotesLayerView2D-5WEEX2FS.js")), media: () => t14().then(() => import("./MediaLayerView2D-XX73PQ6F.js")), "ogc-feature": () => t14().then(() => import("./OGCFeatureLayerView2D-WZR6DOYS.js")), "open-street-map": s12, "oriented-imagery": i15, route: () => t14().then(() => import("./RouteLayerView2D-3C3GH6WY.js")), stream: () => t14().then(() => import("./StreamLayerView2D-NYBU6NA7.js")), "subtype-group": () => t14().then(() => import("./SubtypeGroupLayerView2D-YFLEVY24.js")), tile: s12, "vector-tile": () => t14().then(() => import("./VectorTileLayerView2D-YVWBHUAT.js")), wcs: () => t14().then(() => import("./ImageryTileLayerView2D-CC62RLT3.js")), "web-tile": s12, wfs: i15, wms: () => t14().then(() => import("./WMSLayerView2D-4WO24HCZ.js")), wmts: () => t14().then(() => import("./WMTSLayerView2D-OUYXG3RF.js")), "line-of-sight": null, "base-elevation": null, "building-scene": null, dimension: null, elevation: null, "integrated-mesh": null, "point-cloud": null, voxel: null, scene: null, unknown: null, unsupported: null };
function o13(r20) {
  const a29 = r20.declaredClass ? r20.declaredClass.slice(r20.declaredClass.lastIndexOf(".") + 1) : "Unknown", t24 = a29.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  return new s2(`${t24}:view-not-supported`, `${a29} is not supported in 2D`);
}
var n15 = { hasLayerViewModule: (e15) => r(l10[e15.type]), importLayerView: (e15) => {
  const r20 = l10[e15.type];
  if (t(r20))
    throw o13(e15);
  return r20(e15);
} };

// node_modules/@arcgis/core/geometry/support/near.js
function o14(o21, m14) {
  const { spatialReference: r20 } = m14, i24 = [m14.x, m14.y];
  let s18 = Number.POSITIVE_INFINITY, x = 0, c21 = 0;
  const a29 = [0, 0], f11 = "extent" === o21.type ? [[[o21.xmin, o21.ymin], [o21.xmin, o21.ymax], [o21.xmax, o21.ymax], [o21.xmax, o21.ymin], [o21.xmin, o21.ymin]]] : o21.rings;
  for (const n24 of f11)
    for (let o22 = 0; o22 < n24.length - 1; o22++) {
      o3(a29, i24, n24, o22);
      const m15 = m2(i24, a29);
      m15 < s18 && (s18 = m15, x = a29[0], c21 = a29[1]);
    }
  return { coordinate: new w2({ x, y: c21, spatialReference: r20 }), distance: s18 };
}

// node_modules/@arcgis/core/views/2d/constraints/GeometryConstraint.js
var l11;
var y4 = l11 = class extends i4(v3) {
  constructor(e15) {
    super(e15), this.geometry = null, this.spatialReference = null;
  }
  get normalizedGeometry() {
    if (t(this.geometry) || !this.spatialReference)
      return null;
    if (!this.spatialReference.equals(this.geometry.spatialReference))
      try {
        return rn(this.geometry, this.spatialReference);
      } catch (e15) {
        return s.getLogger(this.declaredClass).error("#constraints.geometry", "could not project the geometry to the view's spatial reference", { geometry: this.geometry, spatialReference: this.spatialReference, error: e15 }), null;
      }
    return this.geometry;
  }
  constrain(e15, r20) {
    if (t(this.normalizedGeometry))
      return e15;
    const t24 = e15.targetGeometry;
    if ("extent" === this.normalizedGeometry.type ? r2(this.normalizedGeometry, t24) : c(this.normalizedGeometry, t24))
      return e15;
    const { coordinate: o21 } = o14(this.normalizedGeometry, t24);
    return o21 ? (e15.targetGeometry = o21, e15) : e15;
  }
  clone() {
    var _a, _b;
    return new l11({ geometry: (_a = this.geometry) == null ? void 0 : _a.clone(), spatialReference: (_b = this.spatialReference) == null ? void 0 : _b.clone() });
  }
};
e2([y({ constructOnly: true })], y4.prototype, "geometry", void 0), e2([y({ readOnly: true })], y4.prototype, "normalizedGeometry", null), e2([y({ constructOnly: true })], y4.prototype, "spatialReference", void 0), y4 = l11 = e2([a3("esri.views.2d.constraints.GeometryConstraint")], y4);

// node_modules/@arcgis/core/views/2d/constraints/RotationConstraint.js
var a16;
var n16 = a16 = class extends i4(v3) {
  constructor() {
    super(...arguments), this.enabled = true, this.rotationEnabled = true;
  }
  constrain(o21, r20) {
    return this.enabled && r20 ? (this.rotationEnabled || (o21.rotation = r20.rotation), o21) : o21;
  }
  clone() {
    return new a16({ enabled: this.enabled, rotationEnabled: this.rotationEnabled });
  }
};
e2([y()], n16.prototype, "enabled", void 0), e2([y()], n16.prototype, "rotationEnabled", void 0), n16 = a16 = e2([a3("esri.views.2d.constraints.RotationConstraint")], n16);
var i16 = n16;

// node_modules/@arcgis/core/views/2d/constraints/ZoomConstraint.js
var a17;
var c11 = a17 = class extends i4(v3) {
  constructor(e15) {
    super(e15), this._lodByScale = {}, this._scales = [], this.effectiveLODs = null, this.effectiveMinZoom = -1, this.effectiveMaxZoom = -1, this.effectiveMinScale = 0, this.effectiveMaxScale = 0, this.lods = null, this.minZoom = -1, this.maxZoom = -1, this.minScale = 0, this.maxScale = 0, this.snapToZoom = true;
  }
  initialize() {
    let e15, { lods: t24, minScale: o21, maxScale: s18, minZoom: i24, maxZoom: a29 } = this, c21 = -1, r20 = -1, l17 = false, n24 = false;
    if (0 !== o21 && 0 !== s18 && o21 < s18 && ([o21, s18] = [s18, o21]), !t24 || !t24.length)
      return this._set("effectiveMinScale", o21), void this._set("effectiveMaxScale", s18);
    t24 = t24.map((e16) => e16.clone()), t24.sort((e16, t25) => t25.scale - e16.scale), t24.forEach((e16, t25) => e16.level = t25);
    for (const f11 of t24)
      !l17 && o21 > 0 && o21 >= f11.scale && (c21 = f11.level, l17 = true), !n24 && s18 > 0 && s18 >= f11.scale && (r20 = e15 ? e15.level : -1, n24 = true), e15 = f11;
    -1 === i24 && (i24 = 0 === o21 ? 0 : c21), -1 === a29 && (a29 = 0 === s18 ? t24.length - 1 : r20), i24 = Math.max(i24, 0), i24 = Math.min(i24, t24.length - 1), a29 = Math.max(a29, 0), a29 = Math.min(a29, t24.length - 1), i24 > a29 && ([i24, a29] = [a29, i24]), o21 = t24[i24].scale, s18 = t24[a29].scale, t24.splice(0, i24), t24.splice(a29 - i24 + 1, t24.length), t24.forEach((e16, t25) => {
      this._lodByScale[e16.scale] = e16, this._scales[t25] = e16.scale;
    }), this._set("effectiveLODs", t24), this._set("effectiveMinZoom", i24), this._set("effectiveMaxZoom", a29), this._set("effectiveMinScale", o21), this._set("effectiveMaxScale", s18);
  }
  constrain(e15, t24) {
    if (t24 && e15.scale === t24.scale)
      return e15;
    const o21 = this.effectiveMinScale, s18 = this.effectiveMaxScale, i24 = e15.targetGeometry, a29 = t24 && t24.targetGeometry, c21 = 0 !== s18 && e15.scale < s18, r20 = 0 !== o21 && e15.scale > o21;
    if (c21 || r20) {
      const c22 = r20 ? o21 : s18;
      if (t24 && a29) {
        const o22 = (c22 - t24.scale) / (e15.scale - t24.scale);
        i24.x = a29.x + (i24.x - a29.x) * o22, i24.y = a29.y + (i24.y - a29.y) * o22;
      }
      e15.scale = c22;
    }
    return this.snapToZoom && this.effectiveLODs && (e15.scale = this._getClosestScale(e15.scale)), e15;
  }
  fit(e15) {
    if (!this.effectiveLODs || !this.snapToZoom)
      return this.constrain(e15, null);
    const t24 = this.scaleToZoom(e15.scale), o21 = Math.abs(t24 - Math.floor(t24));
    return e15.scale = this.zoomToScale(o21 > 0.99 ? Math.round(t24) : Math.floor(t24)), e15;
  }
  zoomToScale(e15) {
    if (!this.effectiveLODs)
      return 0;
    e15 -= this.effectiveMinZoom, e15 = Math.max(0, e15);
    const t24 = this._scales;
    if (e15 <= 0)
      return t24[0];
    if (e15 >= t24.length)
      return t24[t24.length - 1];
    const o21 = Math.round(e15 - 0.5), s18 = Math.round(e15);
    return t24[s18] + (s18 - e15) * (t24[o21] - t24[s18]);
  }
  scaleToZoom(e15) {
    if (!this.effectiveLODs)
      return -1;
    const t24 = this._scales;
    let o21, s18;
    if (e15 >= t24[0])
      return this.effectiveMinZoom;
    if (e15 <= t24[t24.length - 1])
      return this.effectiveMaxZoom;
    for (let i24 = 0; i24 < t24.length - 1; i24++) {
      if (o21 = t24[i24], s18 = t24[i24 + 1], s18 === e15) {
        return i24 + this.effectiveMinZoom + 1;
      }
      if (o21 > e15 && s18 < e15) {
        return i24 + this.effectiveMinZoom + 1 - (e15 - s18) / (o21 - s18);
      }
    }
    return -1;
  }
  snapToClosestScale(e15) {
    if (!this.effectiveLODs)
      return e15;
    const t24 = this.scaleToZoom(e15);
    return this.zoomToScale(Math.round(t24));
  }
  snapToNextScale(e15, t24 = 0.5) {
    if (!this.effectiveLODs)
      return e15 * t24;
    const o21 = Math.round(this.scaleToZoom(e15));
    return this.zoomToScale(o21 + 1);
  }
  snapToPreviousScale(e15, t24 = 2) {
    if (!this.effectiveLODs)
      return e15 * t24;
    const o21 = Math.round(this.scaleToZoom(e15));
    return this.zoomToScale(o21 - 1);
  }
  clone() {
    return new a17({ lods: this.lods, minZoom: this.minZoom, maxZoom: this.maxZoom, minScale: this.minScale, maxScale: this.maxScale });
  }
  _getClosestScale(e15) {
    return this._lodByScale[e15] || (e15 = this._scales.reduce((t24, o21) => Math.abs(o21 - e15) <= Math.abs(t24 - e15) ? o21 : t24, this._scales[0])), this._lodByScale[e15].scale;
  }
};
e2([y({ readOnly: true })], c11.prototype, "effectiveLODs", void 0), e2([y({ readOnly: true })], c11.prototype, "effectiveMinZoom", void 0), e2([y({ readOnly: true })], c11.prototype, "effectiveMaxZoom", void 0), e2([y({ readOnly: true })], c11.prototype, "effectiveMinScale", void 0), e2([y({ readOnly: true })], c11.prototype, "effectiveMaxScale", void 0), e2([y()], c11.prototype, "lods", void 0), e2([y()], c11.prototype, "minZoom", void 0), e2([y()], c11.prototype, "maxZoom", void 0), e2([y()], c11.prototype, "minScale", void 0), e2([y()], c11.prototype, "maxScale", void 0), e2([y()], c11.prototype, "snapToZoom", void 0), c11 = a17 = e2([a3("esri.views.2d.constraints.ZoomConstraint")], c11);
var r13 = c11;

// node_modules/@arcgis/core/views/2d/MapViewConstraints.js
var p12 = { base: null, key: "type", typeMap: { extent: w3, polygon: v4 } };
var c12 = class extends v3 {
  constructor(o21) {
    super(o21), this.lods = null, this.minScale = 0, this.maxScale = 0, this.minZoom = -1, this.maxZoom = -1, this.rotationEnabled = true, this.snapToZoom = true;
  }
  destroy() {
    this.view = null;
  }
  get effectiveLODs() {
    return this._zoom.effectiveLODs;
  }
  get effectiveMinScale() {
    return this._zoom.effectiveMinScale;
  }
  get effectiveMaxScale() {
    return this._zoom.effectiveMaxScale;
  }
  get effectiveMinZoom() {
    return this._zoom.effectiveMinZoom;
  }
  get effectiveMaxZoom() {
    return this._zoom.effectiveMaxZoom;
  }
  set geometry(o21) {
    o21 ? this._set("geometry", o21) : this._set("geometry", null);
  }
  get version() {
    var _a, _b, _c;
    return `${(_a = this._zoom) == null ? void 0 : _a.uid}/${(_b = this._rotation) == null ? void 0 : _b.uid}/${(_c = this._geometry) == null ? void 0 : _c.uid}`;
  }
  get _defaultLODs() {
    var _a, _b, _c;
    const o21 = (_b = (_a = this.view) == null ? void 0 : _a.defaultsFromMap) == null ? void 0 : _b.tileInfo, e15 = (_c = this.view) == null ? void 0 : _c.spatialReference;
    return o21 && e15 && o21.spatialReference.equals(e15) ? o21.lods : null;
  }
  get _geometry() {
    var _a;
    return new y4({ geometry: this.geometry, spatialReference: (_a = this.view) == null ? void 0 : _a.spatialReference });
  }
  get _rotation() {
    return new i16({ rotationEnabled: this.rotationEnabled });
  }
  get _zoom() {
    const o21 = this._get("_zoom"), e15 = this.lods || this._defaultLODs, t24 = this.minZoom, r20 = this.maxZoom, s18 = this.minScale, i24 = this.maxScale, n24 = this.snapToZoom;
    return o21 && o21.lods === e15 && o21.minZoom === t24 && o21.maxZoom === r20 && o21.minScale === s18 && o21.maxScale === i24 && o21.snapToZoom === n24 ? o21 : new r13({ lods: e15, minZoom: t24, maxZoom: r20, minScale: s18, maxScale: i24, snapToZoom: n24 });
  }
  canZoomInTo(o21) {
    const e15 = this.effectiveMaxScale;
    return 0 === e15 || o21 >= e15;
  }
  canZoomOutTo(o21) {
    const e15 = this.effectiveMinScale;
    return 0 === e15 || o21 <= e15;
  }
  constrain(o21, e15) {
    return this._zoom.constrain(o21, e15), this._rotation.constrain(o21, e15), this._geometry.constrain(o21, e15), o21;
  }
  constrainByGeometry(o21) {
    return this._geometry.constrain(o21);
  }
  fit(o21) {
    return this._zoom.fit(o21);
  }
  zoomToScale(o21) {
    return this._zoom.zoomToScale(o21);
  }
  scaleToZoom(o21) {
    return this._zoom.scaleToZoom(o21);
  }
  snapScale(o21) {
    return this._zoom.snapToClosestScale(o21);
  }
  snapToNextScale(o21) {
    return this._zoom.snapToNextScale(o21);
  }
  snapToPreviousScale(o21) {
    return this._zoom.snapToPreviousScale(o21);
  }
};
e2([y({ readOnly: true })], c12.prototype, "effectiveLODs", null), e2([y({ readOnly: true })], c12.prototype, "effectiveMinScale", null), e2([y({ readOnly: true })], c12.prototype, "effectiveMaxScale", null), e2([y({ readOnly: true })], c12.prototype, "effectiveMinZoom", null), e2([y({ readOnly: true })], c12.prototype, "effectiveMaxZoom", null), e2([y({ types: p12, value: null })], c12.prototype, "geometry", null), e2([y({ type: [p3] })], c12.prototype, "lods", void 0), e2([y()], c12.prototype, "minScale", void 0), e2([y()], c12.prototype, "maxScale", void 0), e2([y()], c12.prototype, "minZoom", void 0), e2([y()], c12.prototype, "maxZoom", void 0), e2([y()], c12.prototype, "rotationEnabled", void 0), e2([y()], c12.prototype, "snapToZoom", void 0), e2([y()], c12.prototype, "view", void 0), e2([y({ readOnly: true })], c12.prototype, "version", null), e2([y()], c12.prototype, "_defaultLODs", null), e2([y({ type: y4 })], c12.prototype, "_geometry", null), e2([y({ type: i16 })], c12.prototype, "_rotation", null), e2([y({ readOnly: true, type: r13 })], c12.prototype, "_zoom", null), c12 = e2([a3("esri.views.2d.MapViewConstraints")], c12);
var u7 = c12;

// node_modules/@arcgis/core/core/libs/gl-matrix-2/types/vec2.js
function n17(n24) {
  return n24 instanceof Float32Array && n24.length >= 2;
}
function r14(n24) {
  return Array.isArray(n24) && n24.length >= 2;
}
function t15(t24) {
  return n17(t24) || r14(t24);
}

// node_modules/@arcgis/core/views/2d/ViewState.js
var b3;
var G = [0, 0];
var O = b3 = class extends l {
  constructor(t24) {
    super(t24), this._viewpoint2D = { center: n8(), rotation: 0, scale: 0, spatialReference: void 0 }, this.center = [0, 0], this.extent = new w3(), this.id = 0, this.inverseTransform = e7(), this.resolution = 0, this.rotation = 0, this.scale = 0, this.transform = e7(), this.transformNoRotation = e7(), this.displayMat3 = e6(), this.displayViewMat3 = e6(), this.viewMat3 = e6(), this.viewMat2d = n7(), this.worldScreenWidth = 0, this.size = [0, 0];
  }
  set pixelRatio(t24) {
    this._set("pixelRatio", t24), this._update();
  }
  set size(t24) {
    this._set("size", t24), this._update();
  }
  set viewpoint(t24) {
    if (t24) {
      const s18 = this._viewpoint2D, i24 = t24.targetGeometry;
      s18.center[0] = i24.x, s18.center[1] = i24.y, s18.rotation = t24.rotation, s18.scale = t24.scale, s18.spatialReference = i24.spatialReference;
    }
    this._update();
  }
  copy(t24) {
    const s18 = this.size, i24 = this.viewpoint;
    return i24 && s18 ? (this.viewpoint = Z(i24, t24.viewpoint), this._set("size", a7(s18, t24.size))) : (this.viewpoint = t24.viewpoint.clone(), this._set("size", [t24.size[0], t24.size[1]])), this._set("pixelRatio", t24.pixelRatio), this;
  }
  clone() {
    return new b3({ size: this.size, viewpoint: this.viewpoint.clone(), pixelRatio: this.pixelRatio });
  }
  toMap(t24, s18, i24) {
    return t15(s18) ? z(t24, s18, this.inverseTransform) : (G[0] = s18, G[1] = i24, z(t24, G, this.inverseTransform));
  }
  toScreen(t24, s18, i24) {
    return t15(s18) ? z(t24, s18, this.transform) : (G[0] = s18, G[1] = i24, z(t24, G, this.transform));
  }
  toScreenNoRotation(t24, s18, i24) {
    return t15(s18) ? z(t24, s18, this.transformNoRotation) : (G[0] = s18, G[1] = i24, z(t24, G, this.transformNoRotation));
  }
  getScreenTransform(t24, s18) {
    const { center: i24 } = this._viewpoint2D, e15 = this._get("pixelRatio") || 1, o21 = this._get("size");
    return ut(t24, i24, o21, s18, 0, e15), t24;
  }
  _update() {
    const { center: t24, spatialReference: i24, scale: e15, rotation: o21 } = this._viewpoint2D, c21 = this._get("pixelRatio") || 1, m14 = this._get("size"), d12 = new u({ targetGeometry: new w2(t24[0], t24[1], i24), scale: e15, rotation: o21 });
    if (this._set("viewpoint", d12), !m14 || !i24 || !e15)
      return;
    this.resolution = ot(d12), this.rotation = o21, this.scale = e15, this.spatialReference = i24, a7(this.center, t24);
    const y7 = 0 !== m14[0] ? 2 / m14[0] : 0, _7 = 0 !== m14[1] ? -2 / m14[1] : 0;
    s5(this.displayMat3, y7, 0, 0, 0, _7, 0, -1, 1, 1);
    const x = r6(this.viewMat3), z5 = t9(m14[0] / 2, m14[1] / 2), g11 = t9(-m14[0] / 2, -m14[1] / 2), D2 = r3(o21);
    M2(x, x, z5), h2(x, x, D2), M2(x, x, g11), i2(this.displayViewMat3, this.displayMat3, x);
    const b6 = f5(this.viewMat2d, z5);
    return e5(b6, b6, D2), i3(b6, b6, g11), _2(this.extent, d12, m14), ft(this.transform, d12, m14, c21), r7(this.inverseTransform, this.transform), lt(this.transformNoRotation, d12, m14, c21), this.worldScreenWidth = yt(this.spatialReference, this.resolution), this._set("id", this.id + 1), this;
  }
};
e2([y({ readOnly: true })], O.prototype, "id", void 0), e2([y({ value: 1, json: { write: true } })], O.prototype, "pixelRatio", null), e2([y({ json: { write: true } })], O.prototype, "size", null), e2([y()], O.prototype, "spatialReference", void 0), e2([y({ type: u, json: { write: true } })], O.prototype, "viewpoint", null), O = b3 = e2([a3("esri.views.2d.ViewState")], O);
var U3 = O;

// node_modules/@arcgis/core/views/2d/PaddedViewState.js
var l12;
var m8;
var w9 = l12 = class extends v3 {
  constructor() {
    super(...arguments), this.left = 0, this.top = 0, this.right = 0, this.bottom = 0;
  }
  clone() {
    return new l12({ left: this.left, top: this.top, right: this.right, bottom: this.bottom });
  }
};
e2([y()], w9.prototype, "left", void 0), e2([y()], w9.prototype, "top", void 0), e2([y()], w9.prototype, "right", void 0), e2([y()], w9.prototype, "bottom", void 0), w9 = l12 = e2([a3("esri.views.2d.PaddedViewState.Padding")], w9);
var u8 = m8 = class extends U3 {
  constructor(...t24) {
    super(...t24), this.paddedViewState = new U3(), this._updateContent = (() => {
      const t25 = n8();
      return () => {
        const e15 = this._get("size"), i24 = this._get("padding");
        if (!e15 || !i24)
          return;
        const o21 = this.paddedViewState;
        r5(t25, i24.left + i24.right, i24.top + i24.bottom), o5(t25, e15, t25), a7(o21.size, t25);
        const s18 = o21.viewpoint;
        s18 && (this.viewpoint = s18);
      };
    })(), this.addHandles(l3(() => [this.size, this.padding], () => this._updateContent(), U2)), this.padding = new w9(), this.size = [0, 0];
  }
  set padding(t24) {
    this._set("padding", t24 || new w9());
  }
  set viewpoint(t24) {
    if (t24) {
      const e15 = t24.clone();
      this.paddedViewState.viewpoint = t24, gt(e15, t24, this._get("size"), this._get("padding"));
      const i24 = this._viewpoint2D, o21 = e15.targetGeometry;
      i24.center[0] = o21.x, i24.center[1] = o21.y, i24.rotation = e15.rotation, i24.scale = e15.scale, i24.spatialReference = o21.spatialReference, this._update();
    }
  }
  clone() {
    return new m8({ padding: this.padding.clone(), size: this.size.slice(), viewpoint: this.paddedViewState.viewpoint.clone(), pixelRatio: this.pixelRatio });
  }
};
e2([y()], u8.prototype, "paddedViewState", void 0), e2([y({ type: w9 })], u8.prototype, "padding", null), e2([y()], u8.prototype, "viewpoint", null), u8 = m8 = e2([a3("esri.views.2d.PaddedViewState")], u8);
var f8 = u8;

// node_modules/@arcgis/core/views/input/handlers/support.js
function t16(t24, r20) {
  switch (r20) {
    case "primary":
      return "touch" === t24.pointerType || 0 === t24.button;
    case "secondary":
      return "touch" !== t24.pointerType && 2 === t24.button;
    case "tertiary":
      return "touch" !== t24.pointerType && 1 === t24.button;
  }
}

// node_modules/@arcgis/core/views/2d/input/handlers/DoubleClickZoom.js
var a18 = class extends i6 {
  constructor(t24, i24) {
    super(true), this._view = t24, this.registerIncoming("double-click", i24, (t25) => this._handleDoubleClick(t25, i24));
  }
  _handleDoubleClick(t24, a29) {
    t16(t24.data, "primary") && (t24.stopPropagation(), a29 ? this._view.mapViewNavigation.zoomOut([t24.data.x, t24.data.y]) : this._view.mapViewNavigation.zoomIn([t24.data.x, t24.data.y]));
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DoubleTapDragZoom.js
var e9 = class extends i6 {
  constructor(t24, e15, a29) {
    super(true), this.view = t24, this.pointerType = e15, this.registerIncoming("double-tap-drag", a29, (t25) => this._handleDoubleTapDrag(t25));
  }
  _handleDoubleTapDrag(t24) {
    const { data: e15 } = t24, { pointerType: a29 } = e15;
    if (a29 !== this.pointerType)
      return;
    t24.stopPropagation();
    const { action: s18, delta: i24 } = e15, { view: r20 } = this, { mapViewNavigation: n24 } = r20;
    switch (s18) {
      case "begin": {
        const { scale: t25 } = r20;
        this._startScale = t25, this._currentScale = t25, this._previousDelta = i24, n24.begin();
        break;
      }
      case "update": {
        if (this._previousDelta.y === i24.y)
          return;
        this._previousDelta = i24;
        const t25 = 1.015 ** i24.y, e16 = this._startScale * t25, a30 = e16 / this._currentScale;
        n24.setViewpointImmediate(a30), this._currentScale = e16;
        break;
      }
      case "end": {
        const { constraints: t25 } = r20, { effectiveLODs: e16, snapToZoom: a30 } = t25;
        if (!a30 || !e16)
          return void n24.end();
        const s19 = t25.snapScale(this._currentScale), o21 = (i24.y > 0 ? Math.max(s19, t25.snapToPreviousScale(this._startScale)) : Math.min(s19, t25.snapToNextScale(this._startScale))) / this._currentScale;
        n24.zoom(o21);
        break;
      }
    }
  }
};

// node_modules/@arcgis/core/views/input/DragEventSeparator.js
var t17 = class {
  constructor(t24) {
    this._callbacks = t24, this._currentCount = 0, this._callbacks.condition || (this._callbacks.condition = () => true);
  }
  handle(t24) {
    const s18 = t24.data, i24 = s18.pointers.size;
    switch (s18.action) {
      case "start":
        this._currentCount = i24, this._emitStart(t24);
        break;
      case "added":
        this._emitEnd(this._previousEvent), this._currentCount = i24, this._emitStart(t24);
        break;
      case "update":
        this._emitUpdate(t24);
        break;
      case "removed":
        this._startEvent && this._emitEnd(this._previousEvent), this._currentCount = i24, this._emitStart(t24);
        break;
      case "end":
        this._emitEnd(t24), this._currentCount = 0;
    }
    this._previousEvent = t24;
  }
  _emitStart(t24) {
    var _a, _b;
    this._startEvent = t24, ((_b = (_a = this._callbacks).condition) == null ? void 0 : _b.call(_a, this._currentCount, t24)) && this._callbacks.start(this._currentCount, t24, this._startEvent);
  }
  _emitUpdate(t24) {
    var _a, _b;
    ((_b = (_a = this._callbacks).condition) == null ? void 0 : _b.call(_a, this._currentCount, t24)) && this._callbacks.update(this._currentCount, t24, this._startEvent);
  }
  _emitEnd(t24) {
    var _a, _b;
    ((_b = (_a = this._callbacks).condition) == null ? void 0 : _b.call(_a, this._currentCount, t24)) && this._callbacks.end(this._currentCount, t24, this._startEvent), this._startEvent = null;
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DragPan.js
var n18 = class extends i6 {
  constructor(t24, i24, a29) {
    super(true), this.view = t24, this.pointerAction = i24, this.registerIncoming("drag", a29, (t25) => this._handleDrag(t25)), this.registerIncoming("pointer-down", () => this.stopMomentumNavigation());
  }
  onInstall(i24) {
    super.onInstall(i24), this._dragEventSeparator = new t17({ start: (t24, i25) => {
      this.view.mapViewNavigation.pan.begin(this.view, i25.data), i25.stopPropagation();
    }, update: (t24, i25) => {
      this.view.mapViewNavigation.pan.update(this.view, i25.data), i25.stopPropagation();
    }, end: (t24, i25) => {
      this.view.mapViewNavigation.pan.end(this.view, i25.data), i25.stopPropagation();
    }, condition: (t24, i25) => 1 === t24 && t16(i25.data, this.pointerAction) });
  }
  _handleDrag(t24) {
    const i24 = this.view.mapViewNavigation;
    i24.pinch.zoomMomentum || i24.pinch.rotateMomentum ? this.stopMomentumNavigation() : this._dragEventSeparator.handle(t24);
  }
  stopMomentumNavigation() {
    this.view.mapViewNavigation.pan.stopMomentumNavigation();
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DragRotate.js
var o15 = class extends i6 {
  constructor(a29, o21, r20) {
    super(true), this._view = a29, this.pointerAction = o21;
    const e15 = this._view.mapViewNavigation;
    this._dragEventSeparator = new t17({ start: (t24, a30) => {
      e15.rotate.begin(this._view, a30.data), a30.stopPropagation();
    }, update: (t24, a30) => {
      e15.rotate.update(this._view, a30.data), a30.stopPropagation();
    }, end: (t24, a30) => {
      e15.rotate.end(), a30.stopPropagation();
    }, condition: (t24, a30) => 1 === t24 && t16(a30.data, this.pointerAction) }), this.registerIncoming("drag", r20, (t24) => this._dragEventSeparator.handle(t24));
  }
};

// node_modules/@arcgis/core/views/navigation/gamepadAndKeyboardUtils.js
function n19(t24) {
  let n24 = t24 * t24;
  return t24 < 0 && (n24 *= -1), n24;
}
function a19(t24) {
  return t24.translation[0] = 0, t24.translation[1] = 0, t24.translation[2] = 0, t24.heading = 0, t24.tilt = 0, t24;
}
function i17(a29, i24, o21) {
  const s18 = o21, e15 = a29.state, r20 = a29.device, l17 = "forward-down" === i24.tiltDirection ? 1 : -1, c21 = 1;
  return "standard" === r20.deviceType ? (s18.translation[0] = n19(e15.axes[0]), s18.translation[1] = n19(e15.axes[1]), s18.translation[2] = n19(e15.buttons[7]) - n19(e15.buttons[6]), s18.heading = n19(e15.axes[2]), s18.tilt = n19(e15.axes[3])) : "spacemouse" === r20.deviceType && (s18.translation[0] = 1.2 * n19(e15.axes[0]), s18.translation[1] = 1.2 * n19(e15.axes[1]), s18.translation[2] = 2 * -n19(e15.axes[2]), s18.heading = 1.2 * n19(e15.axes[5]), s18.tilt = 1.2 * n19(e15.axes[3])), s18.tilt *= l17, g2(s18.translation, s18.translation, c21), s18;
}
function s13(t24) {
  return 0 === t24.translation[0] && 0 === t24.translation[1] && 0 === t24.translation[2] && 0 === t24.heading && 0 === t24.tilt && 0 === t24.zoom;
}

// node_modules/@arcgis/core/views/2d/input/handlers/GamepadNavigation.js
var d7 = class extends i6 {
  constructor(i24) {
    super(true), this._view = i24, this._frameTask = null, this._watchHandles = new t3(), this._currentDevice = null, this._transformation = { translation: [0, 0, 0], heading: 0, tilt: 0, zoom: 0 }, this._handle = this.registerIncoming("gamepad", (t24) => this._handleGamePadEvent(t24)), this._handle.pause();
  }
  onInstall(t24) {
    super.onInstall(t24), this._watchHandles.add([l3(() => {
      var _a;
      return (_a = this._view.navigation.gamepad) == null ? void 0 : _a.enabled;
    }, (t25) => {
      t25 ? (this._handle.resume(), this._frameTask || (this._frameTask = A2({ update: (t26) => this._frameUpdate(t26.deltaTime) }))) : (this._handle.pause(), this._frameTask && (this._frameTask.remove(), this._frameTask = null));
    }, h)]);
  }
  onUninstall() {
    this._watchHandles.removeAll(), this._frameTask && (this._frameTask.remove(), this._frameTask = null), super.onUninstall();
  }
  _handleGamePadEvent(t24) {
    const i24 = this._view.navigation.gamepad.device;
    i24 && t24.data.device !== i24 || this._currentDevice && this._currentDevice !== t24.data.device || ("end" === t24.data.action ? (this._currentDevice = null, a19(this._transformation)) : (this._currentDevice = t24.data.device, i17(t24.data, this._view.navigation.gamepad, this._transformation)));
  }
  _frameUpdate(t24) {
    const i24 = this._transformation;
    if (s13(i24))
      return;
    const e15 = this._view.viewpoint.clone(), a29 = this._view.navigation.gamepad.velocityFactor, r20 = _4 * a29 * t24;
    St(e15, e15, [i24.translation[0] * r20, -i24.translation[1] * r20]);
    const o21 = 1 + i24.translation[2] * c13 * t24, h12 = this._view.constraints.rotationEnabled ? -i24.heading * m9 * t24 : 0, d12 = this._view.size, v9 = [d12[0] / 2, d12[1]];
    Gt(e15, e15, o21, h12, v9, d12);
    const p20 = this._view.constraints.constrain(e15, this._view.viewpoint);
    this._view.viewpoint = p20;
  }
};
var m9 = 0.06;
var _4 = 0.7;
var c13 = 6e-4;

// node_modules/@arcgis/core/views/2d/input/handlers/KeyPan.js
var i18 = class extends i6 {
  constructor(e15, i24, t24) {
    super(true), this.view = e15, this.keys = i24, this._pressed = false, this._keyMap = { [i24.left]: "left", [i24.right]: "right", [i24.up]: "up", [i24.down]: "down" }, this.registerIncoming("key-down", t24, (e16) => this._handleKeyDown(e16)), this.registerIncoming("key-up", t24, (e16) => this._handleKeyUp(e16)), this.registerIncoming("blur", t24, () => this._handleBlur());
  }
  _handleKeyDown(e15) {
    e15.data.repeat || this._handleKey(e15, true);
  }
  _handleKeyUp(e15) {
    this._handleKey(e15, false);
  }
  _handleBlur() {
    this._pressed && (this._pressed = false, this.view.mapViewNavigation.stop());
  }
  _handleKey(e15, i24) {
    const t24 = this._keyMap[e15.data.key];
    if (this._pressed = null != t24, this._pressed) {
      if (i24)
        switch (this.view.mapViewNavigation.begin(), t24) {
          case "left":
            this.view.mapViewNavigation.continousPanLeft();
            break;
          case "right":
            this.view.mapViewNavigation.continousPanRight();
            break;
          case "up":
            this.view.mapViewNavigation.continousPanUp();
            break;
          case "down":
            this.view.mapViewNavigation.continousPanDown();
        }
      else
        this._pressed = false, this.view.mapViewNavigation.stop();
      e15.stopPropagation();
    }
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/KeyRotate.js
var i19 = class extends i6 {
  constructor(e15, i24, t24) {
    super(true), this.view = e15, this.keys = i24, this._pressed = false, this._keyToDirection = { [i24.clockwiseOption1]: "clockwise", [i24.clockwiseOption2]: "clockwise", [i24.counterClockwiseOption1]: "counterClockwise", [i24.counterClockwiseOption2]: "counterClockwise", [i24.resetOption1]: "reset", [i24.resetOption2]: "reset" }, this.registerIncoming("key-down", t24, (e16) => this._handleKeyDown(e16)), this.registerIncoming("key-up", t24, (e16) => this._handleKeyUp(e16)), this.registerIncoming("blur", t24, () => this._handleBlur());
  }
  _handleKeyDown(e15) {
    e15.data.repeat || this._handleKey(e15, true);
  }
  _handleKeyUp(e15) {
    this._handleKey(e15, false);
  }
  _handleBlur() {
    this._pressed && (this._pressed = false, this.view.mapViewNavigation.stop());
  }
  _handleKey(e15, i24) {
    const t24 = e15.modifiers;
    if (t24.size > 0 && !t24.has("Shift") || !this.view.constraints.rotationEnabled)
      return;
    const s18 = this._keyToDirection[e15.data.key];
    if (this._pressed = null != s18, this._pressed) {
      if (i24)
        switch (this.view.mapViewNavigation.begin(), s18) {
          case "clockwise":
            this.view.mapViewNavigation.continousRotateClockwise();
            break;
          case "counterClockwise":
            this.view.mapViewNavigation.continousRotateCounterclockwise();
            break;
          case "reset":
            this.view.mapViewNavigation.resetRotation();
        }
      else
        this._pressed = false, this.view.mapViewNavigation.stop();
      e15.stopPropagation();
    }
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/KeyZoom.js
var t18;
!function(o21) {
  o21[o21.IN = 0] = "IN", o21[o21.OUT = 1] = "OUT";
}(t18 || (t18 = {}));
var e10 = class extends i6 {
  constructor(o21, e15, i24) {
    super(true), this.view = o21, this.keys = e15, this._keysToZoomAction = {}, this.registerIncoming("key-down", i24, (o22) => this._handleKeyDown(o22)), e15.zoomIn.forEach((o22) => this._keysToZoomAction[o22] = t18.IN), e15.zoomOut.forEach((o22) => this._keysToZoomAction[o22] = t18.OUT);
  }
  _handleKeyDown(o21) {
    this._handleKey(o21);
  }
  _handleKey(o21) {
    const e15 = o21.modifiers;
    if (e15.size > 0 && !e15.has("Shift"))
      return;
    const { key: i24 } = o21.data;
    if (!(i24 in this._keysToZoomAction))
      return;
    const n24 = this._keysToZoomAction[i24], { mapViewNavigation: s18 } = this.view;
    let r20 = null;
    switch (n24) {
      case t18.IN:
        r20 = s18.zoomIn();
        break;
      case t18.OUT:
        r20 = s18.zoomOut();
        break;
      default:
        return;
    }
    s18.begin(), r20.then(() => s18.end()), o21.stopPropagation();
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/MouseWheelZoom.js
var t19 = 0.6;
var o16 = class extends i6 {
  constructor(e15, t24) {
    super(true), this._view = e15, this._canZoom = true, this.registerIncoming("mouse-wheel", t24, (e16) => this._handleMouseWheel(e16));
  }
  _handleMouseWheel(e15) {
    if (!this._view.navigation.mouseWheelZoomEnabled)
      return;
    if (e15.preventDefault(), e15.stopPropagation(), !this._canZoom)
      return;
    const o21 = this._view.mapViewNavigation, { x: n24, y: i24, deltaY: s18 } = e15.data, a29 = 1 / t19 ** (1 / 60 * s18), h12 = o21.zoom(a29, [n24, i24]);
    h12 && (this._canZoom = false, h12.catch(() => {
    }).then(() => {
      this._canZoom = true, o21.end();
    }));
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/PinchAction.js
var a20 = class extends i6 {
  constructor(i24) {
    super(true), this.view = i24, this.registerIncoming("drag", (t24) => this._handleDrag(t24)), this.registerIncoming("pointer-down", () => this._stopMomentumNavigation());
    const a29 = this.view.mapViewNavigation;
    this._dragEventSeparator = new t17({ start: (t24, i25) => {
      a29.pinch.begin(this.view, i25.data), i25.stopPropagation();
    }, update: (t24, i25) => {
      a29.pinch.update(this.view, i25.data), i25.stopPropagation();
    }, end: (t24, i25) => {
      a29.pinch.end(this.view), i25.stopPropagation();
    }, condition: (t24) => t24 >= 2 });
  }
  _handleDrag(t24) {
    this._dragEventSeparator.handle(t24);
  }
  _stopMomentumNavigation() {
    this.view.mapViewNavigation.pinch.stopMomentumNavigation();
  }
};

// node_modules/@arcgis/core/views/input/gamepad/GamepadState.js
function t20(t24) {
  const n24 = t24.native;
  return n24 ? { buttons: n24.buttons.map((t25) => t25.pressed ? t25.value ? t25.value : 1 : 0), axes: n24.axes.map((n25) => s14(n25, t24.axisThreshold)) } : { buttons: [], axes: [] };
}
function n20(t24, n24) {
  if (t24.axes.length !== n24.axes.length)
    return false;
  if (t24.buttons.length !== n24.buttons.length)
    return false;
  for (let e15 = 0; e15 < t24.axes.length; e15++)
    if (t24.axes[e15] !== n24.axes[e15])
      return false;
  for (let e15 = 0; e15 < t24.buttons.length; e15++)
    if (t24.buttons[e15] !== n24.buttons[e15])
      return false;
  return true;
}
function e11(t24) {
  for (let n24 = 0; n24 < t24.axes.length; n24++)
    if (0 !== t24.axes[n24])
      return false;
  for (let n24 = 0; n24 < t24.buttons.length; n24++)
    if (0 !== t24.buttons[n24])
      return false;
  return true;
}
function s14(t24, n24) {
  const e15 = Math.abs(t24);
  return e15 < n24 ? 0 : Math.sign(t24) * (e15 - n24) / (1 - n24);
}

// node_modules/@arcgis/core/views/input/gamepad/GamepadSource.js
var a21 = class {
  constructor(e15, t24) {
    this._element = e15, this._input = t24, this._hasEventListeners = false, this._onConnectGamepad = (e16) => {
      this._connectGamepad(e16.gamepad);
    }, this._onDisconnectGamepad = (e16) => {
      const t25 = e16.gamepad, i25 = t25.index, n25 = this._inputDevices[i25];
      n25 && (this._emitGamepadEvent(t25, t20(n25), false), this._inputDevices.splice(i25, 1), this._latestUpdate.splice(i25, 1), this._input.gamepad.devices.remove(n25), this.ensurePollingState());
    }, this._frameTask = null, this._latestUpdate = new Array(), this._inputDevices = new Array(), this._callback = null;
    const i24 = "getGamepads" in window.navigator, n24 = window.isSecureContext;
    this.supported = i24 && n24, this.supported && (this._forEachGamepad((e16) => this._connectGamepad(e16)), window.addEventListener("gamepadconnected", this._onConnectGamepad), window.addEventListener("gamepaddisconnected", this._onDisconnectGamepad), this.ensurePollingState());
  }
  destroy() {
    this.hasEventListeners = false, this.supported && (window.removeEventListener("gamepadconnected", this._onConnectGamepad), window.removeEventListener("gamepaddisconnected", this._onDisconnectGamepad));
  }
  set hasEventListeners(e15) {
    this._hasEventListeners !== e15 && (this._hasEventListeners = e15, this.ensurePollingState());
  }
  get _eventsEnabled() {
    return this.supported && this._inputDevices.length > 0 && this._hasEventListeners;
  }
  set onEvent(e15) {
    this._callback = e15;
  }
  _connectGamepad(e15) {
    const s18 = new a12(e15);
    "unknown" !== s18.deviceType && (this._inputDevices[e15.index] = s18, this._input.gamepad.devices.add(s18)), this.ensurePollingState();
  }
  ensurePollingState() {
    this._eventsEnabled ? this._startPolling() : this._stopPolling();
  }
  _startPolling() {
    null == this._frameTask && (this._frameTask = A2({ update: () => this._readGamepadState() }));
  }
  _stopPolling() {
    null != this._frameTask && (this._frameTask.remove(), this._frameTask = null, this._latestUpdate = new Array());
  }
  _readGamepadState() {
    const e15 = document.hasFocus(), t24 = this._element.contains(document.activeElement), a29 = "document" === this._input.gamepad.enabledFocusMode && !e15 || "view" === this._input.gamepad.enabledFocusMode && !t24;
    this._forEachGamepad((e16) => {
      const t25 = this._inputDevices[e16.index];
      if (!t25)
        return;
      const d12 = this._latestUpdate[e16.index], o21 = t20(t25), r20 = a29 || e11(o21);
      if (d12) {
        if (d12.timestamp === e16.timestamp)
          return;
        if (!d12.active && r20)
          return;
        if (n20(d12.state, o21))
          return;
      }
      this._emitGamepadEvent(e16, o21, !r20);
    });
  }
  _forEachGamepad(e15) {
    const t24 = window.navigator.getGamepads();
    for (let s18 = 0; s18 < t24.length; s18++) {
      const i24 = t24[s18];
      this._validate(i24) && e15(i24);
    }
  }
  _emitGamepadEvent(e15, t24, s18) {
    const i24 = this._latestUpdate[e15.index], n24 = i24 && i24.active;
    if (!n24 && !s18)
      return;
    const a29 = !n24 && s18 ? "start" : n24 && s18 ? "update" : "end";
    this._latestUpdate[e15.index] = { timestamp: e15.timestamp, state: t24, active: s18 }, this._callback && this._callback({ device: this._inputDevices[e15.index], state: t24, action: a29 });
  }
  _validate(e15) {
    if (!e15)
      return false;
    if (!e15.connected)
      return false;
    for (let t24 = 0; t24 < e15.axes.length; t24++)
      if (isNaN(e15.axes[t24]))
        return false;
    return true;
  }
};

// node_modules/@arcgis/core/views/input/BrowserEventSource.js
var o17 = has("edge");
var a22 = has("chrome");
var s15 = has("ff");
var r15 = has("safari");
var h7 = "esri-view-surface";
var l13 = { touchNone: `${h7}--touch-none`, touchPan: `${h7}--touch-pan` };
var c14 = class {
  constructor(e15, t24) {
    this._input = t24, this._active = {}, this._callback = () => {
    }, this._activePointerCaptures = /* @__PURE__ */ new Set(), this._keyDownState = /* @__PURE__ */ new Set(), this._eventId = 1, this._browserTouchPanningEnabled = false, this._element = e15, e15.getAttribute("tabindex") || e15.setAttribute("tabindex", "0"), this._eventHandlers = { "key-down": this._handleKey, "key-up": this._handleKey, "pointer-down": this._handlePointer, "pointer-move": this._handlePointerPreventDefault, "pointer-up": this._handlePointerPreventDefault, "pointer-enter": this._handlePointer, "pointer-leave": this._handlePointer, "pointer-cancel": this._handlePointer, "mouse-wheel": this._handleMouseWheel, "pointer-capture-lost": this._handlePointerCaptureLost }, this._updateTouchAction(), this._element.addEventListener("keydown", this._preventAltKeyDefault), this._gamepadSource = new a21(e15, this._input), this._gamepadSource.onEvent = (e16) => this._callback("gamepad", e16);
  }
  destroy() {
    this._callback = () => {
    }, this.activeEvents = null, this._activePointerCaptures.forEach((e15) => {
      this._releasePointerCaptureSafe(e15);
    }), this._gamepadSource = a(this._gamepadSource), this._activePointerCaptures = null, this._removeTouchAction(), this._element.removeEventListener("keydown", this._preventAltKeyDefault);
  }
  get browserTouchPanningEnabled() {
    return this._browserTouchPanningEnabled;
  }
  set browserTouchPanningEnabled(e15) {
    this._browserTouchPanningEnabled = e15, this._updateTouchAction(), this._updateTouchEventHandling();
  }
  set onEventReceived(e15) {
    this._callback = e15;
  }
  set activeEvents(e15) {
    for (const t24 in this._active)
      if (!e15 || !e15.has(t24)) {
        const e16 = this._active[t24];
        this._element.removeEventListener(u9[t24], e16), delete this._active[t24];
      }
    e15 && e15.forEach((e16) => {
      if (!this._active[e16] && u9[e16]) {
        const t24 = (this._eventHandlers[e16] || this._handleDefault).bind(this, e16);
        this._element.addEventListener(u9[e16], t24), this._active[e16] = t24;
      }
    }), this._gamepadSource.hasEventListeners = (e15 == null ? void 0 : e15.has("gamepad")) ?? false;
  }
  setPointerCapture(e15, t24) {
    t24 ? (this._element.setPointerCapture(e15.pointerId), this._activePointerCaptures.add(e15.pointerId)) : (this._releasePointerCaptureSafe(e15.pointerId), this._activePointerCaptures.delete(e15.pointerId));
  }
  _updateTouchAction() {
    this._element.classList.remove(this._browserTouchPanningEnabled ? l13.touchNone : l13.touchPan), this._element.classList.add(this._browserTouchPanningEnabled ? l13.touchPan : l13.touchNone);
  }
  _updateTouchEventHandling() {
    this._browserTouchPanningEnabled ? this._element.addEventListener("touchmove", this._preventMultiTouchPanning) : this._element.removeEventListener("touchmove", this._preventMultiTouchPanning);
  }
  _removeTouchAction() {
    this._element.classList.remove(l13.touchNone), this._element.classList.remove(l13.touchPan), this._element.removeEventListener("touchmove", this._preventMultiTouchPanning);
  }
  _releasePointerCaptureSafe(e15) {
    try {
      if (this._element.hasPointerCapture && !this._element.hasPointerCapture(e15))
        return;
      this._element.releasePointerCapture(e15);
    } catch (t24) {
    }
  }
  _updateNormalizedPointerLikeEvent(e15, t24) {
    const n24 = i12(this._element, e15);
    return c14.test.disableSubpixelCoordinates && (n24.x = Math.round(n24.x), n24.y = Math.round(n24.y)), t24.x = n24.x, t24.y = n24.y, t24;
  }
  _handleKey(e15, n24) {
    const i24 = o6(n24);
    i24 && "key-up" === e15 && this._keyDownState.delete(i24);
    const o21 = { native: n24, key: i24, repeat: !!i24 && this._keyDownState.has(i24) };
    i24 && "key-down" === e15 && this._keyDownState.add(o21.key), this._callback(e15, o21);
  }
  _handlePointer(e15, t24) {
    const n24 = this._updateNormalizedPointerLikeEvent(t24, { native: t24, x: 0, y: 0, pointerType: t24.pointerType, button: t24.button, buttons: t24.buttons, eventId: this._eventId++ });
    this._callback(e15, n24);
  }
  _handlePointerPreventDefault(e15, t24) {
    const n24 = this._updateNormalizedPointerLikeEvent(t24, { native: t24, x: 0, y: 0, pointerType: t24.pointerType, button: t24.button, buttons: t24.buttons, eventId: this._eventId++ });
    t24.preventDefault(), this._callback(e15, n24);
  }
  _handleMouseWheel(e15, t24) {
    let n24 = t24.deltaY;
    switch (t24.deltaMode) {
      case 0:
        o17 && (n24 = n24 / document.documentElement.clientHeight * 600);
        break;
      case 1:
        n24 *= 30;
        break;
      case 2:
        n24 *= 900;
    }
    o17 ? n24 *= 0.7 : a22 || r15 ? n24 *= 0.6 : s15 && (n24 *= 1.375);
    const i24 = 100, h12 = Math.abs(n24);
    if (h12 > i24) {
      const e16 = 0.02;
      n24 = n24 / h12 * 200 / (1 + Math.exp(-e16 * (h12 - i24)));
    }
    const l17 = this._updateNormalizedPointerLikeEvent(t24, { native: t24, x: 0, y: 0, deltaY: n24 });
    this._callback(e15, l17);
  }
  _handlePointerCaptureLost(e15, t24) {
    this._activePointerCaptures.delete(t24.pointerId), this._handleDefault(e15, t24);
  }
  _handleDefault(e15, t24) {
    const n24 = { native: t24 };
    t24.preventDefault(), this._callback(e15, n24);
  }
  _preventAltKeyDefault(e15) {
    "Alt" === e15.key && e15.preventDefault();
  }
  _preventMultiTouchPanning(e15) {
    e15.touches.length > 1 && e15.preventDefault();
  }
};
c14.test = { disableSubpixelCoordinates: false };
var u9 = { "key-down": "keydown", "key-up": "keyup", "pointer-down": "pointerdown", "pointer-up": "pointerup", "pointer-move": "pointermove", "mouse-wheel": "wheel", "pointer-capture-got": "gotpointercapture", "pointer-capture-lost": "lostpointercapture", "context-menu": "contextmenu", "pointer-enter": "pointerenter", "pointer-leave": "pointerleave", "pointer-cancel": "pointercancel", focus: "focus", blur: "blur" };

// node_modules/@arcgis/core/views/input/handlers/PreventContextMenu.js
var e12 = class extends i6 {
  constructor() {
    super(true), this.registerIncoming("context-menu", (t24) => {
      t24.data.native.preventDefault();
    });
  }
};

// node_modules/@arcgis/core/views/input/recognizers/support.js
function e13(t24, e15) {
  return Math.abs(e15.x - t24.x) + Math.abs(e15.y - t24.y);
}
function n21(t24, e15) {
  const n24 = e15.x - t24.x, r20 = e15.y - t24.y;
  return Math.sqrt(n24 * n24 + r20 * r20);
}
function r16(e15, n24) {
  if (n24 ? (n24.radius = 0, n24.center.x = 0, n24.center.y = 0) : n24 = { radius: 0, center: c2() }, 0 === e15.length)
    return n24;
  if (1 === e15.length)
    return n24.center.x = e15[0].x, n24.center.y = e15[0].y, n24;
  if (2 === e15.length) {
    const [t24, r21] = e15, [c22, o22] = [r21.x - t24.x, r21.y - t24.y];
    return n24.radius = Math.sqrt(c22 * c22 + o22 * o22) / 2, n24.center.x = (t24.x + r21.x) / 2, n24.center.y = (t24.y + r21.y) / 2, n24;
  }
  let r20 = 0, c21 = 0;
  for (let t24 = 0; t24 < e15.length; t24++)
    r20 += e15[t24].x, c21 += e15[t24].y;
  r20 /= e15.length, c21 /= e15.length;
  const o21 = e15.map((t24) => t24.x - r20), s18 = e15.map((t24) => t24.y - c21);
  let u13 = 0, i24 = 0, x = 0, y7 = 0, a29 = 0, h12 = 0, l17 = 0;
  for (let t24 = 0; t24 < o21.length; t24++) {
    const e16 = o21[t24], n25 = s18[t24], r21 = e16 * e16, c22 = n25 * n25;
    u13 += r21, i24 += c22, x += e16 * n25, y7 += r21 * e16, a29 += c22 * n25, h12 += e16 * c22, l17 += n25 * r21;
  }
  const f11 = 0.5 * (y7 + h12), g11 = 0.5 * (a29 + l17), p20 = u13 * i24 - x * x, d12 = (f11 * i24 - g11 * x) / p20, m14 = (u13 * g11 - x * f11) / p20, M4 = c2(d12 + r20, m14 + c21);
  return { radius: Math.sqrt(d12 * d12 + m14 * m14 + (u13 + i24) / e15.length), center: M4 };
}
function c15(t24) {
  const { native: e15 } = t24, { pointerId: n24, button: r20, pointerType: c21 } = e15;
  return "mouse" === c21 ? `${n24}:${r20}` : `${c21}`;
}

// node_modules/@arcgis/core/views/input/recognizers/SingleAndDoubleClick.js
var l14 = { maximumDoubleClickDelay: 250, maximumDoubleClickDistance: 10, maximumDoubleTouchDelay: 350, maximumDoubleTouchDistance: 35 };
var m10 = class extends i6 {
  constructor(t24 = l14.maximumDoubleClickDelay, i24 = l14.maximumDoubleClickDistance, o21 = l14.maximumDoubleTouchDelay, n24 = l14.maximumDoubleTouchDistance, s18 = t5) {
    super(false), this._maximumDoubleClickDelay = t24, this._maximumDoubleClickDistance = i24, this._maximumDoubleTouchDelay = o21, this._maximumDoubleTouchDistance = n24, this._clock = s18, this._pointerState = /* @__PURE__ */ new Map(), this._click = this.registerOutgoing("click"), this._doubleClick = this.registerOutgoing("double-click"), this.registerIncoming("immediate-click", this._handleImmediateClick.bind(this)), this.registerIncoming("pointer-down", this._handlePointerDown.bind(this));
  }
  onUninstall() {
    this._pointerState.forEach((e15) => e15.doubleClickTimer = p(e15.doubleClickTimer));
  }
  get hasPendingInputs() {
    return n3(this._pointerState, (e15) => null != e15.doubleClickTimer);
  }
  _clearDoubleClickTimer(e15, t24) {
    const o21 = this._pointerState.get(e15);
    o21 && (o21.doubleClickTimer = p(o21.doubleClickTimer), t24 && this._click.emit(o21.event.data, void 0, o21.event.modifiers), this._pointerState.delete(e15), this.refreshHasPendingInputs());
  }
  _doubleClickTimeoutExceeded(e15) {
    const t24 = this._pointerState.get(e15);
    1 === t24.pointerDownCount && this._click.emit(t24.event.data, void 0, t24.event.modifiers), t24.doubleClickTimer = null, this._pointerState.delete(e15), this.refreshHasPendingInputs();
  }
  _getPointerId(e15) {
    const { pointerId: t24, pointerType: i24, button: o21 } = e15.native;
    return "mouse" === i24 ? `${t24}:${o21}` : `${i24}`;
  }
  _handleImmediateClick(e15) {
    const t24 = e15.data, { pointerType: i24 } = t24.native, o21 = this._getPointerId(t24);
    if (!this._pointerState.has(o21))
      return void this._startClick(e15);
    const s18 = this._pointerState.get(o21), { data: l17, modifiers: m14 } = s18.event, c21 = "touch" === i24 ? this._maximumDoubleTouchDistance : this._maximumDoubleClickDistance;
    e13(l17, t24) > c21 ? (this._clearDoubleClickTimer(o21, true), this._startClick(e15)) : (this._clearDoubleClickTimer(o21, false), 2 === s18.pointerDownCount && this._doubleClick.emit(l17, void 0, m14));
  }
  _handlePointerDown(e15) {
    const t24 = c15(e15.data), i24 = this._pointerState.get(t24);
    i24 && (i24.pointerDownCount += 1);
  }
  _startClick(e15) {
    const { data: t24 } = e15, { native: { pointerType: i24 } } = t24, o21 = c15(t24), n24 = "touch" === i24 ? this._maximumDoubleTouchDelay : this._maximumDoubleClickDelay, l17 = this._clock.setTimeout(() => this._doubleClickTimeoutExceeded(o21), n24), m14 = 1;
    this._pointerState.set(o21, { event: e15, doubleClickTimer: l17, pointerDownCount: m14 }), this.refreshHasPendingInputs();
  }
};

// node_modules/@arcgis/core/views/input/recognizers/DoubleTapDrag.js
var p13 = class extends i6 {
  constructor(e15 = l14.maximumDoubleClickDelay, a29 = l14.maximumDoubleClickDistance, r20 = l14.maximumDoubleTouchDelay, n24 = l14.maximumDoubleTouchDistance, u13 = t5) {
    super(false), this._maximumDoubleClickDelay = e15, this._maximumDoubleClickDistance = a29, this._maximumDoubleTouchDelay = r20, this._maximumDoubleTouchDistance = n24, this._clock = u13, this._doubleTapDragReady = false, this._doubleTapDragActive = false, this._dragStartCenter = c2(0, 0), this._pointerState = /* @__PURE__ */ new Map(), this._doubleTapDrag = this.registerOutgoing("double-tap-drag"), this._dragEventSeparator = new t17({ start: (t24, e16) => this._dragStart(t24, e16), update: (t24, e16) => this._dragUpdate(e16), end: (t24, e16) => this._dragEnd(e16) }), this.registerIncoming("drag", (t24) => this._dragEventSeparator.handle(t24)), this.registerIncoming("pointer-down", (t24) => this._handlePointerDown(t24)), this.registerIncoming("pointer-up", () => this._handlePointerUp());
  }
  onUninstall() {
    this._pointerState.forEach((t24) => {
      t24.doubleTapTimeout = p(t24.doubleTapTimeout);
    });
  }
  get hasPendingInputs() {
    return n3(this._pointerState, (t24) => null != t24.doubleTapTimeout);
  }
  _clearPointerDown(t24) {
    const e15 = this._pointerState.get(t24);
    e15 && (e15.doubleTapTimeout = p(e15.doubleTapTimeout), this._pointerState.delete(t24), this.refreshHasPendingInputs());
  }
  _createDoubleTapDragData(t24, e15, a29) {
    const { button: i24, buttons: o21, pointer: r20, pointers: s18, pointerType: n24, timestamp: u13 } = a29;
    return { action: t24, delta: e15, button: i24, buttons: o21, pointer: r20, pointers: s18, pointerType: n24, timestamp: u13 };
  }
  _dragStart(t24, e15) {
    if (!this._doubleTapDragReady || 1 !== t24)
      return;
    this._doubleTapDragReady = false, this._doubleTapDragActive = true;
    const { data: a29, modifiers: o21 } = e15, { center: r20 } = a29;
    this._dragStartCenter = r20;
    const s18 = this._createDoubleTapDragData("begin", c2(0, 0), a29);
    this._doubleTapDrag.emit(s18, void 0, o21), e15.stopPropagation();
  }
  _dragUpdate(t24) {
    if (!this._doubleTapDragActive)
      return;
    const { data: e15, modifiers: a29 } = t24, { center: o21 } = e15, r20 = c2(o21.x - this._dragStartCenter.x, o21.y - this._dragStartCenter.y), s18 = this._createDoubleTapDragData("update", r20, e15);
    this._doubleTapDrag.emit(s18, void 0, a29), t24.stopPropagation();
  }
  _dragEnd(t24) {
    if (!this._doubleTapDragActive)
      return;
    const { data: e15, modifiers: a29 } = t24, { center: o21 } = e15, r20 = c2(o21.x - this._dragStartCenter.x, o21.y - this._dragStartCenter.y), s18 = this._createDoubleTapDragData("end", r20, e15);
    this._doubleTapDrag.emit(s18, void 0, a29), this._doubleTapDragActive = false, t24.stopPropagation();
  }
  _handlePointerDown(t24) {
    const { data: e15 } = t24, a29 = c15(e15), i24 = this._pointerState.get(a29), { pointerType: o21 } = e15.native;
    if (i24) {
      const r20 = "touch" === o21 ? this._maximumDoubleTouchDistance : this._maximumDoubleClickDistance;
      this._clearPointerDown(a29), e13(i24.event.data, e15) > r20 ? this._storePointerDown(t24) : this._doubleTapDragReady = true;
    } else
      this._storePointerDown(t24);
  }
  _handlePointerUp() {
    this._doubleTapDragReady = false;
  }
  _storePointerDown(t24) {
    const { data: e15 } = t24, { pointerType: a29 } = e15.native, i24 = c15(e15), o21 = "touch" === a29 ? this._maximumDoubleTouchDelay : this._maximumDoubleClickDelay, r20 = this._clock.setTimeout(() => this._clearPointerDown(i24), o21);
    this._pointerState.set(i24, { event: t24, doubleTapTimeout: r20 }), this.refreshHasPendingInputs();
  }
};

// node_modules/@arcgis/core/views/input/recognizers/Drag.js
var s16 = class extends i6 {
  constructor(t24) {
    super(false), this._navigationTouch = t24, this._startStateModifiers = /* @__PURE__ */ new Set(), this._activePointerMap = /* @__PURE__ */ new Map(), this._isDragging = false, this._isCurrentDragSuppressed = false, this._drag = this.registerOutgoing("drag"), this.registerIncoming("pointer-drag", this._handlePointerDrag.bind(this)), this.registerIncoming("pointer-up", this._handlePointerUpAndPointerLost.bind(this)), this.registerIncoming("pointer-capture-lost", this._handlePointerUpAndPointerLost.bind(this)), this.registerIncoming("pointer-cancel", this._handlePointerUpAndPointerLost.bind(this));
  }
  _createPayload(t24, e15, i24, n24) {
    return { action: t24, pointerType: this._pointerType, button: this._mouseButton, buttons: e15.buttons, timestamp: n24, pointers: o18(this._activePointerMap), pointer: e15, angle: i24.angle, radius: i24.radius, center: i24.center };
  }
  _addPointer(t24) {
    const e15 = t24.native.pointerId, i24 = a23(this._activePointerMap).angle, n24 = { event: t24, initialAngle: 0, lastAngle: 0 };
    this._activePointerMap.set(e15, n24);
    const s18 = h8(n24, r17(this._activePointerMap));
    n24.initialAngle = s18, n24.lastAngle = s18, this._updatePointerAngles(i24);
  }
  _updatePointer(t24) {
    if (t24 && null == t24.x && null == t24.y)
      return;
    const e15 = t24.native.pointerId, i24 = this._activePointerMap.get(e15);
    i24 ? i24.event = t24 : this._addPointer(t24);
  }
  _removePointer(t24) {
    const e15 = a23(this._activePointerMap).angle;
    this._activePointerMap.delete(t24), this._updatePointerAngles(e15);
  }
  _updatePointerAngles(t24) {
    const e15 = a23(this._activePointerMap);
    this._activePointerMap.forEach((i24) => {
      i24.initialAngle = h8(i24, e15) - t24, i24.lastAngle = h8(i24, e15) - t24;
    });
  }
  _emitEvent(t24, e15, i24) {
    const n24 = a23(this._activePointerMap);
    this._drag.emit(this._createPayload(t24, e15, n24, i24), void 0, this._startStateModifiers);
  }
  _handlePointerUpAndPointerLost(t24) {
    const i24 = t24.data.native.pointerId, n24 = n2(t24.timestamp);
    this._activePointerMap.get(i24) && (1 === this._activePointerMap.size ? (this._updatePointer(t24.data), !this._isCurrentDragSuppressed && this._emitEvent("end", t24.data, n24), this._isDragging = false, this._isCurrentDragSuppressed = false, this._removePointer(i24)) : (this._removePointer(i24), this._emitEvent("removed", t24.data, n2(t24.timestamp))));
  }
  _handlePointerDrag(t24) {
    const i24 = t24.data, n24 = i24.currentEvent, s18 = n2(t24.timestamp);
    switch (i24.action) {
      case "start":
      case "update":
        this._isDragging ? this._activePointerMap.has(n24.native.pointerId) ? (this._updatePointer(n24), !this._isCurrentDragSuppressed && this._emitEvent("update", n24, s18)) : (this._addPointer(n24), this._emitEvent("added", n24, s18), this._isCurrentDragSuppressed = this._isSuppressed) : (this._updatePointer(n24), this._pointerType = t24.data.startEvent.pointerType, this._mouseButton = t24.data.startEvent.button, this._startStateModifiers = t24.modifiers, this._isDragging = true, this._isCurrentDragSuppressed = this._isSuppressed, !this._isCurrentDragSuppressed && this._emitEvent("start", n24, s18));
    }
  }
  get _isSuppressed() {
    return !!this._navigationTouch && !this._navigationTouch.browserTouchPanEnabled && "touch" === this._pointerType && 1 === this._activePointerMap.size;
  }
};
function r17(e15) {
  const i24 = [];
  return e15.forEach((e16) => {
    i24.push(c2(e16.event.x, e16.event.y));
  }), r16(i24);
}
function a23(t24) {
  const e15 = r17(t24);
  let i24 = 0;
  return t24.forEach((t25) => {
    let n24 = h8(t25, e15), s18 = n24 - t25.lastAngle;
    for (; s18 > Math.PI; )
      s18 -= 2 * Math.PI;
    for (; s18 < -Math.PI; )
      s18 += 2 * Math.PI;
    n24 = t25.lastAngle + s18, t25.lastAngle = n24;
    const r20 = n24 - t25.initialAngle;
    i24 += r20;
  }), i24 /= t24.size || 1, { angle: i24, radius: e15.radius, center: e15.center };
}
function o18(t24) {
  const e15 = /* @__PURE__ */ new Map();
  return t24.forEach((t25, i24) => e15.set(i24, t25.event)), e15;
}
function h8(t24, e15) {
  const i24 = t24.event, n24 = i24.x - e15.center.x, s18 = i24.y - e15.center.y;
  return Math.atan2(s18, n24);
}
var p14;
!function(t24) {
  t24[t24.Left = 0] = "Left", t24[t24.Middle = 1] = "Middle", t24[t24.Right = 2] = "Right", t24[t24.Back = 3] = "Back", t24[t24.Forward = 4] = "Forward", t24[t24.Undefined = -1] = "Undefined";
}(p14 || (p14 = {}));

// node_modules/@arcgis/core/views/input/recognizers/ImmediateDoubleClick.js
var m11 = class extends i6 {
  constructor(e15 = l14.maximumDoubleClickDelay, o21 = l14.maximumDoubleClickDistance, a29 = l14.maximumDoubleTouchDelay, m14 = l14.maximumDoubleTouchDistance, n24 = t5) {
    super(false), this._maximumDoubleClickDelay = e15, this._maximumDoubleClickDistance = o21, this._maximumDoubleTouchDelay = a29, this._maximumDoubleTouchDistance = m14, this._clock = n24, this._pointerState = /* @__PURE__ */ new Map(), this._immediateDoubleClick = this.registerOutgoing("immediate-double-click"), this.registerIncoming("pointer-down", this._handlePointerDown.bind(this)), this.registerIncoming("pointer-up", this._handlePointerUp.bind(this));
  }
  onUninstall() {
    this._pointerState.forEach((t24) => {
      t24.immediateDoubleClick && t24.immediateDoubleClick.timeoutHandle.remove();
    }), super.onUninstall();
  }
  _handlePointerDown(t24) {
    const e15 = t24.data, i24 = c15(e15);
    if (!this._pointerState.has(i24)) {
      const t25 = { downButton: e15.native.button, immediateDoubleClick: null };
      this._pointerState.set(i24, t25), this.startCapturingPointer(e15.native);
    }
  }
  _handlePointerUp(t24) {
    const e15 = t24.data, i24 = c15(e15), m14 = this._pointerState.get(i24);
    if (m14 && m14.downButton === e15.native.button) {
      const i25 = m14.immediateDoubleClick;
      if (i25) {
        i25.timeoutHandle.remove();
        const o21 = "touch" === t24.data.native.pointerType ? this._maximumDoubleTouchDistance : this._maximumDoubleClickDistance;
        e13(i25, t24.data) > o21 ? this._startImmediateDoubleClick(t24, m14) : (this._immediateDoubleClick.emit(t24.data, void 0, i25.modifiers), this._removeState(e15));
      } else
        this._startImmediateDoubleClick(t24, m14);
    }
  }
  _startImmediateDoubleClick(t24, e15) {
    const i24 = "touch" === t24.data.native.pointerType ? this._maximumDoubleTouchDelay : this._maximumDoubleClickDelay;
    e15.immediateDoubleClick = { x: t24.data.x, y: t24.data.y, modifiers: t24.modifiers, timeoutHandle: this._clock.setTimeout(() => this._removeState(t24.data), i24) };
  }
  _removeState(t24) {
    const e15 = c15(t24);
    this._pointerState.delete(e15), this.stopCapturingPointer(t24.native), this.refreshHasPendingInputs();
  }
};

// node_modules/@arcgis/core/views/input/recognizers/PointerClickHoldAndDrag.js
var o19 = { maximumClickDelay: 300, movementUntilMouseDrag: 1.5, movementUntilPenDrag: 6, movementUntilTouchDrag: 6, holdDelay: 500 };
var r18 = class extends i6 {
  constructor(e15 = o19.maximumClickDelay, i24 = o19.movementUntilMouseDrag, n24 = o19.movementUntilPenDrag, r20 = o19.movementUntilTouchDrag, s18 = o19.holdDelay, a29 = t5) {
    super(false), this._maximumClickDelay = e15, this._movementUntilMouseDrag = i24, this._movementUntilPenDrag = n24, this._movementUntilTouchDrag = r20, this._holdDelay = s18, this._clock = a29, this._pointerState = /* @__PURE__ */ new Map(), this._pointerDrag = this.registerOutgoing("pointer-drag"), this._immediateClick = this.registerOutgoing("immediate-click"), this._pointerHold = this.registerOutgoing("hold"), this.registerIncoming("pointer-down", this._handlePointerDown.bind(this)), this.registerIncoming("pointer-up", (t24) => {
      this._handlePointerLoss(t24, "pointer-up");
    }), this.registerIncoming("pointer-capture-lost", (t24) => {
      this._handlePointerLoss(t24, "pointer-capture-lost");
    }), this.registerIncoming("pointer-cancel", (t24) => {
      this._handlePointerLoss(t24, "pointer-cancel");
    }), this._moveHandle = this.registerIncoming("pointer-move", this._handlePointerMove.bind(this)), this._moveHandle.pause();
  }
  onUninstall() {
    this._pointerState.forEach((t24) => {
      t24.holdTimeout = p(t24.holdTimeout);
    }), super.onUninstall();
  }
  _handlePointerDown(t24) {
    const e15 = t24.data, i24 = e15.native.pointerId;
    let n24 = null;
    0 === this._pointerState.size && (n24 = this._clock.setTimeout(() => {
      const e16 = this._pointerState.get(i24);
      if (e16) {
        if (!e16.isDragging) {
          const i25 = e16.previousEvent;
          this._pointerHold.emit(i25, void 0, t24.modifiers), e16.holdEmitted = true;
        }
        e16.holdTimeout = null;
      }
    }, this._holdDelay));
    const o21 = { startEvent: e15, previousEvent: e15, startTimestamp: t24.timestamp, isDragging: false, downButton: e15.native.button, holdTimeout: n24, modifiers: /* @__PURE__ */ new Set() };
    this._pointerState.set(i24, o21), this.startCapturingPointer(e15.native), this._moveHandle.resume(), this._pointerState.size > 1 && this._startDragging(t24);
  }
  _createPointerDragData(t24, e15, i24) {
    return { action: t24, startEvent: e15.startEvent, previousEvent: e15.previousEvent, currentEvent: i24 };
  }
  _handlePointerMove(t24) {
    const e15 = t24.data, i24 = e15.native.pointerId, o21 = this._pointerState.get(i24);
    if (o21) {
      if (o21.isDragging)
        this._pointerDrag.emit(this._createPointerDragData("update", o21, e15), void 0, o21.modifiers);
      else {
        n21(e15, o21.startEvent) > this._getDragThreshold(e15.native.pointerType) && this._startDragging(t24);
      }
      o21.previousEvent = e15;
    }
  }
  _getDragThreshold(t24) {
    switch (t24) {
      case "touch":
        return this._movementUntilTouchDrag;
      case "pen":
        return this._movementUntilPenDrag;
      default:
        return this._movementUntilMouseDrag;
    }
  }
  _startDragging(t24) {
    const e15 = t24.data, i24 = e15.native.pointerId;
    this._pointerState.forEach((n24) => {
      null != n24.holdTimeout && (n24.holdTimeout.remove(), n24.holdTimeout = null), n24.isDragging || (n24.modifiers = t24.modifiers, n24.isDragging = true, i24 === n24.startEvent.native.pointerId ? this._pointerDrag.emit(this._createPointerDragData("start", n24, e15)) : this._pointerDrag.emit(this._createPointerDragData("start", n24, n24.previousEvent), t24.timestamp));
    });
  }
  _handlePointerLoss(t24, e15) {
    const i24 = t24.data, n24 = i24.native.pointerId, o21 = this._pointerState.get(n24);
    if (o21) {
      if (null != o21.holdTimeout && (o21.holdTimeout.remove(), o21.holdTimeout = null), o21.isDragging)
        this._pointerDrag.emit(this._createPointerDragData("end", o21, "pointer-up" === e15 ? i24 : o21.previousEvent), void 0, o21.modifiers);
      else if ("pointer-up" === e15 && o21.downButton === i24.native.button) {
        t24.timestamp - o21.startTimestamp <= this._maximumClickDelay && !o21.holdEmitted && this._immediateClick.emit(i24);
      }
      this._pointerState.delete(n24), this.stopCapturingPointer(i24.native), 0 === this._pointerState.size && this._moveHandle.pause();
    }
  }
};

// node_modules/@arcgis/core/views/2d/input/MapViewInputManager.js
var z4 = { counter: "Ctrl", pan: { left: "ArrowLeft", right: "ArrowRight", up: "ArrowUp", down: "ArrowDown" }, zoom: { zoomIn: ["=", "+"], zoomOut: ["-", "_"] }, rotate: { clockwiseOption1: "a", clockwiseOption2: "A", counterClockwiseOption1: "d", counterClockwiseOption2: "D", resetOption1: "n", resetOption2: "N" } };
var k = class extends v3 {
  constructor() {
    super(...arguments), this._handles = new t3();
  }
  initialize() {
    const e15 = () => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.ready;
    };
    this._handles.add([f3(() => !e15(), () => this._disconnect()), f3(e15, () => this._connect())]);
  }
  destroy() {
    this._handles = a(this._handles), this._disconnect();
  }
  get latestPointerType() {
    var _a;
    return (_a = this._inputManager) == null ? void 0 : _a.latestPointerType;
  }
  get latestPointerLocation() {
    var _a;
    return (_a = this._inputManager) == null ? void 0 : _a.latestPointerLocation;
  }
  get multiTouchActive() {
    var _a;
    return ((_a = this._inputManager) == null ? void 0 : _a.multiTouchActive) ?? false;
  }
  _disconnect() {
    this.view.viewEvents.disconnect(), this._inputManager = a(this._inputManager);
  }
  _connect() {
    const e15 = this.view.surface, t24 = new c14(e15, this.view.input), o21 = [new m11(), new r18(), new m10(), new s16(this.view.navigation), new p13()], r20 = new u2({ eventSource: t24, recognizers: o21 });
    r20.installHandlers("prevent-context-menu", [new e12()], P.INTERNAL), r20.installHandlers("navigation", [new a20(this.view), new d7(this.view), new o16(this.view), new a18(this.view), new a18(this.view, [z4.counter]), new n18(this.view, "primary"), new i18(this.view, z4.pan), new e10(this.view, z4.zoom), new i19(this.view, z4.rotate), new o15(this.view, "secondary"), new e9(this.view, "touch")], P.INTERNAL), this.view.viewEvents.connect(r20), this._source = t24, this._inputManager = r20, l3(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.navigation) == null ? void 0 : _b.browserTouchPanEnabled;
    }, (e16) => {
      this._source && (this._source.browserTouchPanningEnabled = !e16);
    }, h);
  }
  get test() {
    return { inputManager: this._inputManager };
  }
};
e2([y()], k.prototype, "view", void 0), e2([y()], k.prototype, "latestPointerType", null), e2([y()], k.prototype, "latestPointerLocation", null), e2([y()], k.prototype, "multiTouchActive", null), k = e2([a3("esri.views.2d.input.MapViewInputManager")], k);
var C3 = k;

// node_modules/@arcgis/core/views/support/createScreenshotPlan.js
function t21(t24, h12, i24, e15, l17, d12, n24, o21) {
  t24.ignorePadding && (e15 = { left: 0, right: 0, top: 0, bottom: 0 });
  let u13 = null;
  null != t24.width && null != t24.height ? u13 = [t24.width, t24.height] : null == t24.width && null != t24.height ? u13 = [t24.height, t24.height] : null != t24.width && null == t24.height ? u13 = [t24.width, t24.width] : null == t24.width && null == t24.height && (u13 = null);
  const r20 = i24[0] - (e15.left + e15.right), a29 = i24[1] - (e15.top + e15.bottom);
  let g11, w10, c21 = t24.area || { x: 0, y: 0, width: r20, height: a29 };
  if (u13) {
    const t25 = r20 / a29, h13 = u13[0] / u13[1];
    if (h13 > t25) {
      const t26 = c21.width / h13;
      c21 = { x: c21.x, y: Math.round(c21.y + (c21.height - t26) / 2), width: c21.width, height: Math.round(t26) };
    } else {
      const t26 = c21.height * h13;
      c21 = { x: Math.round(c21.x + (c21.width - t26) / 2), y: c21.y, width: Math.round(t26), height: c21.height };
    }
  } else
    u13 = [c21.width, c21.height];
  u13[0] > c21.width ? (g11 = Math.min(u13[0] / c21.width, h12), w10 = u13[0] / c21.width / g11) : (g11 = 1, w10 = u13[0] / c21.width);
  return { resolutionScale: g11, cropArea: { x: Math.round((c21.x + e15.left) * g11), y: Math.round((c21.y + e15.top) * g11), width: Math.round(c21.width * g11), height: Math.round(c21.height * g11) }, outputScale: w10, format: l17, quality: d12, children: n24, rotation: o21 };
}

// node_modules/@arcgis/core/views/support/WebGLRequirements.js
function i20(i24) {
  const s18 = l7(i24);
  if (!s18.available)
    return new s2("webgl:required", "WebGL is required but not supported.");
  if ("3d" === i24 && s18.majorPerformanceCaveat)
    return new s2("webgl:major-performance-caveat-detected", "Your WebGL implementation doesn't seem to support hardware accelerated rendering. Check your browser settings or if your GPU is in a blocklist.");
  if (!s18.supportsHighPrecisionFragment)
    return new s2("webgl:high-precision-fragment-required", "WebGL support for high precision fragment shaders is required but not supported.");
  if (!s18.supportsVertexShaderSamplers)
    return new s2("webgl:vertex-shader-samplers-required", "WebGL support for vertex shader samplers is required but not supported.");
  if (s18.type === r8.WEBGL1) {
    if (!s18.supportsElementIndexUint)
      return new s2("webgl:element-index-uint-required", "WebGL support for uint vertex indices is required but not supported.");
    if (!s18.supportsStandardDerivatives)
      return new s2("webgl:standard-derivatives-required", "WebGL support for standard derivatives is required but not supported.");
    if (!s18.supportsInstancedArrays)
      return new s2("webgl:instanced-arrays-required", "WebGL support for instanced rendering is required but not supported.");
  }
  return null;
}

// node_modules/@arcgis/core/views/ui/Component.js
function i21(t24) {
  return t24 && "nodeType" in t24;
}
function d8(t24) {
  return t24 && "function" == typeof t24.render;
}
var c16 = { component: "esri-component" };
var p15 = class extends v3 {
  constructor() {
    super(...arguments), this.widget = null;
  }
  destroy() {
    this.widget && this.widget.destroy(), this.node = null;
  }
  get id() {
    return this.get("widget.id") || this.get("node.id");
  }
  set node(t24) {
    const e15 = this._get("node");
    t24 !== e15 && (t24 && t24.classList.add(c16.component), e15 && e15.classList.remove(c16.component), this._set("node", t24));
  }
  castNode(t24) {
    return t24 ? "string" == typeof t24 || i21(t24) ? (this._set("widget", null), e3(t24)) : (d8(t24) && !t24.domNode && (t24.domNode = document.createElement("div")), this._set("widget", t24), t24.domNode) : (this._set("widget", null), null);
  }
};
e2([y({ dependsOn: [] })], p15.prototype, "id", null), e2([y()], p15.prototype, "node", null), e2([s3("node")], p15.prototype, "castNode", null), e2([y({ readOnly: true })], p15.prototype, "widget", void 0), p15 = e2([a3("esri.views.ui.Component")], p15);
var l15 = p15;

// node_modules/@arcgis/core/views/ui/UI.js
var u10 = { left: 0, top: 0, bottom: 0, right: 0 };
var f9 = { bottom: 30, top: 15, right: 15, left: 15 };
var _5 = "manual";
var g8 = "esri-ui";
var y5 = { ui: g8, corner: `${g8}-corner`, innerContainer: `${g8}-inner-container`, manualContainer: `${g8}-manual-container`, cornerContainer: `${g8}-corner-container`, topLeft: `${g8}-top-left`, topRight: `${g8}-top-right`, bottomLeft: `${g8}-bottom-left`, bottomRight: `${g8}-bottom-right` };
function C4(t24) {
  return t24 && !t24._started && "function" == typeof t24.postMixInProperties && "function" == typeof t24.buildRendering && "function" == typeof t24.postCreate && "function" == typeof t24.startup;
}
function v8(t24) {
  const o21 = t24, i24 = "object" == typeof o21 && null !== o21 && Object.getPrototypeOf(o21);
  return (null === i24 || i24 === Object.prototype) && ("component" in o21 || "index" in o21 || "position" in o21) ? t24 : null;
}
function L4(t24, { top: o21, bottom: i24, left: n24, right: e15 }) {
  t24.style.top = o21, t24.style.bottom = i24, t24.style.left = n24, t24.style.right = e15;
}
var b4 = class extends n4.EventedAccessor {
  constructor(t24) {
    super(t24), this._cornerNameToContainerLookup = {}, this._positionNameToContainerLookup = {}, this._components = new Array(), this._componentToKey = /* @__PURE__ */ new Map(), this._locale = l2(), this.view = null, this._applyViewPadding = () => {
      const t25 = this.container;
      t25 && L4(t25, this._toPxPosition(this._getViewPadding()));
    }, this._applyUIPadding = () => {
      const t25 = this._innerContainer;
      t25 && L4(t25, this._toPxPosition(this.padding));
    }, this._initContainers();
  }
  initialize() {
    this.addHandles([l3(() => {
      var _a;
      return [(_a = this.view) == null ? void 0 : _a.padding, this.container];
    }, this._applyViewPadding, h), l3(() => this.padding, this._applyUIPadding, h), l3(() => [this.container, this._locale], ([t24, o21]) => {
      t24 && t24.setAttribute("lang", o21);
    }, h), s4((t24) => {
      this._locale = t24;
    })]);
  }
  destroy() {
    this.container = null;
    for (const t24 of this._components)
      t24.destroy();
    this._components.length = 0, this._componentToKey.clear();
  }
  set container(t24) {
    const i24 = this._get("container");
    t24 !== i24 && (t24 && (t24.classList.add(y5.ui), n6(t24), this._attachContainers(t24)), i24 && (i24.classList.remove(y5.ui), L4(i24, { top: "", bottom: "", left: "", right: "" }), t7(i24)), this._set("container", t24));
  }
  get height() {
    const t24 = this.get("view.height") || 0;
    if (0 === t24)
      return t24;
    const o21 = this._getViewPadding(), i24 = o21.top + o21.bottom;
    return Math.max(t24 - i24, 0);
  }
  get padding() {
    return this._get("padding");
  }
  set padding(t24) {
    this._overrideIfSome("padding", t24);
  }
  castPadding(t24) {
    return "number" == typeof t24 ? { bottom: t24, top: t24, right: t24, left: t24 } : { ...f9, ...t24 };
  }
  get width() {
    const t24 = this.get("view.width") || 0;
    if (0 === t24)
      return t24;
    const o21 = this._getViewPadding(), i24 = o21.left + o21.right;
    return Math.max(t24 - i24, 0);
  }
  add(t24, o21) {
    let i24, n24;
    if (Array.isArray(t24))
      return void t24.forEach((t25) => this.add(t25, o21));
    const e15 = v8(t24);
    e15 && ({ index: i24, position: o21, component: t24, key: n24 } = e15), o21 && "object" == typeof o21 && ({ index: i24, key: n24, position: o21 } = o21), !t24 || o21 && !this._isValidPosition(o21) || this._add(t24, o21, i24, n24);
  }
  remove(t24, o21) {
    if (!t24)
      return;
    if (Array.isArray(t24))
      return t24.map((t25) => this.remove(t25, o21));
    const i24 = this._find(t24);
    if (i24) {
      const n24 = this._componentToKey;
      if (n24.has(t24) && n24.get(t24) !== o21)
        return;
      const e15 = this._components.indexOf(i24);
      return i24.node.parentNode && i24.node.parentNode.removeChild(i24.node), this._componentToKey.delete(t24), this._components.splice(e15, 1)[0];
    }
  }
  empty(t24) {
    if (Array.isArray(t24))
      return t24.map((t25) => this.empty(t25)).reduce((t25, o21) => t25.concat(o21));
    if ((t24 = t24 || _5) === _5) {
      return Array.prototype.slice.call(this._manualContainer.children).filter((t25) => !t25.classList.contains(y5.corner)).map((t25) => this.remove(t25));
    }
    return this._isValidPosition(t24) ? Array.prototype.slice.call(this._cornerNameToContainerLookup[t24].children).map(this.remove, this) : null;
  }
  move(t24, o21) {
    if (Array.isArray(t24) && t24.forEach((t25) => this.move(t25, o21)), !t24)
      return;
    let i24;
    const n24 = v8(t24) || v8(o21);
    if (n24 && (i24 = n24.index, o21 = n24.position, t24 = n24.component || t24), o21 && !this._isValidPosition(o21))
      return;
    const e15 = this.remove(t24);
    e15 && this.add(e15, { position: o21, index: i24 });
  }
  find(t24) {
    if (!t24)
      return null;
    const o21 = this._findById(t24);
    return o21 && (o21.widget || o21.node);
  }
  getPosition(t24) {
    for (const o21 in this._positionNameToContainerLookup) {
      if (this._positionNameToContainerLookup[o21].contains(t24))
        return o21;
    }
    return null;
  }
  _add(t24, o21, i24, n24) {
    t24 instanceof l15 || (t24 = new l15({ node: t24 })), this._place({ component: t24, position: o21, index: i24 }), this._components.push(t24), n24 && this._componentToKey.set(t24, n24);
  }
  _find(t24) {
    return t24 ? t24 instanceof l15 ? this._findByComponent(t24) : "string" == typeof t24 ? this._findById(t24) : this._findByNode(t24.domNode || t24) : null;
  }
  _getViewPadding() {
    return this.get("view.padding") || u10;
  }
  _attachContainers(t24) {
    t24.appendChild(this._innerContainer), t24.appendChild(this._manualContainer);
  }
  _initContainers() {
    const t24 = document.createElement("div");
    t24.classList.add(y5.innerContainer), t24.classList.add(y5.cornerContainer);
    const o21 = document.createElement("div");
    o21.classList.add(y5.innerContainer), o21.classList.add(y5.manualContainer);
    const i24 = document.createElement("div");
    i24.classList.add(y5.topLeft), i24.classList.add(y5.corner), t24.appendChild(i24);
    const n24 = document.createElement("div");
    n24.classList.add(y5.topRight), n24.classList.add(y5.corner), t24.appendChild(n24);
    const e15 = document.createElement("div");
    e15.classList.add(y5.bottomLeft), e15.classList.add(y5.corner), t24.appendChild(e15);
    const r20 = document.createElement("div");
    r20.classList.add(y5.bottomRight), r20.classList.add(y5.corner), t24.appendChild(r20), this._innerContainer = t24, this._manualContainer = o21;
    const s18 = f4();
    this._cornerNameToContainerLookup = { "top-left": i24, "top-right": n24, "bottom-left": e15, "bottom-right": r20, "top-leading": s18 ? n24 : i24, "top-trailing": s18 ? i24 : n24, "bottom-leading": s18 ? r20 : e15, "bottom-trailing": s18 ? e15 : r20 }, this._positionNameToContainerLookup = { manual: o21, ...this._cornerNameToContainerLookup };
  }
  _isValidPosition(t24) {
    return !!this._positionNameToContainerLookup[t24];
  }
  _place(t24) {
    const o21 = t24.component, n24 = t24.position || _5, e15 = t24.index, r20 = this._positionNameToContainerLookup[n24], s18 = null != e15 && e15 > -1;
    if (C4(o21.widget) && o21.widget.startup(), !s18)
      return void r20.appendChild(o21.node);
    const a29 = Array.prototype.slice.call(r20.children);
    if (0 === e15)
      return void (r20.firstChild ? o4(o21.node, r20.firstChild) : r20.appendChild(o21.node));
    e15 >= a29.length ? r20.appendChild(o21.node) : o4(o21.node, a29[e15]);
  }
  _toPxPosition(t24) {
    return { top: this._toPxUnit(t24.top), left: this._toPxUnit(t24.left), right: this._toPxUnit(t24.right), bottom: this._toPxUnit(t24.bottom) };
  }
  _toPxUnit(t24) {
    return 0 === t24 ? "0" : t24 + "px";
  }
  _findByComponent(t24) {
    let o21, i24 = null;
    return this._components.some((n24) => (o21 = n24 === t24, o21 && (i24 = n24), o21)), i24;
  }
  _findById(t24) {
    let o21, i24 = null;
    return this._components.some((n24) => (o21 = n24.id === t24, o21 && (i24 = n24), o21)), i24;
  }
  _findByNode(t24) {
    let o21, i24 = null;
    return this._components.some((n24) => (o21 = n24.node === t24, o21 && (i24 = n24), o21)), i24;
  }
};
e2([y()], b4.prototype, "_locale", void 0), e2([y()], b4.prototype, "container", null), e2([y()], b4.prototype, "height", null), e2([y({ value: f9 })], b4.prototype, "padding", null), e2([s3("padding")], b4.prototype, "castPadding", null), e2([y()], b4.prototype, "view", void 0), e2([y()], b4.prototype, "width", null), b4 = e2([a3("esri.views.ui.UI")], b4);
var P2 = b4;

// node_modules/@arcgis/core/widgets/Attribution/AttributionViewModel.js
function d9(t24, e15) {
  return t24 && "copyright" in t24 && (!e15 || "function" == typeof t24.originOf && "user" === t24.originOf("copyright"));
}
function m12(t24, e15) {
  return t24.length !== e15.length || t24.some((t25, i24) => t25.text !== e15[i24].text);
}
function f10(t24, e15, i24) {
  if (!i24 || !e15)
    return;
  t24.find((t25) => t25.layerView === e15 && t25.text === i24) || t24.push({ text: i24, layerView: e15 });
}
function y6(t24) {
  return "bing-maps" === t24.type;
}
var b5 = [];
var g9 = class extends d {
  constructor(t24) {
    super(t24), this._clear = () => {
      this._fetchedAttributionData.clear(), this._pendingAttributions.clear(), this.handles.remove("suspension"), this.notifyChange("state");
    }, this._pendingAttributions = /* @__PURE__ */ new Set(), this._fetchedAttributionData = /* @__PURE__ */ new Map(), this.items = new j2(), this.view = null, this._allLayerViewsChange = (t25) => {
      this.handles.remove("suspension");
      const e15 = this.get("view.allLayerViews");
      e15 && this.handles.add(e15.map((t26) => l3(() => {
        var _a;
        return [t26.suspended, (_a = t26.layer) == null ? void 0 : _a.attributionVisible];
      }, () => this._updateAttributionItems())), "suspension"), t25 && t25.removed && t25.removed.forEach((t26) => {
        this._pendingAttributions.delete(t26), this._fetchedAttributionData.delete(t26);
      }), this._updateAttributionItems();
    }, this.handles.add([a6(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.allLayerViews;
    }, "change", (t25) => this._allLayerViewsChange(t25), { onListenerAdd: () => this._allLayerViewsChange(), onListenerRemove: this._clear }), f3(() => {
      var _a;
      return true === ((_a = this.view) == null ? void 0 : _a.stationary);
    }, () => this._updateAttributionItems())]);
  }
  destroy() {
    this.view = null, this._fetchedAttributionData.clear(), this._pendingAttributions.clear(), this.items.removeAll();
  }
  get state() {
    return this.get("view.ready") ? this._pendingAttributions.size > 0 ? "loading" : "ready" : "disabled";
  }
  _updateAttributionItems() {
    const t24 = this.view, e15 = t24 == null ? void 0 : t24.allLayerViews;
    b5.length = 0, t24 && e15 ? (e15.forEach((e16) => {
      var _a;
      if (e16.suspended || !((_a = e16.layer) == null ? void 0 : _a.attributionVisible))
        return;
      const i24 = e16.layer;
      if (d9(i24, "user"))
        return void f10(b5, e16, i24.copyright);
      if (i24.hasAttributionData) {
        if (this._fetchedAttributionData.has(e16)) {
          const r21 = this._fetchedAttributionData.get(e16);
          return void (r21 ? f10(b5, e16, this._getDynamicAttribution(r21, t24, i24)) : d9(i24) && f10(b5, e16, i24.copyright));
        }
        return void this._fetchAttributionData(e16);
      }
      const r20 = i24.get("portalItem.accessInformation");
      f10(b5, e16, r20 || i24.copyright);
    }), m12(this.items, b5) && (this.items.removeAll(), this.items.addMany(b5)), b5.length = 0, this.notifyChange("state")) : this._clear();
  }
  async _fetchAttributionData(t24) {
    if (this._pendingAttributions.has(t24))
      return;
    this._pendingAttributions.add(t24);
    const i24 = await b2(t24.layer.fetchAttributionData());
    if (this._pendingAttributions.has(t24)) {
      const e15 = i24.ok ? this._createContributionIndex(i24.value, y6(t24.layer)) : null;
      this._pendingAttributions.delete(t24), this._fetchedAttributionData.set(t24, e15);
    }
    this._updateAttributionItems();
  }
  _createContributionIndex(t24, e15) {
    const i24 = t24.contributors, r20 = {};
    if (!i24)
      return r20;
    for (let o21 = 0; o21 < i24.length; o21++) {
      const t25 = i24[o21], s18 = t25.coverageAreas;
      if (!s18)
        return;
      for (const i25 of s18) {
        const s19 = i25.bbox, n24 = i25.zoomMin - (e15 && i25.zoomMin ? 1 : 0), a29 = i25.zoomMax - (e15 && i25.zoomMax ? 1 : 0), c21 = { xmin: s19[1], ymin: s19[0], xmax: s19[3], ymax: s19[2], spatialReference: f2.WGS84 }, u13 = { extent: R(c21), attribution: t25.attribution || "", score: null != i25.score ? i25.score : 100, id: o21 };
        for (let t26 = n24; t26 <= a29; t26++)
          r20[t26] = r20[t26] || [], r20[t26].push(u13);
      }
    }
    return r20.maxKey = Math.max.apply(null, Object.keys(r20)), r20;
  }
  _getDynamicAttribution(t24, e15, i24) {
    var _a;
    const { extent: r20, scale: o21 } = e15;
    let s18 = ((_a = i24.tileInfo) == null ? void 0 : _a.scaleToZoom(o21)) ?? 0;
    if (s18 = Math.min(t24.maxKey ?? 0, Math.round(s18)), !r20 || null == s18 || s18 <= -1)
      return "";
    const n24 = t24[s18], a29 = M(r20.center.clone().normalize(), e15.spatialReference), c21 = {};
    return n24 ? n24.filter((t25) => {
      const e16 = t25.id, i25 = !c21[e16] && a29 && t25.extent && r2(t25.extent, a29);
      return i25 && (c21[e16] = true), i25;
    }).sort((t25, e16) => e16.score - t25.score || t25.objectId - e16.objectId).map((t25) => t25.attribution).join(", ") : "";
  }
};
e2([y({ readOnly: true, type: j2 })], g9.prototype, "items", void 0), e2([y({ readOnly: true })], g9.prototype, "state", null), e2([y()], g9.prototype, "view", void 0), g9 = e2([a3("esri.widgets.Attribution.AttributionViewModel")], g9);
var _6 = g9;

// node_modules/@arcgis/core/widgets/Attribution.js
var l16 = "esri-attribution";
var p16 = { base: `${l16} esri-widget`, poweredBy: `${l16}__powered-by`, sources: `${l16}__sources`, open: `${l16}--open`, sourcesOpen: `${l16}__sources--open`, link: `${l16}__link`, widgetIcon: "esri-icon-description", interactive: "esri-interactive" };
var a24 = class extends W {
  constructor(e15, t24) {
    super(e15, t24), this._isOpen = false, this._attributionTextOverflowed = false, this._prevSourceNodeHeight = 0, this._resizeObserver = new ResizeObserver((e16) => e16.forEach(({ target: e17 }) => this._checkSourceTextOverflow(e17))), this.iconClass = p16.widgetIcon, this.itemDelimiter = " | ", this.messages = null, this.viewModel = new _6();
  }
  initialize() {
    this.addHandles(a6(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.items;
    }, "change", () => this.scheduleRender()));
  }
  destroy() {
    var _a;
    (_a = this._resizeObserver) == null ? void 0 : _a.disconnect();
  }
  get _isInteractive() {
    return this._isOpen || this._attributionTextOverflowed;
  }
  get attributionText() {
    return this.viewModel.items.reduce((e15, t24) => (e15.includes(t24.text) || e15.push(t24.text), e15), []).join(this.itemDelimiter);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e15) {
    this._overrideIfSome("label", e15);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e15) {
    this.viewModel.view = e15;
  }
  render() {
    const e15 = { [p16.open]: this._isOpen };
    return n5("div", { bind: this, class: this.classes(p16.base, e15), dir: "ltr", onclick: this._toggleState, onkeydown: this._toggleState }, this.renderSourcesNode(), this.renderPoweredBy());
  }
  renderPoweredBy() {
    return n5("div", { class: p16.poweredBy }, "Powered by", " ", n5("a", { class: p16.link, href: "http://www.esri.com/", target: "_blank", rel: "noreferrer" }, "Esri"));
  }
  renderSourcesNode() {
    const e15 = this._isOpen, t24 = this._isInteractive, i24 = t24 ? "0" : "", { attributionText: r20 } = this, s18 = { [p16.sourcesOpen]: e15, [p16.interactive]: t24 };
    return n5("div", { afterCreate: this._afterSourcesNodeCreate, bind: this, class: this.classes(p16.sources, s18), innerHTML: r20, tabindex: i24 });
  }
  _afterSourcesNodeCreate(e15) {
    this._prevSourceNodeHeight = e15.clientWidth, this._resizeObserver.observe(e15);
  }
  _checkSourceTextOverflow(e15) {
    let t24 = false;
    const { clientHeight: i24, clientWidth: r20, scrollWidth: s18 } = e15, o21 = s18 > r20, n24 = this._attributionTextOverflowed !== o21;
    if (this._attributionTextOverflowed = o21, n24 && (t24 = true), this._isOpen) {
      const e16 = i24 < this._prevSourceNodeHeight;
      this._prevSourceNodeHeight = i24, e16 && (this._isOpen = false, t24 = true);
    }
    t24 && this.scheduleRender();
  }
  _toggleState() {
    this._isInteractive && (this._isOpen = !this._isOpen);
  }
};
e2([y()], a24.prototype, "_isOpen", void 0), e2([y()], a24.prototype, "_isInteractive", null), e2([y()], a24.prototype, "_attributionTextOverflowed", void 0), e2([y()], a24.prototype, "_prevSourceNodeHeight", void 0), e2([y({ readOnly: true, dependsOn: ["viewModel.items.length", "itemDelimiter"] })], a24.prototype, "attributionText", null), e2([y()], a24.prototype, "iconClass", void 0), e2([y()], a24.prototype, "itemDelimiter", void 0), e2([y()], a24.prototype, "label", null), e2([y(), e4("esri/widgets/Attribution/t9n/Attribution")], a24.prototype, "messages", void 0), e2([y()], a24.prototype, "view", null), e2([y({ type: _6 })], a24.prototype, "viewModel", void 0), e2([t8()], a24.prototype, "_toggleState", null), a24 = e2([a3("esri.widgets.Attribution")], a24);
var h9 = a24;

// node_modules/@arcgis/core/widgets/Compass/CompassViewModel.js
var h10 = "esri.widgets.CompassViewModel";
var d10 = class extends t11(v3) {
  constructor(t24) {
    super(t24), this._handles = new t3(), this.orientation = { x: 0, y: 0, z: 0 }, this.view = null, this._updateForCamera = this._updateForCamera.bind(this), this._updateForRotation = this._updateForRotation.bind(this), this._updateRotationWatcher = this._updateRotationWatcher.bind(this);
  }
  initialize() {
    this._handles.add(l3(() => this.view, this._updateRotationWatcher, h));
  }
  destroy() {
    p(this._handles), this.view = null;
  }
  get canShowNorth() {
    const t24 = this.get("view.spatialReference");
    return !(!t24 || !t24.isWebMercator && !t24.isGeographic);
  }
  get state() {
    return this.get("view.ready") ? this.canShowNorth ? "compass" : "rotation" : "disabled";
  }
  reset() {
    var _a;
    if (!this.get("view.ready"))
      return;
    const t24 = {};
    "2d" === ((_a = this.view) == null ? void 0 : _a.type) ? t24.rotation = 0 : t24.heading = 0, this.callGoTo({ target: t24 });
  }
  _updateForRotation(t24) {
    null != t24 && (this.orientation = { z: t24 });
  }
  _updateForCamera(t24) {
    if (!t24)
      return;
    const o21 = -t24.heading;
    this.orientation = { x: 0, y: 0, z: o21 };
  }
  _updateRotationWatcher(t24) {
    this._handles.removeAll(), t24 && this._handles.add("2d" === t24.type ? l3(() => t24 == null ? void 0 : t24.rotation, this._updateForRotation, h) : l3(() => t24 == null ? void 0 : t24.camera, this._updateForCamera, h));
  }
};
e2([y({ readOnly: true })], d10.prototype, "canShowNorth", null), e2([y()], d10.prototype, "orientation", void 0), e2([y({ readOnly: true })], d10.prototype, "state", null), e2([y()], d10.prototype, "view", void 0), d10 = e2([a3(h10)], d10);
var c17 = d10;

// node_modules/@arcgis/core/widgets/Compass/css.js
var i22 = { base: "esri-compass esri-widget--button esri-widget", text: "esri-icon-font-fallback-text", icon: "esri-compass__icon", rotationIcon: "esri-icon-dial", northIcon: "esri-icon-compass", widgetIcon: "esri-icon-locate-circled", interactive: "esri-interactive", disabled: "esri-disabled" };

// node_modules/@arcgis/core/widgets/Compass.js
var n22 = class extends W {
  constructor(e15, s18) {
    super(e15, s18), this.iconClass = i22.widgetIcon, this.messages = null, this.viewModel = new c17();
  }
  get goToOverride() {
    return this.viewModel.goToOverride;
  }
  set goToOverride(e15) {
    this.viewModel.goToOverride = e15;
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e15) {
    this._overrideIfSome("label", e15);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e15) {
    this.viewModel.view = e15;
  }
  reset() {
    return this.viewModel.reset();
  }
  render() {
    const { orientation: e15, state: s18 } = this.viewModel, t24 = "disabled" === s18, o21 = "compass" === ("rotation" === s18 ? "rotation" : "compass"), r20 = t24 ? -1 : 0, a29 = { [i22.disabled]: t24, [i22.interactive]: !t24 }, p20 = { [i22.northIcon]: o21, [i22.rotationIcon]: !o21 }, { messages: n24 } = this;
    return n5("div", { bind: this, class: this.classes(i22.base, a29), onclick: this._reset, onkeydown: this._reset, role: "button", tabIndex: r20, "aria-label": n24.reset, title: n24.reset }, n5("span", { "aria-hidden": "true", class: this.classes(i22.icon, p20), styles: this._toRotationTransform(e15) }), n5("span", { class: i22.text }, n24.reset));
  }
  _reset() {
    this.viewModel.reset();
  }
  _toRotationTransform(e15) {
    return { transform: `rotateZ(${e15.z}deg)` };
  }
};
e2([y()], n22.prototype, "goToOverride", null), e2([y()], n22.prototype, "iconClass", void 0), e2([y()], n22.prototype, "label", null), e2([y(), e4("esri/widgets/Compass/t9n/Compass")], n22.prototype, "messages", void 0), e2([y()], n22.prototype, "view", null), e2([y({ type: c17 })], n22.prototype, "viewModel", void 0), e2([t8()], n22.prototype, "_reset", null), n22 = e2([a3("esri.widgets.Compass")], n22);
var d11 = n22;

// node_modules/@arcgis/core/widgets/NavigationToggle/css.js
var t22 = "esri-navigation-toggle";
var o20 = { base: `${t22} esri-widget`, button: `${t22}__button esri-widget--button`, activeButton: `${t22}__button--active`, panButton: `${t22}__button--pan`, rotateButton: `${t22}__button--rotate`, isLayoutHorizontal: `${t22}--horizontal`, rotationIcon: "esri-icon-rotate", panIcon: "esri-icon-pan", widgetIcon: "esri-icon-pan2", disabled: "esri-disabled" };

// node_modules/@arcgis/core/widgets/NavigationToggle/NavigationToggleViewModel.js
var r19 = class extends v3 {
  constructor(t24) {
    super(t24), this.navigationMode = "pan", this.view = null;
  }
  initialize() {
    this.own(f3(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.inputManager;
    }, () => this._setNavigationMode()));
  }
  destroy() {
    this.view = null;
  }
  get state() {
    var _a;
    return this.get("view.ready") && "3d" === ((_a = this.view) == null ? void 0 : _a.type) ? "ready" : "disabled";
  }
  toggle() {
    "disabled" !== this.state && (this.navigationMode = "pan" !== this.navigationMode ? "pan" : "rotate", this._setNavigationMode());
  }
  _setNavigationMode() {
    this.get("view.inputManager").primaryDragAction = "pan" === this.navigationMode ? "pan" : "rotate";
  }
};
e2([y({ readOnly: true })], r19.prototype, "state", null), e2([y()], r19.prototype, "navigationMode", void 0), e2([y()], r19.prototype, "view", void 0), r19 = e2([a3("esri.widgets.NavigationToggleViewModel")], r19);
var a25 = r19;

// node_modules/@arcgis/core/widgets/NavigationToggle.js
var p17 = class extends W {
  constructor(t24, e15) {
    super(t24, e15), this.iconClass = o20.widgetIcon, this.messages = null, this.viewModel = new a25();
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(t24) {
    this._overrideIfSome("label", t24);
  }
  set layout(t24) {
    "horizontal" !== t24 && (t24 = "vertical"), this._set("layout", t24);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(t24) {
    this.viewModel.view = t24;
  }
  toggle() {
    return this.viewModel.toggle();
  }
  render() {
    const t24 = "disabled" === this.get("viewModel.state"), e15 = "pan" === this.get("viewModel.navigationMode"), o21 = { [o20.disabled]: t24, [o20.isLayoutHorizontal]: "horizontal" === this.layout }, s18 = { [o20.activeButton]: e15 }, r20 = { [o20.activeButton]: !e15 }, a29 = t24 ? -1 : 0, l17 = this.messages.toggle;
    return n5("div", { bind: this, class: this.classes(o20.base, o21), onclick: this._toggle, onkeydown: this._toggle, tabIndex: a29, "aria-label": l17, title: l17 }, n5("div", { class: this.classes(o20.button, o20.panButton, s18) }, n5("span", { class: o20.panIcon })), n5("div", { class: this.classes(o20.button, o20.rotateButton, r20) }, n5("span", { class: o20.rotationIcon })));
  }
  _toggle() {
    this.toggle();
  }
};
e2([y()], p17.prototype, "iconClass", void 0), e2([y()], p17.prototype, "label", null), e2([y({ value: "vertical" })], p17.prototype, "layout", null), e2([y(), e4("esri/widgets/NavigationToggle/t9n/NavigationToggle")], p17.prototype, "messages", void 0), e2([y()], p17.prototype, "view", null), e2([y({ type: a25 })], p17.prototype, "viewModel", void 0), e2([t8()], p17.prototype, "_toggle", null), p17 = e2([a3("esri.widgets.NavigationToggle")], p17);
var g10 = p17;

// node_modules/@arcgis/core/widgets/Zoom/IconButton.js
var c18 = { button: "esri-widget--button esri-widget", disabled: "esri-disabled", interactive: "esri-interactive", iconText: "esri-icon-font-fallback-text", icon: "esri-icon" };
var n23 = class extends W {
  constructor() {
    super(...arguments), this.enabled = true, this.iconClass = "", this.title = "";
  }
  render() {
    const t24 = this.enabled ? 0 : -1, s18 = { [c18.disabled]: !this.enabled, [c18.interactive]: this.enabled }, i24 = { [this.iconClass]: !!this.iconClass };
    return n5("div", { bind: this, class: this.classes(c18.button, s18), onclick: this._triggerAction, onkeydown: this._triggerAction, role: "button", tabIndex: t24, title: this.title }, n5("span", { "aria-hidden": "true", role: "presentation", class: this.classes(c18.icon, i24) }), n5("span", { class: c18.iconText }, this.title));
  }
  _triggerAction() {
    this.action.call(this);
  }
};
e2([y()], n23.prototype, "action", void 0), e2([y()], n23.prototype, "enabled", void 0), e2([y()], n23.prototype, "iconClass", void 0), e2([y()], n23.prototype, "title", void 0), e2([t8()], n23.prototype, "_triggerAction", null), n23 = e2([a3("esri.widgets.IconButton")], n23);
var a26 = n23;

// node_modules/@arcgis/core/widgets/Zoom/ZoomConditions2D.js
var s17 = class extends v3 {
  get canZoomIn() {
    if (!this.get("view.ready"))
      return false;
    const e15 = this.get("view.animation.target.scale") || this.get("view.scale"), t24 = this.get("view.constraints.effectiveMaxScale");
    return 0 === t24 || e15 > t24;
  }
  get canZoomOut() {
    if (!this.get("view.ready"))
      return false;
    const e15 = this.get("view.animation.target.scale") || this.get("view.scale"), t24 = this.get("view.constraints.effectiveMinScale");
    return 0 === t24 || e15 < t24;
  }
};
e2([y({ readOnly: true })], s17.prototype, "canZoomIn", null), e2([y({ readOnly: true })], s17.prototype, "canZoomOut", null), e2([y()], s17.prototype, "view", void 0), s17 = e2([a3("esri.widgets.Zoom.ZoomConditions2D")], s17);
var i23 = s17;

// node_modules/@arcgis/core/widgets/Zoom/ZoomConditions3D.js
var t23 = class extends v3 {
  get canZoomIn() {
    return !!this.view.ready;
  }
  get canZoomOut() {
    return !!this.view.ready;
  }
};
e2([y({ readOnly: true })], t23.prototype, "canZoomIn", null), e2([y({ readOnly: true })], t23.prototype, "canZoomOut", null), e2([y()], t23.prototype, "view", void 0), t23 = e2([a3("esri.widgets.Zoom.ZoomConditions3D")], t23);
var c19 = t23;

// node_modules/@arcgis/core/widgets/Zoom/ZoomViewModel.js
var p18 = class extends v3 {
  constructor(o21) {
    super(o21);
  }
  destroy() {
    this.view = null;
  }
  get canZoomIn() {
    return r(this._zoomConditions) && this._zoomConditions.canZoomIn;
  }
  get canZoomOut() {
    var _a;
    return r(this._zoomConditions) && ((_a = this._zoomConditions) == null ? void 0 : _a.canZoomOut);
  }
  get state() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.ready) ? "ready" : "disabled";
  }
  set view(o21) {
    o21 ? "2d" === o21.type ? this._zoomConditions = new i23({ view: o21 }) : "3d" === o21.type && (this._zoomConditions = new c19({ view: o21 })) : this._zoomConditions = null, this._set("view", o21);
  }
  zoomIn() {
    if (!this.canZoomIn)
      return;
    const o21 = this.view;
    "2d" === o21.type ? o21.mapViewNavigation.zoomIn() : g(o21.goTo({ zoomFactor: 2 }));
  }
  zoomOut() {
    if (!this.canZoomOut)
      return;
    const o21 = this.view;
    "2d" === o21.type ? o21.mapViewNavigation.zoomOut() : g(o21.goTo({ zoomFactor: 0.5 }));
  }
};
e2([y()], p18.prototype, "_zoomConditions", void 0), e2([y()], p18.prototype, "canZoomIn", null), e2([y()], p18.prototype, "canZoomOut", null), e2([y({ readOnly: true })], p18.prototype, "state", null), e2([y()], p18.prototype, "view", null), p18 = e2([a3("esri.widgets.Zoom.ZoomViewModel")], p18);
var a27 = p18;

// node_modules/@arcgis/core/widgets/Zoom.js
var u11 = { base: "esri-zoom esri-widget", horizontalLayout: "esri-zoom--horizontal", zoomInIcon: "esri-icon-plus", zoomOutIcon: "esri-icon-minus", widgetIcon: "esri-icon-zoom-in-magnifying-glass" };
var a28 = class extends W {
  constructor(o21, t24) {
    super(o21, t24), this.iconClass = u11.widgetIcon, this.messages = null, this.viewModel = new a27();
  }
  initialize() {
    this._zoomInButton = new a26({ action: this.zoomIn.bind(this), iconClass: u11.zoomInIcon }), this._zoomOutButton = new a26({ action: this.zoomOut.bind(this), iconClass: u11.zoomOutIcon });
  }
  destroy() {
    this._zoomInButton = a(this._zoomInButton), this._zoomOutButton = a(this._zoomOutButton);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(o21) {
    this._overrideIfSome("label", o21);
  }
  set layout(o21) {
    "horizontal" !== o21 && (o21 = "vertical"), this._set("layout", o21);
  }
  set view(o21) {
    this.viewModel.view = o21;
  }
  get view() {
    return this.viewModel.view;
  }
  render() {
    const o21 = this.viewModel, t24 = { [u11.horizontalLayout]: "horizontal" === this.layout }, { canZoomIn: s18, canZoomOut: e15 } = o21;
    this._zoomInButton.enabled = s18, this._zoomOutButton.enabled = e15;
    const { zoomIn: i24, zoomOut: r20 } = this.messages;
    return this._zoomInButton.title = i24, this._zoomOutButton.title = r20, n5("div", { class: this.classes(u11.base, t24) }, this._zoomInButton.render(), this._zoomOutButton.render());
  }
  zoomIn() {
    return this.viewModel.zoomIn();
  }
  zoomOut() {
    return this.viewModel.zoomOut();
  }
};
e2([y()], a28.prototype, "iconClass", void 0), e2([y()], a28.prototype, "label", null), e2([y({ value: "vertical" })], a28.prototype, "layout", null), e2([y(), e4("esri/widgets/Zoom/t9n/Zoom")], a28.prototype, "messages", void 0), e2([y()], a28.prototype, "view", null), e2([y({ type: a27 })], a28.prototype, "viewModel", void 0), a28 = e2([a3("esri.widgets.Zoom")], a28);
var c20 = a28;

// node_modules/@arcgis/core/views/ui/DefaultUI.js
function m13(t24) {
  return t24 && void 0 !== t24.view;
}
var h11 = class extends P2 {
  constructor(t24) {
    super(t24), this._defaultPositionLookup = { attribution: "manual", compass: "top-left", "navigation-toggle": "top-left", zoom: "top-left" }, this.components = [];
  }
  initialize() {
    this.addHandles([l3(() => this.components, this._componentsWatcher.bind(this), h), l3(() => this.view, this._updateViewAwareWidgets.bind(this), h)]);
  }
  _add(t24, o21, e15, i24) {
    let s18 = t24;
    if ("string" == typeof t24 && this._defaultPositionLookup[t24]) {
      if (this._find(t24))
        return;
      s18 = this._createComponent(t24);
    }
    super._add(s18, o21, e15, i24);
  }
  _removeComponents(t24) {
    t24.forEach((t25) => {
      const o21 = this._find(t25);
      o21 && (this.remove(o21), o21.destroy());
    });
  }
  _updateViewAwareWidgets(t24) {
    this.components.forEach((o21) => {
      const e15 = this._find(o21), i24 = e15 && e15.widget;
      m13(i24) && (i24.view = t24);
    });
  }
  _componentsWatcher(t24, o21) {
    this._removeComponents(o21), this._addComponents(t24), this._adjustPadding(t24);
  }
  _adjustPadding(t24) {
    if (!t24.includes("attribution") && !this._isOverridden("padding")) {
      const { top: t25 } = this.padding;
      this.padding = t25;
    }
  }
  _addComponents(t24) {
    this.constructed && t24.forEach((t25) => this.add(this._createComponent(t25), this._defaultPositionLookup[t25]));
  }
  _createComponent(t24) {
    const o21 = this._createWidget(t24);
    if (o21)
      return new l15({ id: t24, node: o21 });
  }
  _createWidget(t24) {
    return "attribution" === t24 ? this._createAttribution() : "compass" === t24 ? this._createCompass() : "navigation-toggle" === t24 ? this._createNavigationToggle() : "zoom" === t24 ? this._createZoom() : void 0;
  }
  _createAttribution() {
    return new h9({ view: this.view });
  }
  _createCompass() {
    return new d11({ view: this.view });
  }
  _createNavigationToggle() {
    return new g10({ view: this.view });
  }
  _createZoom() {
    return new c20({ view: this.view });
  }
};
e2([y()], h11.prototype, "components", void 0), h11 = e2([a3("esri.views.ui.DefaultUI")], h11);
var u12 = h11;

// node_modules/@arcgis/core/views/ui/2d/DefaultUI2D.js
var e14 = class extends u12 {
  constructor(o21) {
    super(o21), this.components = ["attribution", "zoom"];
  }
};
e2([y()], e14.prototype, "components", void 0), e14 = e2([a3("esri.views.ui.2d.DefaultUI2D")], e14);
var p19 = e14;

// node_modules/@arcgis/core/views/MapView.js
var pe;
var he;
var ce;
var de;
var ue;
var ge;
async function me() {
  const [, { GraphicsView2D: e15, GraphicContainer: t24, LabelManager: i24, MapViewNavigation: s18, MagnifierView2D: r20, Stage: n24 }] = await Promise.all([import("./webglDeps-E26JV3XI.js"), import("./mapViewDeps-24DM4E4E.js")]);
  he = e15, ce = t24, de = i24, ue = s18, ge = r20, pe = n24;
}
var ye = 160;
function we(e15) {
  return e15 && "esri.Viewpoint" === e15.declaredClass;
}
var fe = class extends w6(z2(a11(A3))) {
  constructor(e15) {
    super(e15), this._magnifierView = null, this._stage = null, this._resolveWhenReady = [], this.rootLayerViews = new l4({ getCollections: () => {
      var _a, _b;
      return [(_a = this.basemapView) == null ? void 0 : _a.baseLayerViews, this.layerViews, (_b = this.basemapView) == null ? void 0 : _b.referenceLayerViews];
    }, getChildrenFunction: () => null }), this.featuresTilingScheme = null, this.fullOpacity = 1, this.graphicsView = null, this.labelManager = null, this.mapViewNavigation = null, this.renderingOptions = { samplingMode: "dynamic", edgeLabelsVisible: true, labelsAnimationTime: 125, labelCollisionsEnabled: true }, this.rendering = false, this.supersampleScreenshotsEnabled = true, this.supportsGround = false, this._stationaryTimer = null, this._gotoTask = null, this.frameTask = new s11(this), this._pePromise = null, this.floors = new j2(), this.highlightOptions = new c5(), this.inputManager = new C3({ view: this }), this.map = null, this.resizeAlign = "center", this.spatialReferenceLocked = false, this.timeline = new e8(), this.type = "2d", this.ui = new p19(), this._pixelFormat = { flipY: true, premultipliedAlpha: true }, this.constraints = new u7(), this.padding = { top: 0, right: 0, bottom: 0, left: 0 }, this.handles.add([l3(() => this.viewpoint, () => {
      this._lastStationaryEventTimestamp = performance.now(), this._flipStationary(ye);
    }, U2), this.on("resize", (e16) => this._resizeHandler(e16)), l3(() => {
      var _a;
      return (_a = this.animationManager) == null ? void 0 : _a.animation;
    }, (e16) => {
      this.animation = e16;
    })]), c4();
  }
  destroy() {
    this._set("preconditionsReady", false), this._gotoTask = this.frameTask = null, this.rootLayerViews.destroy(), this.inputManager.destroy(), this._set("inputManager", null);
  }
  get graphicsTileStore() {
    return new d3(this.featuresTilingScheme);
  }
  get initialExtentRequired() {
    var _a;
    const { scale: e15, constraints: t24, center: i24, viewpoint: s18, extent: r20 } = this;
    let n24 = this.zoom;
    return !(this.map && "initialViewProperties" in this.map && ((_a = this.map.initialViewProperties) == null ? void 0 : _a.viewpoint)) && (!r20 && ((t24 == null ? void 0 : t24.effectiveLODs) || (n24 = -1), (!i24 || 0 === e15 && -1 === n24) && (!s18 || !r(s18.targetGeometry) || "extent" !== s18.targetGeometry.type && !s18.scale)));
  }
  get resourceManager() {
    return this._stage.resourceManager;
  }
  get textureManager() {
    return this._stage.painter.textureManager;
  }
  get _defaultsFromMapSettings() {
    return { required: { tileInfo: true, heightModelInfo: false, extent: false }, requiresExtentInSpatialReference: this.spatialReferenceLocked };
  }
  get _projectionEngineLoaded() {
    return !!en() || (this._pePromise || (this._pePromise = tn().finally(() => {
      this._pePromise = null;
    })), false);
  }
  get typeSpecificPreconditionsReady() {
    const e15 = this._getDefaultViewpoint();
    if (!e15)
      return false;
    const t24 = this.spatialReference, i24 = e(e15.targetGeometry);
    return !!An(i24.spatialReference, t24) || this._projectionEngineLoaded;
  }
  set animation(e15) {
    const t24 = this._get("animation");
    if (e15 === t24)
      return;
    if (t24 && t24.stop(), !e15 || e15.isFulfilled())
      return void this._set("animation", null);
    this._set("animation", e15), this.frameTask.animationInProgress = true;
    const i24 = () => {
      var _a;
      e15 === this._get("animation") && (this._set("animation", null), (_a = this.frameTask) == null ? void 0 : _a.requestFrame()), this.frameTask && (this.frameTask.animationInProgress = false);
    };
    e15.when(i24, i24);
  }
  get background() {
    return Te(this.map) ? this.map.initialViewProperties.background : null;
  }
  set background(e15) {
    this._override("background", e15);
  }
  get center() {
    if (!this.ready)
      return this._get("center");
    const { center: e15, spatialReference: t24 } = this.state.paddedViewState;
    return new w2({ x: e15[0], y: e15[1], spatialReference: t24 });
  }
  set center(e15) {
    if (null == e15)
      return;
    if (!this.ready)
      return this._set("center", e15), void this.notifyChange("initialExtentRequired");
    let t24;
    try {
      t24 = this._project(e15, this.spatialReference);
    } catch (s18) {
      return void s.getLogger(this.declaredClass).error(new s2("mapview:invalid-center", "could not project the value in the view's spatial reference", { input: e15, error: s18 }));
    }
    const i24 = this.viewpoint;
    xt(i24, i24, t24), this.viewpoint = i24;
  }
  set constraints(e15) {
    const t24 = this._get("constraints");
    t24 && (this.handles.remove("map-view-constraints"), t24.destroy()), this._set("constraints", e15), e15 && (e15.view = this, this.ready && (this.state.viewpoint = e15.fit(this.state.paddedViewState.viewpoint)), this.handles.add(l3(() => e15.version, () => {
      this.ready && this.state && (this.state.viewpoint = e15.fit(this.state.paddedViewState.viewpoint));
    }, U2), "map-view-constraints"));
  }
  get extent() {
    return this.ready ? this.state.paddedViewState.extent.clone() : this._get("extent");
  }
  set extent(e15) {
    if (null == e15)
      return;
    if (!e15.width || !e15.height)
      return void s.getLogger(this.declaredClass).error(new s2("mapview:invalid-extent", "invalid extent size"));
    if (!this.ready)
      return this._set("extent", e15), this._set("center", null), this._set("viewpoint", null), this._set("scale", 0), this._set("zoom", -1), void this.notifyChange("initialExtentRequired");
    let t24;
    try {
      t24 = this._project(e15, this.spatialReference);
    } catch (s18) {
      return void s.getLogger(this.declaredClass).error(new s2("mapview:invalid-extent", "could not project the value in the view's spatial reference", { error: s18 }));
    }
    const i24 = this.viewpoint;
    tt(i24, i24, t24, this.size, { constraints: this.constraints }), this.viewpoint = i24;
  }
  get padding() {
    return this.ready ? this.state.padding : this._get("padding");
  }
  set padding(e15) {
    this.ready ? (this.state.padding = e15, this._set("padding", this.state.padding)) : this._set("padding", e15);
  }
  get resolution() {
    return this.state ? this.state.resolution : 0;
  }
  get rotation() {
    return this.ready ? this.state.rotation : this._get("rotation");
  }
  set rotation(e15) {
    if (isNaN(e15))
      return;
    if (!this.ready)
      return void this._set("rotation", e15);
    const t24 = this.viewpoint;
    wt(t24, t24, e15), this.viewpoint = t24;
  }
  get scale() {
    return this.ready ? this.state.scale : this._get("scale");
  }
  set scale(e15) {
    if (!e15 || isNaN(e15))
      return;
    if (!this.ready) {
      this._set("scale", e15), this._set("zoom", -1);
      const t25 = this._get("extent");
      return t25 && (this._set("extent", null), this._set("center", t25.center)), void this.notifyChange("initialExtentRequired");
    }
    const t24 = this.viewpoint;
    jt(t24, t24, e15), this.viewpoint = t24;
  }
  get stationary() {
    return !(this.animation || this.navigating || this.resizing || this._stationaryTimer);
  }
  get updating() {
    var _a, _b, _c;
    const e15 = !this.destroyed && (!this.layerViewManager || !this.labelManager || !this.graphicsView || true === this.layerViewManager.updating || true === this.labelManager.updating || true === this.graphicsView.updating || this.allLayerViews.some((e16) => !e16.destroyed && !("layerViews" in e16) && true === e16.updating));
    if (has("esri-2d-log-updating")) {
      const t24 = this.allLayerViews.reduce((e16, t25) => ({ ...e16, [t25.layer.id]: !t25.destroyed && !("layerViews" in t25) && t25.updating }), {});
      console.log(`Updating MapView: ${e15}
-> Null LayerViewManager: ${!this.layerViewManager}
-> Null LabelManager: ${!this.labelManager}
-> Null GraphicsView: ${!this.graphicsView}
-> layerViewManager.updating: ${(_a = this.layerViewManager) == null ? void 0 : _a.updating}
-> labelManager.updating: ${(_b = this.labelManager) == null ? void 0 : _b.updating}
-> graphicsView.updating: ${(_c = this.graphicsView) == null ? void 0 : _c.updating}
-> allLayerViews: ${JSON.stringify(t24)}
`);
    }
    return e15;
  }
  get viewpoint() {
    if (!this.ready)
      return this._get("viewpoint");
    const e15 = this.state.paddedViewState;
    return e15 && e15.viewpoint.clone();
  }
  set viewpoint(e15) {
    if (null == e15)
      return;
    if (!this.ready)
      return this._set("viewpoint", e15), this._set("extent", null), this._set("center", null), this._set("zoom", -1), this._set("scale", 0), void this.notifyChange("initialExtentRequired");
    let t24, s18;
    try {
      t24 = this._project(e15, this.spatialReference), !e15.scale || isNaN(e15.scale) ? s18 = new s2("mapview:invalid-viewpoint", `invalid scale value of ${e15.scale}`) : t(e15.targetGeometry) && (s18 = new s2("mapview:invalid-viewpoint", "geometry not defined"));
    } catch (a29) {
      s18 = new s2("mapview:invalid-viewpoint", "could not project the value in the view's spatial reference", { error: a29 });
    }
    if (s18)
      return void s.getLogger(this.declaredClass).error(s18);
    this._scaleBeforeChangingSpatialReference = null;
    const r20 = new u({ targetGeometry: new w2(), scale: 0, rotation: 0 });
    Z(r20, t24), this.constraints.constrain(r20, this.state.paddedViewState.viewpoint), this.state.viewpoint = r20, this.frameTask.requestFrame(), this._set("viewpoint", r20);
  }
  get zoom() {
    return this.ready ? this.constraints.scaleToZoom(this.scale) : this._get("zoom");
  }
  set zoom(e15) {
    if (null == e15)
      return;
    if (!this.ready) {
      this._set("zoom", e15), this._set("scale", 0);
      const t25 = this._get("extent");
      return t25 && (this._set("extent", null), this._set("center", t25.center)), void this.notifyChange("initialExtentRequired");
    }
    if (!this.constraints.effectiveLODs)
      return void this._set("zoom", -1);
    const t24 = this.viewpoint;
    jt(t24, t24, this.constraints.zoomToScale(e15)), this.viewpoint = t24, this._set("zoom", this.constraints.scaleToZoom(this.scale));
  }
  get navigating() {
    return !(!this.mapViewNavigation || !this.mapViewNavigation.interacting);
  }
  goTo(e15, t24) {
    if (e15)
      return this.animation && (this.animation = null), this._createAnimation(), j3(() => this.ready, t24).then(() => {
        var _a;
        const i24 = { animate: true, ...t24 }, s18 = Y(e15, this);
        return (_a = this.animation) == null ? void 0 : _a.update(s18), this._gotoTask = {}, i24.animate ? this._gotoAnimated(s18, i24) : this._gotoImmediate(s18, i24);
      });
    s.getLogger(this.declaredClass).error("#goTo()", "target cannot be null or undefined");
  }
  async hitTest(e15, t24) {
    const i24 = o11(e15) ? r12(this, e15) : e15;
    if (!this.ready || isNaN(i24.x) || isNaN(i24.y))
      return { screenPoint: i24, results: [] };
    let s18 = /* @__PURE__ */ new Set(), r20 = false, n24 = null, a29 = null;
    (t24 == null ? void 0 : t24.include) ? Se(t24.include, Ve(this, (e16) => s18.add(e16), (e16) => {
      n24 || (n24 = /* @__PURE__ */ new Set()), n24.add(e16);
    }, (e16) => s18.add(e16), () => r20 = true)) : (r20 = true, s18 = new Set(this.allLayerViews)), (t24 == null ? void 0 : t24.exclude) && Se(t24.exclude, Ve(this, (e16) => s18.delete(e16), (e16) => {
      a29 || (a29 = /* @__PURE__ */ new Set()), a29.add(e16);
    }));
    const o21 = this.allLayerViews.filter((e16) => !e16.suspended && s18.has(e16)).reverse(), p20 = this.toMap(i24);
    let h12 = [...r20 ? this.graphicsView.hitTest(p20).map((e16) => ({ type: "graphic", graphic: e16, layer: null, mapPoint: p20 })) : [], ...await Promise.all(o21.map((e16) => e16.hitTest(p20, i24)).toArray())].filter(r).flat().filter(r);
    return n24 && (h12 = h12.filter((e16) => !("graphic" in e16) || !e16.graphic || (n24 == null ? void 0 : n24.has(ve(e16.graphic))))), a29 && (h12 = h12.filter((e16) => !("graphic" in e16) || !e16.graphic || (a29 == null ? void 0 : a29.has(ve(e16.graphic))))), { screenPoint: i24, results: h12 };
  }
  async takeScreenshot(e15) {
    const t24 = this._createScreenshotPlan(e15), i24 = await this._stage.takeScreenshot(t24);
    return r10(i24, { format: t24.format, quality: t24.quality, rotation: 0, disableDecorations: false }, this._pixelFormat);
  }
  async _takeScreenshot(e15) {
    const t24 = this._createScreenshotPlan(e15), i24 = await this._stage.takeScreenshot(t24);
    return l8(i24, this._pixelFormat);
  }
  _createScreenshotPlan(e15) {
    e15 = e15 ?? {};
    const t24 = this.supersampleScreenshotsEnabled ? Math.min(4, w5(this.size, Math.min(4096, this._stage.context.parameters.maxTextureSize))) : 1;
    let i24;
    e15.layers ? (i24 = [], e15.layers.forEach((e16) => {
      const t25 = this.allLayerViews.find((t26) => t26.layer.id === e16.id);
      t25 && "container" in t25 && t25.container && i24.push(t25.container);
    })) : i24 = this._stage.children;
    const { format: s18, quality: r20 } = s6(e15.format, e15.quality);
    return t21(e15, t24, this.size, this.padding, s18, r20, i24, e15.rotation);
  }
  get test() {
    return { takeScreenshot: (e15) => this._takeScreenshot(e15) };
  }
  toMap(e15) {
    if (!this.ready)
      return null;
    const t24 = o11(e15) ? r12(this, e15) : e15, i24 = [0, 0], [s18, r20] = this.state.toMap(i24, [t24.x, t24.y]), n24 = this.spatialReference;
    return new w2({ x: s18, y: r20, spatialReference: n24 });
  }
  toScreen(e15) {
    if (!this.ready)
      return null;
    const t24 = this._project(e15, this.spatialReference), i24 = [t24.x, t24.y];
    return this.state.toScreen(i24, i24), c2(i24[0], i24[1]);
  }
  on(e15, t24, i24, s18) {
    const r20 = this.inputManager && this.viewEvents.on(e15, t24, i24, s18);
    return r20 || super.on(e15, t24);
  }
  hasEventListener(e15) {
    return super.hasEventListener(e15) || this.viewEvents.hasHandler(e15);
  }
  whenLayerView(e15) {
    return super.whenLayerView(e15);
  }
  graphicChanged(e15) {
    if (this.graphicsView) {
      this.graphicsView.graphicUpdateHandler(e15);
    }
  }
  whenReady() {
    return new Promise((e15) => {
      this.ready ? e15(this) : this._resolveWhenReady.push(e15);
    });
  }
  forceDOMReadyCycle() {
    this.forceReadyCycle();
  }
  getDefaultSpatialReference() {
    var _a, _b, _c;
    return this.map && "initialViewProperties" in this.map && ((_b = (_a = this.map) == null ? void 0 : _a.initialViewProperties) == null ? void 0 : _b.spatialReference) || ((_c = this.defaultsFromMap) == null ? void 0 : _c.spatialReference) || null;
  }
  hasLayerViewModule(e15) {
    return n15.hasLayerViewModule(e15);
  }
  importLayerView(e15) {
    return n15.importLayerView(e15);
  }
  pixelSizeAt() {
    return this.ready ? this.state.resolution : (s.getLogger(this.declaredClass).error("#pixelSizeAt()", "Map view cannot be used before it is ready"), null);
  }
  popupHitTest(e15) {
    return this.hitTest(e15).then((t24) => ({ ...t24, mapPoint: this.toMap(e15) }));
  }
  requestUpdate() {
    this.ready && this.frameTask.requestUpdate();
  }
  validate() {
    let e15 = i20(this.type);
    return has("safari") && has("safari") < 9 && (e15 = new s2("mapview:browser-not-supported", "This browser is not supported by MapView (Safari < 9)", { type: "safari", requiredVersion: 9, detectedVersion: has("safari") })), r(e15) ? (s.getLogger(this.declaredClass).warn("#validate()", e15.message), Promise.reject(e15)) : me();
  }
  _createAnimation() {
    return this.animation && !this.animation.done || (this.animation = new p11()), this.animation;
  }
  _cancellableGoTo(e15, t24, i24) {
    const s18 = () => e15 === this._gotoTask, r20 = i24.then(() => {
      s18() && (this.animation = null);
    }).catch((e16) => {
      throw s18() && (t24 && !t24.done && (t24.stop(), this.frameTask.animationInProgress = false), this.animation = null), e16;
    }), n24 = new Promise((e16) => e16(r20));
    return t24.when().catch(() => {
      s18() && n24.cancel && n24.cancel();
    }), n24;
  }
  _gotoImmediate(e15, t24) {
    const i24 = this._gotoTask, s18 = this.animation, r20 = e15.then((e16) => {
      if (f(t24), i24 !== this._gotoTask)
        throw new s2("view:goto-interrupted", "Goto was interrupted");
      this.viewpoint = s18.target = e16, s18.finish();
    });
    return this._cancellableGoTo(i24, s18, r20);
  }
  _flipStationary(e15) {
    return null !== this._stationaryTimer || (this._stationaryTimer = setTimeout(() => {
      this._stationaryTimer = null;
      const e16 = performance.now() - this._lastStationaryEventTimestamp;
      e16 < ye && (this._stationaryTimer = this._flipStationary(e16));
    }, e15)), this._stationaryTimer;
  }
  _getDefaultViewpoint() {
    var _a, _b, _c, _d;
    const { constraints: e15, initialExtent: t24, map: s18, padding: r20, size: n24 } = this;
    if (!e15)
      return null;
    const a29 = s18 && "initialViewProperties" in s18 ? s18.initialViewProperties : void 0, o21 = { zoom: this._get("zoom"), scale: this._get("scale"), center: this._get("center"), extent: this._get("extent"), rotation: this._get("rotation"), viewpoint: this._get("viewpoint"), spatialReference: this._userSpatialReference };
    e15.effectiveLODs ? -1 !== o21.zoom && (o21.scale = e15.zoomToScale(o21.zoom)) : o21.zoom = -1;
    let h12 = null, c21 = null, d12 = 0;
    const u13 = o21.viewpoint && o21.viewpoint.rotation, g11 = o21.viewpoint && o21.viewpoint.targetGeometry;
    r(g11) && ("extent" === g11.type ? h12 = g11 : "point" === g11.type && (c21 = g11, d12 = o21.viewpoint.scale));
    const m14 = o21.extent || h12 || ((_b = e((_a = a29 == null ? void 0 : a29.viewpoint) == null ? void 0 : _a.targetGeometry)) == null ? void 0 : _b.extent) || t24, y7 = o21.center || c21 || (m14 == null ? void 0 : m14.center), w10 = o21.scale || d12 || ((_c = a29 == null ? void 0 : a29.viewpoint) == null ? void 0 : _c.scale) || m14 && H(m14, [n24[0] - r20.left - r20.right, n24[1] - r20.top - r20.bottom]), f11 = o21.rotation || u13 || ((_d = a29 == null ? void 0 : a29.viewpoint) == null ? void 0 : _d.rotation) || 0;
    return y7 && w10 ? new u({ targetGeometry: y7, scale: w10, rotation: f11 }) : null;
  }
  _gotoAnimated(e15, t24) {
    const i24 = this._gotoTask, s18 = this.animation;
    if (!s18)
      return Promise.resolve();
    const r20 = e15.then((e16) => {
      if (f(t24), i24 !== this._gotoTask)
        throw new s2("view:goto-interrupted", "Goto was interrupted");
      return s18.update(e16), this.animationManager.animate(s18, this.viewpoint, t24), s18.when().then(() => {
      }, () => {
      });
    });
    return this._cancellableGoTo(i24, s18, r20);
  }
  _project(e15, t24) {
    var _a;
    const i24 = e15 && e15.targetGeometry || e15;
    if (!t24)
      return e15;
    if (!i24)
      return null;
    if (t24.imageCoordinateSystem || ((_a = i24.spatialReference) == null ? void 0 : _a.imageCoordinateSystem))
      return e15;
    if (E(t24, i24.spatialReference))
      return e15;
    const s18 = rn(i24, t24);
    if (!s18)
      throw new s2("mapview:projection-not-possible", "projecting input geometry to target spatial reference returned a null value", { geometry: i24, spatialReference: t24 });
    return we(e15) ? (e15.targetGeometry = s18, e15) : s18;
  }
  _resizeHandler(e15) {
    if (!this.ready)
      return;
    const t24 = this.state;
    let i24 = this.state.paddedViewState.viewpoint;
    const s18 = this.state.paddedViewState.size.concat();
    t24.size = [e15.width, e15.height], ht(i24, i24, s18, this.state.paddedViewState.size, this.resizeAlign), i24 = this.constraints.constrain(i24, void 0), this.state.viewpoint = i24;
  }
  _startup() {
    var _a, _b;
    this.timeline.begin("MapView Startup");
    const e15 = this._getDefaultViewpoint(), t24 = e15.targetGeometry;
    try {
      this._project(e15, this.spatialReference);
    } catch (l17) {
      s.getLogger(this.declaredClass).warn(new t6("mapview:startup-projection-error", "projection of initial viewpoint to the view's spatial reference, defaulting to the initial viewpoint.", { center: t24.toJSON(), spatialReference: this.spatialReference, error: l17 })), e15.targetGeometry = ((_a = this.defaultsFromMap.extent) == null ? void 0 : _a.center) || new w2({ x: 0, y: 0, spatialReference: this.spatialReference });
    }
    (_b = this.constraints) == null ? void 0 : _b.fit(e15), this._set("state", new f8({ padding: this._get("padding"), size: this.size, viewpoint: e15 })), this.graphics.owner = this;
    const i24 = new pe(this.surface, { canvas: this.renderCanvas, supersampleScreenshots: this.supersampleScreenshotsEnabled, contextOptions: { disabledExtensions: this.deactivatedWebGLExtensions, debugWebGLExtensions: this.debugWebGLExtensions }, renderingOptions: this.renderingOptions, timeline: this.timeline });
    this._stage = i24, this._magnifierView = new ge(), this._magnifierView.magnifier = this.magnifier;
    const s18 = new de({ view: this });
    this._set("labelManager", s18);
    const r20 = new l9({ view: this });
    this._set("animationManager", r20);
    const n24 = new ue({ view: this, animationManager: r20 });
    this._set("mapViewNavigation", n24), this._setupSpatialReferenceDependentProperties(), this.handles.add([this.rootLayerViews.on("change", () => this._updateStageChildren()), i24.on("post-render", () => this._set("rendering", i24.renderRequested)), i24.on("will-render", () => this._set("rendering", i24.renderRequested)), i24.on("webgl-error", (e16) => this.fatalError = e16.error), l3(() => this.stationary, (e16) => i24.stationary = e16, w4), l3(() => this.background, (e16) => {
      i24.background = e16, this._magnifierView.background = e16;
    }, w4), l3(() => this.magnifier, (e16) => this._magnifierView.magnifier = e16, w4), l3(() => this.renderingOptions, (e16) => i24.renderingOptions = e16, w4), l3(() => this.highlightOptions, (e16) => i24.highlightOptions = e16, w4), l3(() => this.state.id, () => i24.state = this.state, w4)], "map-view"), this._updateStageChildren();
    const a29 = this._resolveWhenReady;
    this._resolveWhenReady = [], a29.forEach((e16) => e16(this)), this.timeline.end("MapView Startup"), this.frameTask && this.frameTask.start(), this._set("ready", true);
  }
  _teardown() {
    this._destroySpatialReferenceDependentProperties(), this.handles.remove("map-view"), this.mapViewNavigation.destroy(), this._set("mapViewNavigation", null), this.animationManager.destroy(), this._set("animationManager", null), this.layerViewManager.clear(), this.labelManager.destroy(), this._magnifierView.destroy(), this._stage.destroy(), this._stage = null, this._set("graphicsView", null), this._magnifierView = null, this._set("labelManager", null), this._set("mapViewNavigation", null), this.graphics.owner = null, this.frameTask && this.frameTask.stop(), this._stationaryTimer && (clearTimeout(this._stationaryTimer), this._stationaryTimer = null), this._set("ready", false);
    const { center: [e15, t24], spatialReference: i24, rotation: s18, scale: r20 } = this.state.paddedViewState, n24 = new w2({ x: e15, y: t24, spatialReference: i24 });
    this._set("viewpoint", null), this._set("extent", null), this._set("center", n24), this._set("zoom", -1), this._set("rotation", s18), this._set("scale", r20), this._set("spatialReference", i24), this._set("state", null), this.animation = null;
  }
  _updateStageChildren() {
    this._stage.removeAllChildren(), this.rootLayerViews.forEach((e16) => {
      this._stage.addChild(e16.container);
    });
    const e15 = this.graphicsView;
    this._stage.addChild(e15.container), this._stage.addChild(this._magnifierView);
  }
  _setupSpatialReferenceDependentProperties() {
    const e15 = new h3(j5.create({ spatialReference: this.spatialReference, size: 512, numLODs: 36 }));
    this._set("featuresTilingScheme", e15);
    const t24 = new he({ view: this, graphics: this.graphics, requestUpdateCallback: () => this.requestUpdate(), container: new ce(e15) });
    this.frameTask.graphicsView = t24, this._set("graphicsView", t24);
  }
  _destroySpatialReferenceDependentProperties() {
    const e15 = this.graphicsView;
    this._set("graphicsView", null), this.frameTask.graphicsView = null, e15.destroy(), this._set("featuresTilingScheme", null);
  }
  _spatialReferenceChanged(e15) {
    if (!this.ready)
      return;
    this.frameTask.stop();
    for (const i24 of this.allLayerViews)
      i24.processDetach();
    this._destroySpatialReferenceDependentProperties();
    const t24 = this.state.paddedViewState.clone();
    if (t(this._scaleBeforeChangingSpatialReference))
      this._scaleBeforeChangingSpatialReference = t24.scale;
    else {
      const e16 = t24.viewpoint.clone();
      e16.scale = this._scaleBeforeChangingSpatialReference, t24.viewpoint = e16;
    }
    const s18 = t24.clone(), [r20, n24] = t24.center;
    let a29 = null;
    try {
      a29 = this._project(new w2({ x: r20, y: n24, spatialReference: t24.spatialReference }), e15);
    } catch (p20) {
      en() || s.getLogger(this.declaredClass).warn(new t6("mapview:spatial-reference-change", "could not project the view's center to the new spatial reference", { center: a29 == null ? void 0 : a29.toJSON(), spatialReference: e15, error: p20 }));
    }
    a29 || (a29 = new w2({ x: 0, y: 0, spatialReference: e15 }));
    const l17 = xt(new u({ targetGeometry: new w2(), scale: 0, rotation: 0 }), t24.viewpoint, a29);
    s18.viewpoint = l17;
    try {
      const i24 = 20, r21 = [t24.size[0] / 2, t24.size[1] / 2], n25 = [r21[0] + i24, r21[1]], a30 = t24.toMap([0, 0], n25), { x: o21, y: p20 } = this._project(new w2({ x: a30[0], y: a30[1], spatialReference: t24.spatialReference }), e15);
      a30[0] = o21, a30[1] = p20, s18.toScreen(a30, a30);
      const h12 = pt(r21, a30, n25), c21 = Math.hypot(a30[0] - r21[0], a30[1] - r21[1]) / i24;
      !Number.isFinite(c21) || Math.abs(c21) > 4 ? (l17.rotation = 0, l17.targetGeometry = new w2({ x: 0, y: 0, spatialReference: e15 })) : (l17.scale *= c21, l17.scale > has("mapview-srswitch-adjust-rotation-scale-threshold") ? l17.rotation = 0 : l17.rotation += Number.isFinite(h12) ? h12 : 0);
    } catch {
    }
    this._get("constraints").constrain(l17, void 0), this._get("state").viewpoint = l17, this._stage.state = this.state, this._setupSpatialReferenceDependentProperties();
    for (const i24 of this.allLayerViews)
      i24.processAttach();
    this.frameTask.requestFrame(), this.frameTask.start(), this._updateStageChildren();
  }
};
fe.type = "2d", e2([y({ readOnly: true })], fe.prototype, "animationManager", void 0), e2([y({ constructOnly: true })], fe.prototype, "deactivatedWebGLExtensions", void 0), e2([y({ constructOnly: true })], fe.prototype, "debugWebGLExtensions", void 0), e2([y({ readOnly: true })], fe.prototype, "featuresTilingScheme", void 0), e2([y({ readOnly: true })], fe.prototype, "fullOpacity", void 0), e2([y({ readOnly: true })], fe.prototype, "graphicsTileStore", null), e2([y()], fe.prototype, "graphicsView", void 0), e2([y({ readOnly: true })], fe.prototype, "state", void 0), e2([y()], fe.prototype, "initialExtentRequired", null), e2([y()], fe.prototype, "labelManager", void 0), e2([y({ readOnly: true })], fe.prototype, "resourceManager", null), e2([y({ readOnly: true })], fe.prototype, "textureManager", null), e2([y({ readOnly: true })], fe.prototype, "mapViewNavigation", void 0), e2([y({ constructOnly: true })], fe.prototype, "renderCanvas", void 0), e2([y()], fe.prototype, "renderingOptions", void 0), e2([y({ readOnly: true })], fe.prototype, "rendering", void 0), e2([y({ constructOnly: true })], fe.prototype, "supersampleScreenshotsEnabled", void 0), e2([y({ readOnly: true })], fe.prototype, "supportsGround", void 0), e2([y()], fe.prototype, "_stationaryTimer", void 0), e2([y()], fe.prototype, "_defaultsFromMapSettings", null), e2([y()], fe.prototype, "_pePromise", void 0), e2([y({ readOnly: true })], fe.prototype, "typeSpecificPreconditionsReady", null), e2([y()], fe.prototype, "animation", null), e2([y({ type: m4 })], fe.prototype, "background", null), e2([y({ value: null, type: w2, dependsOn: ["state.id", "ready"] })], fe.prototype, "center", null), e2([y({ type: u7 })], fe.prototype, "constraints", null), e2([y({ value: null, type: w3, dependsOn: ["state.id", "ready"] })], fe.prototype, "extent", null), e2([y()], fe.prototype, "floors", void 0), e2([y({ type: c5 })], fe.prototype, "highlightOptions", void 0), e2([y({ readOnly: true })], fe.prototype, "inputManager", void 0), e2([y()], fe.prototype, "map", void 0), e2([y({ value: { top: 0, right: 0, bottom: 0, left: 0 }, cast: (e15) => ({ top: 0, right: 0, bottom: 0, left: 0, ...e15 }) })], fe.prototype, "padding", null), e2([y()], fe.prototype, "resizeAlign", void 0), e2([y({ readOnly: true, dependsOn: ["state.id"] })], fe.prototype, "resolution", null), e2([y({ value: 0, type: Number, dependsOn: ["state.id", "ready"] })], fe.prototype, "rotation", null), e2([y({ value: 0, type: Number, dependsOn: ["state.id", "ready"] })], fe.prototype, "scale", null), e2([y({ constructOnly: true })], fe.prototype, "spatialReferenceLocked", void 0), e2([y()], fe.prototype, "stationary", null), e2([y({ type: e8, readOnly: true })], fe.prototype, "timeline", void 0), e2([y({ readOnly: true })], fe.prototype, "type", void 0), e2([y({ readOnly: true })], fe.prototype, "updating", null), e2([y({ value: null, type: u, dependsOn: ["state.id", "ready"] })], fe.prototype, "viewpoint", null), e2([y({ value: -1, dependsOn: ["state.id", "ready"] })], fe.prototype, "zoom", null), e2([y({ readOnly: true })], fe.prototype, "navigating", null), e2([y({ type: p19 })], fe.prototype, "ui", void 0), fe = e2([a3("esri.views.MapView")], fe);
var _e = fe;
function ve(e15) {
  var _a, _b;
  const t24 = e15.getObjectId();
  return t24 ? `${((_a = e15.layer) == null ? void 0 : _a.uid) ?? ((_b = e15.sourceLayer) == null ? void 0 : _b.uid) ?? "MapView"}/${t24}` : `"MapView/${e15.uid}`;
}
function Ve(e15, i24, s18, r20, n24) {
  return (a29) => {
    if (a29 instanceof g3) {
      if (a29.layer === e15)
        n24 == null ? void 0 : n24();
      else {
        const t24 = e15.allLayerViews.find((e16) => e16.layer === a29.layer);
        t24 && (r20 == null ? void 0 : r20(t24));
      }
      s18(ve(a29));
    } else {
      const t24 = e15.allLayerViews.find((e16) => e16.layer === a29);
      t24 && i24(t24);
    }
  };
}
function Se(e15, t24) {
  if (e15)
    if (t2(e15))
      for (const i24 of e15)
        if (t2(i24))
          for (const e16 of i24)
            t24(e16);
        else
          t24(i24);
    else
      t24(e15);
}
function Te(e15) {
  return "esri.WebMap" === (e15 == null ? void 0 : e15.declaredClass);
}
export {
  _e as default
};
//# sourceMappingURL=@arcgis_core_views_MapView__js.js.map
