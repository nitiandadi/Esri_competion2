import {
  o
} from "./chunk-BRB2RXM6.js";
import {
  r as r2
} from "./chunk-RPEYGJNK.js";
import {
  i as i2
} from "./chunk-I73RJE3H.js";
import "./chunk-OWSDEANX.js";
import {
  He
} from "./chunk-UV5UXWQM.js";
import "./chunk-BDQPPSKZ.js";
import "./chunk-6ZICJ4HF.js";
import "./chunk-6N2I7LNE.js";
import "./chunk-ED3H44RD.js";
import "./chunk-C5E4KZMK.js";
import "./chunk-52DUL4NM.js";
import "./chunk-XWFAINWU.js";
import "./chunk-NNXHBH3J.js";
import "./chunk-2S24CH2D.js";
import "./chunk-WPPPGUVX.js";
import "./chunk-T2MHGZ6A.js";
import "./chunk-AETSRGIG.js";
import "./chunk-A2JI2KMD.js";
import "./chunk-4YR3FESC.js";
import "./chunk-UWJ3NERY.js";
import "./chunk-VEBWU4PY.js";
import "./chunk-AJY7W6KP.js";
import "./chunk-OO5RYTED.js";
import "./chunk-VGIPOM7J.js";
import "./chunk-YIJX6PSI.js";
import "./chunk-VV4LINSF.js";
import "./chunk-FDEQGLCU.js";
import "./chunk-MEYRAFYY.js";
import "./chunk-LSZOFED5.js";
import "./chunk-GHN5ZUCM.js";
import "./chunk-B4X5M3MB.js";
import "./chunk-CNIE5HLE.js";
import "./chunk-5VG7Q6SY.js";
import "./chunk-F3TBTVWI.js";
import "./chunk-N5RJDK35.js";
import "./chunk-W55YAZ7T.js";
import "./chunk-DGWYZRQH.js";
import "./chunk-J6WWDJVY.js";
import "./chunk-NBE2OON5.js";
import "./chunk-KJ3RR72T.js";
import "./chunk-ITOWSLB4.js";
import "./chunk-WIR7P2UT.js";
import "./chunk-4YJQ46TP.js";
import "./chunk-LC5BGIRA.js";
import "./chunk-ST7DNJJS.js";
import "./chunk-N44T6V5D.js";
import "./chunk-NCRISAUE.js";
import "./chunk-RDMK4OP2.js";
import "./chunk-3MIQEU54.js";
import "./chunk-37ZA7E6R.js";
import "./chunk-46X6GKZ5.js";
import {
  f,
  y
} from "./chunk-QUU4FGR5.js";
import "./chunk-2DDJXYOO.js";
import "./chunk-HM62IZSE.js";
import "./chunk-X2F6PX2U.js";
import "./chunk-424YCWGU.js";
import "./chunk-HFRO4PG3.js";
import "./chunk-MSSVX4MF.js";
import {
  a,
  c,
  i,
  u
} from "./chunk-6PRVLRT2.js";
import "./chunk-RSFKYEWD.js";
import {
  x as x2
} from "./chunk-GKH6NL2K.js";
import "./chunk-G6COWIFJ.js";
import "./chunk-QF2PMVYK.js";
import "./chunk-WZMBTZP2.js";
import "./chunk-UNUPXPO6.js";
import "./chunk-OF6BJKPA.js";
import "./chunk-BRWDGS6Y.js";
import "./chunk-L6EWR437.js";
import "./chunk-PELFA5QO.js";
import {
  d
} from "./chunk-HZKQDRDV.js";
import "./chunk-FAK3SJAD.js";
import "./chunk-2CREJO6O.js";
import "./chunk-POTXVYUT.js";
import "./chunk-YMSHUIGU.js";
import "./chunk-T5PSDOZP.js";
import "./chunk-REIXEATJ.js";
import "./chunk-CCAF47ZU.js";
import "./chunk-YEFLZ2OV.js";
import "./chunk-W42YI6TX.js";
import "./chunk-ICG3HFWD.js";
import "./chunk-CCNZLEW5.js";
import "./chunk-FGXNBIU5.js";
import "./chunk-EPJSBV4J.js";
import "./chunk-XP5MC636.js";
import "./chunk-MYKXVBXI.js";
import "./chunk-NUSLMJR5.js";
import "./chunk-QX5IKXT7.js";
import "./chunk-ONU3G4LF.js";
import "./chunk-P26WTKBK.js";
import "./chunk-WAN4YZSB.js";
import "./chunk-OKST3HK4.js";
import "./chunk-BHQVXYUV.js";
import "./chunk-DKH5QOVM.js";
import {
  b
} from "./chunk-X6SQQQR4.js";
import "./chunk-TNQLNDIQ.js";
import "./chunk-PSN7WPOI.js";
import "./chunk-FA3YUERM.js";
import "./chunk-LVRAFE6T.js";
import "./chunk-Y3KJPDCE.js";
import "./chunk-LSUFI7PR.js";
import "./chunk-BQXNXAP2.js";
import "./chunk-JT54I3AY.js";
import "./chunk-TNTTCGVB.js";
import "./chunk-DC3QI5ZE.js";
import "./chunk-EGHLQERQ.js";
import "./chunk-DHWQHVQB.js";
import "./chunk-4GJORDIY.js";
import "./chunk-FXMJJBXP.js";
import "./chunk-6YBCJ6DZ.js";
import "./chunk-5CMPUNQG.js";
import "./chunk-QJXSE36Y.js";
import "./chunk-WV4G3ROK.js";
import "./chunk-M3KO43BW.js";
import "./chunk-JT4JPYB6.js";
import "./chunk-SZO7ZKE4.js";
import "./chunk-7OAHPHOV.js";
import "./chunk-YMLMMCYX.js";
import "./chunk-I2U7UK6N.js";
import "./chunk-6TTVNN6M.js";
import "./chunk-3UXY2S4E.js";
import "./chunk-CPUYSXBP.js";
import "./chunk-MJFFZ3MM.js";
import "./chunk-7FMLQXIT.js";
import "./chunk-B6GJAETG.js";
import "./chunk-FC74MT6E.js";
import "./chunk-H2ENCYR3.js";
import "./chunk-SVHG5VY2.js";
import "./chunk-UADQEL54.js";
import "./chunk-FQ7L63IU.js";
import "./chunk-6K5VVUVI.js";
import "./chunk-S47644HM.js";
import "./chunk-QXPN4D5D.js";
import "./chunk-DLM7WQKI.js";
import "./chunk-7GTATSRF.js";
import "./chunk-MTJ2HM2W.js";
import "./chunk-PXVSWY3C.js";
import {
  E,
  x
} from "./chunk-QLY5H3XF.js";
import {
  s as s2,
  s2 as s3
} from "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import {
  s
} from "./chunk-MGJMBJDY.js";
import {
  r,
  t
} from "./chunk-WHB7G7RI.js";
import "./chunk-DFKQJ226.js";

// node_modules/@arcgis/core/layers/save/featureLayerUtils.js
var I = s2.getLogger("esri.layers.FeatureLayer");
var S = "Feature Service";
function g(e, t2) {
  return `Layer (title: ${e.title}, id: ${e.id}) of type '${e.declaredClass}' ${t2}`;
}
function j(e, r3) {
  if (r3.type !== S)
    throw new s3("feature-layer:portal-item-wrong-type", g(e, `should have portal item of type "${S}"`));
}
async function L(e) {
  if (await e.load(), f(e))
    throw new s3("feature-layer:save", g(e, "using an in-memory source cannot be saved to a portal item"));
}
function P(e, r3) {
  let a2 = (e.messages ?? []).filter(({ type: e2 }) => "error" === e2).map(({ name: e2, message: r4, details: a3 }) => new s3(e2, r4, a3));
  if ((r3 == null ? void 0 : r3.ignoreUnsupported) && (a2 = a2.filter(({ name: e2 }) => "layer:unsupported" !== e2 && "symbol:unsupported" !== e2 && "symbol-layer:unsupported" !== e2 && "property:unsupported" !== e2 && "url:unsupported" !== e2)), a2.length > 0)
    throw new s3("feature-layer:save", "Failed to save feature layer due to unsupported or invalid content. See 'details.errors' for more detailed information", { errors: a2 });
}
async function J(e, t2, r3) {
  "beforeSave" in e && "function" == typeof e.beforeSave && await e.beforeSave();
  const a2 = e.write({}, t2);
  return P(t2, r3), a2;
}
function N(e) {
  const { layer: t2, layerJSON: r3 } = e;
  return t2.isTable ? { layers: [], tables: [r3] } : { layers: [r3], tables: [] };
}
function O(e) {
  i(e, u.JSAPI), e.typeKeywords && (e.typeKeywords = e.typeKeywords.filter((e2, t2, r3) => r3.indexOf(e2) === t2));
}
function E2(e) {
  const r3 = e.portalItem;
  if (!r3)
    throw I.error("save: requires the portalItem property to be set"), new s3("feature-layer:portal-item-not-set", g(e, "requires the portalItem property to be set"));
  if (!r3.loaded)
    throw new s3("feature-layer:portal-item-not-loaded", g(e, "cannot be saved to a portal item that does not exist or is inaccessible"));
  j(e, r3);
}
async function T(e, t2) {
  return /\/\d+\/?$/.test(e.url ?? "") ? N(t2[0]) : $(e, t2);
}
async function $(e, t2) {
  const { layer: { url: r3, customParameters: a2, apiKey: o2 } } = t2[0];
  let s4 = await e.fetchData("json");
  s4 && null != s4.layers && null != s4.tables || (s4 = await x3(s4, { url: r3 ?? "", customParameters: a2, apiKey: o2 }, t2.map((e2) => e2.layer.layerId)));
  for (const l of t2)
    K(l.layer, l.layerJSON, s4);
  return s4;
}
async function x3(e, t2, r3) {
  var a2, o2;
  e || (e = {}), (a2 = e).layers || (a2.layers = []), (o2 = e).tables || (o2.tables = []);
  const { url: s4, customParameters: l, apiKey: i3 } = t2, { serviceJSON: n, layersJSON: u2 } = await r2(s4, { customParameters: l, apiKey: i3 }), c2 = A(e.layers, n.layers, r3), y2 = A(e.tables, n.tables, r3);
  e.layers = c2.itemResources, e.tables = y2.itemResources;
  const d2 = [...c2.added, ...y2.added], m = u2 ? [...u2.layers, ...u2.tables] : [];
  return await U(e, d2, s4, m), e;
}
function A(t2, r3, a2) {
  const o2 = s(t2, r3, (e, t3) => e.id === t3.id);
  t2 = t2.filter((e) => !o2.removed.some((t3) => t3.id === e.id));
  const s4 = o2.added.map(({ id: e }) => ({ id: e }));
  return s4.forEach(({ id: e }) => {
    t2.push({ id: e });
  }), { itemResources: t2, added: s4.filter(({ id: e }) => !a2.includes(e)) };
}
async function U(e, t2, r3, o2) {
  const s4 = t2.map(({ id: e2 }) => new He({ url: r3, layerId: e2, sourceJSON: o2.find(({ id: t3 }) => t3 === e2) }));
  await E(s4.map((e2) => e2.load())), s4.forEach((t3) => {
    const { layerId: r4, loaded: o3, defaultPopupTemplate: s5 } = t3;
    if (!o3 || t(s5))
      return;
    K(t3, { id: r4, popupInfo: s5.toJSON() }, e);
  });
}
function K(e, t2, r3) {
  e.isTable ? F(r3.tables, t2) : F(r3.layers, t2);
}
function F(e, t2) {
  if (!e)
    return;
  const r3 = e.findIndex(({ id: e2 }) => e2 === t2.id);
  -1 === r3 ? e.push(t2) : e[r3] = t2;
}
function R(e) {
  const { portalItem: t2 } = e;
  return y(e) && !e.dynamicDataSource && !!(t2 == null ? void 0 : t2.loaded) && t2.type === S;
}
async function D(e) {
  if (!(e == null ? void 0 : e.length))
    throw new s3("feature-layer-utils-saveall:missing-parameters", "'layers' array should contain at least one feature layer");
  await Promise.all(e.map((e2) => e2.load()));
  for (const o2 of e)
    if (!R(o2))
      throw new s3("feature-layer-utils-saveall:invalid-parameters", `'layers' array should only contain layers or tables in a feature service loaded from 'Feature Service' item. ${g(o2, "does not conform")}`, { layer: o2 });
  const r3 = e.map((e2) => e2.portalItem.id);
  if (new Set(r3).size > 1)
    throw new s3("feature-layer-utils-saveall:invalid-parameters", "All layers in the 'layers' array should be loaded from the same portal item");
  const a2 = e.map((e2) => e2.layerId);
  if (new Set(a2).size !== a2.length)
    throw new s3("feature-layer-utils-saveall:invalid-parameters", "'layers' array should contain only one instance each of layer or table in a feature service");
}
function q(e, t2) {
  var r3, a2;
  let o2 = x2.from(t2);
  return o2.id && (o2 = o2.clone(), o2.id = null), (r3 = o2).type ?? (r3.type = S), (a2 = o2).portal ?? (a2.portal = b.getDefault()), j(e, o2), o2;
}
async function z(e, t2) {
  const { url: r3, layerId: a2, title: s4, fullExtent: l, isTable: i3 } = e, n = d(r3), p = r(n) && "FeatureServer" === n.serverType;
  t2.url = p ? r3 : `${r3}/${a2}`, t2.title || (t2.title = s4), t2.extent = null, !i3 && r(l) && (t2.extent = await a(l)), c(t2, u.METADATA), c(t2, u.MULTI_LAYER), i(t2, u.SINGLE_LAYER), i3 && i(t2, u.TABLE), O(t2);
}
async function C(e, t2, r3) {
  var _a;
  const a2 = e.portal;
  await (a2 == null ? void 0 : a2.signIn()), await ((_a = a2 == null ? void 0 : a2.user) == null ? void 0 : _a.addItem({ item: e, data: t2, folder: r3 == null ? void 0 : r3.folder }));
}
var M = x(Y);
async function Y(e, t2) {
  await L(e), E2(e);
  const r3 = e.portalItem, a2 = o(r3), o2 = await J(e, a2, t2), s4 = await T(r3, [{ layer: e, layerJSON: o2 }]);
  return O(r3), await r3.update({ data: s4 }), i2(a2), r3;
}
var _ = x(async (e, t2) => {
  await D(e);
  const r3 = e[0].portalItem, a2 = o(r3), o2 = await Promise.all(e.map((e2) => J(e2, a2, t2))), s4 = await T(r3, e.map((e2, t3) => ({ layer: e2, layerJSON: o2[t3] })));
  return O(r3), await r3.update({ data: s4 }), await Promise.all(e.slice(1).map((e2) => e2.portalItem.reload())), i2(a2), r3.clone();
});
var B = x(G);
async function G(e, t2, r3) {
  await L(e);
  const a2 = q(e, t2), o2 = o(a2), s4 = N({ layer: e, layerJSON: await J(e, o2, r3) });
  return await z(e, a2), await C(a2, s4, r3), e.portalItem = a2, i2(o2), a2;
}
export {
  M as save,
  _ as saveAll,
  B as saveAs
};
//# sourceMappingURL=featureLayerUtils-HFCKBUVF.js.map
