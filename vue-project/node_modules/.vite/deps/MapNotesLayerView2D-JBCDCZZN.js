import {
  r as r2
} from "./chunk-ZCNUJEOE.js";
import {
  i
} from "./chunk-SN7ALKQM.js";
import "./chunk-7BLRSDCT.js";
import {
  ae
} from "./chunk-URZUJFLK.js";
import "./chunk-BZHMRRCA.js";
import "./chunk-3DGJISU2.js";
import "./chunk-PZFCQGRH.js";
import "./chunk-BXMNCRGS.js";
import "./chunk-CXZVU2FA.js";
import "./chunk-6OTYIG36.js";
import "./chunk-5JO7O74F.js";
import "./chunk-OAO74KEG.js";
import {
  f,
  u
} from "./chunk-QLNXKYD4.js";
import "./chunk-FYUZA5OZ.js";
import {
  h as h2
} from "./chunk-ZUM343MO.js";
import "./chunk-MPH4JD6M.js";
import "./chunk-CSXCA65Q.js";
import "./chunk-ABGFNHDH.js";
import "./chunk-FNX4STT3.js";
import "./chunk-MUKO5DYY.js";
import "./chunk-RSRGRQCE.js";
import "./chunk-KS5WYVQD.js";
import "./chunk-HCWIAQV3.js";
import "./chunk-B4YFY6OM.js";
import "./chunk-B5NSOHW4.js";
import "./chunk-DEBYWO5M.js";
import "./chunk-37BTU2M3.js";
import "./chunk-BS6YMIVT.js";
import "./chunk-E4XXNNS2.js";
import "./chunk-XTS6M5HJ.js";
import "./chunk-LH33CNCX.js";
import "./chunk-BEFJ4DTX.js";
import "./chunk-QXR6CWAU.js";
import "./chunk-XF6VFSZY.js";
import "./chunk-46UYDOF4.js";
import "./chunk-372CNO3V.js";
import "./chunk-BZHNKPDE.js";
import "./chunk-QE6RY3R6.js";
import "./chunk-B4N37FMV.js";
import "./chunk-VGTB7JUJ.js";
import "./chunk-QARJUBJV.js";
import "./chunk-M3JCSQZU.js";
import "./chunk-KKWP7B7A.js";
import "./chunk-Y5X2DTPS.js";
import "./chunk-YNAIRSAG.js";
import "./chunk-S7QT5QV2.js";
import "./chunk-DJBFAFOP.js";
import "./chunk-QCYWXXBM.js";
import "./chunk-CCKR7UFK.js";
import "./chunk-DNXRTHCH.js";
import "./chunk-OGEJGMAT.js";
import "./chunk-7BJCYBN2.js";
import "./chunk-VQUDNY75.js";
import "./chunk-QDIJO3T2.js";
import "./chunk-MLSUYO53.js";
import "./chunk-6WFGRBCZ.js";
import "./chunk-XNKMMOMK.js";
import "./chunk-Y5D76CBW.js";
import "./chunk-X6QOURMW.js";
import "./chunk-DBAHFVCB.js";
import "./chunk-E4NB2TTC.js";
import "./chunk-U4SHM5SM.js";
import "./chunk-KS2FU363.js";
import "./chunk-UPHB5F2K.js";
import "./chunk-SXVHYYSN.js";
import "./chunk-A7TOAPHC.js";
import "./chunk-EPKCQJY3.js";
import "./chunk-3JVZYYA3.js";
import "./chunk-MWIMWDJV.js";
import "./chunk-6D47PMZF.js";
import "./chunk-2KKFAUOD.js";
import "./chunk-M2DTCG2D.js";
import "./chunk-AVTBKAM2.js";
import "./chunk-VOUOLBXG.js";
import "./chunk-KGJHWKNE.js";
import "./chunk-X7NPMCZZ.js";
import "./chunk-CFTD44JM.js";
import "./chunk-MI7FJDLG.js";
import "./chunk-E4FSIE7C.js";
import "./chunk-HERKGCCA.js";
import "./chunk-SB6UPWEY.js";
import "./chunk-XTUZNPIG.js";
import "./chunk-6VXAAN5J.js";
import "./chunk-IN3HJEU7.js";
import "./chunk-KQSNRPAM.js";
import "./chunk-XS5XP6X5.js";
import "./chunk-RD6VLGGM.js";
import "./chunk-PVSQPGR7.js";
import "./chunk-2YEIG5KK.js";
import "./chunk-7HK5OJHH.js";
import "./chunk-7WIVOZQ6.js";
import "./chunk-RZLXFQKV.js";
import "./chunk-UBZEFQ76.js";
import "./chunk-D5KVII6M.js";
import "./chunk-G3ZCYHOR.js";
import "./chunk-PDQWP33P.js";
import "./chunk-5Z6OHN6Z.js";
import "./chunk-TKZTELJQ.js";
import "./chunk-BHKUW5DD.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-ZUCPDNAU.js";
import "./chunk-HNMSCBZJ.js";
import "./chunk-OIMP53SC.js";
import "./chunk-43D3HGVY.js";
import "./chunk-DZGHLWSV.js";
import "./chunk-P4V73ZOM.js";
import "./chunk-6UZRMITW.js";
import "./chunk-HSDJ4PR2.js";
import {
  a as a2,
  h,
  l
} from "./chunk-Y44VKGHM.js";
import "./chunk-WPXKVF3K.js";
import "./chunk-EXVE3AJP.js";
import "./chunk-Y74QPJ3T.js";
import "./chunk-OVUZXV2P.js";
import "./chunk-VTZGYKHD.js";
import "./chunk-MI3ZQEJV.js";
import "./chunk-HRIBADXS.js";
import {
  g
} from "./chunk-GPWY2LRL.js";
import "./chunk-3ZZKMNU2.js";
import "./chunk-SXUQWH7K.js";
import "./chunk-WAUZFAX7.js";
import "./chunk-3JPUCMWK.js";
import "./chunk-GCXFCVSM.js";
import "./chunk-CU2KO5NT.js";
import "./chunk-EXL23DF3.js";
import "./chunk-ECM7B2HV.js";
import "./chunk-L5JOPRWD.js";
import "./chunk-JYFMP3PO.js";
import "./chunk-CBAVHWPY.js";
import "./chunk-OJCBSPLX.js";
import "./chunk-EMRZKKP3.js";
import "./chunk-VWOAL3VX.js";
import "./chunk-SQBJ6KPL.js";
import "./chunk-MKMLHQNH.js";
import "./chunk-PHPHIDTF.js";
import "./chunk-P6SQPYDS.js";
import "./chunk-SFT755VT.js";
import "./chunk-GWFG4NRK.js";
import "./chunk-YXFIF2O5.js";
import "./chunk-E4MAG7OK.js";
import {
  j
} from "./chunk-YVQV6YXG.js";
import "./chunk-3KALZGFA.js";
import "./chunk-M47YTHQ5.js";
import "./chunk-OJKTPYH5.js";
import "./chunk-PEP3ZFMY.js";
import "./chunk-3U7SS7RC.js";
import "./chunk-6U5BQYRW.js";
import "./chunk-LUOENZ4F.js";
import "./chunk-QGRPG4XS.js";
import "./chunk-M73MMEC7.js";
import "./chunk-A5CTLI5A.js";
import "./chunk-WUBKNERF.js";
import "./chunk-VACYSSCT.js";
import "./chunk-4HXSKBAW.js";
import "./chunk-FFQG5TD2.js";
import "./chunk-DDRAFOUW.js";
import "./chunk-F4DUNBGT.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-GLDJLPWH.js";
import "./chunk-GMLVDTS4.js";
import "./chunk-G7CHVXDR.js";
import "./chunk-OAZLVZFS.js";
import "./chunk-CPSZPA6H.js";
import {
  a2 as a,
  e
} from "./chunk-Y54MR3BP.js";
import "./chunk-6VTYOWNK.js";
import "./chunk-JY6H6KI3.js";
import "./chunk-TTCQP5LX.js";
import "./chunk-C2WY74GI.js";
import "./chunk-MCOYI7PX.js";
import "./chunk-EL4OGCJC.js";
import "./chunk-XPATKIHO.js";
import "./chunk-MKHZ5X6F.js";
import {
  r,
  t
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/views/2d/layers/MapNotesLayerView2D.js
var f2 = "sublayers";
var m = "layerView";
var w = Object.freeze({ remove() {
}, pause() {
}, resume() {
} });
var y = class extends f(u) {
  constructor() {
    super(...arguments), this._highlightIds = /* @__PURE__ */ new Map(), this.container = new r2();
  }
  async fetchPopupFeatures(e2) {
    return Array.from(this.graphicsViews(), (i2) => i2.hitTest(e2).filter((e3) => !!e3.popupTemplate)).flat();
  }
  *graphicsViews() {
    r(this._graphicsViewsFeatureCollectionMap) ? yield* this._graphicsViewsFeatureCollectionMap.keys() : r(this._graphicsViews) ? yield* this._graphicsViews : yield* [];
  }
  async hitTest(e2, i2) {
    return Array.from(this.graphicsViews(), (i3) => {
      const s = i3.hitTest(e2);
      if (r(this._graphicsViewsFeatureCollectionMap)) {
        const e3 = this._graphicsViewsFeatureCollectionMap.get(i3);
        for (const i4 of s)
          !i4.popupTemplate && e3.popupTemplate && (i4.popupTemplate = e3.popupTemplate), i4.sourceLayer = i4.layer = this.layer;
      }
      return s;
    }).flat().map((i3) => ({ type: "graphic", graphic: i3, layer: this.layer, mapPoint: e2 }));
  }
  highlight(e2) {
    let r3;
    "number" == typeof e2 ? r3 = [e2] : e2 instanceof g ? r3 = [e2.uid] : Array.isArray(e2) && e2.length > 0 ? r3 = "number" == typeof e2[0] ? e2 : e2.map((e3) => e3 && e3.uid) : j.isCollection(e2) && (r3 = e2.map((e3) => e3 && e3.uid).toArray());
    const a3 = r3 == null ? void 0 : r3.filter(r);
    return (a3 == null ? void 0 : a3.length) ? (this._addHighlight(a3), { remove: () => {
      this._removeHighlight(a3);
    } }) : w;
  }
  update(e2) {
    for (const i2 of this.graphicsViews())
      i2.processUpdate(e2);
  }
  attach() {
    const e2 = this.view, i2 = () => this.requestUpdate(), s = this.layer.featureCollections;
    if (r(s) && s.length) {
      this._graphicsViewsFeatureCollectionMap = /* @__PURE__ */ new Map();
      for (const t2 of s) {
        const s2 = new i(this.view.featuresTilingScheme), r3 = new ae({ view: e2, graphics: t2.source, renderer: t2.renderer, requestUpdateCallback: i2, container: s2 });
        this._graphicsViewsFeatureCollectionMap.set(r3, t2), this.container.addChild(r3.container), this.addHandles([l(() => t2.visible, (e3) => r3.container.visible = e3, h), l(() => r3.updating, () => this.notifyChange("updating"), h)], m);
      }
      this._updateHighlight();
    } else
      r(this.layer.sublayers) && this.addHandles(a2(() => this.layer.sublayers, "change", () => this._createGraphicsViews(), { onListenerAdd: () => this._createGraphicsViews(), onListenerRemove: () => this._destroyGraphicsViews() }), f2);
  }
  detach() {
    this._destroyGraphicsViews(), this.removeHandles(f2);
  }
  moveStart() {
  }
  moveEnd() {
  }
  viewChange() {
    for (const e2 of this.graphicsViews())
      e2.viewChange();
  }
  isUpdating() {
    for (const e2 of this.graphicsViews())
      if (e2.updating)
        return true;
    return false;
  }
  _destroyGraphicsViews() {
    this.container.removeAllChildren(), this.removeHandles(m);
    for (const e2 of this.graphicsViews())
      e2.destroy();
    this._graphicsViews = null, this._graphicsViewsFeatureCollectionMap = null;
  }
  _createGraphicsViews() {
    if (this._destroyGraphicsViews(), t(this.layer.sublayers))
      return;
    const e2 = [], i2 = this.view, s = () => this.requestUpdate();
    for (const t2 of this.layer.sublayers) {
      const r3 = new h2(), h3 = new i(this.view.featuresTilingScheme);
      h3.fadeTransitionEnabled = true;
      const n = new ae({ view: i2, graphics: t2.graphics, requestUpdateCallback: s, container: h3 });
      this.addHandles([t2.on("graphic-update", n.graphicUpdateHandler), l(() => t2.visible, (e3) => n.container.visible = e3, h), l(() => n.updating, () => this.notifyChange("updating"), h)], m), r3.addChild(n.container), this.container.addChild(r3), e2.push(n);
    }
    this._graphicsViews = e2, this._updateHighlight();
  }
  _addHighlight(e2) {
    for (const i2 of e2)
      if (this._highlightIds.has(i2)) {
        const e3 = this._highlightIds.get(i2);
        this._highlightIds.set(i2, e3 + 1);
      } else
        this._highlightIds.set(i2, 1);
    this._updateHighlight();
  }
  _removeHighlight(e2) {
    for (const i2 of e2)
      if (this._highlightIds.has(i2)) {
        const e3 = this._highlightIds.get(i2) - 1;
        0 === e3 ? this._highlightIds.delete(i2) : this._highlightIds.set(i2, e3);
      }
    this._updateHighlight();
  }
  _updateHighlight() {
    const e2 = Array.from(this._highlightIds.keys());
    for (const i2 of this.graphicsViews())
      i2.setHighlight(e2);
  }
};
y = e([a("esri.views.2d.layers.MapNotesLayerView2D")], y);
var _ = y;
export {
  _ as default
};
//# sourceMappingURL=MapNotesLayerView2D-JBCDCZZN.js.map
