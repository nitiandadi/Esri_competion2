import {
  P
} from "./chunk-GUVJ2XOH.js";
import {
  t as t5,
  t2 as t6
} from "./chunk-SQ32YP2P.js";
import {
  C,
  X,
  i as i3,
  n as n3,
  t as t4
} from "./chunk-QJLUXU6I.js";
import {
  e as e5
} from "./chunk-2WS4DQ5K.js";
import {
  F,
  J,
  N,
  S as S2
} from "./chunk-KS4KMM5S.js";
import {
  r as r2
} from "./chunk-BITXW4TL.js";
import {
  W,
  e2 as e3,
  e3 as e4,
  t2 as t3
} from "./chunk-VPGE46JA.js";
import {
  f as f2,
  n2,
  v,
  w as w2
} from "./chunk-2DA2JOWA.js";
import {
  b as b2
} from "./chunk-Q3FHJWKB.js";
import {
  s as s4
} from "./chunk-JLHQIHZ7.js";
import {
  U as U2,
  a as a3,
  f,
  h,
  j as j2,
  l
} from "./chunk-FXMJJBXP.js";
import {
  g
} from "./chunk-MS6YQPPG.js";
import {
  S2 as S
} from "./chunk-CRF4O3Y3.js";
import {
  a as a4,
  a2 as a5,
  c5 as c
} from "./chunk-CNEENAOZ.js";
import {
  j
} from "./chunk-SZO7ZKE4.js";
import {
  n
} from "./chunk-FQ7L63IU.js";
import {
  i as i2
} from "./chunk-WATRS3LJ.js";
import {
  R3 as R,
  w
} from "./chunk-H2ENCYR3.js";
import {
  s as s3
} from "./chunk-S47644HM.js";
import {
  a2,
  e as e2,
  t2,
  y3 as y
} from "./chunk-7GTATSRF.js";
import {
  U,
  b,
  i
} from "./chunk-QLY5H3XF.js";
import {
  s,
  s2
} from "./chunk-UG2OEDEE.js";
import {
  a,
  e,
  o,
  r,
  t
} from "./chunk-WHB7G7RI.js";

// node_modules/@arcgis/core/widgets/support/AnchorElementViewModel.js
var l2;
var d = Symbol("anchorHandles");
var m = class extends n.EventedAccessor {
  constructor(e7) {
    super(e7), this[l2] = new t2(), this.location = null, this.screenLocationEnabled = false, this.view = null, this[d].add([f(() => o(this.screenLocationEnabled ? this.view : null, (e8) => [e8.size, "3d" === e8.type ? e8.camera : e8.viewpoint]), () => this.notifyChange("screenLocation")), l(() => this.screenLocation, (e8, o5) => {
      r(e8) && r(o5) && this.emit("view-change");
    })]);
  }
  destroy() {
    this.view = null, this[d] = a(this[d]);
  }
  get screenLocation() {
    var _a;
    const { location: e7, view: o5, screenLocationEnabled: t11 } = this;
    return t11 && r(e7) && r(o5) && o5.ready ? (_a = o5.toScreen) == null ? void 0 : _a.call(o5, e7) : null;
  }
};
l2 = d, e2([y()], m.prototype, "location", void 0), e2([y()], m.prototype, "screenLocation", null), e2([y()], m.prototype, "screenLocationEnabled", void 0), e2([y()], m.prototype, "view", void 0), m = e2([a2("esri.widgets.support.AnchorElementViewModel")], m);
var h2 = m;

// node_modules/@arcgis/core/widgets/Spinner/SpinnerViewModel.js
var t7 = "esri.widgets.CompassViewModel";
var p = class extends h2 {
  constructor(s6) {
    super(s6), this.visible = false;
  }
};
e2([y()], p.prototype, "visible", void 0), p = e2([a2(t7)], p);
var c2 = p;

// node_modules/@arcgis/core/widgets/Spinner.js
var c3 = "esri-spinner";
var p2 = { base: c3, spinnerStart: `${c3}--start`, spinnerFinish: `${c3}--finish` };
var h3 = class extends W {
  constructor(i6, e7) {
    super(i6, e7), this._animationDelay = 500, this._animationPromise = null, this.viewModel = new c2();
  }
  initialize() {
    this.addHandles(l(() => this.visible, (i6) => this._visibleChange(i6)));
  }
  destroy() {
    this._animationPromise = null;
  }
  get location() {
    return this.viewModel.location;
  }
  set location(i6) {
    this.viewModel.location = i6;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(i6) {
    this.viewModel.view = i6;
  }
  get visible() {
    return this.viewModel.visible;
  }
  set visible(i6) {
    this.viewModel.visible = i6;
  }
  show(i6) {
    const { location: e7, promise: t11 } = i6 ?? {};
    e7 && (this.viewModel.location = e7), this.visible = true;
    const s6 = () => this.hide();
    t11 && t11.catch(() => {
    }).then(s6);
  }
  hide() {
    this.visible = false;
  }
  render() {
    const { visible: i6 } = this, { screenLocation: e7 } = this.viewModel, t11 = !!e7, s6 = i6 && t11, o5 = !i6 && t11, r4 = { [p2.spinnerStart]: s6, [p2.spinnerFinish]: o5 }, n5 = this._getPositionStyles();
    return n2("div", { class: this.classes(p2.base, r4), styles: n5 });
  }
  _visibleChange(i6) {
    if (i6)
      return void (this.viewModel.screenLocationEnabled = true);
    const e7 = U(this._animationDelay);
    this._animationPromise = e7, e7.catch(() => {
    }).then(() => {
      this._animationPromise === e7 && (this.viewModel.screenLocationEnabled = false, this._animationPromise = null);
    });
  }
  _getPositionStyles() {
    const { screenLocation: i6, view: t11 } = this.viewModel;
    if (t(t11) || t(i6))
      return {};
    const { padding: s6 } = t11;
    return { left: i6.x - s6.left + "px", top: i6.y - s6.top + "px" };
  }
};
e2([y()], h3.prototype, "location", null), e2([y()], h3.prototype, "view", null), e2([y({ type: c2 })], h3.prototype, "viewModel", void 0), e2([y()], h3.prototype, "visible", null), h3 = e2([a2("esri.widgets.Spinner")], h3);
var m2 = h3;

// node_modules/@arcgis/core/widgets/Popup/actions.js
var s5 = { iconZoom: "esri-icon-zoom-in-magnifying-glass", iconTrash: "esri-icon-trash", iconBrowseClusteredFeatures: "esri-icon-table" };
var o2 = new a4({ id: "zoom-to-feature", title: "{messages.zoom}", className: s5.iconZoom });
var t8 = new a4({ id: "remove-selected-feature", title: "{messages.remove}", className: s5.iconTrash });
var r3 = new a4({ id: "zoom-to-clustered-features", title: "{messages.zoom}", className: s5.iconZoom });
var i4 = new a4({ id: "browse-clustered-features", title: "{messages.browseClusteredFeatures}", className: s5.iconBrowseClusteredFeatures });

// node_modules/@arcgis/core/widgets/Popup/actionUtils.js
var u = "esri.widgets.Popup.PopupViewModel";
var l3 = s.getLogger(u);
var d2 = (t11) => {
  const { event: r4, view: o5 } = t11, { action: u3 } = r4, l5 = o5 && o5.popup;
  if (!u3)
    return Promise.reject(new s2("trigger-action:missing-arguments", "Event has no action"));
  if (!l5)
    return Promise.reject(new s2("trigger-action:missing-arguments", "view.popup is missing"));
  const { disabled: d3, id: g3 } = u3;
  if (!g3)
    return Promise.reject(new s2("trigger-action:invalid-action", "action.id is missing"));
  if (d3)
    return Promise.reject(new s2("trigger-action:invalid-action", "Action is disabled"));
  if (g3 === o2.id)
    return p3(l5.viewModel).catch(b);
  if (g3 === r3.id)
    return m3(l5.viewModel);
  if (g3 === i4.id)
    return l5.featureMenuOpen = !l5.featureMenuOpen, l5.viewModel.browseClusterEnabled = !l5.viewModel.browseClusterEnabled, Promise.resolve();
  if (l5.viewModel.browseClusterEnabled = false, g3 === t8.id) {
    l5.close();
    const { selectedFeature: t12 } = l5;
    if (!t12)
      return Promise.reject(new s2(`trigger-action:${t8.id}`, "selectedFeature is required", { selectedFeature: t12 }));
    const { sourceLayer: r5 } = t12;
    return r5 ? r5.remove(t12) : o5.graphics.remove(t12), Promise.resolve();
  }
  return Promise.resolve();
};
function g2(e7) {
  const { selectedFeature: t11, location: r4, view: o5 } = e7;
  if (!o5)
    return null;
  if ("3d" === o5.type)
    return t11 ?? r4 ?? null;
  return e7.get("selectedFeature.geometry") || r4;
}
function w3(e7) {
  var _a, _b;
  return !!e7 && e7.isAggregate && "cluster" === ((_b = (_a = e7.sourceLayer) == null ? void 0 : _a.featureReduction) == null ? void 0 : _b.type);
}
async function f3(e7, t11) {
  if ("3d" !== (t11 == null ? void 0 : t11.type) || !e7 || "esri.Graphic" !== e7.declaredClass)
    return true;
  const r4 = t11.getViewForGraphic(e7);
  if (r4 && "whenGraphicBounds" in r4) {
    let t12;
    try {
      t12 = await r4.whenGraphicBounds(e7, { useViewElevation: true });
    } catch (o5) {
    }
    return !t12 || !t12.boundingBox || t12.boundingBox[0] === t12.boundingBox[3] && t12.boundingBox[1] === t12.boundingBox[4] && t12.boundingBox[2] === t12.boundingBox[5];
  }
  return true;
}
async function p3(t11) {
  var _a;
  const { location: o5, selectedFeature: i6, view: a6, zoomFactor: s6 } = t11, c5 = g2(t11);
  if (!a6 || !c5) {
    const t12 = new s2("zoom-to:invalid-target-or-view", "Cannot zoom to location without a target and view.", { target: c5, view: a6 });
    throw l3.error(t12), t12;
  }
  const u3 = a6.scale / s6, d3 = (_a = t11.selectedFeature) == null ? void 0 : _a.geometry, w4 = d3 ?? o5, p7 = r(w4) && "point" === w4.type && await f3(i6, a6);
  o2.active = true, o2.disabled = true;
  try {
    await t11.zoomTo({ target: { target: c5, scale: p7 ? u3 : void 0 } });
  } catch (m4) {
    const t12 = new s2("zoom-to:invalid-graphic", "Could not zoom to the location of the graphic.", { graphic: i6 });
    l3.error(t12);
  } finally {
    o2.active = false, o2.disabled = false, t11.zoomToLocation = null, p7 && (t11.location = w4);
  }
}
async function m3(t11) {
  const { selectedFeature: r4, view: o5 } = t11;
  if ("2d" !== (o5 == null ? void 0 : o5.type)) {
    const t12 = new s2("zoomToCluster:invalid-view", "View must be 2d MapView.", { view: o5 });
    throw l3.error(t12), t12;
  }
  if (!r4 || !w3(r4)) {
    const t12 = new s2("zoomToCluster:invalid-selectedFeature", "Selected feature must represent an aggregate/cluster graphic.", { selectedFeature: r4 });
    throw l3.error(t12), t12;
  }
  const [i6, n5] = await h4(o5, r4);
  r3.active = true, r3.disabled = true;
  const { extent: s6 } = await i6.queryExtent(n5);
  await t11.zoomTo({ target: s6 }), r3.active = false, r3.disabled = false;
}
async function v2(e7) {
  const { view: t11, selectedFeature: r4 } = e7;
  if (!t11 || !r4)
    return;
  const [o5, i6] = await h4(t11, r4), { extent: n5 } = await o5.queryExtent(i6);
  e7.selectedClusterBoundaryFeature.geometry = n5, t11.graphics.add(e7.selectedClusterBoundaryFeature);
}
async function y2(e7) {
  var _a;
  const { selectedFeature: t11, view: r4 } = e7;
  if (!r4 || !t11)
    return;
  const [o5, i6] = await h4(r4, t11);
  i4.active = true, i4.disabled = true;
  const { features: n5 } = await o5.queryFeatures(i6);
  i4.active = false, i4.disabled = false, (_a = r4.popup) == null ? void 0 : _a.open({ features: [t11].concat(n5), featureMenuOpen: true });
}
async function h4(e7, t11) {
  const r4 = await e7.whenLayerView(t11.sourceLayer), o5 = r4.createQuery(), i6 = t11.getObjectId();
  return o5.aggregateIds = null != i6 ? [i6] : [], [r4, o5];
}
function b3(e7) {
  const t11 = e7.features.filter((e8) => w3(e8));
  t11.length && (e7.features = t11);
}
function F2(e7) {
  var _a;
  if (t(e7))
    return null;
  switch (e7.type) {
    case "point":
      return e7;
    case "extent":
      return e7.center;
    case "polygon":
      return e7.centroid;
    case "multipoint":
    case "polyline":
      return (_a = e7.extent) == null ? void 0 : _a.center;
    default:
      return null;
  }
}

// node_modules/@arcgis/core/widgets/Popup/css.js
var e6 = "esri-popup";
var t9 = `${e6}__header`;
var o3 = `${e6}--is-docked`;
var n4 = { calciteThemeLight: "calcite-mode-light", calciteThemeDark: "calcite-mode-dark", iconLeftTriangleArrow: "esri-icon-left-triangle-arrow", iconRightTriangleArrow: "esri-icon-right-triangle-arrow", iconDockToTop: "esri-icon-maximize", iconDockToBottom: "esri-icon-dock-bottom", iconDockToLeft: "esri-icon-dock-left", iconDockToRight: "esri-icon-dock-right", iconClose: "esri-icon-close", iconUndock: "esri-icon-minimize", iconCheckMark: "esri-icon-check-mark", iconLoading: "esri-icon-loading-indicator", iconDefaultAction: "esri-icon-default-action", iconActionsMenu: "esri-icon-handle-horizontal", rotating: "esri-rotating", base: e6, widget: "esri-widget", main: `${e6}__main-container`, loadingContainer: `${e6}__loading-container`, isCollapsible: `${e6}--is-collapsible`, isCollapsed: `${e6}--is-collapsed`, shadow: `${e6}--shadow`, isDocked: o3, isDockedTopLeft: `${o3}-top-left`, isDockedTopCenter: `${o3}-top-center`, isDockedTopRight: `${o3}-top-right`, isDockedBottomLeft: `${o3}-bottom-left`, isDockedBottomCenter: `${o3}-bottom-center`, isDockedBottomRight: `${o3}-bottom-right`, alignTopCenter: `${e6}--aligned-top-center`, alignBottomCenter: `${e6}--aligned-bottom-center`, alignTopLeft: `${e6}--aligned-top-left`, alignBottomLeft: `${e6}--aligned-bottom-left`, alignTopRight: `${e6}--aligned-top-right`, alignBottomRight: `${e6}--aligned-bottom-right`, isFeatureMenuOpen: `${e6}--feature-menu-open`, isActionsMenuOpen: `${e6}--actions-menu-open`, hasFeatureUpdated: `${e6}--feature-updated`, header: t9, headerButtons: `${t9}-buttons`, headerContainer: `${t9}-container`, headerContainerButton: `${t9}-container--button`, headerTitle: `${t9}-title`, content: `${e6}__content`, contentHasFlows: "esri-content--has-flows", contentFlowItem: "esri-content__flow-item", footer: `${e6}__footer`, footerHasPagination: `${e6}__footer--has-pagination`, footerHasActions: `${e6}__footer--has-actions`, footerHasActionsMenu: `${e6}__footer--has-actions-menu`, button: `${e6}__button`, buttonDisabled: `${e6}__button--disabled`, buttonDock: `${e6}__button--dock`, icon: `${e6}__icon`, iconDock: `${e6}__icon--dock-icon`, inlineActionsContainer: `${e6}__inline-actions-container`, actionsMenuButton: `${e6}__actions-menu-button`, actions: `${e6}__actions`, action: `${e6}__action`, actionImage: `${e6}__action-image`, actionText: `${e6}__action-text`, actionToggle: `${e6}__action-toggle`, actionToggleOn: `${e6}__action-toggle--on`, actionExit: `${e6}__action--exit`, actionSelectFeature: `${e6}__action--select-feature`, pointer: `${e6}__pointer`, pointerDirection: `${e6}__pointer-direction`, navigation: `${e6}__navigation`, paginationPrevious: `${e6}__pagination-previous`, paginationNext: `${e6}__pagination-next`, paginationPreviousIconLTR: `${e6}__pagination-previous-icon`, paginationPreviousIconRTL: `${e6}__pagination-previous-icon--rtl`, paginationNextIconLTR: `${e6}__pagination-next-icon`, paginationNextIconRTL: `${e6}__pagination-next-icon--rtl`, featureMenu: `${e6}__feature-menu`, featureMenuList: `${e6}__feature-menu-list`, featureMenuItem: `${e6}__feature-menu-item`, featureMenuViewport: `${e6}__feature-menu-viewport`, featureMenuHeader: `${e6}__feature-menu-header`, featureMenuNote: `${e6}__feature-menu-note`, featureMenuSelected: `${e6}__feature-menu-item--selected`, featureMenuButton: `${e6}__feature-menu-button`, featureMenuTitle: `${e6}__feature-menu-title`, featureMenuObserver: `${e6}__feature-menu-observer`, featureMenuLoader: `${e6}__feature-menu-loader`, collapseButton: `${e6}__collapse-button`, collapseIcon: `${e6}__collapse-icon` };

// node_modules/@arcgis/core/layers/LayerConstants.js
var o4 = "OBJECTID";

// node_modules/@arcgis/core/widgets/Legend/styles/support/relationshipUtils.js
var b4 = "esri-relationship-ramp";
var u2 = `${b4}--diamond`;
var c4 = `${b4}--square`;
var p5 = { diamondContainer: `${u2}__container`, diamondLeftCol: `${u2}__left-column`, diamondRightCol: `${u2}__right-column`, diamondMidCol: `${u2}__middle-column`, diamondMidColLabel: `${u2}__middle-column--label`, diamondMidColRamp: `${u2}__middle-column--ramp`, squareTable: `${c4}__table`, squareTableRow: `${c4}__table-row`, squareTableCell: `${c4}__table-cell`, squareTableLabel: `${c4}__table-label`, squareTableLabelLeftBottom: `${c4}__table-label--left-bottom`, squareTableLabelRightBottom: `${c4}__table-label--right-bottom`, squareTableLabelLeftTop: `${c4}__table-label--left-top`, squareTableLabelRightTop: `${c4}__table-label--right-top` };

// node_modules/@arcgis/core/symbols/support/symbolUtils.js
function j4(e7) {
  return e7 && "opacity" in e7 ? e7.opacity * j4(e7.parent) : 1;
}
async function R2(i6, s6) {
  if (!i6)
    return;
  const o5 = i6.sourceLayer, n5 = (r(s6) && s6.useSourceLayer ? o5 : i6.layer) ?? o5, a6 = j4(n5);
  if (r(i6.symbol) && (!r(s6) || true !== s6.ignoreGraphicSymbol)) {
    const t11 = "web-style" === i6.symbol.type ? await F(i6.symbol, { ...s6, cache: r(s6) ? s6.webStyleCache : null }) : i6.symbol.clone();
    return S2(t11, null, a6), t11;
  }
  const h7 = (r(s6) ? s6.renderer : null) ?? (n5 && "renderer" in n5 ? n5.renderer : null);
  let y4 = h7 && "getSymbolAsync" in h7 ? await h7.getSymbolAsync(i6, s6) : null;
  if (!y4)
    return;
  if (y4 = "web-style" === y4.type ? await y4.fetchSymbol({ ...s6, cache: r(s6) ? s6.webStyleCache : null }) : y4.clone(), !(h7 && "visualVariables" in h7 && h7.visualVariables && h7.visualVariables.length))
    return S2(y4, null, a6), y4;
  if ("arcadeRequiredForVisualVariables" in h7 && h7.arcadeRequiredForVisualVariables && (t(s6) || t(s6.arcade))) {
    const e7 = { ...e(s6) };
    e7.arcade = await i2(), s6 = e7;
  }
  const d3 = await import("./visualVariableUtils-4JO3L6WA.js"), m4 = [], g3 = [], b5 = [], w4 = [];
  for (const e7 of h7.visualVariables)
    switch (e7.type) {
      case "color":
        m4.push(e7);
        break;
      case "opacity":
        g3.push(e7);
        break;
      case "rotation":
        w4.push(e7);
        break;
      case "size":
        e7.target || b5.push(e7);
    }
  const S5 = !!m4.length && m4[m4.length - 1], v3 = S5 ? d3.getColor(S5, i6, s6) : null, V3 = !!g3.length && g3[g3.length - 1];
  let x = V3 ? d3.getOpacity(V3, i6, s6) : null;
  if (null != a6 && (x = null != x ? x * a6 : a6), S2(y4, v3, x), b5.length) {
    const e7 = d3.getAllSizes(b5, i6, s6);
    await J(y4, e7);
  }
  for (const e7 of w4)
    N(y4, d3.getRotationAngle(e7, i6, s6), e7.axis);
  return y4;
}

// node_modules/@arcgis/core/widgets/Popup/PopupViewModel.js
var B = j.ofType({ key: "type", defaultKeyValue: "button", base: c, typeMap: { button: a4, toggle: a5 } });
var R3 = () => [o2.clone()];
var G = () => [r3.clone(), i4.clone()];
var z = class extends t6(h2) {
  get isLoadingFeature() {
    return this.featureViewModels.some((e7) => e7.waitingForContent);
  }
  constructor(e7) {
    super(e7), this._handles = new t2(), this._pendingPromises = /* @__PURE__ */ new Set(), this._fetchFeaturesController = null, this._highlightSelectedFeaturePromise = null, this._highlightActiveFeaturePromise = null, this._selectedClusterFeature = null, this.featurePage = null, this.actions = new B(), this.activeFeature = null, this.defaultPopupTemplateEnabled = false, this.autoCloseEnabled = false, this.autoOpenEnabled = true, this.browseClusterEnabled = false, this.content = null, this.featuresPerPage = 20, this.featureViewModelAbilities = null, this.featureViewModels = [], this.highlightEnabled = true, this.includeDefaultActions = true, this.selectedClusterBoundaryFeature = new g({ symbol: new S({ outline: { width: 1.5, color: "cyan" }, style: "none" }) }), this.title = null, this.updateLocationEnabled = false, this.view = null, this.visible = false, this.zoomFactor = 4, this.zoomToLocation = null;
  }
  initialize() {
    this._handles.add([l(() => [this.autoOpenEnabled, this.view], () => this._autoOpenEnabledChange()), this.on("view-change", () => this._autoClose()), l(() => [this.highlightEnabled, this.selectedFeature, this.visible, this.view], () => this._highlightSelectedFeature()), l(() => [this.highlightEnabled, this.activeFeature, this.visible, this.view], () => this._highlightActiveFeature()), l(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.animation) == null ? void 0 : _b.state;
    }, (e7) => this._animationStateChange(e7)), l(() => this.location, (e7) => this._locationChange(e7)), l(() => this.selectedFeature, (e7) => this._selectedFeatureChange(e7)), l(() => [this.selectedFeatureIndex, this.featureCount, this.featuresPerPage], () => this._selectedFeatureIndexChange()), l(() => [this.featurePage, this.selectedFeatureIndex, this.featureCount, this.featuresPerPage, this.featureViewModels], () => this._setGraphicOnFeatureViewModels()), l(() => this.featureViewModels, () => this._featureViewModelsChange()), this.on("trigger-action", (e7) => d2({ event: e7, view: this.view })), f(() => !this.waitingForResult, () => this._waitingForResultChange(), U2), l(() => {
      var _a, _b;
      return [this.features, (_a = this.view) == null ? void 0 : _a.map, (_b = this.view) == null ? void 0 : _b.spatialReference];
    }, () => this._updateFeatureVMs()), l(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.scale;
    }, () => this._viewScaleChange()), f(() => !this.visible, () => this.browseClusterEnabled = false), l(() => this.browseClusterEnabled, (e7) => e7 ? this.enableClusterBrowsing() : this.disableClusterBrowsing())]);
  }
  destroy() {
    this._cancelFetchingFeatures(), this._handles.destroy(), this._pendingPromises.clear(), this.browseClusterEnabled = false, this.view = null;
  }
  get active() {
    return !(!this.visible || this.waitingForResult);
  }
  get allActions() {
    const e7 = this._get("allActions") || new B();
    e7.removeAll();
    const { actions: t11, defaultActions: s6, defaultPopupTemplateEnabled: i6, includeDefaultActions: r4, selectedFeature: o5 } = this, a6 = r4 ? s6.concat(t11) : t11, n5 = o5 && ("function" == typeof o5.getEffectivePopupTemplate && o5.getEffectivePopupTemplate(i6) || o5.popupTemplate), l5 = n5 && n5.actions, h7 = n5 && n5.overwriteActions ? l5 : l5 ? l5.concat(a6) : a6;
    return h7 && h7.filter(Boolean).forEach((t12) => e7.add(t12)), e7;
  }
  get defaultActions() {
    const e7 = this._get("defaultActions") || new B();
    return e7.removeAll(), e7.addMany(w3(this.selectedFeature) ? G() : R3()), e7;
  }
  get featureCount() {
    return this.features.length;
  }
  get features() {
    return this._get("features") || [];
  }
  set features(e7) {
    const t11 = e7 || [];
    this._set("features", t11);
    const { pendingPromisesCount: s6, promiseCount: i6, selectedFeatureIndex: r4 } = this, o5 = i6 && t11.length;
    o5 && s6 && -1 === r4 ? this.selectedFeatureIndex = 0 : o5 && -1 !== r4 || (this.selectedFeatureIndex = t11.length ? 0 : -1);
  }
  get location() {
    return this._get("location") || null;
  }
  set location(e7) {
    var _a, _b, _c;
    let t11 = e7;
    const s6 = (_b = (_a = this.view) == null ? void 0 : _a.spatialReference) == null ? void 0 : _b.isWebMercator;
    e7 && ((_c = e7 == null ? void 0 : e7.spatialReference) == null ? void 0 : _c.isWGS84) && s6 && (t11 = R(e7)), this._set("location", t11);
  }
  get pendingPromisesCount() {
    return this._pendingPromises.size;
  }
  get waitingForResult() {
    return !(!(!!this._fetchFeaturesController || this.pendingPromisesCount > 0) || 0 !== this.featureCount);
  }
  get promiseCount() {
    return this.promises.length;
  }
  get promises() {
    return this._get("promises") || [];
  }
  set promises(e7) {
    if (this._pendingPromises.clear(), this.features = [], !Array.isArray(e7) || !e7.length)
      return this._set("promises", []), void this.notifyChange("pendingPromisesCount");
    this._set("promises", e7), (e7 = e7.slice(0)).forEach((e8) => {
      this._pendingPromises.add(e8);
      const t11 = (t12) => {
        this._pendingPromises.has(e8) && this._updateFeatures(t12), this._updatePendingPromises(e8);
      }, s6 = () => this._updatePendingPromises(e8);
      e8.then(t11, s6);
    }), this.notifyChange("pendingPromisesCount");
  }
  get selectedFeature() {
    const { features: e7, selectedFeatureIndex: t11 } = this;
    if (-1 === t11)
      return null;
    return e7[t11] || null;
  }
  get selectedFeatureIndex() {
    const e7 = this._get("selectedFeatureIndex");
    return "number" == typeof e7 ? e7 : -1;
  }
  set selectedFeatureIndex(e7) {
    const { featureCount: t11 } = this;
    e7 = isNaN(e7) || e7 < -1 || !t11 ? -1 : (e7 + t11) % t11, this.activeFeature = null, this._set("selectedFeatureIndex", e7);
  }
  get selectedFeatureViewModel() {
    return this.featureViewModels[this.selectedFeatureIndex] || null;
  }
  get state() {
    return this.get("view.ready") ? "ready" : "disabled";
  }
  centerAtLocation() {
    const { view: e7 } = this, t11 = g2(this);
    return t11 && e7 ? this.callGoTo({ target: { target: t11, scale: e7.scale } }) : Promise.reject(new s2("center-at-location:invalid-target-or-view", "Cannot center at a location without a target and view.", { target: t11, view: e7 }));
  }
  zoomTo(e7) {
    return this.callGoTo(e7);
  }
  clear() {
    this.set({ promises: [], features: [], content: null, title: null, location: null, activeFeature: null });
  }
  fetchFeatures(e7, t11) {
    const { view: s6 } = this;
    if (!s6 || !e7)
      throw new s2("fetch-features:invalid-screenpoint-or-view", "Cannot fetch features without a screenPoint and view.", { screenPoint: e7, view: s6 });
    return s6.fetchPopupFeatures(e7, { event: t11 && t11.event, defaultPopupTemplateEnabled: this.defaultPopupTemplateEnabled, signal: t11 && t11.signal });
  }
  open(e7) {
    const t11 = { updateLocationEnabled: false, promises: [], fetchFeatures: false, ...e7, visible: true }, { fetchFeatures: s6 } = t11;
    delete t11.fetchFeatures, s6 && this._setFetchFeaturesPromises(t11.location);
    const i6 = ["actionsMenuOpen", "collapsed", "featureMenuOpen"];
    for (const r4 of i6)
      delete t11[r4];
    this.set(t11);
  }
  triggerAction(e7) {
    const t11 = this.allActions.getItemAt(e7);
    t11 && !t11.disabled && this.emit("trigger-action", { action: t11 });
  }
  next() {
    return this.selectedFeatureIndex = this.selectedFeatureIndex + 1, this;
  }
  previous() {
    return this.selectedFeatureIndex = this.selectedFeatureIndex - 1, this;
  }
  disableClusterBrowsing() {
    b3(this), this._clearBrowsedClusterGraphics();
  }
  async enableClusterBrowsing() {
    const { view: e7, selectedFeature: t11 } = this;
    "2d" === (e7 == null ? void 0 : e7.type) ? w3(t11) ? (await v2(this), await y2(this)) : s.getLogger(this.declaredClass).warn("enableClusterBrowsing:invalid-selectedFeature: Selected feature must represent an aggregate/cluster graphic.", t11) : s.getLogger(this.declaredClass).warn("enableClusterBrowsing:invalid-view: View must be 2d MapView.", t11);
  }
  _animationStateChange(e7) {
    this.zoomToLocation || (o2.disabled = "waiting-for-target" === e7);
  }
  _clearBrowsedClusterGraphics() {
    var _a;
    const e7 = (_a = this.view) == null ? void 0 : _a.graphics;
    e7 && (e7.remove(this.selectedClusterBoundaryFeature), this._selectedClusterFeature && e7.remove(this._selectedClusterFeature)), this._selectedClusterFeature = null, this.selectedClusterBoundaryFeature.geometry = null;
  }
  _viewScaleChange() {
    if (w3(this.selectedFeature))
      return this.browseClusterEnabled = false, this.visible = false, void this.clear();
    this.browseClusterEnabled && (this.features = this.selectedFeature ? [this.selectedFeature] : []);
  }
  _locationChange(e7) {
    const { selectedFeature: t11, updateLocationEnabled: s6 } = this;
    s6 && e7 && (!t11 || t11.geometry) && this.centerAtLocation();
  }
  _selectedFeatureIndexChange() {
    this.featurePage = this.featureCount > 1 ? Math.floor(this.selectedFeatureIndex / this.featuresPerPage) + 1 : null;
  }
  _featureViewModelsChange() {
    this.featurePage = this.featureCount > 1 ? 1 : null;
  }
  _setGraphicOnFeatureViewModels() {
    const { features: e7, featureCount: t11, featurePage: s6, featuresPerPage: i6, featureViewModels: r4 } = this;
    if (null === s6)
      return;
    const o5 = ((s6 - 1) * i6 + t11) % t11, a6 = o5 + i6;
    r4.slice(o5, a6).forEach((t12, s7) => {
      t12 && !t12.graphic && (t12.graphic = e7[o5 + s7]);
    });
  }
  async _selectedFeatureChange(e7) {
    const { location: t11, updateLocationEnabled: s6, view: i6 } = this;
    if (e7 && i6) {
      if (this.browseClusterEnabled) {
        if (this._selectedClusterFeature && (i6.graphics.remove(this._selectedClusterFeature), this._selectedClusterFeature = null), w3(e7))
          return;
        return e7.symbol = await R2(e7), this._selectedClusterFeature = e7, void i6.graphics.add(this._selectedClusterFeature);
      }
      !s6 && t11 || !e7.geometry ? s6 && !e7.geometry && this.centerAtLocation().then(() => {
        var _a;
        const e8 = (_a = i6.center) == null ? void 0 : _a.clone();
        e8 && (this.location = e8);
      }) : this.location = e(F2(e7.geometry));
    }
  }
  _waitingForResultChange() {
    !this.featureCount && this.promises && (this.visible = false);
  }
  _setFetchFeaturesPromises(e7) {
    return this._fetchFeaturesWithController(this._getScreenPoint(e7 || this.location)).then((e8) => {
      const { clientOnlyGraphics: t11, promisesPerLayerView: s6 } = e8, i6 = Promise.resolve(t11), r4 = s6.map((e9) => e9.promise);
      this.promises = [i6, ...r4];
    });
  }
  _destroyFeatureVMs() {
    this.featureViewModels.forEach((e7) => e7 && !e7.destroyed && e7.destroy()), this._set("featureViewModels", []);
  }
  _updateFeatureVMs() {
    const { selectedFeature: e7, features: t11, featureViewModels: s6 } = this;
    if (w3(e7) || (this.browseClusterEnabled = false), this._destroyFeatureVMs(), !t11 || !t11.length)
      return;
    const i6 = s6.slice(0), r4 = [];
    t11.forEach((t12, s7) => {
      var _a, _b;
      if (!t12)
        return;
      let o5 = null;
      if (i6.some((e8, s8) => (e8 && e8.graphic === t12 && (o5 = e8, i6.splice(s8, 1)), !!o5)), o5)
        r4[s7] = o5;
      else {
        const i7 = new X({ abilities: this.featureViewModelAbilities, defaultPopupTemplateEnabled: this.defaultPopupTemplateEnabled, spatialReference: (_a = this.view) == null ? void 0 : _a.spatialReference, graphic: t12 === e7 ? t12 : null, map: (_b = this.view) == null ? void 0 : _b.map, view: this.view });
        r4[s7] = i7;
      }
    }), i6.forEach((e8) => e8 && !e8.destroyed && e8.destroy()), this._set("featureViewModels", r4);
  }
  _getScreenPoint(e7) {
    const { view: t11 } = this;
    return t11 && e7 && "function" == typeof t11.toScreen ? t11.toScreen(e7) : null;
  }
  _autoOpenEnabledChange() {
    const e7 = "auto-fetch-features", { _handles: t11, autoOpenEnabled: s6 } = this;
    if (t11.remove(e7), s6 && this.view) {
      const s7 = this.view.on("click", (e8) => {
        "mouse" === e8.pointerType && 0 !== e8.button || this._fetchFeaturesAndOpen(e8);
      }, P.WIDGET);
      t11.add(s7, e7);
    }
  }
  _cancelFetchingFeatures() {
    const e7 = this._fetchFeaturesController;
    e7 && e7.abort(), this._fetchFeaturesController = null, this.notifyChange("waitingForResult");
  }
  _fetchFeaturesWithController(e7, t11) {
    this._cancelFetchingFeatures();
    const s6 = new AbortController(), { signal: i6 } = s6;
    this._fetchFeaturesController = s6, this.notifyChange("waitingForResult");
    const r4 = this.fetchFeatures(e7, { signal: i6, event: t11 });
    return r4.catch(() => {
    }).then(() => {
      this._fetchFeaturesController = null, this.notifyChange("waitingForResult");
    }), r4;
  }
  _fetchFeaturesAndOpen(e7) {
    const { screenPoint: t11, mapPoint: s6 } = e7, { view: i6 } = this;
    this._fetchFeaturesWithController(t11, e7).then((e8) => {
      var _a;
      const { clientOnlyGraphics: t12, promisesPerLayerView: r4, location: o5 } = e8, a6 = [Promise.resolve(t12), ...r4.map((e9) => e9.promise)];
      return (_a = i6 == null ? void 0 : i6.popup) == null ? void 0 : _a.open({ location: o5 || s6, promises: a6 }), e8;
    });
  }
  _updatePendingPromises(e7) {
    e7 && this._pendingPromises.has(e7) && (this._pendingPromises.delete(e7), this.notifyChange("pendingPromisesCount"));
  }
  _autoClose() {
    this.autoCloseEnabled && (this.visible = false);
  }
  async _getLayerView(e7, t11) {
    return await e7.when(), e7.whenLayerView(t11);
  }
  _getHighlightLayer(e7) {
    const { layer: t11, sourceLayer: s6 } = e7;
    return s6 && "layer" in s6 && s6.layer ? s6.layer : "map-notes" === (s6 == null ? void 0 : s6.type) || "subtype-group" === (s6 == null ? void 0 : s6.type) ? s6 : t11;
  }
  _getHighlightTarget(e7, t11) {
    const s6 = "imagery" === t11.type ? void 0 : "objectIdField" in t11 ? t11.objectIdField || o4 : null, i6 = e7.attributes;
    return i6 && s6 && i6[s6] || e7;
  }
  async _highlightActiveFeature() {
    const e7 = "highlight-active-feature";
    this._handles.remove(e7);
    const { highlightEnabled: t11, view: s6, activeFeature: i6, visible: r4 } = this;
    if (!(i6 && s6 && t11 && r4))
      return;
    const o5 = this._getHighlightLayer(i6);
    if (!(o5 && o5 instanceof b2))
      return;
    const a6 = this._getLayerView(s6, o5);
    this._highlightActiveFeaturePromise = a6;
    const n5 = await a6;
    if (!(n5 && t5(n5) && this._highlightActiveFeaturePromise === a6 && this.activeFeature && this.highlightEnabled))
      return;
    const l5 = n5.highlight(this._getHighlightTarget(i6, o5));
    this._handles.add(l5, e7);
  }
  async _highlightSelectedFeature() {
    const e7 = "highlight-selected-feature";
    this._handles.remove(e7);
    const { selectedFeature: t11, highlightEnabled: s6, view: i6, visible: r4 } = this;
    if (!(t11 && i6 && s6 && r4))
      return;
    const o5 = this._getHighlightLayer(t11);
    if (!(o5 && o5 instanceof b2))
      return;
    const a6 = this._getLayerView(i6, o5);
    this._highlightSelectedFeaturePromise = a6;
    const n5 = await a6;
    if (!(n5 && t5(n5) && this._highlightSelectedFeaturePromise === a6 && this.selectedFeature && this.highlightEnabled && this.visible))
      return;
    const l5 = n5.highlight(this._getHighlightTarget(t11, o5));
    this._handles.add(l5, e7);
  }
  _updateFeatures(e7) {
    const { features: t11 } = this;
    if (!e7 || !e7.length)
      return;
    if (!t11.length)
      return void (this.features = e7);
    const s6 = e7.filter((e8) => !t11.includes(e8));
    this.features = t11.concat(s6);
  }
};
e2([y()], z.prototype, "featurePage", void 0), e2([y()], z.prototype, "isLoadingFeature", null), e2([y({ type: B })], z.prototype, "actions", void 0), e2([y({ readOnly: true })], z.prototype, "active", null), e2([y()], z.prototype, "activeFeature", void 0), e2([y({ readOnly: true })], z.prototype, "allActions", null), e2([y({ type: Boolean })], z.prototype, "defaultPopupTemplateEnabled", void 0), e2([y()], z.prototype, "autoCloseEnabled", void 0), e2([y()], z.prototype, "autoOpenEnabled", void 0), e2([y()], z.prototype, "browseClusterEnabled", void 0), e2([y()], z.prototype, "content", void 0), e2([y({ type: B, readOnly: true })], z.prototype, "defaultActions", null), e2([y({ readOnly: true })], z.prototype, "featureCount", null), e2([y()], z.prototype, "features", null), e2([y()], z.prototype, "featuresPerPage", void 0), e2([y()], z.prototype, "featureViewModelAbilities", void 0), e2([y({ readOnly: true })], z.prototype, "featureViewModels", void 0), e2([y()], z.prototype, "highlightEnabled", void 0), e2([y()], z.prototype, "includeDefaultActions", void 0), e2([y({ type: w })], z.prototype, "location", null), e2([y({ readOnly: true })], z.prototype, "pendingPromisesCount", null), e2([y({ readOnly: true })], z.prototype, "selectedClusterBoundaryFeature", void 0), e2([y({ readOnly: true })], z.prototype, "waitingForResult", null), e2([y({ readOnly: true })], z.prototype, "promiseCount", null), e2([y()], z.prototype, "promises", null), e2([y({ value: null, readOnly: true })], z.prototype, "selectedFeature", null), e2([y({ value: -1 })], z.prototype, "selectedFeatureIndex", null), e2([y({ readOnly: true })], z.prototype, "selectedFeatureViewModel", null), e2([y({ readOnly: true })], z.prototype, "state", null), e2([y()], z.prototype, "title", void 0), e2([y()], z.prototype, "updateLocationEnabled", void 0), e2([y()], z.prototype, "view", void 0), e2([y()], z.prototype, "visible", void 0), e2([y()], z.prototype, "zoomFactor", void 0), e2([y()], z.prototype, "zoomToLocation", void 0), e2([y()], z.prototype, "centerAtLocation", null), z = e2([a2("esri.widgets.Popup.PopupViewModel")], z);
var H = z;

// node_modules/@arcgis/core/widgets/Popup.js
var B2 = "selected-index";
var D = 0;
var L = "popup-spinner";
var S4 = { buttonEnabled: true, position: "auto", breakpoint: { width: 544 } };
var R4 = "esri-popup";
function V2(e7, t11) {
  return void 0 === t11 ? `${R4}__${e7}` : `${R4}__${e7}-${t11}`;
}
var U3 = { closeButton: true, featureNavigation: true };
var W2 = class extends i3(W) {
  constructor(e7, i6) {
    super(e7, i6), this._blurClose = false, this._blurContainer = false, this._containerNode = null, this._mainContainerNode = null, this._featureMenuNode = null, this._actionsMenuNode = null, this._focusClose = false, this._focusContainer = false, this._focusDockButton = false, this._focusFeatureMenuButton = false, this._focusActionsMenuButton = false, this._focusFirstFeature = false, this._focusFirstAction = false, this._handles = new t2(), this._pointerOffsetInPx = 16, this._spinner = null, this._feature = null, this._featureMenuIntersectionObserverNode = null, this._featureMenuViewportNode = null, this._rootFlowItemNode = null, this._featureMenuIntersectionObserverCallback = ([e8]) => {
      (e8 == null ? void 0 : e8.isIntersecting) && null != this.viewModel.featurePage && this.viewModel.featurePage++;
    }, this._featureMenuIntersectionObserver = new IntersectionObserver(this._featureMenuIntersectionObserverCallback, { root: window.document }), this._displaySpinnerThrottled = e5(() => this._displaySpinner(), D), this._exitRelatedRecordsActions = /* @__PURE__ */ new WeakMap(), this._featureSelectionActions = /* @__PURE__ */ new WeakMap(), this._flowItems = new j(), this.alignment = "auto", this.collapsed = false, this.collapseEnabled = true, this.dockEnabled = false, this.featureMenuOpen = false, this.headingLevel = 2, this.maxInlineActions = 3, this.messages = null, this.messagesCommon = null, this.spinnerEnabled = true, this.viewModel = new H(), this.visibleElements = { ...U3 }, this._handleOpenRelatedFeature = (e8) => {
      this._openRelatedFeature(e8);
    }, this._addSelectedFeatureIndexHandle(), this.addHandles([l(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.screenLocation;
    }, () => this._positionContainer()), l(() => {
      var _a;
      return [(_a = this.viewModel) == null ? void 0 : _a.active, this.dockEnabled];
    }, () => this._toggleScreenLocationEnabled()), l(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.screenLocation;
    }, (e8, t11) => {
      !!e8 != !!t11 && this.reposition();
    }), l(() => {
      var _a, _b, _c, _d, _e, _f;
      return [(_b = (_a = this.viewModel) == null ? void 0 : _a.view) == null ? void 0 : _b.padding, (_d = (_c = this.viewModel) == null ? void 0 : _c.view) == null ? void 0 : _d.size, (_e = this.viewModel) == null ? void 0 : _e.active, (_f = this.viewModel) == null ? void 0 : _f.location, this.alignment];
    }, () => this.reposition()), l(() => this.spinnerEnabled, (e8) => this._spinnerEnabledChange(e8)), l(() => {
      var _a, _b;
      return (_b = (_a = this.viewModel) == null ? void 0 : _a.view) == null ? void 0 : _b.size;
    }, (e8, t11) => this._updateDockEnabledForViewSize(e8, t11)), l(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.view;
    }, (e8, t11) => this._viewChange(e8, t11)), l(() => {
      var _a, _b;
      return (_b = (_a = this.viewModel) == null ? void 0 : _a.view) == null ? void 0 : _b.ready;
    }, (e8, t11) => this._viewReadyChange(e8 ?? false, t11 ?? false)), l(() => {
      var _a, _b;
      return [(_a = this.viewModel) == null ? void 0 : _a.waitingForResult, (_b = this.viewModel) == null ? void 0 : _b.location];
    }, () => {
      this._hideSpinner(), this._displaySpinnerThrottled();
    }), l(() => this.selectedFeatureWidget, () => this._destroyFlowItemWidgets()), l(() => {
      var _a, _b, _c, _d;
      return [(_b = (_a = this.selectedFeatureWidget) == null ? void 0 : _a.viewModel) == null ? void 0 : _b.title, (_d = (_c = this.selectedFeatureWidget) == null ? void 0 : _c.viewModel) == null ? void 0 : _d.state];
    }, () => this._setTitleFromFeatureWidget()), l(() => {
      var _a, _b, _c, _d;
      return [(_b = (_a = this.selectedFeatureWidget) == null ? void 0 : _a.viewModel) == null ? void 0 : _b.content, (_d = (_c = this.selectedFeatureWidget) == null ? void 0 : _c.viewModel) == null ? void 0 : _d.state];
    }, () => this._setContentFromFeatureWidget()), f(() => !this.collapsed, () => {
      var _a, _b;
      "xsmall" === ((_b = (_a = this.viewModel) == null ? void 0 : _a.view) == null ? void 0 : _b.widthBreakpoint) && this.viewModel.active && this.collapseEnabled && this.viewModel.centerAtLocation();
    }), a3(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.allActions;
    }, "change", () => this._watchActions()), l(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.allActions;
    }, () => this._watchActions(), h), l(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.featureViewModels;
    }, () => this._featureMenuViewportScrollTop()), a3(() => this._flowItems, "change", () => {
      this.notifyChange("_activeFlowItemWidget"), this.scheduleRender();
    }), l(() => {
      var _a, _b, _c, _d;
      return [(_b = (_a = this._activeFlowItemWidget) == null ? void 0 : _a.viewModel) == null ? void 0 : _b.state, (_d = (_c = this._activeFlowItemWidget) == null ? void 0 : _c.viewModel) == null ? void 0 : _d.title];
    }, () => this.scheduleRender())]);
  }
  loadDependencies() {
    return Promise.all([import("./calcite-flow-IH7NBMPY.js"), import("./calcite-flow-item-IMCYVW45.js"), import("./calcite-action-OZQEIKEU.js"), import("./calcite-tooltip-CECAVK4G.js"), import("./calcite-icon-XAFZ5NNH.js")]);
  }
  destroy() {
    var _a, _b;
    this._destroyFlowItemWidgets(), this._destroySelectedFeatureWidget(), this._destroySpinner(), (_a = this._handles) == null ? void 0 : _a.destroy(), this._unobserveFeatureMenuObserver(), (_b = this._featureMenuIntersectionObserver) == null ? void 0 : _b.disconnect();
  }
  get actionsMenuId() {
    return `${this.id}-actions-menu`;
  }
  get actionsMenuButtonId() {
    return `${this.id}-actions-menu-button`;
  }
  get featureMenuId() {
    return `${this.id}-feature-menu`;
  }
  get titleId() {
    return `${this.id}-popup-title`;
  }
  get contentId() {
    return `${this.id}-popup-content`;
  }
  get hasContent() {
    const { selectedFeatureWidget: e7, viewModel: t11 } = this;
    if (!e7)
      return !!(t11 == null ? void 0 : t11.content);
    const i6 = e7.viewModel;
    if ((i6 == null ? void 0 : i6.waitingForContent) || "error" === (i6 == null ? void 0 : i6.state))
      return true;
    const o5 = i6 == null ? void 0 : i6.content;
    return Array.isArray(o5) ? !!o5.length : !!o5;
  }
  get featureNavigationVisible() {
    return this.viewModel.active && this.viewModel.featureCount > 1 && null != this.visibleElements.featureNavigation;
  }
  get collapsible() {
    return !!(this.collapseEnabled && this.viewModel.title && this.hasContent);
  }
  get featureMenuVisible() {
    return this.featureNavigationVisible && this.featureMenuOpen;
  }
  get contentCollapsed() {
    return this.collapsible && !this.featureMenuVisible && this.collapsed;
  }
  get dividedActions() {
    return this._divideActions();
  }
  get _activeFlowItemWidget() {
    const { _flowItems: e7 } = this;
    return e7.getItemAt(e7.length - 1) || null;
  }
  get actions() {
    return this.viewModel.actions;
  }
  set actions(e7) {
    this.viewModel.actions = e7;
  }
  set actionsMenuOpen(e7) {
    this._set("actionsMenuOpen", !!e7);
  }
  get actionsMenuOpen() {
    return !!this.viewModel.active && this._get("actionsMenuOpen");
  }
  get autoCloseEnabled() {
    return this.viewModel.autoCloseEnabled;
  }
  set autoCloseEnabled(e7) {
    this.viewModel.autoCloseEnabled = e7;
  }
  get autoOpenEnabled() {
    return this.viewModel.autoOpenEnabled;
  }
  set autoOpenEnabled(e7) {
    this.viewModel.autoOpenEnabled = e7;
  }
  get defaultPopupTemplateEnabled() {
    return this.viewModel.defaultPopupTemplateEnabled;
  }
  set defaultPopupTemplateEnabled(e7) {
    this.viewModel.defaultPopupTemplateEnabled = e7;
  }
  get content() {
    return this.viewModel.content;
  }
  set content(e7) {
    this.viewModel.content = e7;
  }
  get currentAlignment() {
    return this._getCurrentAlignment();
  }
  get currentDockPosition() {
    return this._getCurrentDockPosition();
  }
  get dockOptions() {
    return this._get("dockOptions") || S4;
  }
  set dockOptions(e7) {
    var _a, _b;
    const t11 = { ...S4 }, i6 = (_b = (_a = this.viewModel) == null ? void 0 : _a.view) == null ? void 0 : _b.breakpoints, o5 = {};
    i6 && (o5.width = i6.xsmall, o5.height = i6.xsmall);
    const n5 = { ...t11, ...e7 }, s6 = { ...t11.breakpoint, ...o5 }, { breakpoint: r4 } = n5;
    "object" == typeof r4 ? n5.breakpoint = { ...s6, ...r4 } : r4 && (n5.breakpoint = s6), this._set("dockOptions", n5), this._setCurrentDockPosition(), this.reposition();
  }
  get featureCount() {
    return this.viewModel.featureCount;
  }
  get features() {
    return this.viewModel.features;
  }
  set features(e7) {
    this.viewModel.features = e7;
  }
  get goToOverride() {
    return this.viewModel.goToOverride;
  }
  set goToOverride(e7) {
    this.viewModel.goToOverride = e7;
  }
  get highlightEnabled() {
    return this.viewModel.highlightEnabled;
  }
  set highlightEnabled(e7) {
    this.viewModel.highlightEnabled = e7;
  }
  get location() {
    return this.viewModel.location;
  }
  set location(e7) {
    this.viewModel.location = e7;
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e7) {
    this._overrideIfSome("label", e7);
  }
  get promises() {
    return this.viewModel.promises;
  }
  set promises(e7) {
    this.viewModel.promises = e7;
  }
  get selectedFeature() {
    return this.viewModel.selectedFeature;
  }
  get selectedFeatureIndex() {
    return this.viewModel.selectedFeatureIndex;
  }
  set selectedFeatureIndex(e7) {
    this.viewModel.selectedFeatureIndex = e7;
  }
  get selectedFeatureWidget() {
    const { _feature: e7, visibleElements: t11, headingLevel: i6, _flowItems: o5 } = this, { selectedFeatureViewModel: n5 } = this.viewModel, s6 = { ...t11, title: false };
    return n5 ? (e7 ? (e7.viewModel = n5, e7.visibleElements = s6) : this._feature = new C({ flowItems: o5, headingLevel: i6 + 1, viewModel: n5, visibleElements: s6 }), this._feature) : null;
  }
  get title() {
    return this.viewModel.title;
  }
  set title(e7) {
    this.viewModel.title = e7;
  }
  get updateLocationEnabled() {
    return this.viewModel.updateLocationEnabled;
  }
  set updateLocationEnabled(e7) {
    this.viewModel.updateLocationEnabled = e7;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e7) {
    this.viewModel.view = e7;
  }
  get visible() {
    return this.viewModel.visible;
  }
  set visible(e7) {
    this.viewModel.visible = e7;
  }
  castVisibleElements(e7) {
    return { ...U3, ...e7 };
  }
  blur() {
    const { active: e7 } = this.viewModel;
    e7 || s.getLogger(this.declaredClass).warn("Popup can only be blurred when currently active."), this.visibleElements.closeButton ? this._blurClose = true : this._blurContainer = true, this.scheduleRender();
  }
  clear() {
    return this.viewModel.clear();
  }
  close() {
    this.visible = false;
  }
  fetchFeatures(e7, t11) {
    return this.viewModel.fetchFeatures(e7, t11);
  }
  focus() {
    const { active: e7 } = this.viewModel;
    e7 || s.getLogger(this.declaredClass).warn("Popup can only be focused when currently active."), this.visibleElements.closeButton ? this._focusClose = true : this._focusContainer = true, this.scheduleRender();
  }
  next() {
    return this.viewModel.next();
  }
  open(e7) {
    var _a, _b;
    this._handles.remove(B2);
    const t11 = !!e7 && !!e7.featureMenuOpen, i6 = !!e7 && !!e7.actionsMenuOpen, o5 = { collapsed: !!e7 && !!e7.collapsed, actionsMenuOpen: i6, featureMenuOpen: t11 };
    "xsmall" === ((_b = (_a = this.viewModel) == null ? void 0 : _a.view) == null ? void 0 : _b.widthBreakpoint) && (o5.collapsed = true), this.set(o5), this.viewModel.open(e7), this._shouldFocus(e7), this._addSelectedFeatureIndexHandle();
  }
  previous() {
    return this.viewModel.previous();
  }
  reposition() {
    this.renderNow(), this._positionContainer(), this._setCurrentAlignment();
  }
  triggerAction(e7) {
    return this.viewModel.triggerAction(e7);
  }
  render() {
    var _a, _b, _c, _d;
    const { actionsMenuOpen: e7, dockEnabled: t11, featureMenuVisible: i6, dividedActions: o5, currentAlignment: n5, currentDockPosition: s6 } = this, { active: r4 } = this.viewModel, { menuActions: l5 } = o5, a6 = r4 && l5.length > 1 && e7, c5 = r4 && t11, d3 = r4 && !t11, u3 = (_b = (_a = this.selectedFeature) == null ? void 0 : _a.layer) == null ? void 0 : _b.title, h7 = (_d = (_c = this.selectedFeature) == null ? void 0 : _c.layer) == null ? void 0 : _d.id, p7 = { [n4.alignTopCenter]: "top-center" === n5, [n4.alignBottomCenter]: "bottom-center" === n5, [n4.alignTopLeft]: "top-left" === n5, [n4.alignBottomLeft]: "bottom-left" === n5, [n4.alignTopRight]: "top-right" === n5, [n4.alignBottomRight]: "bottom-right" === n5, [n4.isDocked]: c5, [n4.shadow]: d3, [n4.isDockedTopLeft]: "top-left" === s6, [n4.isDockedTopCenter]: "top-center" === s6, [n4.isDockedTopRight]: "top-right" === s6, [n4.isDockedBottomLeft]: "bottom-left" === s6, [n4.isDockedBottomCenter]: "bottom-center" === s6, [n4.isDockedBottomRight]: "bottom-right" === s6, [n4.isFeatureMenuOpen]: i6, [n4.isActionsMenuOpen]: a6 };
    return n2("div", { class: this.classes(n4.base, p7), role: "presentation", "data-layer-title": u3, "data-layer-id": h7, bind: this, afterCreate: this._positionContainer, afterUpdate: this._positionContainer }, r4 ? [this.renderMainContainer(), this.renderPointer()] : null);
  }
  renderLoadingIcon() {
    return n2("span", { "aria-hidden": "true", class: this.classes(n4.icon, n4.iconLoading, n4.rotating) });
  }
  renderNavigationLoading() {
    const { messagesCommon: e7 } = this;
    return this.viewModel.pendingPromisesCount ? n2("div", { key: V2("loading-container"), role: "presentation", class: n4.loadingContainer, "aria-label": e7.loading, title: e7.loading }, this.renderLoadingIcon()) : null;
  }
  renderPreviousIcon() {
    const e7 = f2(this.container), t11 = { [n4.iconRightTriangleArrow]: e7, [n4.paginationPreviousIconRTL]: e7, [n4.iconLeftTriangleArrow]: !e7, [n4.paginationPreviousIconLTR]: !e7 };
    return n2("span", { "aria-hidden": "true", class: this.classes(n4.icon, t11) });
  }
  renderPreviousButton() {
    const { messages: e7 } = this;
    return n2("div", { role: "button", tabIndex: 0, bind: this, onclick: this._previous, onkeydown: this._previous, class: this.classes(n4.button, n4.paginationPrevious), "aria-label": e7.previous, title: e7.previous }, this.renderPreviousIcon());
  }
  renderNextIcon() {
    const e7 = f2(this.container), t11 = { [n4.iconLeftTriangleArrow]: e7, [n4.paginationNextIconRTL]: e7, [n4.iconRightTriangleArrow]: !e7, [n4.paginationNextIconLTR]: !e7 };
    return n2("span", { "aria-hidden": "true", class: this.classes(n4.icon, t11) });
  }
  renderNextButton() {
    const { messages: e7 } = this;
    return n2("div", { role: "button", tabIndex: 0, bind: this, onclick: this._next, onkeydown: this._next, class: this.classes(n4.button, n4.paginationNext), "aria-label": e7.next, title: e7.next }, this.renderNextIcon());
  }
  renderFeatureMenuButton() {
    const { featureMenuOpen: e7, featureMenuId: t11, messagesCommon: i6 } = this, { featureCount: o5, selectedFeatureIndex: n5 } = this.viewModel;
    return n2("div", { role: "button", tabIndex: 0, bind: this, onclick: this._toggleFeatureMenu, onkeydown: this._toggleFeatureMenu, afterCreate: this._focusFeatureMenuButtonNode, afterUpdate: this._focusFeatureMenuButtonNode, class: this.classes(n4.button, n4.featureMenuButton), "aria-haspopup": "true", "aria-controls": t11, "aria-expanded": e7.toString(), "aria-label": i6.menu, title: i6.menu }, this._getPageText(o5, n5));
  }
  renderNavigationButtons() {
    return this.featureNavigationVisible ? [this.renderPreviousButton(), this.renderNavigationLoading() || this.renderFeatureMenuButton(), this.renderNextButton()] : [];
  }
  renderDockIcon() {
    const { dockEnabled: e7 } = this, t11 = this._wouldDockTo(), i6 = { [n4.iconUndock]: e7, [n4.iconDock]: !e7, [n4.iconDockToRight]: !e7 && ("top-right" === t11 || "bottom-right" === t11), [n4.iconDockToLeft]: !e7 && ("top-left" === t11 || "bottom-left" === t11), [n4.iconDockToTop]: !e7 && "top-center" === t11, [n4.iconDockToBottom]: !e7 && "bottom-center" === t11 };
    return n2("span", { "aria-hidden": "true", class: this.classes(i6, n4.icon) });
  }
  renderDockButton() {
    var _a, _b, _c;
    const { dockEnabled: e7, messages: t11 } = this, i6 = (_b = (_a = this.viewModel) == null ? void 0 : _a.view) == null ? void 0 : _b.widthBreakpoint, o5 = e7 ? t11.undock : t11.dock;
    return "xsmall" !== i6 && ((_c = this.dockOptions) == null ? void 0 : _c.buttonEnabled) ? n2("div", { role: "button", "aria-label": o5, title: o5, tabIndex: 0, bind: this, onclick: this._toggleDockEnabled, onkeydown: this._toggleDockEnabled, afterCreate: this._focusDockButtonNode, afterUpdate: this._focusDockButtonNode, class: this.classes(n4.button, n4.buttonDock) }, this.renderDockIcon()) : null;
  }
  renderTitle() {
    const { title: e7 } = this.viewModel, { titleId: t11, collapsible: i6, contentCollapsed: o5, messagesCommon: n5 } = this, s6 = { [n4.headerContainerButton]: i6 }, r4 = n2(n3, { level: this.headingLevel, class: n4.headerTitle, innerHTML: e7 ?? "" }), l5 = i6 ? n2("button", { key: `${e7}--collapsible`, id: t11, title: o5 ? n5.expand : n5.collapse, bind: this, enterAnimation: this._createFeatureUpdatedAnimation(), class: this.classes(n4.headerContainer, s6), "aria-expanded": o5 ? "false" : "true", onclick: this._toggleCollapsed, type: "button" }, r4, n2("calcite-icon", { class: n4.collapseIcon, key: "collapse-icon", icon: o5 ? "chevron-down" : "chevron-up", scale: "m" })) : n2("div", { key: e7 ?? "title", id: t11, bind: this, enterAnimation: this._createFeatureUpdatedAnimation(), class: this.classes(n4.headerContainer, s6) }, r4);
    return e7 ? l5 : null;
  }
  renderCloseIcon() {
    return n2("span", { "aria-hidden": "true", class: this.classes(n4.icon, n4.iconClose) });
  }
  renderCloseButton() {
    const { visibleElements: e7, messagesCommon: t11 } = this;
    return e7.closeButton ? n2("div", { role: "button", tabIndex: 0, bind: this, onclick: this._close, onkeydown: this._close, class: n4.button, "aria-label": t11.close, title: t11.close, afterCreate: this._closeButtonNodeUpdated, afterUpdate: this._closeButtonNodeUpdated }, this.renderCloseIcon()) : null;
  }
  renderHeader() {
    return n2("header", { class: n4.header }, this.renderTitle(), n2("div", { class: n4.headerButtons }, this.renderDockButton(), this.renderCloseButton()));
  }
  renderContentContainer() {
    const { contentId: e7, hasContent: t11, contentCollapsed: i6, _flowItems: o5 } = this, { content: n5 } = this.viewModel, s6 = o5.toArray(), r4 = { [n4.contentHasFlows]: !!s6.length };
    return t11 && !i6 ? n2("div", { key: n5 ?? "content", enterAnimation: this._createFeatureUpdatedAnimation(), id: e7, class: this.classes(n4.content, r4) }, n2("calcite-flow", { bind: this }, n2("calcite-flow-item", { bind: this, "data-node-ref": "_rootFlowItemNode", afterCreate: v, key: "root-flow-item", onCalciteFlowItemBack: this._handleBackClick }, this.renderContent()), s6.map((e8) => this.renderFlowItem(e8))), s6.map((e8) => this.renderFlowItemTooltips(e8))) : null;
  }
  renderFlowItem(e7) {
    const { messages: t11 } = this, i6 = r2(), o5 = "graphic" in e7 && !e7.isTable;
    return n2("calcite-flow-item", { bind: this, class: this.classes({ [n4.calciteThemeDark]: !i6, [n4.calciteThemeLight]: i6 }), heading: e7.title ?? "", description: this._getFlowItemDescription(e7), onCalciteFlowItemBack: this._handleBackClick, key: `flow-item-${e7.viewModel.uid}` }, n2("calcite-action", { class: n4.actionExit, icon: "move-up", label: t11 == null ? void 0 : t11.exitRelatedRecords, text: t11 == null ? void 0 : t11.exitRelatedRecords, slot: "header-actions-start", bind: this, afterCreate: (t12) => this._storeExitRelatedRecordsAction(e7, t12), onclick: this._destroyFlowItemWidgets }), o5 ? n2("calcite-action", { class: n4.actionSelectFeature, icon: "zoom-to-object", label: t11 == null ? void 0 : t11.selectFeature, text: t11 == null ? void 0 : t11.selectFeature, slot: "header-actions-end", bind: this, afterCreate: (t12) => this._storeFeatureSelectionAction(e7, t12), onclick: () => this._handleOpenRelatedFeature(e7) }) : null, n2("div", { class: this.classes(n4.contentFlowItem, { [n4.calciteThemeDark]: i6, [n4.calciteThemeLight]: !i6 }) }, e7.render()));
  }
  renderFlowItemTooltips(e7) {
    const { messages: t11, _exitRelatedRecordsActions: i6, _featureSelectionActions: o5 } = this, n5 = r2(), s6 = o5.get(e7);
    return [n2("calcite-tooltip", { class: this.classes({ [n4.calciteThemeDark]: !n5, [n4.calciteThemeLight]: n5 }), key: `exit-related-records-tooltip-${e7.viewModel.uid}`, label: t11 == null ? void 0 : t11.exitRelatedRecords, overlayPositioning: "fixed", referenceElement: i6.get(e7), placement: "top" }, t11 == null ? void 0 : t11.exitRelatedRecords), s6 ? n2("calcite-tooltip", { class: this.classes({ [n4.calciteThemeDark]: !n5, [n4.calciteThemeLight]: n5 }), key: `select-related-record-tooltip-${e7.viewModel.uid}`, label: t11 == null ? void 0 : t11.selectFeature, overlayPositioning: "fixed", referenceElement: s6, placement: "top" }, t11 == null ? void 0 : t11.selectFeature) : null];
  }
  renderActionsMenuButton() {
    const { actionsMenuId: e7, actionsMenuButtonId: t11, actionsMenuOpen: i6, dividedActions: o5, messagesCommon: n5 } = this, s6 = i6 ? n5.close : n5.open, { menuActions: r4 } = o5;
    return r4.length ? n2("div", { key: V2("actions-menu-button"), class: this.classes(n4.button, n4.actionsMenuButton), role: "button", id: t11, "aria-haspopup": "true", "aria-controls": i6 ? e7 : null, tabIndex: 0, bind: this, onclick: this._toggleActionsMenu, onkeydown: this._toggleActionsMenu, afterCreate: this._focusActionsMenuButtonNode, afterUpdate: this._focusActionsMenuButtonNode, "aria-label": s6, title: s6 }, n2("span", { "aria-hidden": "true", class: n4.iconActionsMenu })) : null;
  }
  renderMenuActions() {
    const { actionsMenuId: e7, actionsMenuButtonId: t11, actionsMenuOpen: i6, dividedActions: o5 } = this, { menuActions: n5 } = o5;
    return n5.length && i6 ? n2("ul", { id: e7, role: "menu", "aria-labelledby": t11, key: V2("actions"), class: n4.actions, bind: this, onkeyup: this._handleActionMenuKeyup, afterCreate: this._actionsMenuNodeUpdated, afterUpdate: this._actionsMenuNodeUpdated }, n5.toArray().map((e8) => this.renderAction({ action: e8, type: "menu-item" }))) : null;
  }
  renderInlineActions() {
    const { inlineActions: e7 } = this.dividedActions;
    return e7.length ? e7.toArray().map((e8) => this.renderAction({ action: e8, type: "inline" })) : [];
  }
  renderInlineActionsContainer() {
    const { inlineActions: e7, menuActions: t11 } = this.dividedActions, i6 = !!e7.length, o5 = !!t11.length;
    return i6 || o5 ? n2("div", { key: "inline-actions-container", "data-inline-actions": i6.toString(), "data-menu-actions": o5.toString(), class: n4.inlineActionsContainer }, this.renderInlineActions(), this.renderActionsMenuButton(), this.renderMenuActions()) : null;
  }
  renderNavigation() {
    return this.featureNavigationVisible ? n2("section", { key: V2("navigation"), class: this.classes(n4.navigation) }, this.renderNavigationButtons()) : null;
  }
  renderFooter() {
    const { featureNavigationVisible: e7, dividedActions: t11 } = this, { inlineActions: i6, menuActions: o5 } = t11, n5 = !!i6.length, s6 = !!o5.length, r4 = { [n4.footerHasPagination]: e7, [n4.footerHasActions]: n5, [n4.footerHasActionsMenu]: s6 };
    return e7 || n5 ? n2("div", { key: V2("feature-buttons"), class: this.classes(n4.footer, r4) }, this.renderInlineActionsContainer(), this.renderNavigation()) : null;
  }
  renderFeatureMenuContainer() {
    const { messages: e7 } = this, { featureViewModels: t11, isLoadingFeature: i6 } = this.viewModel, o5 = s4(e7.selectedFeatures, { total: t11.length });
    return n2("section", { key: V2("menu"), class: n4.featureMenu }, n2("strong", { class: n4.featureMenuHeader }, o5), n2("nav", { bind: this, class: n4.featureMenuViewport, "data-node-ref": "_featureMenuViewportNode", afterCreate: v }, this.renderFeatureMenu(), n2("div", { class: n4.featureMenuObserver, bind: this, afterCreate: this._featureMenuIntersectionObserverCreated }), i6 ? n2("div", { class: n4.featureMenuLoader }, this.renderLoadingIcon()) : null));
  }
  renderPointer() {
    return this.dockEnabled ? null : n2("div", { key: V2("pointer"), class: n4.pointer, role: "presentation" }, n2("div", { class: this.classes(n4.pointerDirection, n4.shadow) }));
  }
  renderMainContainer() {
    const { dockEnabled: e7, currentAlignment: t11, currentDockPosition: i6, titleId: o5, contentId: n5, collapsible: s6, hasContent: r4, contentCollapsed: l5, visibleElements: a6 } = this, { title: c5 } = this.viewModel, d3 = "bottom-left" === t11 || "bottom-center" === t11 || "bottom-right" === t11 || "top-left" === i6 || "top-center" === i6 || "top-right" === i6, u3 = "top-left" === t11 || "top-center" === t11 || "top-right" === t11 || "bottom-left" === i6 || "bottom-center" === i6 || "bottom-right" === i6, h7 = { [n4.shadow]: e7, [n4.isCollapsible]: s6, [n4.isCollapsed]: l5 };
    return n2("div", { class: this.classes(n4.main, n4.widget, h7), tabIndex: a6.closeButton ? void 0 : -1, role: "dialog", "aria-labelledby": c5 ? o5 : "", "aria-describedby": r4 && !l5 ? n5 : "", bind: this, onkeyup: this._handleMainKeyup, afterCreate: this._mainContainerNodeUpdated, afterUpdate: this._mainContainerNodeUpdated }, d3 ? this.renderFooter() : null, d3 ? this.renderFeatureMenuContainer() : null, this.renderHeader(), this.renderContentContainer(), u3 ? this.renderFooter() : null, u3 ? this.renderFeatureMenuContainer() : null);
  }
  renderContent() {
    var _a;
    const e7 = (_a = this.viewModel) == null ? void 0 : _a.content;
    return e7 ? "string" == typeof e7 ? n2("div", { class: t4.contentNode, key: e7, innerHTML: e7 }) : this.renderNodeContent(e7) : null;
  }
  renderActionText(e7) {
    return n2("span", { key: "text", class: n4.actionText }, e7);
  }
  renderActionIcon(e7) {
    const t11 = this._getActionClass(e7), i6 = this._getActionImage(e7), o5 = { [n4.iconLoading]: e7.active, [n4.rotating]: e7.active, [n4.icon]: !!t11, [n4.actionImage]: !e7.active && !!i6 };
    return t11 && (o5[t11] = !e7.active), n2("span", { key: "icon", "aria-hidden": "true", class: this.classes(n4.icon, o5), styles: this._getIconStyles(i6) });
  }
  renderAction(e7) {
    const { action: t11, type: i6 } = e7, o5 = this._getActionTitle(t11), n5 = { [n4.action]: "toggle" !== t11.type, [n4.actionToggle]: "toggle" === t11.type, [n4.actionToggleOn]: "toggle" === t11.type && t11.value, [n4.buttonDisabled]: t11.disabled }, s6 = [this.renderActionIcon(t11), this.renderActionText(o5)], r4 = "menu-item" === i6 ? n2("li", { key: t11.uid, role: "menuitem", tabIndex: 0, title: o5, "aria-label": o5, class: this.classes(n4.button, n5), onkeyup: this._handleActionMenuItemKeyup, bind: this, "data-action-uid": t11.uid, onclick: this._triggerAction, onkeydown: this._triggerAction }, s6) : n2("div", { key: t11.uid, role: "button", tabIndex: 0, title: o5, "aria-label": o5, class: this.classes(n4.button, n5), onkeyup: this._handleActionMenuItemKeyup, bind: this, "data-action-uid": t11.uid, onclick: this._triggerAction, onkeydown: this._triggerAction }, s6);
    return t11.visible ? r4 : null;
  }
  renderFeatureMenuItem(e7, t11) {
    const { messages: i6, messagesCommon: o5 } = this, { selectedFeatureIndex: n5, selectedFeatureViewModel: s6 } = this.viewModel, r4 = e7 === s6, l5 = { [n4.featureMenuSelected]: r4 }, a6 = r4 ? n2("span", { key: V2(`feature-menu-selected-feature-${n5}`), title: i6.selectedFeature, "aria-label": i6.selectedFeature, class: n4.iconCheckMark }) : null, c5 = n2("span", { innerHTML: e7.title || o5.untitled });
    return n2("li", { role: "menuitem", tabIndex: -1, key: V2(`feature-menu-feature-${n5}`), class: this.classes(l5, n4.featureMenuItem), bind: this, "data-feature-index": t11, onblur: this._removeActiveFeature, onfocus: this._setActiveFeature, onkeyup: this._handleFeatureMenuItemKeyup, onclick: this._selectFeature, onkeydown: this._selectFeature, onmouseover: this._setActiveFeature, onmouseleave: this._removeActiveFeature }, n2("span", { class: n4.featureMenuTitle }, c5, a6));
  }
  renderFeatureMenu() {
    const { featureMenuId: e7 } = this, { featureViewModels: t11 } = this.viewModel;
    return t11.length > 1 ? n2("ol", { class: n4.featureMenuList, id: e7, bind: this, afterCreate: this._featureMenuNodeUpdated, afterUpdate: this._featureMenuNodeUpdated, onkeyup: this._handleFeatureMenuKeyup, role: "menu" }, t11.filter((e8) => !!e8.graphic).map((e8, t12) => this.renderFeatureMenuItem(e8, t12))) : null;
  }
  _storeFeatureSelectionAction(e7, t11) {
    this._featureSelectionActions.set(e7, t11), this.scheduleRender();
  }
  _storeExitRelatedRecordsAction(e7, t11) {
    this._exitRelatedRecordsActions.set(e7, t11), this.scheduleRender();
  }
  _getFlowItemDescription(e7) {
    return "featureCountDescription" in e7 ? e7.featureCountDescription : e7.viewModel.description ?? "";
  }
  async _openRelatedFeature(e7) {
    await e7.viewModel.updateGeometry();
    const t11 = e7.graphic, i6 = t11 == null ? void 0 : t11.geometry;
    if (t(i6) || t(t11))
      return;
    this._destroyFlowItemWidgets(), await this.viewModel.zoomTo({ target: i6 });
    const o5 = F2(i6);
    this.open({ features: [t11], location: r(o5) ? o5 : void 0 });
  }
  _destroyFlowItemWidgets() {
    this._flowItems.removeAll().forEach((e7) => {
      "showAllEnabled" in e7.viewModel && (e7.viewModel.showAllEnabled = false), e7.viewModel = null, e7.destroy();
    });
  }
  _handleBackClick() {
    const e7 = this._flowItems.pop();
    e7 && (this._exitRelatedRecordsActions.delete(e7), this._featureSelectionActions.delete(e7), "showAllEnabled" in e7.viewModel && (e7.viewModel.showAllEnabled = false), e7 && (e7.viewModel = null, e7.destroy()));
  }
  _getActionTitle(e7) {
    const { messages: t11, selectedFeature: i6, messagesCommon: o5 } = this, { id: n5 } = e7, s6 = i6 == null ? void 0 : i6.attributes, r4 = e7.title ?? "", l5 = "zoom-to-feature" === n5 ? s4(r4, { messages: t11 }) : "remove-selected-feature" === n5 ? s4(r4, { messages: o5 }) : "zoom-to-clustered-features" === n5 || "browse-clustered-features" === n5 ? s4(r4, { messages: t11 }) : e7.title;
    return l5 && s6 ? s4(l5, s6) : l5 ?? "";
  }
  _getActionClass(e7) {
    const { selectedFeature: t11 } = this, i6 = t11 == null ? void 0 : t11.attributes, { className: o5, image: n5 } = e7, s6 = n5 || o5 ? o5 : n4.iconDefaultAction;
    return s6 && i6 ? s4(s6, i6) : s6 ?? "";
  }
  _getActionImage(e7) {
    const { selectedFeature: t11 } = this, i6 = t11 == null ? void 0 : t11.attributes, { image: o5 } = e7;
    return o5 && i6 ? s4(o5, i6) : o5 ?? "";
  }
  _createFeatureUpdatedAnimation() {
    return w2("enter", n4.hasFeatureUpdated);
  }
  _getInlineActionCount() {
    const { maxInlineActions: e7, featureNavigationVisible: t11 } = this;
    if ("number" != typeof e7)
      return null;
    const i6 = Math.round(e7);
    return Math.max(t11 ? i6 - 1 : i6, 0);
  }
  _watchActions() {
    const { allActions: e7 } = this.viewModel;
    this.notifyChange("dividedActions");
    const t11 = "actions";
    this._handles.remove(t11), e7 && e7.forEach((e8) => {
      this._handles.add(l(() => [e8.uid, e8.active, e8.className, e8.disabled, e8.id, e8.title, e8.image, e8.visible], () => this.scheduleRender()), t11);
    });
  }
  _divideActions() {
    const { allActions: e7 } = this.viewModel, i6 = e7.filter((e8) => e8.visible), o5 = this._getInlineActionCount(), n5 = null === o5, s6 = 0 === o5;
    return { inlineActions: n5 ? i6.slice(0) : s6 ? new j() : i6.slice(0, o5), menuActions: n5 ? new j() : s6 ? i6.slice(0) : i6.slice(o5) };
  }
  _featureMenuOpenChanged(e7) {
    e7 ? this._focusFirstFeature = true : this._focusFeatureMenuButton = true;
  }
  _actionsMenuOpenChanged(e7) {
    e7 ? this._focusFirstAction = true : this._focusActionsMenuButton = true;
  }
  _setTitleFromFeatureWidget() {
    var _a, _b;
    const { selectedFeatureWidget: e7, messagesCommon: t11 } = this;
    e7 && (this.viewModel.title = "error" === ((_a = e7.viewModel) == null ? void 0 : _a.state) ? t11.errorMessage : ((_b = e7.viewModel) == null ? void 0 : _b.title) || "");
  }
  _setContentFromFeatureWidget() {
    const { selectedFeatureWidget: e7 } = this;
    e7 && (this.viewModel.content = e7);
  }
  _unobserveFeatureMenuObserver() {
    this._featureMenuIntersectionObserverNode && this._featureMenuIntersectionObserver.unobserve(this._featureMenuIntersectionObserverNode);
  }
  _featureMenuIntersectionObserverCreated(e7) {
    this._unobserveFeatureMenuObserver(), this._featureMenuIntersectionObserver.observe(e7), this._featureMenuIntersectionObserverNode = e7;
  }
  _handleFeatureMenuKeyup(e7) {
    "Escape" === i(e7) && (e7.stopPropagation(), this._focusFeatureMenuButton = true, this.featureMenuOpen = false, this.scheduleRender());
  }
  _handleActionMenuKeyup(e7) {
    "Escape" === i(e7) && (e7.stopPropagation(), this._focusActionsMenuButton = true, this.actionsMenuOpen = false, this.scheduleRender());
  }
  _setActiveFeature(e7) {
    const { viewModel: t11 } = this, i6 = e7.currentTarget["data-feature-index"];
    t11.activeFeature = t11.features[i6] || null;
  }
  _removeActiveFeature() {
    this.viewModel.activeFeature = null;
  }
  _handleFeatureMenuItemKeyup(e7) {
    const t11 = i(e7), { _featureMenuNode: o5 } = this, n5 = e7.currentTarget["data-feature-index"];
    if (!o5)
      return;
    const s6 = o5.querySelectorAll("li"), r4 = s6.length;
    if ("ArrowUp" !== t11)
      if ("ArrowDown" !== t11)
        if ("Home" !== t11)
          if ("End" !== t11)
            ;
          else {
            e7.stopPropagation();
            s6[s6.length - 1].focus();
          }
        else {
          e7.stopPropagation();
          s6[0].focus();
        }
      else {
        e7.stopPropagation();
        s6[(n5 + 1 + r4) % r4].focus();
      }
    else {
      e7.stopPropagation();
      s6[(n5 - 1 + r4) % r4].focus();
    }
  }
  _handleActionMenuItemKeyup(e7) {
    const t11 = i(e7), { _actionsMenuNode: o5 } = this, n5 = e7.currentTarget.dataset.actionUid, { menuActions: s6 } = this.dividedActions, r4 = s6.findIndex((e8) => e8.uid === n5);
    if (!o5)
      return;
    const l5 = o5.querySelectorAll("li"), a6 = l5.length;
    if ("ArrowUp" !== t11)
      if ("ArrowDown" !== t11)
        if ("Home" !== t11)
          if ("End" !== t11)
            ;
          else {
            e7.stopPropagation();
            l5[l5.length - 1].focus();
          }
        else {
          e7.stopPropagation();
          l5[0].focus();
        }
      else {
        e7.stopPropagation();
        l5[(r4 + 1 + a6) % a6].focus();
      }
    else {
      e7.stopPropagation();
      l5[(r4 - 1 + a6) % a6].focus();
    }
  }
  _handleMainKeyup(e7) {
    const t11 = i(e7);
    "ArrowLeft" === t11 && (e7.stopPropagation(), this.previous()), "ArrowRight" === t11 && (e7.stopPropagation(), this.next());
  }
  _spinnerEnabledChange(e7) {
    if (this._destroySpinner(), !e7)
      return;
    const t11 = this.get("viewModel.view");
    this._createSpinner(t11);
  }
  _hideSpinner() {
    const { _spinner: e7 } = this;
    e7 && (e7.location = null, e7.hide());
  }
  _displaySpinner() {
    const { _spinner: e7 } = this;
    if (!e7)
      return;
    const { location: t11, waitingForResult: i6 } = this.viewModel;
    i6 && t11 ? e7.show({ location: t11 }) : e7.hide();
  }
  _getIconStyles(e7) {
    return { "background-image": e7 ? `url(${e7})` : "" };
  }
  async _shouldFocus(e7) {
    (e7 == null ? void 0 : e7.shouldFocus) && (await j2(() => {
      var _a;
      return true === ((_a = this.viewModel) == null ? void 0 : _a.active);
    }), this.focus());
  }
  _addSelectedFeatureIndexHandle() {
    const e7 = l(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.selectedFeatureIndex;
    }, (e8, t11) => this._selectedFeatureIndexUpdated(e8, t11));
    this._handles.add(e7, B2);
  }
  _selectedFeatureIndexUpdated(e7, t11) {
    const { featureCount: i6 } = this;
    i6 && e7 !== t11 && -1 !== e7 && (this._destroyFlowItemWidgets(), this.actionsMenuOpen = false, this.featureMenuOpen = false, this._mainContainerNode && (this._mainContainerNode.scrollTop = 0), this._rootFlowItemNode && this._rootFlowItemNode.scrollContentTo({ top: 0 }));
  }
  _destroySelectedFeatureWidget() {
    const { _feature: e7 } = this;
    e7 && (e7.viewModel = null, e7 && !e7.destroyed && e7.destroy()), this._feature = null;
  }
  _isScreenLocationWithinView(e7, t11) {
    return e7.x > -1 && e7.y > -1 && e7.x <= t11.width && e7.y <= t11.height;
  }
  _isOutsideView(e7) {
    const { popupHeight: t11, popupWidth: i6, screenLocation: o5, side: n5, view: s6 } = e7;
    if (isNaN(i6) || isNaN(t11) || !s6 || !o5)
      return false;
    const r4 = s6.padding;
    return "right" === n5 && o5.x + i6 / 2 > s6.width - r4.right || ("left" === n5 && o5.x - i6 / 2 < r4.left || ("top" === n5 && o5.y - t11 < r4.top || "bottom" === n5 && o5.y + t11 > s6.height - r4.bottom));
  }
  _calculateAutoAlignment(e7) {
    if ("auto" !== e7)
      return e7;
    const { _pointerOffsetInPx: t11, _containerNode: i6, _mainContainerNode: o5, viewModel: n5 } = this, { screenLocation: r4, view: l5 } = n5;
    if (t(r4) || !l5 || !i6)
      return "top-center";
    if (!this._isScreenLocationWithinView(r4, l5))
      return this._get("currentAlignment") || "top-center";
    function a6(e8) {
      return parseInt(e8.replace(/[^-\d\.]/g, ""), 10);
    }
    const c5 = o5 ? window.getComputedStyle(o5, null) : null, d3 = c5 ? a6(c5.getPropertyValue("max-height")) : 0, u3 = c5 ? a6(c5.getPropertyValue("height")) : 0, { height: h7, width: p7 } = i6.getBoundingClientRect(), g3 = p7 + t11, m4 = Math.max(h7, d3, u3) + t11, v3 = this._isOutsideView({ popupHeight: m4, popupWidth: g3, screenLocation: r4, side: "right", view: l5 }), f5 = this._isOutsideView({ popupHeight: m4, popupWidth: g3, screenLocation: r4, side: "left", view: l5 }), _ = this._isOutsideView({ popupHeight: m4, popupWidth: g3, screenLocation: r4, side: "top", view: l5 }), w4 = this._isOutsideView({ popupHeight: m4, popupWidth: g3, screenLocation: r4, side: "bottom", view: l5 });
    return f5 ? _ ? "bottom-right" : "top-right" : v3 ? _ ? "bottom-left" : "top-left" : _ ? w4 ? "top-center" : "bottom-center" : "top-center";
  }
  _callCurrentAlignment(e7) {
    return "function" == typeof e7 ? e7.call(this) : e7;
  }
  _getCurrentAlignment() {
    const { alignment: e7, dockEnabled: t11 } = this;
    return t11 || !this.viewModel.active ? null : this._calculatePositionResult(this._calculateAutoAlignment(this._callCurrentAlignment(e7)));
  }
  _setCurrentAlignment() {
    this._set("currentAlignment", this._getCurrentAlignment());
  }
  _setCurrentDockPosition() {
    this._set("currentDockPosition", this._getCurrentDockPosition());
  }
  _calculatePositionResult(e7) {
    const t11 = ["left", "right"];
    return f2(this.container) && t11.reverse(), e7.replace(/leading/gi, t11[0]).replace(/trailing/gi, t11[1]);
  }
  _callDockPosition(e7) {
    return "function" == typeof e7 ? e7.call(this) : e7;
  }
  _getDockPosition() {
    var _a;
    return this._calculatePositionResult(this._calculateAutoDockPosition(this._callDockPosition((_a = this.dockOptions) == null ? void 0 : _a.position)));
  }
  _getCurrentDockPosition() {
    return this.dockEnabled && this.viewModel.active ? this._getDockPosition() : null;
  }
  _wouldDockTo() {
    return this.dockEnabled ? null : this._getDockPosition();
  }
  _calculateAutoDockPosition(e7) {
    var _a;
    if ("auto" !== e7)
      return e7;
    const t11 = (_a = this.viewModel) == null ? void 0 : _a.view, i6 = f2(this.container) ? "top-left" : "top-right";
    if (!t11)
      return i6;
    const o5 = t11.padding || { left: 0, right: 0, top: 0, bottom: 0 }, n5 = t11.width - o5.left - o5.right, { breakpoints: s6 } = t11;
    return s6 && n5 <= s6.xsmall ? "bottom-center" : i6;
  }
  _positionContainer(e7 = this._containerNode) {
    if (e7 && (this._containerNode = e7), !this._containerNode)
      return;
    const { screenLocation: t11 } = this.viewModel, { width: i6 } = this._containerNode.getBoundingClientRect(), o5 = this._calculatePositionStyle(t11, i6);
    o5 && Object.assign(this._containerNode.style, o5);
  }
  _calculateFullWidth(e7) {
    const { currentAlignment: t11, _pointerOffsetInPx: i6 } = this;
    return "top-left" === t11 || "bottom-left" === t11 || "top-right" === t11 || "bottom-right" === t11 ? e7 + i6 : e7;
  }
  _calculateAlignmentPosition(e7, t11, i6, o5) {
    const { currentAlignment: n5, _pointerOffsetInPx: s6 } = this;
    if (!i6)
      return;
    const { padding: r4 } = i6, l5 = o5 / 2, a6 = i6.height - t11, c5 = i6.width - e7;
    return "bottom-center" === n5 ? { top: t11 + s6 - r4.top, left: e7 - l5 - r4.left } : "top-left" === n5 ? { bottom: a6 + s6 - r4.bottom, right: c5 + s6 - r4.right } : "bottom-left" === n5 ? { top: t11 + s6 - r4.top, right: c5 + s6 - r4.right } : "top-right" === n5 ? { bottom: a6 + s6 - r4.bottom, left: e7 + s6 - r4.left } : "bottom-right" === n5 ? { top: t11 + s6 - r4.top, left: e7 + s6 - r4.left } : "top-center" === n5 ? { bottom: a6 + s6 - r4.bottom, left: e7 - l5 - r4.left } : void 0;
  }
  _calculatePositionStyle(e7, t11) {
    const { dockEnabled: i6, view: o5 } = this;
    if (!o5)
      return;
    if (i6)
      return { left: "", top: "", right: "", bottom: "" };
    if (t(e7) || !t11)
      return;
    const n5 = this._calculateFullWidth(t11), r4 = this._calculateAlignmentPosition(e7.x, e7.y, o5, n5);
    return r4 ? { top: void 0 !== r4.top ? `${r4.top}px` : "auto", left: void 0 !== r4.left ? `${r4.left}px` : "auto", bottom: void 0 !== r4.bottom ? `${r4.bottom}px` : "auto", right: void 0 !== r4.right ? `${r4.right}px` : "auto" } : void 0;
  }
  _viewChange(e7, t11) {
    e7 && t11 && (this.close(), this.clear());
  }
  _viewReadyChange(e7, t11) {
    if (e7) {
      const e8 = this.get("viewModel.view");
      this._wireUpView(e8);
    } else
      t11 && (this.close(), this.clear());
  }
  _wireUpView(e7) {
    if (this._destroySpinner(), !e7)
      return;
    const { spinnerEnabled: t11 } = this;
    t11 && this._createSpinner(e7), this._setDockEnabledForViewSize(this.dockOptions);
  }
  _dockingThresholdCrossed(e7, t11, i6) {
    const [o5, n5] = e7, [s6, r4] = t11, { width: l5 = 0, height: a6 = 0 } = i6 ?? {};
    return o5 <= l5 && s6 > l5 || o5 > l5 && s6 <= l5 || n5 <= a6 && r4 > a6 || n5 > a6 && r4 <= a6;
  }
  _updateDockEnabledForViewSize(e7, t11) {
    if (!e7 || !t11)
      return;
    const i6 = this.get("viewModel.view.padding") || { left: 0, right: 0, top: 0, bottom: 0 }, o5 = i6.left + i6.right, n5 = i6.top + i6.bottom, s6 = [], r4 = [];
    s6[0] = e7[0] - o5, s6[1] = e7[1] - n5, r4[0] = t11[0] - o5, r4[1] = t11[1] - n5;
    const { dockOptions: l5 } = this, a6 = l5.breakpoint;
    this._dockingThresholdCrossed(s6, r4, a6) && this._setDockEnabledForViewSize(l5), this._setCurrentDockPosition();
  }
  _focusDockButtonNode(e7) {
    this._focusDockButton && (this._focusDockButton = false, e7.focus());
  }
  _closeButtonNodeUpdated(e7) {
    return this._focusClose ? (this._focusClose = false, void e7.focus()) : this._blurClose ? (this._blurClose = false, void e7.blur()) : void 0;
  }
  _mainContainerNodeUpdated(e7) {
    return this._mainContainerNode = e7, this._focusContainer ? (this._focusContainer = false, void e7.focus()) : this._blurContainer ? (this._blurContainer = false, void e7.blur()) : void 0;
  }
  _featureMenuNodeUpdated(e7) {
    if (this._featureMenuNode = e7, !e7 || !this._focusFirstFeature)
      return;
    this._focusFirstFeature = false;
    const t11 = e7.querySelectorAll("li");
    if (t11.length) {
      t11[0].focus();
    }
  }
  _actionsMenuNodeUpdated(e7) {
    if (this._actionsMenuNode = e7, !e7 || !this._focusFirstAction)
      return;
    this._focusFirstAction = false;
    const t11 = e7.querySelectorAll("li");
    if (t11.length) {
      t11[0].focus();
    }
  }
  _focusFeatureMenuButtonNode(e7) {
    this._focusFeatureMenuButton && (this._focusFeatureMenuButton = false, e7.focus());
  }
  _focusActionsMenuButtonNode(e7) {
    this._focusActionsMenuButton && (this._focusActionsMenuButton = false, e7.focus());
  }
  _featureMenuViewportScrollTop() {
    this._featureMenuViewportNode && (this._featureMenuViewportNode.scrollTop = 0);
  }
  _toggleScreenLocationEnabled() {
    const { dockEnabled: e7, viewModel: t11 } = this;
    if (!t11)
      return;
    const i6 = t11.active && !e7;
    t11.screenLocationEnabled = i6;
  }
  _shouldDockAtCurrentViewSize(e7) {
    var _a, _b;
    const t11 = e7.breakpoint, i6 = (_b = (_a = this.viewModel) == null ? void 0 : _a.view) == null ? void 0 : _b.ui;
    if (!i6)
      return false;
    const { width: o5, height: n5 } = i6;
    if (isNaN(o5) || isNaN(n5))
      return false;
    if (!t11)
      return false;
    const s6 = t11.hasOwnProperty("width") && o5 <= (t11.width ?? 0), r4 = t11.hasOwnProperty("height") && n5 <= (t11.height ?? 0);
    return s6 || r4;
  }
  _setDockEnabledForViewSize(e7) {
    e7.breakpoint && (this.dockEnabled = this._shouldDockAtCurrentViewSize(e7));
  }
  _getPageText(e7, t11) {
    return this.featureNavigationVisible ? s4(this.messages.pageText, { index: t11 + 1, total: e7 }) : null;
  }
  _destroySpinner() {
    const { _spinner: e7, view: t11 } = this;
    e7 && (t11 && t11.ui && t11.ui.remove(e7, L), e7.destroy(), this._spinner = null);
  }
  _createSpinner(e7) {
    e7 && (this._spinner = new m2({ view: e7 }), e7.ui.add(this._spinner, { key: L, position: "manual" }));
  }
  _toggleCollapsed() {
    this.collapsed = !this.collapsed;
  }
  _close() {
    this.close(), this.view && this.view.focus();
  }
  _toggleDockEnabled() {
    this.dockEnabled = !this.dockEnabled, this._focusDockButton = true, this.scheduleRender();
  }
  _toggleFeatureMenu() {
    const e7 = !this.featureMenuOpen;
    this._featureMenuOpenChanged(e7), this.actionsMenuOpen = false, this.featureMenuOpen = e7;
  }
  _toggleActionsMenu() {
    const e7 = !this.actionsMenuOpen;
    this._actionsMenuOpenChanged(e7), this.featureMenuOpen = false, this.actionsMenuOpen = e7;
  }
  _triggerAction(e7) {
    const t11 = e7.currentTarget.dataset.actionUid, { allActions: i6 } = this.viewModel, o5 = i6.findIndex((e8) => e8.uid === t11), n5 = i6.getItemAt(o5);
    n5 && "toggle" === n5.type && (n5.value = !n5.value), this.actionsMenuOpen = false, this.viewModel.triggerAction(o5);
  }
  _selectFeature(e7) {
    const t11 = e7.currentTarget["data-feature-index"];
    isNaN(t11) || (this.viewModel.selectedFeatureIndex = t11), this.featureMenuOpen = false, this._focusFeatureMenuButton = true, this.scheduleRender();
  }
  _next() {
    this.next();
  }
  _previous() {
    this.previous();
  }
};
e2([y({ readOnly: true })], W2.prototype, "actionsMenuId", null), e2([y({ readOnly: true })], W2.prototype, "actionsMenuButtonId", null), e2([y({ readOnly: true })], W2.prototype, "featureMenuId", null), e2([y({ readOnly: true })], W2.prototype, "titleId", null), e2([y({ readOnly: true })], W2.prototype, "contentId", null), e2([y({ readOnly: true })], W2.prototype, "hasContent", null), e2([y({ readOnly: true })], W2.prototype, "featureNavigationVisible", null), e2([y({ readOnly: true })], W2.prototype, "collapsible", null), e2([y({ readOnly: true })], W2.prototype, "featureMenuVisible", null), e2([y({ readOnly: true })], W2.prototype, "contentCollapsed", null), e2([y({ readOnly: true })], W2.prototype, "dividedActions", null), e2([y({ readOnly: true, dependsOn: ["_flowItems.length"] })], W2.prototype, "_activeFlowItemWidget", null), e2([y()], W2.prototype, "actions", null), e2([y()], W2.prototype, "actionsMenuOpen", null), e2([y()], W2.prototype, "alignment", void 0), e2([y()], W2.prototype, "autoCloseEnabled", null), e2([y()], W2.prototype, "autoOpenEnabled", null), e2([y()], W2.prototype, "defaultPopupTemplateEnabled", null), e2([y()], W2.prototype, "content", null), e2([y()], W2.prototype, "collapsed", void 0), e2([y()], W2.prototype, "collapseEnabled", void 0), e2([y({ readOnly: true })], W2.prototype, "currentAlignment", null), e2([y({ readOnly: true })], W2.prototype, "currentDockPosition", null), e2([y()], W2.prototype, "dockOptions", null), e2([y()], W2.prototype, "dockEnabled", void 0), e2([y({ readOnly: true })], W2.prototype, "featureCount", null), e2([y()], W2.prototype, "featureMenuOpen", void 0), e2([y()], W2.prototype, "features", null), e2([y()], W2.prototype, "goToOverride", null), e2([y()], W2.prototype, "headingLevel", void 0), e2([y()], W2.prototype, "highlightEnabled", null), e2([y()], W2.prototype, "location", null), e2([y()], W2.prototype, "label", null), e2([y()], W2.prototype, "maxInlineActions", void 0), e2([y(), e3("esri/widgets/Popup/t9n/Popup")], W2.prototype, "messages", void 0), e2([y(), e3("esri/t9n/common")], W2.prototype, "messagesCommon", void 0), e2([y()], W2.prototype, "promises", null), e2([y({ readOnly: true })], W2.prototype, "selectedFeature", null), e2([y()], W2.prototype, "selectedFeatureIndex", null), e2([y({ readOnly: true })], W2.prototype, "selectedFeatureWidget", null), e2([y()], W2.prototype, "spinnerEnabled", void 0), e2([y()], W2.prototype, "title", null), e2([y()], W2.prototype, "updateLocationEnabled", null), e2([y()], W2.prototype, "view", null), e2([y({ type: H }), e4(["triggerAction", "trigger-action"])], W2.prototype, "viewModel", void 0), e2([y()], W2.prototype, "visible", null), e2([y()], W2.prototype, "visibleElements", void 0), e2([s3("visibleElements")], W2.prototype, "castVisibleElements", null), e2([t3()], W2.prototype, "_close", null), e2([t3()], W2.prototype, "_toggleDockEnabled", null), e2([t3()], W2.prototype, "_toggleFeatureMenu", null), e2([t3()], W2.prototype, "_toggleActionsMenu", null), e2([t3()], W2.prototype, "_triggerAction", null), e2([t3()], W2.prototype, "_selectFeature", null), e2([t3()], W2.prototype, "_next", null), e2([t3()], W2.prototype, "_previous", null), W2 = e2([a2("esri.widgets.Popup")], W2);
var j5 = W2;

export {
  j5 as j
};
//# sourceMappingURL=chunk-3QYVV4A6.js.map
