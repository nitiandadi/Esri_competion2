import {
  n
} from "./chunk-R6W2D4MP.js";
import {
  a as a2,
  i
} from "./chunk-WDFAEPDG.js";
import {
  v
} from "./chunk-3F26JL34.js";
import "./chunk-KEA4MCOH.js";
import "./chunk-BDRIBQHS.js";
import "./chunk-POASDJDE.js";
import {
  He
} from "./chunk-ABCADCZZ.js";
import "./chunk-YYZ27YWF.js";
import "./chunk-J7UL3GVF.js";
import "./chunk-I472ON7U.js";
import "./chunk-UQVFVW24.js";
import "./chunk-BR62GZUK.js";
import "./chunk-PKRRI2EQ.js";
import "./chunk-LYJMRI6I.js";
import "./chunk-Z4V4JOQU.js";
import "./chunk-76KZNCTA.js";
import "./chunk-2HL3WCZQ.js";
import "./chunk-IARZYQAP.js";
import "./chunk-XE7ZCKKE.js";
import "./chunk-YXIPNXU3.js";
import "./chunk-FCDGNIOF.js";
import "./chunk-FAQPWMFY.js";
import "./chunk-KAJ7UKNO.js";
import "./chunk-KXH42XSQ.js";
import "./chunk-KQT37XTK.js";
import "./chunk-ARRABRN2.js";
import "./chunk-XKQGIVQO.js";
import "./chunk-XJBZ6UIM.js";
import "./chunk-2LQUYG3Y.js";
import "./chunk-Y26PAPAL.js";
import "./chunk-TQCDA7Z6.js";
import "./chunk-TDFTAVQL.js";
import "./chunk-3ZOUEUIN.js";
import "./chunk-NOYFNECX.js";
import "./chunk-7HK5OJHH.js";
import {
  _
} from "./chunk-VRZTCZFJ.js";
import "./chunk-AZFJJ5Y2.js";
import {
  n as n2
} from "./chunk-EJKIE4MZ.js";
import "./chunk-YZ3HZMEM.js";
import "./chunk-5XBZ477A.js";
import {
  t as t3
} from "./chunk-YUXNJDFN.js";
import "./chunk-TKZTELJQ.js";
import {
  c
} from "./chunk-CPJE5ZZA.js";
import "./chunk-LJFFMEVT.js";
import "./chunk-5IWWLTWU.js";
import {
  O
} from "./chunk-74KT22JL.js";
import "./chunk-DE73MUZI.js";
import "./chunk-BQHZXXFC.js";
import {
  b
} from "./chunk-4JB2KWLF.js";
import "./chunk-3MAMOMOP.js";
import "./chunk-YUDZNCBK.js";
import {
  x
} from "./chunk-QPSL5BDS.js";
import "./chunk-37HBRPHL.js";
import "./chunk-AIOICOJJ.js";
import "./chunk-7WIVOZQ6.js";
import "./chunk-OXCMSIKI.js";
import {
  An,
  en,
  rn,
  tn,
  un
} from "./chunk-HWGER6NN.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-ZXEHLMMH.js";
import "./chunk-BHKUW5DD.js";
import "./chunk-G3ZCYHOR.js";
import "./chunk-TKLFTPA5.js";
import "./chunk-F6Y6UABE.js";
import "./chunk-4ZMXDH56.js";
import "./chunk-EOI6A2XM.js";
import "./chunk-5W2WWLX7.js";
import "./chunk-U6PCZE74.js";
import "./chunk-WLWGIFGY.js";
import "./chunk-IZJW67TO.js";
import "./chunk-Q4UXP7RG.js";
import "./chunk-JZSNGIOH.js";
import "./chunk-EXHPOUUQ.js";
import "./chunk-6PNW7TCI.js";
import "./chunk-6UZRMITW.js";
import "./chunk-HSDJ4PR2.js";
import "./chunk-QP5ZWBKN.js";
import "./chunk-QAGMOCSO.js";
import "./chunk-EPZLAQP3.js";
import "./chunk-VSUGA5AN.js";
import "./chunk-E3JHIVZP.js";
import "./chunk-3ACAMBZX.js";
import "./chunk-G3A2XEXX.js";
import "./chunk-JKBONAYS.js";
import "./chunk-YSJ4W32U.js";
import "./chunk-3EIJOCWD.js";
import "./chunk-HRIBADXS.js";
import {
  g
} from "./chunk-CSFUQCFV.js";
import {
  S2 as S,
  m as m2
} from "./chunk-ZUIHAM2A.js";
import "./chunk-SABBLK7S.js";
import "./chunk-2G4WAYFD.js";
import "./chunk-PK5IA5PH.js";
import "./chunk-7FGYV4GW.js";
import "./chunk-CXHYHUY6.js";
import "./chunk-CXBJMCKT.js";
import "./chunk-ULOJUU6K.js";
import "./chunk-3CXPBSW5.js";
import "./chunk-PLL74BYO.js";
import "./chunk-AMV7VELH.js";
import "./chunk-UZTIVDTR.js";
import {
  D,
  I,
  K,
  f as f2,
  h
} from "./chunk-33RBBVRO.js";
import "./chunk-VWOAL3VX.js";
import "./chunk-II3EAW7L.js";
import "./chunk-JU2WP2RZ.js";
import "./chunk-NI6ENKKR.js";
import "./chunk-6XDV3BWZ.js";
import "./chunk-CH2BQDQT.js";
import "./chunk-OTDDRQS2.js";
import "./chunk-W3UIP6CW.js";
import "./chunk-CHJGFW3N.js";
import {
  j
} from "./chunk-25GQOVW6.js";
import "./chunk-QLGPYDHY.js";
import "./chunk-IMKS3PQX.js";
import "./chunk-5WYME2YP.js";
import "./chunk-PEP3ZFMY.js";
import "./chunk-FZCZQIVS.js";
import "./chunk-JYX5X6UR.js";
import {
  y as y2
} from "./chunk-MQUNEV3K.js";
import "./chunk-WVICJPEU.js";
import "./chunk-TZBBKXOW.js";
import "./chunk-W6NQZGUS.js";
import "./chunk-VOSZ2G24.js";
import "./chunk-YMGINT43.js";
import "./chunk-2WLZX6A7.js";
import "./chunk-M7CMZTD6.js";
import "./chunk-ERJGVLTB.js";
import {
  E,
  f2 as f,
  w2 as w
} from "./chunk-T5VSOT6T.js";
import "./chunk-OHZM2VYI.js";
import "./chunk-MEFRCURY.js";
import {
  m,
  y as y3
} from "./chunk-FSB7TIRN.js";
import "./chunk-UIMO4FGN.js";
import "./chunk-NXJOIK2O.js";
import "./chunk-DDRAFOUW.js";
import "./chunk-F4DUNBGT.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-E4M4B5ZQ.js";
import {
  r as r2
} from "./chunk-JATK7CEQ.js";
import {
  o as o2
} from "./chunk-74TXAD7S.js";
import "./chunk-HIRLBWV3.js";
import "./chunk-AFQAO5F4.js";
import {
  a2 as a,
  e,
  t6 as t2,
  y3 as y
} from "./chunk-OA5ES74L.js";
import "./chunk-6VTYOWNK.js";
import "./chunk-RLEMMDH4.js";
import "./chunk-6ZUWLK7F.js";
import {
  s3 as s
} from "./chunk-YVZY5LDV.js";
import {
  o,
  p
} from "./chunk-H32MMKAJ.js";
import "./chunk-MKHZ5X6F.js";
import {
  r,
  t
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/layers/GraphicsLayer.js
var c2 = class extends n2(t3(b)) {
  constructor(r3) {
    super(r3), this.elevationInfo = null, this.graphics = new i(), this.screenSizePerspectiveEnabled = true, this.type = "graphics", this.internal = false;
  }
  destroy() {
    this.removeAll(), this.graphics.destroy();
  }
  add(r3) {
    return this.graphics.add(r3), this;
  }
  addMany(r3) {
    return this.graphics.addMany(r3), this;
  }
  removeAll() {
    return this.graphics.removeAll(), this;
  }
  remove(r3) {
    this.graphics.remove(r3);
  }
  removeMany(r3) {
    this.graphics.removeMany(r3);
  }
  on(r3, e2) {
    return super.on(r3, e2);
  }
  graphicChanged(r3) {
    this.emit("graphic-update", r3);
  }
};
e([y({ type: x })], c2.prototype, "elevationInfo", void 0), e([y(a2(i, "graphics"))], c2.prototype, "graphics", void 0), e([y({ type: ["show", "hide"] })], c2.prototype, "listMode", void 0), e([y()], c2.prototype, "screenSizePerspectiveEnabled", void 0), e([y({ readOnly: true })], c2.prototype, "type", void 0), e([y({ constructOnly: true })], c2.prototype, "internal", void 0), c2 = e([a("esri.layers.GraphicsLayer")], c2);
var h2 = c2;

// node_modules/@arcgis/core/layers/MapNotesLayer.js
function z(e2) {
  return "markup" === e2.featureCollectionType || e2.layers.some((e3) => null != e3.layerDefinition.visibilityField || !U(e3));
}
function U({ layerDefinition: e2, featureSet: t4 }) {
  const r3 = e2.geometryType ?? t4.geometryType;
  return H.find((t5) => {
    var _a, _b, _c;
    return r3 === t5.geometryTypeJSON && ((_c = (_b = (_a = e2.drawingInfo) == null ? void 0 : _a.renderer) == null ? void 0 : _b.symbol) == null ? void 0 : _c.type) === t5.identifyingSymbol.type;
  });
}
function W() {
  return new w({ xmin: -180, ymin: -90, xmax: 180, ymax: 90 });
}
var A = new y2({ name: "OBJECTID", alias: "OBJECTID", type: "oid", nullable: false, editable: false });
var $ = new y2({ name: "title", alias: "Title", type: "string", nullable: true, editable: true });
var q = class extends h2 {
  constructor(e2) {
    super(e2), this.visibilityMode = "inherited";
  }
  initialize() {
    for (const e2 of this.graphics)
      e2.sourceLayer = this.layer;
    this.graphics.on("after-add", (e2) => {
      e2.item.sourceLayer = this.layer;
    }), this.graphics.on("after-remove", (e2) => {
      e2.item.sourceLayer = null;
    });
  }
  get fullExtent() {
    var _a;
    const e2 = (_a = this.layer) == null ? void 0 : _a.spatialReference, t4 = this.fullBounds;
    return e2 ? t(t4) ? un(W(), e2).geometry : f2(t4, e2) : null;
  }
  get fullBounds() {
    var _a;
    const e2 = (_a = this.layer) == null ? void 0 : _a.spatialReference;
    if (!e2)
      return null;
    const t4 = D();
    return this.graphics.forEach((r3) => {
      const o3 = r(r3.geometry) ? un(r3.geometry, e2).geometry : null;
      r(o3) && h(t4, "point" === o3.type ? o3 : o3.extent, t4);
    }), I(t4, K) ? null : t4;
  }
  get sublayers() {
    return this.graphics;
  }
};
e([y({ readOnly: true })], q.prototype, "fullExtent", null), e([y({ readOnly: true })], q.prototype, "fullBounds", null), e([y({ readOnly: true })], q.prototype, "sublayers", null), e([y()], q.prototype, "layer", void 0), e([y()], q.prototype, "layerId", void 0), e([y({ readOnly: true })], q.prototype, "visibilityMode", void 0), q = e([a("esri.layers.MapNotesLayer.MapNotesSublayer")], q);
var H = [{ geometryType: "polygon", geometryTypeJSON: "esriGeometryPolygon", id: "polygonLayer", layerId: 0, title: "Polygons", identifyingSymbol: new S().toJSON() }, { geometryType: "polyline", geometryTypeJSON: "esriGeometryPolyline", id: "polylineLayer", layerId: 1, title: "Polylines", identifyingSymbol: new m().toJSON() }, { geometryType: "multipoint", geometryTypeJSON: "esriGeometryMultipoint", id: "multipointLayer", layerId: 2, title: "Multipoints", identifyingSymbol: new y3().toJSON() }, { geometryType: "point", geometryTypeJSON: "esriGeometryPoint", id: "pointLayer", layerId: 3, title: "Points", identifyingSymbol: new y3().toJSON() }, { geometryType: "point", geometryTypeJSON: "esriGeometryPoint", id: "textLayer", layerId: 4, title: "Text", identifyingSymbol: new m2().toJSON() }];
var K2 = class extends n2(t3(c(_(O(b))))) {
  constructor(e2) {
    super(e2), this.capabilities = { operations: { supportsMapNotesEditing: true } }, this.featureCollections = null, this.featureCollectionJSON = null, this.featureCollectionType = "notes", this.legendEnabled = false, this.listMode = "hide-children", this.minScale = 0, this.maxScale = 0, this.spatialReference = f.WGS84, this.sublayers = new j(H.map((e3) => new q({ id: e3.id, layerId: e3.layerId, title: e3.title, layer: this }))), this.title = "Map Notes", this.type = "map-notes", this.visibilityMode = "inherited";
  }
  readCapabilities(e2, t4, r3) {
    return { operations: { supportsMapNotesEditing: !z(t4) && "portal-item" !== (r3 == null ? void 0 : r3.origin) } };
  }
  readFeatureCollections(e2, t4, o3) {
    if (!z(t4))
      return null;
    const i2 = t4.layers.map((e3) => {
      const t5 = new He();
      return t5.read(e3, o3), t5;
    });
    return new j({ items: i2 });
  }
  readLegacyfeatureCollectionJSON(e2, t4) {
    return z(t4) ? p(t4.featureCollection) : null;
  }
  get fullExtent() {
    var _a;
    const e2 = this.spatialReference, t4 = D();
    if (r(this.sublayers))
      this.sublayers.forEach(({ fullBounds: e3 }) => r(e3) ? h(t4, e3, t4) : t4, t4);
    else if ((_a = this.featureCollectionJSON) == null ? void 0 : _a.layers.some((e3) => e3.layerDefinition.extent)) {
      this.featureCollectionJSON.layers.forEach((r3) => {
        const o3 = un(r3.layerDefinition.extent, e2).geometry;
        r(o3) && h(t4, o3, t4);
      });
    }
    return I(t4, K) ? un(W(), e2).geometry : f2(t4, e2);
  }
  readMinScale(e2, t4) {
    for (const r3 of t4.layers)
      if (null != r3.layerDefinition.minScale)
        return r3.layerDefinition.minScale;
    return 0;
  }
  readMaxScale(e2, t4) {
    for (const r3 of t4.layers)
      if (null != r3.layerDefinition.maxScale)
        return r3.layerDefinition.maxScale;
    return 0;
  }
  get multipointLayer() {
    return this._findSublayer("multipointLayer");
  }
  get pointLayer() {
    return this._findSublayer("pointLayer");
  }
  get polygonLayer() {
    return this._findSublayer("polygonLayer");
  }
  get polylineLayer() {
    return this._findSublayer("polylineLayer");
  }
  readSpatialReference(e2, t4) {
    return t4.layers.length ? f.fromJSON(t4.layers[0].layerDefinition.spatialReference) : f.WGS84;
  }
  readSublayers(e2, o3, i2) {
    if (z(o3))
      return null;
    const a3 = [];
    let n3 = o3.layers.reduce((e3, t4) => Math.max(e3, t4.layerDefinition.id ?? -1), -1) + 1;
    for (const r3 of o3.layers) {
      const { layerDefinition: e3, featureSet: o4 } = r3, i3 = e3.id ?? n3++, s2 = U(r3);
      if (r(s2)) {
        const r4 = new q({ id: s2.id, title: e3.name, layerId: i3, layer: this, graphics: o4.features.map(({ geometry: e4, symbol: r5, attributes: o5, popupInfo: i4 }) => g.fromJSON({ attributes: o5, geometry: e4, symbol: r5, popupTemplate: i4 })) });
        a3.push(r4);
      }
    }
    return new j(a3);
  }
  writeSublayers(e2, t4, r3, i2) {
    var _a;
    const { minScale: n3, maxScale: p2 } = this;
    if (t(e2))
      return;
    const y4 = e2.some((e3) => e3.graphics.length > 0);
    if (!this.capabilities.operations.supportsMapNotesEditing)
      return void (y4 && ((_a = i2 == null ? void 0 : i2.messages) == null ? void 0 : _a.push(new s("map-notes-layer:editing-not-supported", "New map notes cannot be added to this layer"))));
    const m3 = [];
    let u = this.spatialReference.toJSON();
    e:
      for (const o3 of e2)
        for (const e3 of o3.graphics)
          if (r(e3.geometry)) {
            u = e3.geometry.spatialReference.toJSON();
            break e;
          }
    for (const o3 of H) {
      const t5 = e2.find((e3) => o3.id === e3.id);
      this._writeMapNoteSublayer(m3, t5, o3, n3, p2, u, i2);
    }
    o("featureCollection.layers", m3, t4);
  }
  get textLayer() {
    return this._findSublayer("textLayer");
  }
  load(e2) {
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Feature Collection"] }, e2)), Promise.resolve(this);
  }
  read(e2, t4) {
    "featureCollection" in e2 && (e2 = p(e2), Object.assign(e2, e2.featureCollection)), super.read(e2, t4);
  }
  async beforeSave() {
    if (t(this.sublayers))
      return;
    let e2 = null;
    const t4 = [];
    for (const o3 of this.sublayers)
      for (const r4 of o3.graphics)
        if (r(r4.geometry)) {
          const o4 = r4.geometry;
          e2 ? E(o4.spatialReference, e2) || (An(o4.spatialReference, e2) || en() || await tn(), r4.geometry = rn(o4, e2)) : e2 = o4.spatialReference, t4.push(r4);
        }
    const r3 = await v(t4.map((e3) => e3.geometry));
    t4.forEach((e3, t5) => e3.geometry = r3[t5]);
  }
  _findSublayer(e2) {
    var _a;
    return t(this.sublayers) ? null : ((_a = this.sublayers) == null ? void 0 : _a.find((t4) => t4.id === e2)) ?? null;
  }
  _writeMapNoteSublayer(e2, t4, r3, o3, l, n3, s2) {
    const p2 = [];
    if (!t(t4)) {
      for (const e3 of t4.graphics)
        this._writeMapNote(p2, e3, r3.geometryType, s2);
      this._normalizeObjectIds(p2, A), e2.push({ layerDefinition: { name: t4.title, drawingInfo: { renderer: { type: "simple", symbol: p(r3.identifyingSymbol) } }, id: t4.layerId, geometryType: r3.geometryTypeJSON, minScale: o3, maxScale: l, objectIdField: "OBJECTID", fields: [A.toJSON(), $.toJSON()], spatialReference: n3 }, featureSet: { features: p2, geometryType: r3.geometryTypeJSON } });
    }
  }
  _writeMapNote(e2, t4, r3, o3) {
    var _a, _b;
    if (t(t4))
      return;
    const { geometry: i2, symbol: n3, popupTemplate: s2 } = t4;
    if (t(i2))
      return;
    if (i2.type !== r3)
      return void ((_a = o3 == null ? void 0 : o3.messages) == null ? void 0 : _a.push(new t2("map-notes-layer:invalid-geometry-type", `Geometry "${i2.type}" cannot be saved in "${r3}" layer`, { graphic: t4 })));
    if (t(n3))
      return void ((_b = o3 == null ? void 0 : o3.messages) == null ? void 0 : _b.push(new t2("map-notes-layer:no-symbol", "Skipping map notes with no symbol", { graphic: t4 })));
    const y4 = { attributes: { ...t4.attributes }, geometry: i2.toJSON(), symbol: n3.toJSON() };
    r(s2) && (y4.popupInfo = s2.toJSON()), e2.push(y4);
  }
  _normalizeObjectIds(e2, t4) {
    const r3 = t4.name;
    let o3 = n(r3, e2) + 1;
    const i2 = /* @__PURE__ */ new Set();
    for (const l of e2) {
      l.attributes || (l.attributes = {});
      const { attributes: e3 } = l;
      (null == e3[r3] || i2.has(e3[r3])) && (e3[r3] = o3++), i2.add(e3[r3]);
    }
  }
};
e([y({ readOnly: true })], K2.prototype, "capabilities", void 0), e([o2(["portal-item", "web-map"], "capabilities", ["layers"])], K2.prototype, "readCapabilities", null), e([y({ readOnly: true })], K2.prototype, "featureCollections", void 0), e([o2(["web-map", "portal-item"], "featureCollections", ["layers"])], K2.prototype, "readFeatureCollections", null), e([y({ readOnly: true, json: { origins: { "web-map": { write: { enabled: true, target: "featureCollection" } } } } })], K2.prototype, "featureCollectionJSON", void 0), e([o2(["web-map", "portal-item"], "featureCollectionJSON", ["featureCollection"])], K2.prototype, "readLegacyfeatureCollectionJSON", null), e([y({ readOnly: true, json: { read: true, write: { enabled: true, ignoreOrigin: true } } })], K2.prototype, "featureCollectionType", void 0), e([y({ readOnly: true })], K2.prototype, "fullExtent", null), e([y({ readOnly: true, json: { origins: { "web-map": { write: { target: "featureCollection.showLegend", overridePolicy() {
  return { enabled: null != this.featureCollectionJSON };
} } } } } })], K2.prototype, "legendEnabled", void 0), e([y({ type: ["show", "hide", "hide-children"] })], K2.prototype, "listMode", void 0), e([y({ type: Number, nonNullable: true, json: { write: false } })], K2.prototype, "minScale", void 0), e([o2(["web-map", "portal-item"], "minScale", ["layers"])], K2.prototype, "readMinScale", null), e([y({ type: Number, nonNullable: true, json: { write: false } })], K2.prototype, "maxScale", void 0), e([o2(["web-map", "portal-item"], "maxScale", ["layers"])], K2.prototype, "readMaxScale", null), e([y({ readOnly: true })], K2.prototype, "multipointLayer", null), e([y({ value: "ArcGISFeatureLayer", type: ["ArcGISFeatureLayer"] })], K2.prototype, "operationalLayerType", void 0), e([y({ readOnly: true })], K2.prototype, "pointLayer", null), e([y({ readOnly: true })], K2.prototype, "polygonLayer", null), e([y({ readOnly: true })], K2.prototype, "polylineLayer", null), e([y({ type: f })], K2.prototype, "spatialReference", void 0), e([o2(["web-map", "portal-item"], "spatialReference", ["layers"])], K2.prototype, "readSpatialReference", null), e([y({ readOnly: true, json: { origins: { "web-map": { write: { ignoreOrigin: true } } } } })], K2.prototype, "sublayers", void 0), e([o2("web-map", "sublayers", ["layers"])], K2.prototype, "readSublayers", null), e([r2("web-map", "sublayers")], K2.prototype, "writeSublayers", null), e([y({ readOnly: true })], K2.prototype, "textLayer", null), e([y()], K2.prototype, "title", void 0), e([y({ readOnly: true, json: { read: false } })], K2.prototype, "type", void 0), K2 = e([a("esri.layers.MapNotesLayer")], K2);
var Q = K2;
export {
  Q as default
};
//# sourceMappingURL=MapNotesLayer-CFLGVBNF.js.map
