import {
  T,
  _
} from "./chunk-WRRQGHKT.js";
import {
  u as u3
} from "./chunk-Z7EVRM6O.js";
import {
  p as p3
} from "./chunk-JSP5XSQW.js";
import {
  y as y3
} from "./chunk-3VYMEEEU.js";
import {
  P
} from "./chunk-KFVYVU45.js";
import {
  p as p2
} from "./chunk-L2YYMVOS.js";
import {
  S2 as S
} from "./chunk-Z5QBM3A6.js";
import {
  m,
  y as y2
} from "./chunk-TJWUU7NW.js";
import {
  o as o2
} from "./chunk-BQXNXAP2.js";
import {
  l as l2
} from "./chunk-BHQVXYUV.js";
import {
  S as S2
} from "./chunk-4D6JGHEF.js";
import {
  i
} from "./chunk-27R7KBOL.js";
import {
  s as s2
} from "./chunk-RDTHWDIE.js";
import {
  o
} from "./chunk-EAFLFTSD.js";
import {
  r as r2
} from "./chunk-DOVXDFWE.js";
import {
  l
} from "./chunk-KGIB6IYW.js";
import {
  a2 as a,
  e,
  t6 as t,
  u2,
  y3 as y
} from "./chunk-3PPVODAA.js";
import {
  u
} from "./chunk-PXVSWY3C.js";
import {
  s
} from "./chunk-UG2OEDEE.js";
import {
  p
} from "./chunk-PR6SXADK.js";
import {
  r
} from "./chunk-WHB7G7RI.js";

// node_modules/@arcgis/core/renderers/DictionaryRenderer.js
var p4;
var c = p4 = class extends y3(p2) {
  constructor(e3) {
    super(e3), this.config = null, this.fieldMap = null, this.scaleExpression = null, this.scaleExpressionTitle = null, this.url = null, this.type = "dictionary";
  }
  get _loader() {
    return new u3(this.url, this.config, this.fieldMap);
  }
  writeData(e3, r3) {
    e3 && (r3.scalingExpressionInfo = { expression: e3, returnType: "number" });
  }
  writeVisualVariables(e3, r3, s4, i3) {
    (i3 == null ? void 0 : i3.origin) || super.writeVisualVariables(e3, r3, s4, i3);
  }
  clone() {
    return new p4({ config: p(this.config), scaleExpression: this.scaleExpression, scaleExpressionTitle: this.scaleExpressionTitle, fieldMap: p(this.fieldMap), url: p(this.url), visualVariables: p(this.visualVariables) });
  }
  async getSymbolAsync(e3, r3) {
    return this._loader.getSymbolAsync(e3, r3);
  }
  async collectRequiredFields(e3, r3) {
    await this.collectVVRequiredFields(e3, r3), this.scaleExpression && await S2(e3, r3, this.scaleExpression);
    for (const s4 in this.fieldMap) {
      const i3 = this.fieldMap[s4];
      r3.has(i3) && e3.add(i3);
    }
  }
  get arcadeRequired() {
    return true;
  }
  getSymbol() {
    return null;
  }
  getSymbols() {
    return [];
  }
  getAttributeHash() {
    return this.visualVariables && this.visualVariables.reduce((e3, r3) => e3 + r3.getAttributeHash(), "");
  }
  getMeshHash() {
    return `${this.url}-${JSON.stringify(this.fieldMap)}`;
  }
  getSymbolFields() {
    return this._loader.getSymbolFields();
  }
};
e([y({ type: u3 })], c.prototype, "_loader", null), e([y({ type: Object, json: { read: { source: "configuration" }, write: { target: "configuration" } } })], c.prototype, "config", void 0), e([y({ type: Object, json: { write: true } })], c.prototype, "fieldMap", void 0), e([y({ type: String, json: { read: { source: "scalingExpressionInfo.expression" }, write: true } })], c.prototype, "scaleExpression", void 0), e([r2("scaleExpression")], c.prototype, "writeData", null), e([y({ type: String, json: { read: { source: "scalingExpressionInfo.title" }, write: { target: "scalingExpressionInfo.title", overridePolicy(e3) {
  return { enabled: !!e3 && !!this.scaleExpression };
} } } })], c.prototype, "scaleExpressionTitle", void 0), e([y({ type: String, json: { write: true } })], c.prototype, "url", void 0), e([r2("visualVariables")], c.prototype, "writeVisualVariables", null), c = p4 = e([a("esri.renderers.DictionaryRenderer")], c);
var u4 = c;

// node_modules/@arcgis/core/renderers/support/AttributeColorInfo.js
var n;
var u5 = n = class extends l {
  constructor(e3) {
    super(e3), this.color = null, this.field = null, this.label = null, this.valueExpression = null, this.valueExpressionTitle = null;
  }
  castField(e3) {
    return null == e3 ? e3 : "function" == typeof e3 ? (s.getLogger(this.declaredClass).error(".field: field must be a string value"), null) : u(e3);
  }
  getAttributeHash() {
    return `${this.field}-${this.valueExpression}`;
  }
  clone() {
    return new n({ color: this.color && this.color.clone(), field: this.field, label: this.label, valueExpression: this.valueExpression, valueExpressionTitle: this.valueExpressionTitle });
  }
};
e([y({ type: l2, json: { type: [Number], write: true } })], u5.prototype, "color", void 0), e([y({ type: String, json: { write: true } })], u5.prototype, "field", void 0), e([s2("field")], u5.prototype, "castField", null), e([y({ type: String, json: { write: true } })], u5.prototype, "label", void 0), e([y({ type: String, json: { write: true } })], u5.prototype, "valueExpression", void 0), e([y({ type: String, json: { write: true } })], u5.prototype, "valueExpressionTitle", void 0), u5 = n = e([a("esri.renderers.support.AttributeColorInfo")], u5);
var a2 = u5;

// node_modules/@arcgis/core/renderers/support/DotDensityLegendOptions.js
var e2;
var p5 = e2 = class extends l {
  constructor() {
    super(...arguments), this.unit = null;
  }
  clone() {
    return new e2({ unit: this.unit });
  }
};
e([y({ type: String, json: { write: true } })], p5.prototype, "unit", void 0), p5 = e2 = e([a("esri.renderers.support.DotDensityLegendOptions")], p5);
var c2 = p5;

// node_modules/@arcgis/core/renderers/DotDensityRenderer.js
var h;
var m2 = h = class extends y3(p2) {
  constructor(t3) {
    super(t3), this.attributes = null, this.backgroundColor = new l2([0, 0, 0, 0]), this.dotBlendingEnabled = true, this.dotShape = "square", this.dotSize = 1, this.legendOptions = null, this.outline = new m(), this.dotValue = null, this.referenceScale = null, this.seed = 1, this.type = "dot-density";
  }
  calculateDotValue(t3) {
    if (null == this.referenceScale)
      return this.dotValue;
    const e3 = t3 / this.referenceScale * this.dotValue;
    return e3 < 1 ? 1 : e3;
  }
  getSymbol() {
    return new S({ outline: this.outline });
  }
  async getSymbolAsync() {
    return this.getSymbol();
  }
  getSymbols() {
    return [this.getSymbol()];
  }
  getAttributeHash() {
    var _a;
    return ((_a = this.attributes) == null ? void 0 : _a.reduce((t3, e3) => t3 + e3.getAttributeHash(), "")) ?? "";
  }
  getMeshHash() {
    return JSON.stringify(this.outline);
  }
  clone() {
    return new h({ attributes: p(this.attributes), backgroundColor: p(this.backgroundColor), dotBlendingEnabled: p(this.dotBlendingEnabled), dotShape: p(this.dotShape), dotSize: p(this.dotSize), dotValue: p(this.dotValue), legendOptions: p(this.legendOptions), outline: p(this.outline), referenceScale: p(this.referenceScale), visualVariables: p(this.visualVariables), authoringInfo: this.authoringInfo && this.authoringInfo.clone() });
  }
  getControllerHash() {
    var _a;
    const t3 = (_a = this.attributes) == null ? void 0 : _a.map((t4) => t4.field || t4.valueExpression || "");
    return `${t3}-${this.outline && JSON.stringify(this.outline.toJSON()) || ""}`;
  }
  async collectRequiredFields(t3, e3) {
    await this.collectVVRequiredFields(t3, e3);
    for (const o4 of this.attributes ?? [])
      o4.valueExpression && await S2(t3, e3, o4.valueExpression), o4.field && t3.add(o4.field);
  }
};
e([y({ type: [a2], json: { write: true } })], m2.prototype, "attributes", void 0), e([y({ type: l2, json: { write: true } })], m2.prototype, "backgroundColor", void 0), e([y({ type: Boolean, json: { write: true } })], m2.prototype, "dotBlendingEnabled", void 0), e([y({ type: String, json: { write: false } })], m2.prototype, "dotShape", void 0), e([y({ type: Number, json: { write: true } })], m2.prototype, "dotSize", void 0), e([y({ type: c2, json: { write: true } })], m2.prototype, "legendOptions", void 0), e([y({ type: m, json: { default: null, write: true } })], m2.prototype, "outline", void 0), e([y({ type: Number, json: { write: true } })], m2.prototype, "dotValue", void 0), e([y({ type: Number, json: { write: true } })], m2.prototype, "referenceScale", void 0), e([y({ type: Number, json: { write: true } })], m2.prototype, "seed", void 0), e([o({ dotDensity: "dot-density" })], m2.prototype, "type", void 0), m2 = h = e([a("esri.renderers.DotDensityRenderer")], m2);
var y4 = m2;

// node_modules/@arcgis/core/renderers/support/OthersCategory.js
var i2 = class extends i(l) {
  constructor() {
    super(...arguments), this.color = new l2([0, 0, 0, 0]), this.label = null, this.threshold = 0;
  }
};
e([y({ type: l2, json: { write: true } })], i2.prototype, "color", void 0), e([y({ type: String, json: { write: true } })], i2.prototype, "label", void 0), e([y({ type: Number, range: { min: 0, max: 1 }, json: { write: true } })], i2.prototype, "threshold", void 0), i2 = e([a("esri.renderers.support.OthersCategory")], i2);

// node_modules/@arcgis/core/renderers/support/PieChartLegendOptions.js
var p6 = class extends i(l) {
  constructor() {
    super(...arguments), this.title = null;
  }
};
e([y({ type: String, json: { write: true } })], p6.prototype, "title", void 0), p6 = e([a("esri.renderers.support.PieChartLegendOptions")], p6);

// node_modules/@arcgis/core/renderers/PieChartRenderer.js
var f = class extends y3(i(p2)) {
  constructor(t3) {
    super(t3), this.attributes = null, this.backgroundFillSymbol = null, this.defaultColor = new l2([0, 0, 0, 0]), this.defaultLabel = null, this.holePercentage = 0, this.othersCategory = new i2(), this.legendOptions = null, this.outline = null, this.size = 12, this.type = "pie-chart";
  }
  getSymbol() {
    var _a;
    return new y2({ size: this.size ? this.size / 2 + (((_a = this.outline) == null ? void 0 : _a.width) || 0) : 0 });
  }
  async getSymbolAsync() {
    return this.getSymbol();
  }
  getSymbols() {
    return [this.getSymbol(), this.backgroundFillSymbol].filter(r);
  }
  getAttributeHash() {
    return this.visualVariables && this.visualVariables.reduce((t3, e3) => t3 + e3.getAttributeHash(), "");
  }
  getMeshHash() {
    return this.getSymbols().reduce((t3, e3) => t3 + JSON.stringify(e3), "");
  }
  async collectRequiredFields(t3, e3) {
    await this.collectVVRequiredFields(t3, e3);
    for (const o4 of this.attributes)
      o4.valueExpression && await S2(t3, e3, o4.valueExpression), o4.field && t3.add(o4.field);
  }
};
e([y({ type: [a2], json: { write: true } })], f.prototype, "attributes", void 0), e([y({ type: S, json: { default: null, write: true } })], f.prototype, "backgroundFillSymbol", void 0), e([y({ type: l2, json: { write: true } })], f.prototype, "defaultColor", void 0), e([y({ type: String, json: { write: true } })], f.prototype, "defaultLabel", void 0), e([y({ type: Number, range: { min: 0, max: 1 }, json: { write: true } })], f.prototype, "holePercentage", void 0), e([y({ type: i2, json: { write: true } })], f.prototype, "othersCategory", void 0), e([y({ type: p6, json: { write: true } })], f.prototype, "legendOptions", void 0), e([y({ type: m, json: { default: null, write: true } })], f.prototype, "outline", void 0), e([y({ type: Number, cast: o2, json: { write: true } })], f.prototype, "size", void 0), e([o({ pieChart: "pie-chart" })], f.prototype, "type", void 0), f = e([a("esri.renderers.PieChartRenderer")], f);
var j = f;

// node_modules/@arcgis/core/renderers/support/types.js
var p7 = { key: "type", base: p2, typeMap: { heatmap: P, simple: p3, "unique-value": T, "class-breaks": _, "dot-density": y4, dictionary: u4, "pie-chart": j }, errorContext: "renderer" };
var n2 = { key: "type", base: p2, typeMap: { simple: p3, "unique-value": T, "class-breaks": _, heatmap: P }, errorContext: "renderer" };

// node_modules/@arcgis/core/renderers/support/jsonUtils.js
function t2(e3, r3) {
  return o3(e3, null, r3);
}
var s3 = u2({ types: p7 });
function o3(r3, n3, t3) {
  return r3 ? r3 && (r3.styleName || r3.styleUrl) && "uniqueValue" !== r3.type ? (t3 && t3.messages && t3.messages.push(new t("renderer:unsupported", "Only UniqueValueRenderer can be referenced from a web style, but found '" + r3.type + "'", { definition: r3, context: t3 })), null) : s3(r3, n3, t3) : null;
}

export {
  u4 as u,
  y4 as y,
  j,
  p7 as p,
  n2 as n,
  t2 as t,
  o3 as o
};
//# sourceMappingURL=chunk-RRDTWKKD.js.map
