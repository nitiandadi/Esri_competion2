import {
  K
} from "./chunk-WJ5TQVAC.js";
import "./chunk-RVIP4W3J.js";
import {
  I,
  T
} from "./chunk-K6WVLQY6.js";
import {
  m
} from "./chunk-TCBSWCXP.js";
import {
  g as g2
} from "./chunk-MZWXV5BA.js";
import {
  ee
} from "./chunk-P7WHLALO.js";
import "./chunk-MWZKAEWD.js";
import "./chunk-2PTKNNW7.js";
import "./chunk-MXRYGWSY.js";
import "./chunk-KPS7FFP3.js";
import {
  f as f2,
  g
} from "./chunk-J5XD5R5N.js";
import "./chunk-AWGMYJGH.js";
import "./chunk-JLELSJK5.js";
import "./chunk-CEQ74MRR.js";
import "./chunk-Y5TO5CEM.js";
import "./chunk-BKGJHAJX.js";
import "./chunk-V2OTMPXZ.js";
import "./chunk-OEIEPNC6.js";
import "./chunk-2E4SJPYR.js";
import "./chunk-U34LDFXK.js";
import "./chunk-QARU3EBQ.js";
import "./chunk-PXPM76YN.js";
import "./chunk-6XE2FUT4.js";
import "./chunk-2VRWGZDB.js";
import "./chunk-FQONAW2G.js";
import "./chunk-7Q77X7UJ.js";
import {
  ct,
  ut
} from "./chunk-NOYTM57S.js";
import "./chunk-OPQ632ST.js";
import "./chunk-U6GC73UT.js";
import {
  j as j2
} from "./chunk-FAK3SJAD.js";
import {
  r as r2
} from "./chunk-POTXVYUT.js";
import "./chunk-YMSHUIGU.js";
import "./chunk-T5PSDOZP.js";
import "./chunk-REIXEATJ.js";
import "./chunk-YEFLZ2OV.js";
import "./chunk-W42YI6TX.js";
import "./chunk-ICG3HFWD.js";
import "./chunk-EPJSBV4J.js";
import "./chunk-XP5MC636.js";
import "./chunk-TM5UW7VI.js";
import "./chunk-WVLEGBEW.js";
import "./chunk-Y3KJPDCE.js";
import "./chunk-LSUFI7PR.js";
import "./chunk-JT54I3AY.js";
import "./chunk-TNTTCGVB.js";
import "./chunk-DC3QI5ZE.js";
import "./chunk-EGHLQERQ.js";
import "./chunk-FXMJJBXP.js";
import "./chunk-6YBCJ6DZ.js";
import "./chunk-QJXSE36Y.js";
import "./chunk-WV4G3ROK.js";
import "./chunk-M3KO43BW.js";
import "./chunk-I2U7UK6N.js";
import "./chunk-6TTVNN6M.js";
import "./chunk-3UXY2S4E.js";
import "./chunk-CPUYSXBP.js";
import "./chunk-MJFFZ3MM.js";
import "./chunk-7FMLQXIT.js";
import "./chunk-B6GJAETG.js";
import "./chunk-FC74MT6E.js";
import {
  E,
  c
} from "./chunk-H2ENCYR3.js";
import "./chunk-SVHG5VY2.js";
import "./chunk-FQ7L63IU.js";
import "./chunk-S47644HM.js";
import "./chunk-QXPN4D5D.js";
import "./chunk-DLM7WQKI.js";
import "./chunk-7GTATSRF.js";
import "./chunk-MTJ2HM2W.js";
import "./chunk-PXVSWY3C.js";
import {
  f,
  j
} from "./chunk-QLY5H3XF.js";
import {
  s,
  s2
} from "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import {
  e,
  r
} from "./chunk-WHB7G7RI.js";
import "./chunk-DFKQJ226.js";

// node_modules/@arcgis/core/layers/graphics/sources/WFSSourceWorker.js
var E2 = class {
  constructor() {
    this._queryEngine = null, this._customParameters = null, this._snapshotFeatures = async (e2) => {
      const { objectIdField: t } = this._queryEngine, r3 = await K(this._getFeatureUrl ?? "", this._featureType.typeName, this._getFeatureOutputFormat, { customParameters: this._customParameters, dateFields: this._queryEngine.fieldsIndex.dateFields.map((e3) => e3.name), signal: e2 });
      await T(r3), f(e2);
      const a = I(r3, { geometryType: this._queryEngine.geometryType, hasZ: false, objectIdField: t });
      if (!E(this._queryEngine.spatialReference, c))
        for (const i of a)
          r(i.geometry) && (i.geometry = ct(g(ut(i.geometry, this._queryEngine.geometryType, false, false), c, this._queryEngine.spatialReference)));
      let o = 1;
      for (const s3 of a) {
        const e3 = {};
        m(this._fieldsIndex, e3, s3.attributes, true), s3.attributes = e3, null == s3.attributes[t] && (s3.objectId = s3.attributes[t] = o++);
      }
      return a;
    };
  }
  destroy() {
    var _a;
    (_a = this._queryEngine) == null ? void 0 : _a.destroy(), this._queryEngine = null;
  }
  async load(e2, t) {
    const { getFeatureUrl: r3, getFeatureOutputFormat: s3, spatialReference: o, fields: n, geometryType: u, featureType: p, objectIdField: h, customParameters: c2 } = e2;
    this._featureType = p, this._customParameters = c2, this._getFeatureUrl = r3, this._getFeatureOutputFormat = s3, this._fieldsIndex = new r2(n), await this._checkProjection(o), f(t), this._queryEngine = new ee({ fields: n, geometryType: u, hasM: false, hasZ: false, objectIdField: h, spatialReference: o, timeInfo: null, featureStore: new g2({ geometryType: u, hasM: false, hasZ: false }) });
    const m2 = await this._snapshotFeatures(e(t.signal));
    return this._queryEngine.featureStore.addMany(m2), { extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async applyEdits() {
    throw new s2("wfs-source:editing-not-supported", "applyEdits() is not supported on WFSLayer");
  }
  async queryFeatures(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQuery(e2, t.signal);
  }
  async queryFeatureCount(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForCount(e2, t.signal);
  }
  async queryObjectIds(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForIds(e2, t.signal);
  }
  async queryExtent(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForExtent(e2, t.signal);
  }
  async querySnapping(e2, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForSnapping(e2, t.signal);
  }
  async refresh(s3) {
    var _a;
    return this._customParameters = s3, (_a = this._snapshotTask) == null ? void 0 : _a.abort(), this._snapshotTask = j2(this._snapshotFeatures), this._snapshotTask.promise.then((e2) => {
      this._queryEngine.featureStore.clear(), e2 && this._queryEngine.featureStore.addMany(e2);
    }, (e2) => {
      this._queryEngine.featureStore.clear(), j(e2) || s.getLogger("esri.layers.WFSLayer").error(new s2("wfs-layer:getfeature-error", "An error occurred during the GetFeature request", { error: e2 }));
    }), await this._waitSnapshotComplete(), { extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async _waitSnapshotComplete() {
    if (this._snapshotTask && !this._snapshotTask.finished) {
      try {
        await this._snapshotTask.promise;
      } catch {
      }
      return this._waitSnapshotComplete();
    }
  }
  async _checkProjection(e2) {
    try {
      await f2(c, e2);
    } catch {
      throw new s2("unsupported-projection", "Projection not supported", { spatialReference: e2 });
    }
  }
};
export {
  E2 as default
};
//# sourceMappingURL=WFSSourceWorker-43VZF5Y5.js.map
