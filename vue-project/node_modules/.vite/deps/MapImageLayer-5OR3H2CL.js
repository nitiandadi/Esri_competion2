import {
  c as c2
} from "./chunk-M7CYYMC4.js";
import "./chunk-DZUX232E.js";
import {
  i as i2
} from "./chunk-VVVUDKKQ.js";
import {
  E,
  Z,
  y as y2
} from "./chunk-IEFYL2IS.js";
import {
  n as n2
} from "./chunk-OGX6J3DJ.js";
import "./chunk-A33TFRHV.js";
import "./chunk-3MGDBME5.js";
import {
  e as e2
} from "./chunk-V5EOPCGF.js";
import "./chunk-3MAEJ4CR.js";
import "./chunk-CTDAE47L.js";
import "./chunk-XCZVGB7V.js";
import "./chunk-3F26JL34.js";
import "./chunk-KEA4MCOH.js";
import "./chunk-PSKRKTRX.js";
import "./chunk-G5KRBGFN.js";
import "./chunk-UZM66DAH.js";
import "./chunk-CFTD44JM.js";
import "./chunk-MI7FJDLG.js";
import "./chunk-JDPKCYHU.js";
import {
  l
} from "./chunk-ITPL42M7.js";
import "./chunk-55MPB7OZ.js";
import "./chunk-BDRIBQHS.js";
import "./chunk-POASDJDE.js";
import "./chunk-I472ON7U.js";
import "./chunk-UQVFVW24.js";
import {
  e as e3
} from "./chunk-BR62GZUK.js";
import "./chunk-PKRRI2EQ.js";
import {
  i
} from "./chunk-Z4V4JOQU.js";
import {
  p as p2
} from "./chunk-2HL3WCZQ.js";
import "./chunk-KXH42XSQ.js";
import "./chunk-KQT37XTK.js";
import "./chunk-ARRABRN2.js";
import "./chunk-XKQGIVQO.js";
import {
  a as a4
} from "./chunk-XJBZ6UIM.js";
import {
  a as a2
} from "./chunk-2LQUYG3Y.js";
import {
  o as o2
} from "./chunk-Y26PAPAL.js";
import "./chunk-TQCDA7Z6.js";
import "./chunk-TDFTAVQL.js";
import {
  _
} from "./chunk-VRZTCZFJ.js";
import {
  p
} from "./chunk-AZFJJ5Y2.js";
import {
  n
} from "./chunk-EJKIE4MZ.js";
import "./chunk-YZ3HZMEM.js";
import "./chunk-5XBZ477A.js";
import {
  t as t2
} from "./chunk-YUXNJDFN.js";
import "./chunk-TKZTELJQ.js";
import {
  c
} from "./chunk-CPJE5ZZA.js";
import {
  f
} from "./chunk-LJFFMEVT.js";
import "./chunk-5IWWLTWU.js";
import {
  O
} from "./chunk-74KT22JL.js";
import "./chunk-BQHZXXFC.js";
import {
  b
} from "./chunk-4JB2KWLF.js";
import "./chunk-3MAMOMOP.js";
import "./chunk-YUDZNCBK.js";
import "./chunk-QPSL5BDS.js";
import "./chunk-37HBRPHL.js";
import "./chunk-AIOICOJJ.js";
import "./chunk-7WIVOZQ6.js";
import "./chunk-OXCMSIKI.js";
import "./chunk-HWGER6NN.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-ZXEHLMMH.js";
import "./chunk-BHKUW5DD.js";
import "./chunk-G3ZCYHOR.js";
import "./chunk-TKLFTPA5.js";
import {
  a as a3
} from "./chunk-F6Y6UABE.js";
import "./chunk-5W2WWLX7.js";
import "./chunk-U6PCZE74.js";
import "./chunk-WLWGIFGY.js";
import "./chunk-IZJW67TO.js";
import "./chunk-Q4UXP7RG.js";
import "./chunk-JZSNGIOH.js";
import "./chunk-EXHPOUUQ.js";
import "./chunk-6PNW7TCI.js";
import "./chunk-6UZRMITW.js";
import "./chunk-HSDJ4PR2.js";
import "./chunk-QP5ZWBKN.js";
import "./chunk-QAGMOCSO.js";
import "./chunk-EPZLAQP3.js";
import "./chunk-VSUGA5AN.js";
import "./chunk-E3JHIVZP.js";
import "./chunk-3ACAMBZX.js";
import "./chunk-G3A2XEXX.js";
import "./chunk-JKBONAYS.js";
import "./chunk-YSJ4W32U.js";
import "./chunk-3EIJOCWD.js";
import "./chunk-HRIBADXS.js";
import "./chunk-CSFUQCFV.js";
import "./chunk-ZUIHAM2A.js";
import "./chunk-SABBLK7S.js";
import "./chunk-2G4WAYFD.js";
import "./chunk-PK5IA5PH.js";
import "./chunk-7FGYV4GW.js";
import "./chunk-CXHYHUY6.js";
import "./chunk-CXBJMCKT.js";
import "./chunk-ULOJUU6K.js";
import "./chunk-3CXPBSW5.js";
import "./chunk-PLL74BYO.js";
import "./chunk-AMV7VELH.js";
import "./chunk-UZTIVDTR.js";
import "./chunk-33RBBVRO.js";
import "./chunk-VWOAL3VX.js";
import "./chunk-II3EAW7L.js";
import {
  U
} from "./chunk-JU2WP2RZ.js";
import "./chunk-NI6ENKKR.js";
import "./chunk-6XDV3BWZ.js";
import "./chunk-CH2BQDQT.js";
import "./chunk-OTDDRQS2.js";
import "./chunk-W3UIP6CW.js";
import "./chunk-CHJGFW3N.js";
import "./chunk-25GQOVW6.js";
import "./chunk-QLGPYDHY.js";
import "./chunk-IMKS3PQX.js";
import "./chunk-5WYME2YP.js";
import "./chunk-PEP3ZFMY.js";
import "./chunk-FZCZQIVS.js";
import "./chunk-JYX5X6UR.js";
import "./chunk-MQUNEV3K.js";
import "./chunk-WVICJPEU.js";
import "./chunk-TZBBKXOW.js";
import {
  T as T2
} from "./chunk-VOSZ2G24.js";
import "./chunk-YMGINT43.js";
import "./chunk-2WLZX6A7.js";
import "./chunk-M7CMZTD6.js";
import "./chunk-ERJGVLTB.js";
import {
  w2
} from "./chunk-T5VSOT6T.js";
import "./chunk-OHZM2VYI.js";
import "./chunk-FSB7TIRN.js";
import "./chunk-UIMO4FGN.js";
import "./chunk-NXJOIK2O.js";
import "./chunk-DDRAFOUW.js";
import "./chunk-F4DUNBGT.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-E4M4B5ZQ.js";
import {
  r as r3
} from "./chunk-JATK7CEQ.js";
import {
  o
} from "./chunk-74TXAD7S.js";
import "./chunk-HIRLBWV3.js";
import "./chunk-AFQAO5F4.js";
import {
  a2 as a,
  e,
  r2,
  t3 as t,
  y3 as y
} from "./chunk-OA5ES74L.js";
import "./chunk-6VTYOWNK.js";
import {
  T
} from "./chunk-RLEMMDH4.js";
import {
  j,
  w
} from "./chunk-6ZUWLK7F.js";
import {
  s3 as s
} from "./chunk-YVZY5LDV.js";
import "./chunk-H32MMKAJ.js";
import "./chunk-MKHZ5X6F.js";
import {
  r
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/layers/MapImageLayer.js
var k = class extends n(a4(t2(E(y2(p2(c(_(O(p(i(o2(a3(b))))))))))))) {
  constructor(...e4) {
    super(...e4), this.dateFieldsTimeReference = null, this.datesInUnknownTimezone = false, this.dpi = 96, this.gdbVersion = null, this.imageFormat = "png24", this.imageMaxHeight = 2048, this.imageMaxWidth = 2048, this.imageTransparency = true, this.isReference = null, this.labelsVisible = false, this.operationalLayerType = "ArcGISMapServiceLayer", this.preferredTimeReference = null, this.sourceJSON = null, this.sublayers = null, this.type = "map-image", this.url = null;
  }
  normalizeCtorArgs(e4, r4) {
    return "string" == typeof e4 ? { url: e4, ...r4 } : e4;
  }
  load(e4) {
    const r4 = r(e4) ? e4.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e4).catch(w).then(() => this._fetchService(r4))), Promise.resolve(this);
  }
  readImageFormat(e4, r4) {
    const t3 = r4.supportedImageFormatTypes;
    return t3 && t3.includes("PNG32") ? "png32" : "png24";
  }
  writeSublayers(e4, r4, t3, i3) {
    var _a;
    if (!this.loaded || !e4)
      return;
    const o3 = e4.slice().reverse().flatten(({ sublayers: e5 }) => e5 && e5.toArray().reverse()).toArray();
    let s2 = false;
    if (this.capabilities && this.capabilities.operations.supportsExportMap && ((_a = this.capabilities.exportMap) == null ? void 0 : _a.supportsDynamicLayers)) {
      const e5 = t(i3.origin);
      if (e5 === r2.PORTAL_ITEM) {
        const e6 = this.createSublayersForOrigin("service").sublayers;
        s2 = n2(o3, e6, r2.SERVICE);
      } else if (e5 > r2.PORTAL_ITEM) {
        const e6 = this.createSublayersForOrigin("portal-item");
        s2 = n2(o3, e6.sublayers, t(e6.origin));
      }
    }
    const a5 = [], p3 = { writeSublayerStructure: s2, ...i3 };
    let n3 = s2;
    o3.forEach((e5) => {
      const r5 = e5.write({}, p3);
      a5.push(r5), n3 = n3 || "user" === e5.originOf("visible");
    });
    a5.some((e5) => Object.keys(e5).length > 1) && (r4.layers = a5), n3 && (r4.visibleLayers = o3.filter((e5) => e5.visible).map((e5) => e5.id));
  }
  createExportImageParameters(e4, r4, t3, i3) {
    const o3 = i3 && i3.pixelRatio || 1;
    e4 && this.version >= 10 && (e4 = e4.clone().shiftCentralMeridian());
    const s2 = new c2({ layer: this, floors: i3 == null ? void 0 : i3.floors, scale: i2({ extent: e4, width: r4 }) * o3 }), a5 = s2.toJSON();
    s2.destroy();
    const p3 = !i3 || !i3.rotation || this.version < 10.3 ? {} : { rotation: -i3.rotation }, n3 = e4 && e4.spatialReference, m = n3.wkid || JSON.stringify(n3.toJSON());
    a5.dpi *= o3;
    const l2 = {};
    if (i3 == null ? void 0 : i3.timeExtent) {
      const { start: e5, end: r5 } = i3.timeExtent.toJSON();
      l2.time = e5 && r5 && e5 === r5 ? "" + e5 : `${e5 ?? "null"},${r5 ?? "null"}`;
    } else
      this.timeInfo && !this.timeInfo.hasLiveData && (l2.time = "null,null");
    return { bbox: e4 && e4.xmin + "," + e4.ymin + "," + e4.xmax + "," + e4.ymax, bboxSR: m, imageSR: m, size: r4 + "," + t3, ...a5, ...p3, ...l2 };
  }
  async fetchImage(e4, r4, t3, i3) {
    const { data: o3 } = await this._fetchImage("image", e4, r4, t3, i3);
    return o3;
  }
  async fetchImageBitmap(e4, r4, t3, i3) {
    const { data: o3, url: s2 } = await this._fetchImage("blob", e4, r4, t3, i3);
    return e2(o3, s2);
  }
  async fetchRecomputedExtents(e4 = {}) {
    const i3 = { ...e4, query: { returnUpdates: true, f: "json", ...this.customParameters, token: this.apiKey } }, { data: o3 } = await U(this.url, i3), { extent: s2, fullExtent: a5, timeExtent: p3 } = o3, n3 = s2 || a5;
    return { fullExtent: n3 && w2.fromJSON(n3), timeExtent: p3 && T2.fromJSON({ start: p3[0], end: p3[1] }) };
  }
  loadAll() {
    return l(this, (e4) => {
      e4(this.allSublayers);
    });
  }
  serviceSupportsSpatialReference(e4) {
    return e3(this, e4);
  }
  async _fetchImage(e4, t3, o3, s2, a5) {
    var _a, _b, _c;
    const p3 = { responseType: e4, signal: (a5 == null ? void 0 : a5.signal) ?? null, query: { ...this.parsedUrl.query, ...this.createExportImageParameters(t3, o3, s2, a5), f: "image", ...this.refreshParameters, ...this.customParameters, token: this.apiKey } }, n3 = this.parsedUrl.path + "/export";
    if (null != ((_a = p3.query) == null ? void 0 : _a.dynamicLayers) && !((_c = (_b = this.capabilities) == null ? void 0 : _b.exportMap) == null ? void 0 : _c.supportsDynamicLayers))
      throw new s("mapimagelayer:dynamiclayer-not-supported", `service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`, { query: p3.query });
    try {
      const { data: e5 } = await U(n3, p3);
      return { data: e5, url: n3 };
    } catch (l2) {
      if (j(l2))
        throw l2;
      throw new s("mapimagelayer:image-fetch-error", `Unable to load image: ${n3}`, { error: l2 });
    }
  }
  async _fetchService(e4) {
    if (this.sourceJSON)
      return void this.read(this.sourceJSON, { origin: "service", url: this.parsedUrl });
    const { data: t3, ssl: i3 } = await U(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, signal: e4 });
    i3 && (this.url = this.url.replace(/^http:/i, "https:")), this.sourceJSON = t3, this.read(t3, { origin: "service", url: this.parsedUrl });
  }
};
e([y({ type: a2 })], k.prototype, "dateFieldsTimeReference", void 0), e([y({ type: Boolean })], k.prototype, "datesInUnknownTimezone", void 0), e([y()], k.prototype, "dpi", void 0), e([y()], k.prototype, "gdbVersion", void 0), e([y()], k.prototype, "imageFormat", void 0), e([o("imageFormat", ["supportedImageFormatTypes"])], k.prototype, "readImageFormat", null), e([y({ json: { origins: { service: { read: { source: "maxImageHeight" } } } } })], k.prototype, "imageMaxHeight", void 0), e([y({ json: { origins: { service: { read: { source: "maxImageWidth" } } } } })], k.prototype, "imageMaxWidth", void 0), e([y()], k.prototype, "imageTransparency", void 0), e([y({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], k.prototype, "isReference", void 0), e([y({ json: { read: false, write: false } })], k.prototype, "labelsVisible", void 0), e([y({ type: ["ArcGISMapServiceLayer"] })], k.prototype, "operationalLayerType", void 0), e([y({ json: { read: false, write: false } })], k.prototype, "popupEnabled", void 0), e([y({ type: a2 })], k.prototype, "preferredTimeReference", void 0), e([y()], k.prototype, "sourceJSON", void 0), e([y({ json: { write: { ignoreOrigin: true } } })], k.prototype, "sublayers", void 0), e([r3("sublayers", { layers: { type: [Z] }, visibleLayers: { type: [T] } })], k.prototype, "writeSublayers", null), e([y({ type: ["show", "hide", "hide-children"] })], k.prototype, "listMode", void 0), e([y({ json: { read: false }, readOnly: true, value: "map-image" })], k.prototype, "type", void 0), e([y(f)], k.prototype, "url", void 0), k = e([a("esri.layers.MapImageLayer")], k);
var _2 = k;
export {
  _2 as default
};
//# sourceMappingURL=MapImageLayer-5OR3H2CL.js.map
