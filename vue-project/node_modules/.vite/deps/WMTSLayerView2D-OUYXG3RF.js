import {
  n,
  t
} from "./chunk-XPDJMRGT.js";
import "./chunk-WPQ2ZKAK.js";
import "./chunk-J7OMJ47S.js";
import "./chunk-VLSIPNEZ.js";
import "./chunk-4FSIMQ5G.js";
import "./chunk-5MOZZS3P.js";
import "./chunk-7XVHXPW5.js";
import {
  i
} from "./chunk-J5CNSFEW.js";
import {
  f,
  u
} from "./chunk-F6PAWSTX.js";
import "./chunk-GR3QAE4S.js";
import "./chunk-XBPKFV6W.js";
import "./chunk-J6VS6FXY.js";
import "./chunk-AZEN5UFW.js";
import "./chunk-R3MRUDAD.js";
import "./chunk-R6XKQWZ7.js";
import "./chunk-63WRUMNA.js";
import "./chunk-O2JKCGK6.js";
import "./chunk-WAPZ634R.js";
import "./chunk-53FPJYCC.js";
import "./chunk-RURSJOSG.js";
import "./chunk-23AC3IC7.js";
import "./chunk-GKD7ZY5C.js";
import "./chunk-TQAOUM4T.js";
import "./chunk-RRNRSHX3.js";
import "./chunk-IEBU4QQL.js";
import "./chunk-4M3AMTD4.js";
import "./chunk-5VDXKCKM.js";
import {
  r
} from "./chunk-6NPCB5RV.js";
import {
  y as y2
} from "./chunk-DDAW6PTY.js";
import {
  h
} from "./chunk-PNAN35AP.js";
import "./chunk-HNKLBBNC.js";
import "./chunk-D2UI2BQN.js";
import {
  e as e2
} from "./chunk-34FJTA26.js";
import "./chunk-DUEDINK5.js";
import "./chunk-MZ267CZB.js";
import "./chunk-3DBV4JBL.js";
import "./chunk-CJ2YD4VU.js";
import "./chunk-PRXITTX7.js";
import "./chunk-JGIZLXNQ.js";
import "./chunk-NOYTM57S.js";
import "./chunk-OPQ632ST.js";
import "./chunk-U6GC73UT.js";
import "./chunk-N5RJDK35.js";
import "./chunk-LC5BGIRA.js";
import "./chunk-ST7DNJJS.js";
import "./chunk-PELFA5QO.js";
import "./chunk-EPJSBV4J.js";
import "./chunk-REIXEATJ.js";
import "./chunk-CCNZLEW5.js";
import "./chunk-FGXNBIU5.js";
import {
  l
} from "./chunk-FXMJJBXP.js";
import "./chunk-BHQVXYUV.js";
import "./chunk-P26WTKBK.js";
import "./chunk-DKH5QOVM.js";
import "./chunk-Y3KJPDCE.js";
import "./chunk-LSUFI7PR.js";
import "./chunk-5CMPUNQG.js";
import "./chunk-BQXNXAP2.js";
import "./chunk-JT54I3AY.js";
import "./chunk-TNTTCGVB.js";
import "./chunk-DC3QI5ZE.js";
import "./chunk-EGHLQERQ.js";
import "./chunk-7OAHPHOV.js";
import "./chunk-SZO7ZKE4.js";
import "./chunk-I2U7UK6N.js";
import "./chunk-FQ7L63IU.js";
import "./chunk-CPUYSXBP.js";
import "./chunk-MJFFZ3MM.js";
import "./chunk-B6GJAETG.js";
import "./chunk-FC74MT6E.js";
import {
  E
} from "./chunk-H2ENCYR3.js";
import "./chunk-SVHG5VY2.js";
import "./chunk-S47644HM.js";
import "./chunk-QXPN4D5D.js";
import "./chunk-DLM7WQKI.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-7GTATSRF.js";
import "./chunk-MTJ2HM2W.js";
import "./chunk-PXVSWY3C.js";
import {
  j
} from "./chunk-QLY5H3XF.js";
import {
  s
} from "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import "./chunk-WHB7G7RI.js";
import "./chunk-DFKQJ226.js";

// node_modules/@arcgis/core/views/2d/layers/WMTSLayerView2D.js
var y3 = [102113, 102100, 3857, 3785, 900913];
var _ = [0, 0];
var w = class extends i(t(f(u))) {
  constructor() {
    super(...arguments), this._tileStrategy = null, this._fetchQueue = null, this._tileRequests = /* @__PURE__ */ new Map(), this.layer = null;
  }
  get tileMatrixSet() {
    const e3 = this._getTileMatrixSetBySpatialReference(this.layer.activeLayer);
    return e3 ? (e3.id !== this.layer.activeLayer.tileMatrixSetId && (this.layer.activeLayer.tileMatrixSetId = e3.id), e3) : null;
  }
  update(e3) {
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume();
  }
  attach() {
    var _a;
    const e3 = (_a = this.tileMatrixSet) == null ? void 0 : _a.tileInfo;
    e3 && (this._tileInfoView = new h(e3), this._fetchQueue = new y2({ tileInfoView: this._tileInfoView, concurrency: 16, process: (e4, t2) => this.fetchTile(e4, t2) }), this._tileStrategy = new r({ cachePolicy: "keep", resampling: true, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), this.addAttachHandles(l(() => {
      var _a2, _b;
      return [(_b = (_a2 = this.layer) == null ? void 0 : _a2.activeLayer) == null ? void 0 : _b.styleId, this.tileMatrixSet];
    }, () => this._refresh())), super.attach());
  }
  detach() {
    var _a, _b;
    super.detach(), (_a = this._tileStrategy) == null ? void 0 : _a.destroy(), (_b = this._fetchQueue) == null ? void 0 : _b.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null;
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  acquireTile(e3) {
    const t2 = this._bitmapView.createTile(e3), i2 = t2.bitmap;
    return [i2.x, i2.y] = this._tileInfoView.getTileCoords(_, t2.key), i2.resolution = this._tileInfoView.getTileResolution(t2.key), [i2.width, i2.height] = this._tileInfoView.tileInfo.size, this._enqueueTileFetch(t2), this._bitmapView.addChild(t2), this.requestUpdate(), t2;
  }
  async doRefresh() {
    !this.attached || this.updateRequested || this.suspended || this._refresh();
  }
  isUpdating() {
    var _a;
    return ((_a = this._fetchQueue) == null ? void 0 : _a.updating) ?? false;
  }
  async fetchTile(e3, t2 = {}) {
    const s2 = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: r2, resamplingLevel: a2 = 0 } = t2;
    if (!s2)
      return this._fetchImage(e3, r2);
    const l2 = new e2(0, 0, 0, 0);
    let o;
    try {
      await s2.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, l2, { signal: r2 }), o = await this._fetchImage(l2, r2);
    } catch (h2) {
      if (j(h2))
        throw h2;
      if (a2 < 3) {
        const i2 = this._tileInfoView.getTileParentId(e3.id);
        if (i2) {
          const s3 = new e2(i2), r3 = await this.fetchTile(s3, { ...t2, resamplingLevel: a2 + 1 });
          return n(this._tileInfoView, r3, s3, e3);
        }
      }
      throw h2;
    }
    return n(this._tileInfoView, o, l2, e3);
  }
  canResume() {
    const e3 = super.canResume();
    return e3 ? null !== this.tileMatrixSet : e3;
  }
  supportsSpatialReference(e3) {
    var _a;
    return ((_a = this.layer.activeLayer.tileMatrixSets) == null ? void 0 : _a.some((t2) => {
      var _a2;
      return E((_a2 = t2.tileInfo) == null ? void 0 : _a2.spatialReference, e3);
    })) ?? false;
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const t2 = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = t2, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (s2) {
        j(s2) || s.getLogger(this.declaredClass).error(s2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, t2) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: t2 });
  }
  _refresh() {
    this._fetchQueue.reset(), this._tileStrategy.tiles.forEach((e3) => {
      if (!e3.bitmap.source)
        return;
      const t2 = { id: e3.key.id, fulfilled: false, promise: this._fetchQueue.push(e3.key).then((t3) => {
        e3.bitmap.source = t3;
      }).catch((t3) => {
        j(t3) || (e3.bitmap.source = null);
      }).finally(() => {
        e3.requestRender(), t2.fulfilled = true;
      }) };
      this._tileRequests.set(e3, t2);
    });
  }
  _getTileMatrixSetBySpatialReference(e3) {
    const t2 = this.view.spatialReference;
    if (!e3.tileMatrixSets)
      return null;
    let i2 = e3.tileMatrixSets.find((e4) => {
      var _a;
      return E((_a = e4.tileInfo) == null ? void 0 : _a.spatialReference, t2);
    });
    return !i2 && t2.isWebMercator && (i2 = e3.tileMatrixSets.find((e4) => {
      var _a;
      return y3.includes(((_a = e4.tileInfo) == null ? void 0 : _a.spatialReference.wkid) ?? -1);
    })), i2;
  }
};
e([y()], w.prototype, "_fetchQueue", void 0), e([y({ readOnly: true })], w.prototype, "tileMatrixSet", null), w = e([a("esri.views.2d.layers.WMTSLayerView2D")], w);
var g = w;
export {
  g as default
};
//# sourceMappingURL=WMTSLayerView2D-OUYXG3RF.js.map
