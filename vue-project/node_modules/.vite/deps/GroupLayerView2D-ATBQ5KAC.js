import {
  r
} from "./chunk-WKWDJCHY.js";
import "./chunk-W4RTPEF7.js";
import {
  f,
  u
} from "./chunk-2PEMPHHT.js";
import "./chunk-KK7UXBV2.js";
import "./chunk-BLQJFVYJ.js";
import "./chunk-7XVHXPW5.js";
import "./chunk-J6VS6FXY.js";
import "./chunk-AZEN5UFW.js";
import "./chunk-R3MRUDAD.js";
import "./chunk-R6XKQWZ7.js";
import "./chunk-63WRUMNA.js";
import "./chunk-O2JKCGK6.js";
import "./chunk-WAPZ634R.js";
import "./chunk-53FPJYCC.js";
import "./chunk-RURSJOSG.js";
import "./chunk-23AC3IC7.js";
import "./chunk-GKD7ZY5C.js";
import "./chunk-TQAOUM4T.js";
import "./chunk-RRNRSHX3.js";
import "./chunk-IEBU4QQL.js";
import "./chunk-4M3AMTD4.js";
import "./chunk-VG55DFRV.js";
import "./chunk-DUEDINK5.js";
import "./chunk-MZ267CZB.js";
import "./chunk-3DBV4JBL.js";
import "./chunk-CJ2YD4VU.js";
import "./chunk-JGIZLXNQ.js";
import "./chunk-XXDTEEJA.js";
import "./chunk-OPQ632ST.js";
import "./chunk-U6GC73UT.js";
import "./chunk-MN4E5VOA.js";
import "./chunk-ST7DNJJS.js";
import "./chunk-EPJSBV4J.js";
import "./chunk-REIXEATJ.js";
import "./chunk-IGOXVXHJ.js";
import {
  U,
  l
} from "./chunk-2UAIGHM2.js";
import "./chunk-CCNZLEW5.js";
import "./chunk-FGXNBIU5.js";
import "./chunk-XF2RZJFH.js";
import "./chunk-HRFBINZY.js";
import {
  n,
  t as t2
} from "./chunk-EALW5DHT.js";
import "./chunk-BQXNXAP2.js";
import "./chunk-BHQVXYUV.js";
import "./chunk-DKH5QOVM.js";
import "./chunk-JT54I3AY.js";
import "./chunk-DC3QI5ZE.js";
import "./chunk-TNTTCGVB.js";
import "./chunk-EGHLQERQ.js";
import "./chunk-6CVKQGVU.js";
import "./chunk-HPP5IXU5.js";
import {
  j
} from "./chunk-LJAKPJDJ.js";
import "./chunk-CCWBAM3L.js";
import "./chunk-TKWZACTO.js";
import "./chunk-DOQX2NNO.js";
import "./chunk-MJFFZ3MM.js";
import "./chunk-2ZX6RZTI.js";
import "./chunk-5Q7F7FJ6.js";
import "./chunk-XFNXUG2G.js";
import "./chunk-RDTHWDIE.js";
import "./chunk-DOVXDFWE.js";
import "./chunk-M4BAPJ3L.js";
import "./chunk-QXPN4D5D.js";
import "./chunk-KGIB6IYW.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-3PPVODAA.js";
import "./chunk-MTJ2HM2W.js";
import "./chunk-PXVSWY3C.js";
import "./chunk-WTKFW2TD.js";
import "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import {
  t
} from "./chunk-WHB7G7RI.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/views/layers/GroupLayerView.js
var p = class extends u {
  constructor(i2) {
    super(i2), this.type = "group", this.layerViews = new j();
  }
  _allLayerViewVisibility(i2) {
    this.layerViews.forEach((e2) => {
      e2.visible = i2;
    });
  }
  initialize() {
    this.handles.add([this.layerViews.on("change", (i2) => this._layerViewsChangeHandler(i2)), l(() => this.layer.visibilityMode, () => this._applyVisibility(() => this._allLayerViewVisibility(this.visible), () => this._applyExclusiveVisibility(null)), U), l(() => this.visible, (i2) => {
      this._applyVisibility(() => this._allLayerViewVisibility(i2), () => {
      });
    }, U)], "grouplayerview"), this._layerViewsChangeHandler({ target: null, added: this.layerViews.toArray(), removed: [], moved: [] });
  }
  set layerViews(i2) {
    this._set("layerViews", n(i2, this._get("layerViews")));
  }
  get updatingProgress() {
    return 0 === this.layerViews.length ? 1 : this.layerViews.reduce((i2, e2) => i2 + e2.updatingProgress, 0) / this.layerViews.length;
  }
  isUpdating() {
    return this.layerViews.some((i2) => i2.updating);
  }
  _hasLayerViewVisibleOverrides() {
    return this.layerViews.some((i2) => i2._isOverridden("visible"));
  }
  _findLayerViewForLayer(i2) {
    return i2 && this.layerViews.find((e2) => e2.layer === i2);
  }
  _firstVisibleOnLayerOrder() {
    const i2 = this.layer.layers.find((i3) => {
      var _a;
      return !!((_a = this._findLayerViewForLayer(i3)) == null ? void 0 : _a.visible);
    });
    return i2 && this._findLayerViewForLayer(i2);
  }
  _applyExclusiveVisibility(i2) {
    t(i2) && (i2 = this._firstVisibleOnLayerOrder(), t(i2) && this.layerViews.length > 0 && (i2 = this._findLayerViewForLayer(this.layer.layers.getItemAt(0)))), this.layerViews.forEach((e2) => {
      e2.visible = e2 === i2;
    });
  }
  _layerViewsChangeHandler(i2) {
    this.handles.remove("grouplayerview:visible"), this.handles.add(this.layerViews.map((i3) => l(() => i3.visible, (e3) => this._applyVisibility(() => {
      e3 !== this.visible && (i3.visible = this.visible);
    }, () => this._applyExclusiveVisibility(e3 ? i3 : null)), U)).toArray(), "grouplayerview:visible");
    const e2 = i2.added[i2.added.length - 1];
    this._applyVisibility(() => this._allLayerViewVisibility(this.visible), () => this._applyExclusiveVisibility((e2 == null ? void 0 : e2.visible) ? e2 : null));
  }
  _applyVisibility(i2, e2) {
    var _a, _b;
    this._hasLayerViewVisibleOverrides() && ("inherited" === ((_a = this.layer) == null ? void 0 : _a.visibilityMode) ? i2() : "exclusive" === ((_b = this.layer) == null ? void 0 : _b.visibilityMode) && e2());
  }
};
e([y({ cast: t2 })], p.prototype, "layerViews", null), e([y({ readOnly: true })], p.prototype, "updatingProgress", null), e([y()], p.prototype, "view", void 0), p = e([a("esri.views.layers.GroupLayerView")], p);
var n2 = p;

// node_modules/@arcgis/core/views/2d/layers/GroupLayerView2D.js
var a2 = class extends f(n2) {
  constructor() {
    super(...arguments), this.container = new r();
  }
  attach() {
    this._updateStageChildren(), this.addAttachHandles(this.layerViews.on("after-changes", () => this._updateStageChildren()));
  }
  detach() {
    this.container.removeAllChildren();
  }
  update(e2) {
  }
  moveStart() {
  }
  viewChange() {
  }
  moveEnd() {
  }
  _updateStageChildren() {
    this.container.removeAllChildren(), this.layerViews.forEach((e2, r2) => this.container.addChildAt(e2.container, r2));
  }
};
a2 = e([a("esri.views.2d.layers.GroupLayerView2D")], a2);
var i = a2;
export {
  i as default
};
//# sourceMappingURL=GroupLayerView2D-ATBQ5KAC.js.map
