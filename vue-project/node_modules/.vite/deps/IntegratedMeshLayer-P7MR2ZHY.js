import {
  g
} from "./chunk-WOKK5ILT.js";
import "./chunk-AVBEEF44.js";
import {
  l as l2,
  m,
  s as s2,
  u as u2
} from "./chunk-GQP56RWH.js";
import {
  E,
  L as L2
} from "./chunk-A7DPL3VJ.js";
import "./chunk-KV3RO44U.js";
import "./chunk-IN72WEYZ.js";
import "./chunk-QMR6RKUD.js";
import "./chunk-Y6E6VI7G.js";
import "./chunk-JTNRBNRF.js";
import {
  i
} from "./chunk-SFUDEAZG.js";
import "./chunk-3IOMFATH.js";
import {
  p as p2
} from "./chunk-UGSPONPD.js";
import {
  _
} from "./chunk-Y5U3GPYY.js";
import "./chunk-XFW76F64.js";
import {
  t as t4
} from "./chunk-XSWH32P3.js";
import {
  c as c2
} from "./chunk-MR6MDWDW.js";
import {
  O
} from "./chunk-TGWKHDFY.js";
import {
  b
} from "./chunk-RLEK6TWZ.js";
import "./chunk-A3YQWDU2.js";
import "./chunk-4HI3DYZK.js";
import {
  An,
  mn
} from "./chunk-UBZEFQ76.js";
import "./chunk-D5KVII6M.js";
import {
  d
} from "./chunk-OXPHYLAY.js";
import "./chunk-JKIHHWKC.js";
import "./chunk-NBVRAQMU.js";
import "./chunk-BLEGKDS6.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-HNMSCBZJ.js";
import {
  U,
  a as a2
} from "./chunk-Y44VKGHM.js";
import "./chunk-VTZGYKHD.js";
import "./chunk-GCXFCVSM.js";
import "./chunk-CU2KO5NT.js";
import "./chunk-EXL23DF3.js";
import "./chunk-ECM7B2HV.js";
import "./chunk-L5JOPRWD.js";
import "./chunk-JYFMP3PO.js";
import {
  c
} from "./chunk-CBAVHWPY.js";
import "./chunk-EMRZKKP3.js";
import "./chunk-SQBJ6KPL.js";
import {
  U as U2
} from "./chunk-MKMLHQNH.js";
import "./chunk-PHPHIDTF.js";
import {
  L
} from "./chunk-P6SQPYDS.js";
import "./chunk-GWFG4NRK.js";
import "./chunk-YXFIF2O5.js";
import "./chunk-E4MAG7OK.js";
import {
  j
} from "./chunk-YVQV6YXG.js";
import "./chunk-3KALZGFA.js";
import "./chunk-OJKTPYH5.js";
import "./chunk-PEP3ZFMY.js";
import "./chunk-UHF3OUQV.js";
import "./chunk-6U5BQYRW.js";
import "./chunk-LUOENZ4F.js";
import "./chunk-QGRPG4XS.js";
import {
  v2 as v
} from "./chunk-M73MMEC7.js";
import "./chunk-A5CTLI5A.js";
import "./chunk-WUBKNERF.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-GLDJLPWH.js";
import {
  r as r2
} from "./chunk-GMLVDTS4.js";
import {
  o
} from "./chunk-G7CHVXDR.js";
import "./chunk-OAZLVZFS.js";
import {
  l,
  u2 as u
} from "./chunk-CPSZPA6H.js";
import {
  a2 as a,
  e,
  t2,
  t6 as t3,
  y3 as y
} from "./chunk-Y54MR3BP.js";
import "./chunk-6VTYOWNK.js";
import "./chunk-JY6H6KI3.js";
import {
  w
} from "./chunk-TTCQP5LX.js";
import {
  s2 as s
} from "./chunk-C2WY74GI.js";
import "./chunk-MCOYI7PX.js";
import "./chunk-EL4OGCJC.js";
import {
  p
} from "./chunk-XPATKIHO.js";
import "./chunk-MKHZ5X6F.js";
import {
  r,
  t,
  x
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/layers/support/SceneModification.js
var m2;
var y2 = m2 = class extends l {
  constructor(e2) {
    super(e2), this.geometry = null, this.type = "clip";
  }
  writeGeometry(e2, r3, o2, s3) {
    if (s3.layer && s3.layer.spatialReference && !s3.layer.spatialReference.equals(this.geometry.spatialReference)) {
      if (!An(e2.spatialReference, s3.layer.spatialReference))
        return void (s3 && s3.messages && s3.messages.push(new t3("scenemodification:unsupported", "Scene modifications with incompatible spatial references are not supported", { modification: this, spatialReference: s3.layer.spatialReference, context: s3 })));
      const p3 = new v();
      mn(e2, p3, s3.layer.spatialReference), r3[o2] = p3.toJSON(s3);
    } else
      r3[o2] = e2.toJSON(s3);
    delete r3[o2].spatialReference;
  }
  clone() {
    return new m2({ geometry: p(this.geometry), type: this.type });
  }
};
e([y({ type: v }), g()], y2.prototype, "geometry", void 0), e([r2(["web-scene", "portal-item"], "geometry")], y2.prototype, "writeGeometry", null), e([y({ type: ["clip", "mask", "replace"], nonNullable: true }), g()], y2.prototype, "type", void 0), y2 = m2 = e([a("esri.layers.support.SceneModification")], y2);
var f = y2;

// node_modules/@arcgis/core/layers/support/SceneModifications.js
var a3;
var n = a3 = class extends u(j.ofType(f)) {
  constructor(r3) {
    super(r3), this.url = null;
  }
  clone() {
    return new a3({ url: this.url, items: this.items.map((r3) => r3.clone()) });
  }
  toJSON(r3) {
    return this.toArray().map((o2) => o2.toJSON(r3)).filter((r4) => !!r4.geometry);
  }
  static fromJSON(r3, o2) {
    const t5 = new a3();
    for (const e2 of r3)
      t5.add(f.fromJSON(e2, o2));
    return t5;
  }
  static async fromUrl(r3, t5, e2) {
    const c3 = { url: L(r3), origin: "service" }, p3 = await U2(r3, { responseType: "json", signal: x(e2, "signal") }), n2 = t5.toJSON(), l4 = [];
    for (const o2 of p3.data)
      l4.push(f.fromJSON({ ...o2, geometry: { ...o2.geometry, spatialReference: n2 } }, c3));
    return new a3({ url: r3, items: l4 });
  }
};
e([y({ type: String })], n.prototype, "url", void 0), n = a3 = e([a("esri.layers.support.SceneModifications")], n);
var l3 = n;

// node_modules/@arcgis/core/layers/IntegratedMeshLayer.js
var b2 = class extends E(p2(c2(_(t4(O(i(b))))))) {
  constructor(...e2) {
    super(...e2), this._handles = new t2(), this.geometryType = "mesh", this.operationalLayerType = "IntegratedMeshLayer", this.type = "integrated-mesh", this.nodePages = null, this.materialDefinitions = null, this.textureSetDefinitions = null, this.geometryDefinitions = null, this.serviceUpdateTimeStamp = null, this.profile = "mesh-pyramids", this.modifications = null, this._modificationsSource = null, this.elevationInfo = null, this.path = null;
  }
  destroy() {
    this._handles.destroy();
  }
  initialize() {
    this._handles.add(a2(() => this.modifications, "after-changes", () => this.modifications = this.modifications, U));
  }
  normalizeCtorArgs(e2, t5) {
    return "string" == typeof e2 ? { url: e2, ...t5 } : e2;
  }
  readModifications(e2, t5, r3) {
    this._modificationsSource = { url: c(e2, r3), context: r3 };
  }
  async load(e2) {
    return this.addResolvingPromise(this._doLoad(e2)), this;
  }
  async _doLoad(e2) {
    const t5 = x(e2, "signal");
    try {
      await this.loadFromPortal({ supportedTypes: ["Scene Service"] }, e2);
    } catch (r3) {
      w(r3);
    }
    if (await this._fetchService(t5), r(this._modificationsSource)) {
      const t6 = await l3.fromUrl(this._modificationsSource.url, this.spatialReference, e2);
      this.setAtOrigin("modifications", t6, this._modificationsSource.context.origin), this._modificationsSource = null;
    }
    await this._fetchIndexAndUpdateExtent(this.nodePages, t5);
  }
  beforeSave() {
    if (!t(this._modificationsSource))
      return this.load().then(() => {
      }, () => {
      });
  }
  async saveAs(e2, t5) {
    return this._debouncedSaveOperations(L2.SAVE_AS, { ...t5, getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "integrated-mesh" }, e2);
  }
  async save() {
    const e2 = { getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "integrated-mesh" };
    return this._debouncedSaveOperations(L2.SAVE, e2);
  }
  validateLayer(e2) {
    if (e2.layerType && "IntegratedMesh" !== e2.layerType)
      throw new s("integrated-mesh-layer:layer-type-not-supported", "IntegratedMeshLayer does not support this layer type", { layerType: e2.layerType });
    if (isNaN(this.version.major) || isNaN(this.version.minor))
      throw new s("layer:service-version-not-supported", "Service version is not supported.", { serviceVersion: this.version.versionString, supportedVersions: "1.x" });
    if (this.version.major > 1)
      throw new s("layer:service-version-too-new", "Service version is too new.", { serviceVersion: this.version.versionString, supportedVersions: "1.x" });
  }
  _getTypeKeywords() {
    return ["IntegratedMeshLayer"];
  }
};
e([y({ type: String, readOnly: true })], b2.prototype, "geometryType", void 0), e([y({ type: ["show", "hide"] })], b2.prototype, "listMode", void 0), e([y({ type: ["IntegratedMeshLayer"] })], b2.prototype, "operationalLayerType", void 0), e([y({ json: { read: false }, readOnly: true })], b2.prototype, "type", void 0), e([y({ type: s2, readOnly: true })], b2.prototype, "nodePages", void 0), e([y({ type: [l2], readOnly: true })], b2.prototype, "materialDefinitions", void 0), e([y({ type: [u2], readOnly: true })], b2.prototype, "textureSetDefinitions", void 0), e([y({ type: [m], readOnly: true })], b2.prototype, "geometryDefinitions", void 0), e([y({ readOnly: true })], b2.prototype, "serviceUpdateTimeStamp", void 0), e([y({ type: l3 }), g({ origins: ["web-scene", "portal-item"], type: "resource", prefix: "modifications" })], b2.prototype, "modifications", void 0), e([o(["web-scene", "portal-item"], "modifications")], b2.prototype, "readModifications", null), e([y(d)], b2.prototype, "elevationInfo", void 0), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true }, "portal-item": { read: true, write: true } }, read: false } })], b2.prototype, "path", void 0), b2 = e([a("esri.layers.IntegratedMeshLayer")], b2);
var A = b2;
export {
  A as default
};
//# sourceMappingURL=IntegratedMeshLayer-P7MR2ZHY.js.map
