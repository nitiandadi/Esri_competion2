import {
  l
} from "./chunk-RGZRDYL7.js";
import "./chunk-T5ZE4H5E.js";
import {
  He
} from "./chunk-IHRAZ7MK.js";
import "./chunk-GOYDAXAP.js";
import "./chunk-3QWM2HE5.js";
import "./chunk-WFXJ47MA.js";
import "./chunk-T6DIF5KS.js";
import "./chunk-PDVH4HZW.js";
import "./chunk-Z6WPQYGK.js";
import "./chunk-SFUDEAZG.js";
import "./chunk-NQCDYIHT.js";
import "./chunk-MXGJESZW.js";
import "./chunk-DNJQQSFB.js";
import "./chunk-XS5XP6X5.js";
import "./chunk-Z7AKZY4L.js";
import "./chunk-LPHHLKEB.js";
import "./chunk-IFDPYOSC.js";
import "./chunk-RD6VLGGM.js";
import "./chunk-PVSQPGR7.js";
import "./chunk-Y4NY4HIB.js";
import "./chunk-2YEIG5KK.js";
import "./chunk-MR5AZ53H.js";
import "./chunk-Q7J3Z6A4.js";
import {
  x as x3
} from "./chunk-KCW42CAI.js";
import "./chunk-3IOMFATH.js";
import "./chunk-UGSPONPD.js";
import {
  u
} from "./chunk-B536ET7B.js";
import "./chunk-54NTLRPC.js";
import "./chunk-7HK5OJHH.js";
import "./chunk-3CGPJKWL.js";
import "./chunk-LDHIIMGH.js";
import "./chunk-Y5U3GPYY.js";
import "./chunk-XFW76F64.js";
import "./chunk-TXZADL6E.js";
import "./chunk-72FH64H2.js";
import "./chunk-XSWH32P3.js";
import "./chunk-MR6MDWDW.js";
import "./chunk-TGWKHDFY.js";
import "./chunk-RLEK6TWZ.js";
import "./chunk-A3YQWDU2.js";
import "./chunk-UXCEKL3W.js";
import "./chunk-4HI3DYZK.js";
import "./chunk-7WIVOZQ6.js";
import "./chunk-RZLXFQKV.js";
import "./chunk-UBZEFQ76.js";
import "./chunk-D5KVII6M.js";
import "./chunk-G3ZCYHOR.js";
import "./chunk-PDQWP33P.js";
import "./chunk-RZNNSB7A.js";
import "./chunk-5Z6OHN6Z.js";
import "./chunk-TKZTELJQ.js";
import "./chunk-OXPHYLAY.js";
import "./chunk-JKIHHWKC.js";
import "./chunk-NBVRAQMU.js";
import "./chunk-BLEGKDS6.js";
import "./chunk-BHKUW5DD.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-SU4IQNSG.js";
import "./chunk-ZUCPDNAU.js";
import "./chunk-A4GUE3HH.js";
import "./chunk-ZJBIBQFZ.js";
import "./chunk-HNMSCBZJ.js";
import "./chunk-PVXAD5LL.js";
import "./chunk-IKDJIJNE.js";
import "./chunk-CZLGELTA.js";
import "./chunk-OIMP53SC.js";
import "./chunk-43D3HGVY.js";
import "./chunk-DZGHLWSV.js";
import "./chunk-P4V73ZOM.js";
import "./chunk-6UZRMITW.js";
import "./chunk-HSDJ4PR2.js";
import "./chunk-Y44VKGHM.js";
import "./chunk-266JJ3A2.js";
import "./chunk-GDTCKTOE.js";
import "./chunk-WPXKVF3K.js";
import "./chunk-EXVE3AJP.js";
import "./chunk-VEZKY6SV.js";
import "./chunk-Y74QPJ3T.js";
import "./chunk-OVUZXV2P.js";
import "./chunk-VTZGYKHD.js";
import "./chunk-MI3ZQEJV.js";
import "./chunk-HRIBADXS.js";
import "./chunk-GPWY2LRL.js";
import "./chunk-3ZZKMNU2.js";
import "./chunk-SXUQWH7K.js";
import "./chunk-WAUZFAX7.js";
import "./chunk-3JPUCMWK.js";
import "./chunk-GCXFCVSM.js";
import "./chunk-CU2KO5NT.js";
import "./chunk-EXL23DF3.js";
import {
  m
} from "./chunk-ECM7B2HV.js";
import "./chunk-L5JOPRWD.js";
import "./chunk-JYFMP3PO.js";
import {
  f as f2,
  p
} from "./chunk-CBAVHWPY.js";
import "./chunk-OJCBSPLX.js";
import "./chunk-EMRZKKP3.js";
import "./chunk-VWOAL3VX.js";
import "./chunk-SQBJ6KPL.js";
import "./chunk-MKMLHQNH.js";
import "./chunk-PHPHIDTF.js";
import {
  L
} from "./chunk-P6SQPYDS.js";
import "./chunk-SFT755VT.js";
import "./chunk-GWFG4NRK.js";
import "./chunk-YXFIF2O5.js";
import "./chunk-E4MAG7OK.js";
import "./chunk-YVQV6YXG.js";
import "./chunk-3KALZGFA.js";
import "./chunk-M47YTHQ5.js";
import "./chunk-OJKTPYH5.js";
import "./chunk-PEP3ZFMY.js";
import {
  x as x2
} from "./chunk-DXGYZ4HI.js";
import "./chunk-CKHNR7DG.js";
import "./chunk-FY3NCRRH.js";
import "./chunk-CIPSOFMY.js";
import "./chunk-3U7SS7RC.js";
import "./chunk-FJD2EURD.js";
import "./chunk-UHF3OUQV.js";
import "./chunk-6U5BQYRW.js";
import "./chunk-LUOENZ4F.js";
import "./chunk-QGRPG4XS.js";
import "./chunk-M73MMEC7.js";
import {
  f2 as f,
  w2
} from "./chunk-A5CTLI5A.js";
import "./chunk-WUBKNERF.js";
import "./chunk-UULERHP5.js";
import "./chunk-VACYSSCT.js";
import "./chunk-4HXSKBAW.js";
import "./chunk-FFQG5TD2.js";
import "./chunk-DDRAFOUW.js";
import "./chunk-F4DUNBGT.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-GLDJLPWH.js";
import "./chunk-GMLVDTS4.js";
import {
  o
} from "./chunk-G7CHVXDR.js";
import "./chunk-OAZLVZFS.js";
import "./chunk-CPSZPA6H.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-Y54MR3BP.js";
import "./chunk-6VTYOWNK.js";
import "./chunk-JY6H6KI3.js";
import {
  w,
  x
} from "./chunk-TTCQP5LX.js";
import {
  s2 as s
} from "./chunk-C2WY74GI.js";
import "./chunk-MCOYI7PX.js";
import "./chunk-EL4OGCJC.js";
import {
  has
} from "./chunk-XPATKIHO.js";
import "./chunk-MKHZ5X6F.js";
import {
  r
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/layers/graphics/sources/CSVSource.js
var u2 = class extends m {
  constructor(t) {
    super(t), this.type = "csv", this.refresh = x(async (t2) => {
      await this.load();
      const { extent: e2, timeExtent: o2 } = await this._connection.invoke("refresh", t2);
      return e2 && (this.sourceJSON.extent = e2), o2 && (this.sourceJSON.timeInfo.timeExtent = [o2.start, o2.end]), { dataChanged: true, updates: { extent: this.sourceJSON.extent, timeInfo: this.sourceJSON.timeInfo } };
    });
  }
  load(t) {
    const e2 = r(t) ? t.signal : null;
    return this.addResolvingPromise(this._startWorker(e2)), Promise.resolve(this);
  }
  destroy() {
    var _a;
    (_a = this._connection) == null ? void 0 : _a.close(), this._connection = null;
  }
  async openPorts() {
    return await this.load(), this._connection.openPorts();
  }
  async queryFeatures(t, e2 = {}) {
    await this.load(e2);
    const o2 = await this._connection.invoke("queryFeatures", t ? t.toJSON() : null, e2);
    return x3.fromJSON(o2);
  }
  async queryFeaturesJSON(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("queryFeatures", t ? t.toJSON() : null, e2);
  }
  async queryFeatureCount(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("queryFeatureCount", t ? t.toJSON() : null, e2);
  }
  async queryObjectIds(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("queryObjectIds", t ? t.toJSON() : null, e2);
  }
  async queryExtent(t, e2 = {}) {
    await this.load(e2);
    const o2 = await this._connection.invoke("queryExtent", t ? t.toJSON() : null, e2);
    return { count: o2.count, extent: w2.fromJSON(o2.extent) };
  }
  async querySnapping(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("querySnapping", t, e2);
  }
  async _startWorker(t) {
    this._connection = await u("CSVSourceWorker", { strategy: has("feature-layers-workers") ? "dedicated" : "local", signal: t });
    const { url: e2, delimiter: o2, fields: r2, latitudeField: i, longitudeField: n, spatialReference: a2, timeInfo: c } = this.loadOptions, u3 = await this._connection.invoke("load", { url: e2, customParameters: this.customParameters, parsingOptions: { delimiter: o2, fields: r2 == null ? void 0 : r2.map((t2) => t2.toJSON()), latitudeField: i, longitudeField: n, spatialReference: a2 == null ? void 0 : a2.toJSON(), timeInfo: c == null ? void 0 : c.toJSON() } }, { signal: t });
    this.locationInfo = u3.locationInfo, this.sourceJSON = u3.layerDefinition, this.delimiter = u3.delimiter;
  }
};
e([y()], u2.prototype, "type", void 0), e([y()], u2.prototype, "loadOptions", void 0), e([y()], u2.prototype, "customParameters", void 0), e([y()], u2.prototype, "locationInfo", void 0), e([y()], u2.prototype, "sourceJSON", void 0), e([y()], u2.prototype, "delimiter", void 0), u2 = e([a("esri.layers.graphics.sources.CSVSource")], u2);

// node_modules/@arcgis/core/layers/CSVLayer.js
function m2(e2, r2) {
  throw new s(r2, `CSVLayer (title: ${e2.title}, id: ${e2.id}) cannot be saved to a portal item`);
}
var f3 = class extends He {
  constructor(...e2) {
    super(...e2), this.geometryType = "point", this.capabilities = l(false, false), this.delimiter = null, this.editingEnabled = false, this.fields = null, this.latitudeField = null, this.locationType = "coordinates", this.longitudeField = null, this.operationalLayerType = "CSV", this.outFields = ["*"], this.path = null, this.spatialReference = f.WGS84, this.source = null, this.type = "csv";
  }
  normalizeCtorArgs(e2, t) {
    return "string" == typeof e2 ? { url: e2, ...t } : e2;
  }
  load(e2) {
    const t = r(e2) ? e2.signal : null, o2 = this.loadFromPortal({ supportedTypes: ["CSV"], supportsData: false }, e2).catch(w).then(async () => this.initLayerProperties(await this.createGraphicsSource(t)));
    return this.addResolvingPromise(o2), Promise.resolve(this);
  }
  get isTable() {
    return this.loaded && null == this.geometryType;
  }
  readWebMapLabelsVisible(e2, t) {
    return null != t.showLabels ? t.showLabels : !!(t.layerDefinition && t.layerDefinition.drawingInfo && t.layerDefinition.drawingInfo.labelingInfo);
  }
  set url(e2) {
    if (!e2)
      return void this._set("url", e2);
    const t = L(e2);
    this._set("url", t.path), t.query && (this.customParameters = { ...this.customParameters, ...t.query });
  }
  async createGraphicsSource(e2) {
    const t = new u2({ loadOptions: { delimiter: this.delimiter, fields: this.fields, latitudeField: this.latitudeField ?? void 0, longitudeField: this.longitudeField ?? void 0, spatialReference: this.spatialReference ?? void 0, timeInfo: this.timeInfo ?? void 0, url: this.url }, customParameters: this.customParameters ?? void 0 });
    return this._set("source", t), await t.load({ signal: e2 }), this.read({ locationInfo: t.locationInfo, columnDelimiter: t.delimiter }, { origin: "service", url: this.parsedUrl }), t;
  }
  queryFeatures(e2, t) {
    return this.load().then(() => this.source.queryFeatures(x2.from(e2) || this.createQuery())).then((e3) => {
      if (e3 == null ? void 0 : e3.features)
        for (const t2 of e3.features)
          t2.layer = t2.sourceLayer = this;
      return e3;
    });
  }
  queryObjectIds(e2, t) {
    return this.load().then(() => this.source.queryObjectIds(x2.from(e2) || this.createQuery()));
  }
  queryFeatureCount(e2, t) {
    return this.load().then(() => this.source.queryFeatureCount(x2.from(e2) || this.createQuery()));
  }
  queryExtent(e2, t) {
    return this.load().then(() => this.source.queryExtent(x2.from(e2) || this.createQuery()));
  }
  read(e2, t) {
    super.read(e2, t), t && "service" === t.origin && this.revert(["latitudeField", "longitudeField"], "service");
  }
  write(e2, t) {
    return super.write(e2, { ...t, writeLayerSchema: true });
  }
  clone() {
    throw new s("csv-layer:clone", `CSVLayer (title: ${this.title}, id: ${this.id}) cannot be cloned`);
  }
  async save(e2) {
    return m2(this, "csv-layer:save");
  }
  async saveAs(e2, t) {
    return m2(this, "csv-layer:save-as");
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e2, updates: t } = await this.source.refresh(this.customParameters);
      return r(t) && this.read(t, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e2;
    } catch {
    }
    return false;
  }
  _verifyFields() {
  }
  _verifySource() {
  }
  _hasMemorySource() {
    return false;
  }
};
e([y({ readOnly: true, json: { read: false, write: false } })], f3.prototype, "capabilities", void 0), e([y({ type: [",", " ", ";", "|", "	"], json: { read: { source: "columnDelimiter" }, write: { target: "columnDelimiter", ignoreOrigin: true } } })], f3.prototype, "delimiter", void 0), e([y({ readOnly: true, type: Boolean, json: { origins: { "web-scene": { read: false, write: false } } } })], f3.prototype, "editingEnabled", void 0), e([y({ json: { read: { source: "layerDefinition.fields" }, write: { target: "layerDefinition.fields" } } })], f3.prototype, "fields", void 0), e([y({ type: Boolean, readOnly: true })], f3.prototype, "isTable", null), e([o("web-map", "labelsVisible", ["layerDefinition.drawingInfo.labelingInfo", "showLabels"])], f3.prototype, "readWebMapLabelsVisible", null), e([y({ type: String, json: { read: { source: "locationInfo.latitudeFieldName" }, write: { target: "locationInfo.latitudeFieldName", ignoreOrigin: true } } })], f3.prototype, "latitudeField", void 0), e([y({ type: ["show", "hide"] })], f3.prototype, "listMode", void 0), e([y({ type: ["coordinates"], json: { read: { source: "locationInfo.locationType" }, write: { target: "locationInfo.locationType", ignoreOrigin: true, isRequired: true } } })], f3.prototype, "locationType", void 0), e([y({ type: String, json: { read: { source: "locationInfo.longitudeFieldName" }, write: { target: "locationInfo.longitudeFieldName", ignoreOrigin: true } } })], f3.prototype, "longitudeField", void 0), e([y({ type: ["CSV"] })], f3.prototype, "operationalLayerType", void 0), e([y()], f3.prototype, "outFields", void 0), e([y({ type: String, json: { origins: { "web-scene": { read: false, write: false } }, read: false, write: false } })], f3.prototype, "path", void 0), e([y({ json: { read: false }, cast: null, type: u2, readOnly: true })], f3.prototype, "source", void 0), e([y({ json: { read: false }, value: "csv", readOnly: true })], f3.prototype, "type", void 0), e([y({ json: { read: p, write: { isRequired: true, ignoreOrigin: true, writer: f2 } } })], f3.prototype, "url", null), f3 = e([a("esri.layers.CSVLayer")], f3);
var g = f3;
export {
  g as default
};
//# sourceMappingURL=CSVLayer-QBMD77GY.js.map
