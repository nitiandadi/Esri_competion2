import {
  i
} from "./chunk-SN7ALKQM.js";
import "./chunk-7BLRSDCT.js";
import {
  ae
} from "./chunk-URZUJFLK.js";
import "./chunk-BZHMRRCA.js";
import "./chunk-3DGJISU2.js";
import "./chunk-PZFCQGRH.js";
import "./chunk-BXMNCRGS.js";
import "./chunk-CXZVU2FA.js";
import "./chunk-6OTYIG36.js";
import "./chunk-5JO7O74F.js";
import "./chunk-OAO74KEG.js";
import {
  f as f2,
  u
} from "./chunk-QLNXKYD4.js";
import "./chunk-FYUZA5OZ.js";
import "./chunk-ZUM343MO.js";
import "./chunk-MPH4JD6M.js";
import "./chunk-CSXCA65Q.js";
import "./chunk-ABGFNHDH.js";
import "./chunk-FNX4STT3.js";
import "./chunk-MUKO5DYY.js";
import "./chunk-RSRGRQCE.js";
import "./chunk-KS5WYVQD.js";
import "./chunk-HCWIAQV3.js";
import "./chunk-B4YFY6OM.js";
import "./chunk-B5NSOHW4.js";
import "./chunk-DEBYWO5M.js";
import "./chunk-37BTU2M3.js";
import "./chunk-BS6YMIVT.js";
import "./chunk-E4XXNNS2.js";
import "./chunk-XTS6M5HJ.js";
import "./chunk-LH33CNCX.js";
import "./chunk-BEFJ4DTX.js";
import "./chunk-QXR6CWAU.js";
import "./chunk-XF6VFSZY.js";
import "./chunk-46UYDOF4.js";
import "./chunk-372CNO3V.js";
import "./chunk-BZHNKPDE.js";
import "./chunk-QE6RY3R6.js";
import "./chunk-B4N37FMV.js";
import "./chunk-VGTB7JUJ.js";
import "./chunk-QARJUBJV.js";
import {
  D2 as D,
  O,
  b2 as b,
  f,
  g,
  h as h2,
  h2 as h3
} from "./chunk-2CAEC6NC.js";
import "./chunk-M3JCSQZU.js";
import "./chunk-KKWP7B7A.js";
import "./chunk-Y5X2DTPS.js";
import "./chunk-YNAIRSAG.js";
import "./chunk-S7QT5QV2.js";
import "./chunk-DJBFAFOP.js";
import "./chunk-QCYWXXBM.js";
import "./chunk-CCKR7UFK.js";
import "./chunk-DNXRTHCH.js";
import "./chunk-OGEJGMAT.js";
import "./chunk-7BJCYBN2.js";
import "./chunk-VQUDNY75.js";
import "./chunk-QDIJO3T2.js";
import "./chunk-MLSUYO53.js";
import "./chunk-6WFGRBCZ.js";
import "./chunk-XNKMMOMK.js";
import "./chunk-Y5D76CBW.js";
import "./chunk-X6QOURMW.js";
import "./chunk-DBAHFVCB.js";
import "./chunk-E4NB2TTC.js";
import "./chunk-U4SHM5SM.js";
import "./chunk-KS2FU363.js";
import "./chunk-UPHB5F2K.js";
import "./chunk-SXVHYYSN.js";
import "./chunk-A7TOAPHC.js";
import "./chunk-EPKCQJY3.js";
import "./chunk-3JVZYYA3.js";
import "./chunk-MWIMWDJV.js";
import "./chunk-6D47PMZF.js";
import "./chunk-2KKFAUOD.js";
import "./chunk-M2DTCG2D.js";
import "./chunk-AVTBKAM2.js";
import "./chunk-VOUOLBXG.js";
import "./chunk-KGJHWKNE.js";
import "./chunk-X7NPMCZZ.js";
import "./chunk-CFTD44JM.js";
import "./chunk-MI7FJDLG.js";
import "./chunk-E4FSIE7C.js";
import "./chunk-HERKGCCA.js";
import "./chunk-SB6UPWEY.js";
import "./chunk-XTUZNPIG.js";
import "./chunk-6VXAAN5J.js";
import {
  l as l2
} from "./chunk-2R5APDPQ.js";
import "./chunk-IN3HJEU7.js";
import "./chunk-KQSNRPAM.js";
import "./chunk-XS5XP6X5.js";
import "./chunk-RD6VLGGM.js";
import "./chunk-PVSQPGR7.js";
import "./chunk-2YEIG5KK.js";
import "./chunk-7HK5OJHH.js";
import "./chunk-7WIVOZQ6.js";
import "./chunk-RZLXFQKV.js";
import "./chunk-UBZEFQ76.js";
import "./chunk-D5KVII6M.js";
import "./chunk-G3ZCYHOR.js";
import "./chunk-PDQWP33P.js";
import "./chunk-5Z6OHN6Z.js";
import "./chunk-TKZTELJQ.js";
import "./chunk-BHKUW5DD.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-ZUCPDNAU.js";
import "./chunk-HNMSCBZJ.js";
import "./chunk-OIMP53SC.js";
import "./chunk-43D3HGVY.js";
import "./chunk-DZGHLWSV.js";
import "./chunk-P4V73ZOM.js";
import "./chunk-6UZRMITW.js";
import "./chunk-HSDJ4PR2.js";
import {
  h,
  l
} from "./chunk-Y44VKGHM.js";
import "./chunk-WPXKVF3K.js";
import "./chunk-EXVE3AJP.js";
import "./chunk-Y74QPJ3T.js";
import "./chunk-OVUZXV2P.js";
import "./chunk-VTZGYKHD.js";
import "./chunk-MI3ZQEJV.js";
import "./chunk-HRIBADXS.js";
import "./chunk-GPWY2LRL.js";
import "./chunk-3ZZKMNU2.js";
import "./chunk-SXUQWH7K.js";
import "./chunk-WAUZFAX7.js";
import "./chunk-3JPUCMWK.js";
import "./chunk-GCXFCVSM.js";
import "./chunk-CU2KO5NT.js";
import "./chunk-EXL23DF3.js";
import "./chunk-ECM7B2HV.js";
import "./chunk-L5JOPRWD.js";
import "./chunk-JYFMP3PO.js";
import "./chunk-CBAVHWPY.js";
import "./chunk-OJCBSPLX.js";
import "./chunk-EMRZKKP3.js";
import "./chunk-VWOAL3VX.js";
import "./chunk-SQBJ6KPL.js";
import "./chunk-MKMLHQNH.js";
import "./chunk-PHPHIDTF.js";
import "./chunk-P6SQPYDS.js";
import "./chunk-SFT755VT.js";
import "./chunk-GWFG4NRK.js";
import "./chunk-YXFIF2O5.js";
import "./chunk-E4MAG7OK.js";
import {
  j
} from "./chunk-YVQV6YXG.js";
import "./chunk-3KALZGFA.js";
import "./chunk-M47YTHQ5.js";
import "./chunk-OJKTPYH5.js";
import "./chunk-PEP3ZFMY.js";
import "./chunk-3U7SS7RC.js";
import "./chunk-6U5BQYRW.js";
import "./chunk-LUOENZ4F.js";
import "./chunk-QGRPG4XS.js";
import "./chunk-M73MMEC7.js";
import "./chunk-A5CTLI5A.js";
import "./chunk-WUBKNERF.js";
import "./chunk-VACYSSCT.js";
import "./chunk-4HXSKBAW.js";
import "./chunk-FFQG5TD2.js";
import "./chunk-DDRAFOUW.js";
import "./chunk-F4DUNBGT.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-GLDJLPWH.js";
import "./chunk-GMLVDTS4.js";
import "./chunk-G7CHVXDR.js";
import "./chunk-OAZLVZFS.js";
import "./chunk-CPSZPA6H.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-Y54MR3BP.js";
import "./chunk-6VTYOWNK.js";
import "./chunk-JY6H6KI3.js";
import "./chunk-TTCQP5LX.js";
import "./chunk-C2WY74GI.js";
import "./chunk-MCOYI7PX.js";
import "./chunk-EL4OGCJC.js";
import "./chunk-XPATKIHO.js";
import "./chunk-MKHZ5X6F.js";
import {
  r,
  t
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/views/2d/layers/RouteLayerView2D.js
var k = Object.freeze({ remove() {
}, pause() {
}, resume() {
} });
var v = ["route-info", "direction-line", "direction-point", "polygon-barrier", "polyline-barrier", "point-barrier", "stop"];
var M = { graphic: null, property: null, oldValue: null, newValue: null };
function V(t2) {
  return t2 instanceof b || t2 instanceof h2 || t2 instanceof O || t2 instanceof g || t2 instanceof f || t2 instanceof h3 || t2 instanceof D;
}
function j2(t2) {
  return j.isCollection(t2) && t2.length && V(t2.getItemAt(0));
}
function G(t2) {
  return Array.isArray(t2) && t2.length > 0 && V(t2[0]);
}
var I = class extends f2(u) {
  constructor() {
    super(...arguments), this._graphics = new j(), this._highlightIds = /* @__PURE__ */ new Map(), this._networkFeatureMap = /* @__PURE__ */ new Map(), this._networkGraphicMap = /* @__PURE__ */ new Map();
  }
  get _routeItems() {
    return new l2({ getCollections: () => r(this.layer) && !this.destroyed ? [r(this.layer.routeInfo) ? new j([this.layer.routeInfo]) : null, this.layer.directionLines, this.layer.directionPoints, this.layer.polygonBarriers, this.layer.polylineBarriers, this.layer.pointBarriers, this.layer.stops] : [] });
  }
  initialize() {
    this.updatingHandles.addOnCollectionChange(() => this._routeItems, (t2) => this._routeItemsChanged(t2), h);
  }
  destroy() {
    var _a;
    this._networkFeatureMap.clear(), this._networkGraphicMap.clear(), this._graphics.removeAll(), (_a = this._get("_routeItems")) == null ? void 0 : _a.destroy();
  }
  attach() {
    this._createGraphicsView();
  }
  detach() {
    this._destroyGraphicsView();
  }
  async fetchPopupFeatures(t2) {
    return this._graphicsView.hitTest(t2).filter((t3) => !!t3.popupTemplate);
  }
  highlight(t2) {
    let e2;
    e2 = V(t2) ? [this._getNetworkFeatureUid(t2)] : G(t2) ? t2.map((t3) => this._getNetworkFeatureUid(t3)) : j2(t2) ? t2.map((t3) => this._getNetworkFeatureUid(t3)).toArray() : [t2.uid];
    const r2 = e2.filter(r);
    return r2.length ? (this._addHighlight(r2), { remove: () => this._removeHighlight(r2) }) : k;
  }
  async hitTest(t2, e2) {
    if (this.suspended)
      return null;
    const r2 = this._graphicsView.hitTest(t2).filter(r).map((t3) => this._networkGraphicMap.get(t3));
    if (!r2.length)
      return null;
    const { layer: s } = this;
    return r2.reverse().map((e3) => ({ type: "route", layer: s, mapPoint: t2, networkFeature: e3 }));
  }
  isUpdating() {
    return this._graphicsView.updating;
  }
  moveStart() {
  }
  moveEnd() {
  }
  update(t2) {
    this._graphicsView.processUpdate(t2);
  }
  viewChange() {
    this._graphicsView.viewChange();
  }
  _addHighlight(t2) {
    for (const e2 of t2)
      if (this._highlightIds.has(e2)) {
        const t3 = this._highlightIds.get(e2);
        this._highlightIds.set(e2, t3 + 1);
      } else
        this._highlightIds.set(e2, 1);
    this._updateHighlight();
  }
  _createGraphic(t2) {
    const e2 = t2.toGraphic();
    return e2.layer = this.layer, e2.sourceLayer = this.layer, e2;
  }
  _createGraphicsView() {
    const t2 = this.view, e2 = () => this.requestUpdate(), r2 = new i(t2.featuresTilingScheme);
    this._graphicsView = new ae({ container: r2, graphics: this._graphics, requestUpdateCallback: e2, view: t2 }), this.container.addChild(r2), this._updateHighlight();
  }
  _destroyGraphicsView() {
    this.container.removeChild(this._graphicsView.container), this._graphicsView.destroy();
  }
  _getDrawOrder(t2) {
    const e2 = this._networkGraphicMap.get(t2);
    return v.indexOf(e2.type);
  }
  _getNetworkFeatureUid(t2) {
    return this._networkFeatureMap.has(t2) ? this._networkFeatureMap.get(t2).uid : null;
  }
  _removeHighlight(t2) {
    for (const e2 of t2)
      if (this._highlightIds.has(e2)) {
        const t3 = this._highlightIds.get(e2) - 1;
        0 === t3 ? this._highlightIds.delete(e2) : this._highlightIds.set(e2, t3);
      }
    this._updateHighlight();
  }
  _routeItemsChanged(t2) {
    if (t2.removed.length) {
      this._graphics.removeMany(t2.removed.map((t3) => {
        const e2 = this._networkFeatureMap.get(t3);
        return this._networkFeatureMap.delete(t3), this._networkGraphicMap.delete(e2), e2;
      }));
      for (const e2 of t2.removed)
        this.removeHandles(e2);
    }
    if (t2.added.length) {
      this._graphics.addMany(t2.added.map((t3) => {
        const e2 = this._createGraphic(t3);
        return t(e2.symbol) ? null : (this._networkFeatureMap.set(t3, e2), this._networkGraphicMap.set(e2, t3), e2);
      }).filter(r));
      for (const e2 of t2.added)
        this.addHandles([l(() => e2.geometry, (t3, r2) => {
          this._updateGraphic(e2, "geometry", t3, r2);
        }), l(() => e2.symbol, (t3, r2) => {
          this._updateGraphic(e2, "symbol", t3, r2);
        })], e2);
      this._graphics.sort((t3, e2) => this._getDrawOrder(t3) - this._getDrawOrder(e2));
    }
  }
  _updateGraphic(t2, e2, r2, i2) {
    if (!this._networkFeatureMap.has(t2)) {
      const e3 = this._createGraphic(t2);
      return this._networkFeatureMap.set(t2, e3), this._networkGraphicMap.set(e3, t2), void this._graphics.add(e3);
    }
    const s = this._networkFeatureMap.get(t2);
    s[e2] = r2, M.graphic = s, M.property = e2, M.oldValue = i2, M.newValue = r2, this._graphicsView.graphicUpdateHandler(M);
  }
  _updateHighlight() {
    const t2 = Array.from(this._highlightIds.keys());
    this._graphicsView.setHighlight(t2);
  }
};
e([y()], I.prototype, "_graphics", void 0), e([y()], I.prototype, "_routeItems", null), I = e([a("esri.views.2d.layers.RouteLayerView2D")], I);
var F = I;
export {
  F as default
};
//# sourceMappingURL=RouteLayerView2D-7W6TFDTP.js.map
