import {
  d,
  l as l5,
  t as t2
} from "./chunk-NC6SXEMY.js";
import {
  s as s5,
  x
} from "./chunk-VGE7POXD.js";
import {
  l as l4
} from "./chunk-TQCVRALN.js";
import {
  l as l3
} from "./chunk-72XDZD6U.js";
import {
  v as v2,
  w
} from "./chunk-GEQPBGLO.js";
import {
  o as o2
} from "./chunk-CCAF47ZU.js";
import {
  n as n3,
  r as r2
} from "./chunk-WAN4YZSB.js";
import {
  n as n2
} from "./chunk-EALW5DHT.js";
import {
  m
} from "./chunk-KK57CPHE.js";
import {
  l as l2
} from "./chunk-BHQVXYUV.js";
import {
  $,
  F
} from "./chunk-M3KO43BW.js";
import {
  j
} from "./chunk-LJAKPJDJ.js";
import {
  n
} from "./chunk-TKWZACTO.js";
import {
  s as s4
} from "./chunk-RDTHWDIE.js";
import {
  o
} from "./chunk-EAFLFTSD.js";
import {
  r
} from "./chunk-DOVXDFWE.js";
import {
  l,
  u2 as u
} from "./chunk-KGIB6IYW.js";
import {
  a2 as a,
  e,
  v2 as v,
  y3 as y
} from "./chunk-3PPVODAA.js";
import {
  T,
  b
} from "./chunk-PXVSWY3C.js";
import {
  E,
  f
} from "./chunk-WTKFW2TD.js";
import {
  s as s2,
  s2 as s3
} from "./chunk-UG2OEDEE.js";
import {
  s
} from "./chunk-IOCWNUEO.js";
import {
  p
} from "./chunk-PR6SXADK.js";
import {
  t
} from "./chunk-WHB7G7RI.js";

// node_modules/@arcgis/core/ground/NavigationConstraint.js
var t3;
var p2 = t3 = class extends l {
  constructor(r4) {
    super(r4), this.type = "none";
  }
  clone() {
    return new t3({ type: this.type });
  }
};
e([o({ none: "none", stayAbove: "stay-above" })], p2.prototype, "type", void 0), p2 = t3 = e([a("esri.ground.NavigationConstraint")], p2);

// node_modules/@arcgis/core/views/3d/support/debugFlags.js
var T2 = class extends v {
  constructor() {
    super(...arguments), this.SCENEVIEW_HITTEST_RETURN_INTERSECTOR = false, this.DECONFLICTOR_SHOW_VISIBLE = false, this.DECONFLICTOR_SHOW_INVISIBLE = false, this.DECONFLICTOR_SHOW_GRID = false, this.LABELS_SHOW_BORDER = false, this.TEXT_SHOW_BASELINE = false, this.TEXT_SHOW_BORDER = false, this.OVERLAY_DRAW_DEBUG_TEXTURE = false, this.OVERLAY_SHOW_CENTER = false, this.SHOW_POI = false, this.TESTS_DISABLE_OPTIMIZATIONS = false, this.TESTS_DISABLE_FAST_UPDATES = false, this.DRAW_MESH_GEOMETRY_NORMALS = false, this.FEATURE_TILE_FETCH_SHOW_TILES = false, this.FEATURE_TILE_TREE_SHOW_TILES = false, this.TERRAIN_TILE_TREE_SHOW_TILES = false, this.I3S_TREE_SHOW_TILES = false, this.I3S_SHOW_MODIFICATIONS = false, this.LOD_INSTANCE_RENDERER_DISABLE_UPDATES = false, this.LOD_INSTANCE_RENDERER_COLORIZE_BY_LEVEL = false, this.EDGES_SHOW_HIDDEN_TRANSPARENT_EDGES = false, this.LINE_WIREFRAMES = false, this.TERRAIN_USE_LEGACY_SHADING = false;
  }
};
e([y()], T2.prototype, "SCENEVIEW_HITTEST_RETURN_INTERSECTOR", void 0), e([y()], T2.prototype, "DECONFLICTOR_SHOW_VISIBLE", void 0), e([y()], T2.prototype, "DECONFLICTOR_SHOW_INVISIBLE", void 0), e([y()], T2.prototype, "DECONFLICTOR_SHOW_GRID", void 0), e([y()], T2.prototype, "LABELS_SHOW_BORDER", void 0), e([y()], T2.prototype, "TEXT_SHOW_BASELINE", void 0), e([y()], T2.prototype, "TEXT_SHOW_BORDER", void 0), e([y()], T2.prototype, "OVERLAY_DRAW_DEBUG_TEXTURE", void 0), e([y()], T2.prototype, "OVERLAY_SHOW_CENTER", void 0), e([y()], T2.prototype, "SHOW_POI", void 0), e([y()], T2.prototype, "TESTS_DISABLE_OPTIMIZATIONS", void 0), e([y()], T2.prototype, "TESTS_DISABLE_FAST_UPDATES", void 0), e([y()], T2.prototype, "DRAW_MESH_GEOMETRY_NORMALS", void 0), e([y()], T2.prototype, "FEATURE_TILE_FETCH_SHOW_TILES", void 0), e([y()], T2.prototype, "FEATURE_TILE_TREE_SHOW_TILES", void 0), e([y()], T2.prototype, "TERRAIN_TILE_TREE_SHOW_TILES", void 0), e([y()], T2.prototype, "I3S_TREE_SHOW_TILES", void 0), e([y()], T2.prototype, "I3S_SHOW_MODIFICATIONS", void 0), e([y()], T2.prototype, "LOD_INSTANCE_RENDERER_DISABLE_UPDATES", void 0), e([y()], T2.prototype, "LOD_INSTANCE_RENDERER_COLORIZE_BY_LEVEL", void 0), e([y()], T2.prototype, "EDGES_SHOW_HIDDEN_TRANSPARENT_EDGES", void 0), e([y()], T2.prototype, "LINE_WIREFRAMES", void 0), e([y()], T2.prototype, "TERRAIN_USE_LEGACY_SHADING", void 0), T2 = e([a("esri.views.3d.support.DebugFlags")], T2);
var t4 = new T2();

// node_modules/@arcgis/core/Ground.js
var C;
var S = C = class extends u(m) {
  constructor(r4) {
    super(r4), this.opacity = 1, this.shading = !t4.TERRAIN_USE_LEGACY_SHADING, this.surfaceColor = null, this.navigationConstraint = null, this.layers = new j();
    const e2 = (r5) => {
      r5.parent && r5.parent !== this && "remove" in r5.parent && r5.parent.remove(r5), r5.parent = this, "elevation" !== r5.type && "base-elevation" !== r5.type && s2.getLogger(this.declaredClass).error(`Layer '${r5.title}, id:${r5.id}' of type '${r5.type}' is not supported as a ground layer and will therefore be ignored. Only layers of type 'elevation' are supported.`);
    }, t6 = (r5) => {
      r5.parent = null;
    };
    this.layers.on("after-add", (r5) => e2(r5.item)), this.layers.on("after-remove", (r5) => t6(r5.item));
  }
  initialize() {
    this.when().catch((r4) => {
      s2.getLogger(this.declaredClass).error("#load()", "Failed to load ground", r4);
    }), this.resourceInfo && this.read(this.resourceInfo.data, this.resourceInfo.context);
  }
  destroy() {
    const r4 = this.layers.removeAll();
    for (const e2 of r4)
      e2.destroy();
    this.layers.destroy();
  }
  normalizeCtorArgs(r4) {
    return r4 && "resourceInfo" in r4 && (this._set("resourceInfo", r4.resourceInfo), delete (r4 = { ...r4 }).resourceInfo), r4;
  }
  set layers(r4) {
    this._set("layers", n2(r4, this._get("layers")));
  }
  writeLayers(r4, e2, o3, t6) {
    const i2 = [];
    r4 ? (t6 = { ...t6, layerContainerType: "ground" }, r4.forEach((r5) => {
      if ("write" in r5) {
        const e3 = {};
        o2(r5)().write(e3, t6) && i2.push(e3);
      } else
        t6 && t6.messages && t6.messages.push(new s3("layer:unsupported", `Layers (${r5.title}, ${r5.id}) of type '${r5.declaredClass}' cannot be persisted in the ground`, { layer: r5 }));
    }), e2.layers = i2) : e2.layers = i2;
  }
  load(r4) {
    return this.addResolvingPromise(this._loadFromSource(r4)), Promise.resolve(this);
  }
  loadAll() {
    return l3(this, (r4) => {
      r4(this.layers);
    });
  }
  async queryElevation(r4, e2) {
    await this.load({ signal: e2 == null ? void 0 : e2.signal });
    const { ElevationQuery: o3 } = await import("./ElevationQuery-VS7K3RP5.js");
    f(e2);
    const t6 = new o3(), s6 = this.layers.filter(A).toArray();
    return t6.queryAll(s6, r4, e2);
  }
  async createElevationSampler(r4, e2) {
    await this.load({ signal: e2 == null ? void 0 : e2.signal });
    const { ElevationQuery: o3 } = await import("./ElevationQuery-VS7K3RP5.js");
    f(e2);
    const t6 = new o3(), s6 = this.layers.filter(A).toArray();
    return t6.createSamplerAll(s6, r4, e2);
  }
  clone() {
    const r4 = { opacity: this.opacity, surfaceColor: p(this.surfaceColor), navigationConstraint: p(this.navigationConstraint), layers: this.layers.slice() };
    return this.loaded && (r4.loadStatus = "loaded"), new C({ resourceInfo: this.resourceInfo }).set(r4);
  }
  read(r4, e2) {
    this.resourceInfo || this._set("resourceInfo", { data: r4, context: e2 }), super.read(r4, e2);
  }
  _loadFromSource(r4) {
    const e2 = this.resourceInfo;
    return e2 ? this._loadLayersFromJSON(e2.data, e2.context, r4) : Promise.resolve();
  }
  _loadLayersFromJSON(r4, e2, o3) {
    const t6 = e2 && e2.origin || "web-scene", s6 = e2 && e2.portal || null, a2 = e2 && e2.url || null;
    return import("./layersCreator-IBKFQUIV.js").then(({ populateOperationalLayers: e3 }) => {
      f(o3);
      const i2 = [];
      if (r4.layers && Array.isArray(r4.layers)) {
        const o4 = { context: { origin: t6, url: a2, portal: s6, layerContainerType: "ground" }, defaultLayerType: "ArcGISTiledElevationServiceLayer" };
        i2.push(e3(this.layers, r4.layers, o4));
      }
      return E(i2);
    }).then(() => {
    });
  }
};
function I(r4) {
  return r4 && "createElevationSampler" in r4;
}
function A(r4) {
  return "elevation" === r4.type || I(r4);
}
e([y({ json: { read: false } })], S.prototype, "layers", null), e([r("layers")], S.prototype, "writeLayers", null), e([y({ readOnly: true })], S.prototype, "resourceInfo", void 0), e([y({ type: Number, nonNullable: true, range: { min: 0, max: 1 }, json: { type: T, read: { reader: r2, source: "transparency" }, write: { writer: (r4, e2) => {
  e2.transparency = n3(r4);
}, target: "transparency" } } })], S.prototype, "opacity", void 0), e([y({ type: Boolean, nonNullable: true, json: { read: false } })], S.prototype, "shading", void 0), e([y({ type: l2, json: { type: [T], write: (r4, e2) => {
  e2.surfaceColor = r4.toJSON().slice(0, 3);
} } })], S.prototype, "surfaceColor", void 0), e([y({ type: p2, json: { write: true } })], S.prototype, "navigationConstraint", void 0), S = C = e([a("esri.Ground")], S);
var L = S;

// node_modules/@arcgis/core/layers/support/editableLayers.js
function n4(n5) {
  var _a, _b;
  return !(!(n5 == null ? void 0 : n5.loaded) || !((_b = (_a = v2(n5)) == null ? void 0 : _a.operations) == null ? void 0 : _b.supportsEditing) || "editingEnabled" in n5 && !w(n5));
}

// node_modules/@arcgis/core/support/basemapUtils.js
var f2 = s2.getLogger("esri.support.basemapUtils");
function p3() {
  return {};
}
function y2(e2) {
  for (const r4 in e2) {
    const a2 = e2[r4];
    false === (a2 == null ? void 0 : a2.destroyed) && a2.destroy(), delete e2[r4];
  }
}
function m2(a2, t6) {
  let n5;
  if ("string" == typeof a2) {
    if (!(a2 in s5)) {
      const e2 = Object.entries(s5).filter(([e3, a3]) => s.apiKey && !a3.classic || !s.apiKey && a3.classic && !a3.deprecated).map(([e3]) => `"${e3}"`).join(", ");
      return f2.warn(`Unable to find basemap definition for: ${a2}. Try one of these: ${e2}`), null;
    }
    t6 && (n5 = t6[a2]), n5 || (n5 = x.fromId(a2), t6 && (t6[a2] = n5));
  } else
    n5 = b(x, a2);
  return (n5 == null ? void 0 : n5.destroyed) && (f2.warn("The provided basemap is already destroyed", { basemap: n5 }), n5 = null), n5;
}
function v3(e2) {
  return !!(e2 == null ? void 0 : e2.baseLayers.concat(e2.referenceLayers).some(S2));
}
function S2(e2) {
  var _a;
  if (I2(e2.url))
    return true;
  if ("vector-tile" === e2.type)
    for (const r4 in e2.sourceNameToSource) {
      if (I2((_a = e2.sourceNameToSource[r4]) == null ? void 0 : _a.sourceUrl))
        return true;
    }
  return false;
}
function h(e2, r4) {
  var _a;
  if (t(r4) || t(e2))
    return { spatialReference: null, updating: false };
  if ("not-loaded" === r4.loadStatus)
    return r4.load(), { spatialReference: null, updating: true };
  if (r4.spatialReference)
    return { spatialReference: r4.spatialReference, updating: false };
  if (0 === r4.baseLayers.length)
    return { spatialReference: null, updating: false };
  const a2 = r4.baseLayers.getItemAt(0);
  switch (a2.loadStatus) {
    case "not-loaded":
      a2.load();
    case "loading":
      return { spatialReference: null, updating: true };
    case "failed":
      return { spatialReference: null, updating: false };
  }
  const t6 = (("supportedSpatialReferences" in a2 ? a2.supportedSpatialReferences : null) || ["tileInfo" in a2 ? (_a = a2.tileInfo) == null ? void 0 : _a.spatialReference : a2.spatialReference]).filter(Boolean), i2 = e2.spatialReference;
  return i2 ? { spatialReference: t6.find((e3) => i2.equals(e3)) ?? t6[0] ?? null, updating: false } : { spatialReference: t6[0], updating: false };
}
var R = /^(basemaps|ibasemaps).*-api\.arcgis\.com$/i;
function I2(e2) {
  if (!e2)
    return false;
  const r4 = new $(F(e2));
  return !!r4.authority && R.test(r4.authority);
}

// node_modules/@arcgis/core/support/groundUtils.js
var i = { "world-elevation": { id: "worldElevation", url: "//elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer", layerType: "ArcGISTiledElevationServiceLayer" }, "world-topobathymetry": { id: "worldTopoBathymetry", url: "//elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/TopoBathy3D/ImageServer", layerType: "ArcGISTiledElevationServiceLayer" } };
function t5(t6) {
  let a2 = null;
  if ("string" == typeof t6)
    if (t6 in i) {
      const r4 = i[t6];
      a2 = new L({ resourceInfo: { data: { layers: [r4] } } });
    } else
      s2.getLogger("esri.support.groundUtils").warn(`Unable to find ground definition for: ${t6}. Try "world-elevation"`);
  else
    a2 = b(L, t6);
  return a2;
}

// node_modules/@arcgis/core/Map.js
var j2 = class extends l5(d(n.EventedMixin(v))) {
  constructor(s6) {
    super(s6), this.allLayers = new l4({ getCollections: () => {
      var _a, _b, _c;
      return [(_a = this.basemap) == null ? void 0 : _a.baseLayers, (_b = this.ground) == null ? void 0 : _b.layers, this.layers, (_c = this.basemap) == null ? void 0 : _c.referenceLayers];
    }, getChildrenFunction: (s7) => "layers" in s7 ? s7.layers : null }), this.allTables = t2(this), this.basemap = null, this.editableLayers = new l4({ getCollections: () => [this.allLayers], itemFilterFunction: n4 }), this.ground = new L(), this._basemapCache = p3();
  }
  destroy() {
    var _a, _b;
    this.allLayers.destroy(), this.allTables.destroy(), this.editableLayers.destroy(), (_a = this.ground) == null ? void 0 : _a.destroy(), (_b = this.basemap) == null ? void 0 : _b.destroy(), y2(this._basemapCache), this._basemapCache = null;
  }
  castBasemap(s6) {
    return m2(s6, this._basemapCache);
  }
  castGround(s6) {
    const e2 = t5(s6);
    return t(e2) ? this._get("ground") : e2;
  }
  findLayerById(s6) {
    return this.allLayers.find((e2) => e2.id === s6);
  }
  findTableById(s6) {
    return this.allTables.find((e2) => e2.id === s6);
  }
};
e([y({ readOnly: true, dependsOn: [] })], j2.prototype, "allLayers", void 0), e([y({ readOnly: true })], j2.prototype, "allTables", void 0), e([y({ type: x })], j2.prototype, "basemap", void 0), e([s4("basemap")], j2.prototype, "castBasemap", null), e([y({ readOnly: true })], j2.prototype, "editableLayers", void 0), e([y({ type: L, nonNullable: true })], j2.prototype, "ground", void 0), e([s4("ground")], j2.prototype, "castGround", null), j2 = e([a("esri.Map")], j2);
var L2 = j2;

export {
  v3 as v,
  S2 as S,
  h,
  L2 as L
};
//# sourceMappingURL=chunk-JU3TKWZ7.js.map
