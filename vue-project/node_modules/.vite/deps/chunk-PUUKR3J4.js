import {
  A,
  L,
  N as N2,
  R,
  S,
  T as T3,
  a as a2,
  f as f4,
  f2 as f5,
  g as g2,
  g2 as g3,
  h,
  m as m2,
  m2 as m3,
  p as p2,
  t as t2,
  u,
  v as v2
} from "./chunk-DEGV76YA.js";
import {
  e
} from "./chunk-7ZZ5ZHW5.js";
import {
  T as T2
} from "./chunk-ZSQJBVGI.js";
import {
  n as n5,
  s as s3
} from "./chunk-3MGDBME5.js";
import {
  c as c3
} from "./chunk-PCX62T5O.js";
import {
  N,
  P,
  T,
  i2,
  je,
  n2 as n,
  o,
  x
} from "./chunk-Z5QOEV22.js";
import {
  c as c2
} from "./chunk-VQUDNY75.js";
import {
  f as f2,
  n as n2,
  o as o2,
  s,
  t
} from "./chunk-H52BWZLI.js";
import {
  s as s2
} from "./chunk-3MAEJ4CR.js";
import {
  f as f3
} from "./chunk-CTDAE47L.js";
import {
  a
} from "./chunk-PSKRKTRX.js";
import {
  ft
} from "./chunk-UZM66DAH.js";
import {
  He
} from "./chunk-ABCADCZZ.js";
import {
  d
} from "./chunk-LYJMRI6I.js";
import {
  n as n3,
  x as x5
} from "./chunk-FAQPWMFY.js";
import {
  n as n4
} from "./chunk-KXH42XSQ.js";
import {
  x as x4
} from "./chunk-TDFTAVQL.js";
import {
  x as x3
} from "./chunk-3MAMOMOP.js";
import {
  r
} from "./chunk-OXCMSIKI.js";
import {
  g
} from "./chunk-CSFUQCFV.js";
import {
  U
} from "./chunk-JU2WP2RZ.js";
import {
  r as r2
} from "./chunk-NI6ENKKR.js";
import {
  m,
  x as x2
} from "./chunk-FZCZQIVS.js";
import {
  y
} from "./chunk-MQUNEV3K.js";
import {
  v
} from "./chunk-M7CMZTD6.js";
import {
  f2 as f,
  p3 as p
} from "./chunk-T5VSOT6T.js";
import {
  C
} from "./chunk-6ZUWLK7F.js";
import {
  c,
  i
} from "./chunk-HVCAHUYB.js";

// node_modules/@arcgis/core/arcade/featureSetCollection.js
var e2 = class {
  constructor() {
    this.declaredRootClass = "esri.arcade.featureSetCollection", this._layerById = {}, this._layerByName = {};
  }
  add(e4, t4, a6) {
    this._layerById[t4] = a6, this._layerByName[e4] = a6;
  }
  async featureSetByName(e4, t4 = true, a6 = ["*"]) {
    return void 0 === this._layerByName[e4] ? null : this._layerByName[e4];
  }
  async featureSetById(e4, t4 = true, a6 = ["*"]) {
    return void 0 === this._layerById[e4] ? null : this._layerById[e4];
  }
  castToText(e4 = false) {
    return "object, FeatureSetCollection";
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/AttributeFilter.js
var c4 = class extends v2 {
  constructor(e4) {
    super(e4), this.declaredClass = "esri.arcade.featureset.actions.AttributeFilter", this._maxProcessing = 1e3, this._parent = e4.parentfeatureset, e4.whereclause instanceof f2 ? (this._whereclause = e4.whereclause, this._whereClauseFunction = null) : (this._whereClauseFunction = e4.whereclause, this._whereclause = null);
  }
  _initialiseFeatureSet() {
    null !== this._parent ? (this.fields = this._parent.fields.slice(0), this.geometryType = this._parent.geometryType, this.objectIdField = this._parent.objectIdField, this.globalIdField = this._parent.globalIdField, this.spatialReference = this._parent.spatialReference, this.hasM = this._parent.hasM, this.hasZ = this._parent.hasZ, this.typeIdField = this._parent.typeIdField, this.types = this._parent.types) : (this.fields = [], this.typeIdField = "", this.objectIdField = "", this.globalIdField = "", this.spatialReference = new f({ wkid: 4326 }), this.geometryType = P.point);
  }
  async _getSet(e4) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t4 = await this._parent._getFilteredSet("", null, this._whereclause, null, e4);
      return this._checkCancelled(e4), null !== this._whereClauseFunction ? this._wset = new t2(t4._candidates.slice(0).concat(t4._known.slice(0)), [], t4._ordered, this._clonePageDefinition(t4.pagesDefinition)) : this._wset = new t2(t4._candidates.slice(0), t4._known.slice(0), t4._ordered, this._clonePageDefinition(t4.pagesDefinition)), this._wset;
    }
    return this._wset;
  }
  _isInFeatureSet(e4) {
    var _a;
    let t4 = (_a = this._parent) == null ? void 0 : _a._isInFeatureSet(e4);
    return t4 === n.NotInFeatureSet ? t4 : (t4 = this._idstates[e4], void 0 === t4 ? n.Unknown : t4);
  }
  _getFeature(e4, t4, s5) {
    return this._parent._getFeature(e4, t4, s5);
  }
  _getFeatures(e4, t4, s5, i3) {
    return this._parent._getFeatures(e4, t4, s5, i3);
  }
  _featureFromCache(e4) {
    return this._parent._featureFromCache(e4);
  }
  executeWhereClause(e4) {
    var _a;
    return ((_a = this._whereclause) == null ? void 0 : _a.testFeature(e4)) ?? false;
  }
  async executeWhereClauseDeferred(e4) {
    if (null !== this._whereClauseFunction) {
      const t4 = this._whereClauseFunction(e4);
      return C(t4), t4;
    }
    return this.executeWhereClause(e4);
  }
  async _fetchAndRefineFeatures(e4, t4, s5) {
    var _a, _b, _c;
    const r3 = new t2([], e4, false, null), a6 = Math.min(t4, e4.length);
    if (await ((_a = this._parent) == null ? void 0 : _a._getFeatures(r3, -1, a6, s5)), this._checkCancelled(s5), null == this._whereClauseFunction) {
      for (let t5 = 0; t5 < a6; t5++) {
        const s6 = (_b = this._parent) == null ? void 0 : _b._featureFromCache(e4[t5]);
        true === this.executeWhereClause(s6) ? this._idstates[e4[t5]] = n.InFeatureSet : this._idstates[e4[t5]] = n.NotInFeatureSet;
      }
      return "success";
    }
    const l = [];
    for (let i3 = 0; i3 < a6; i3++) {
      const t5 = (_c = this._parent) == null ? void 0 : _c._featureFromCache(e4[i3]);
      l.push(await this.executeWhereClauseDeferred(t5));
    }
    for (let i3 = 0; i3 < t4; i3++)
      true === l[i3] ? this._idstates[e4[i3]] = n.InFeatureSet : this._idstates[e4[i3]] = n.NotInFeatureSet;
    return "success";
  }
  async _getFilteredSet(e4, t4, s5, r3, n6) {
    null !== this._whereClauseFunction || (null !== s5 ? null !== this._whereclause && (s5 = m2(this._whereclause, s5)) : s5 = this._whereclause), await this._ensureLoaded();
    const l = await this._parent._getFilteredSet(e4, t4, s5, r3, n6);
    let h2;
    return this._checkCancelled(n6), h2 = null !== this._whereClauseFunction ? new t2(l._candidates.slice(0).concat(l._known.slice(0)), [], l._ordered, this._clonePageDefinition(l.pagesDefinition)) : new t2(l._candidates.slice(0), l._known.slice(0), l._ordered, this._clonePageDefinition(l.pagesDefinition)), h2;
  }
  async _stat(e4, t4, s5, i3, r3, n6, l) {
    if (null !== this._whereClauseFunction)
      return null === r3 && "" === s5 && null === i3 ? this._manualStat(e4, t4, n6, l) : { calculated: false };
    let h2 = this._whereclause;
    null !== r3 && null !== this._whereclause && (h2 = m2(this._whereclause, r3));
    const u2 = await this._parent._stat(e4, t4, s5, i3, h2, n6, l);
    return false === u2.calculated ? null === r3 && "" === s5 && null === i3 ? this._manualStat(e4, t4, n6, l) : { calculated: false } : u2;
  }
  async _canDoAggregates(e4, t4, s5, i3, r3) {
    return null === this._whereClauseFunction && (null !== r3 ? null !== this._whereclause && (r3 = m2(this._whereclause, r3)) : r3 = this._whereclause, null !== this._parent && this._parent._canDoAggregates(e4, t4, s5, i3, r3));
  }
  async _getAggregatePagesDataSourceDefinition(s5, i3, r3, n6, l, h2, u2) {
    if (null === this._parent)
      throw new o2(n2.NeverReach);
    return null !== l ? null !== this._whereclause && (l = m2(this._whereclause, l)) : l = this._whereclause, this._parent._getAggregatePagesDataSourceDefinition(s5, i3, r3, n6, l, h2, u2);
  }
  static registerAction() {
    v2._featuresetFunctions.filter = function(e4) {
      if ("function" == typeof e4)
        return new c4({ parentfeatureset: this, whereclause: e4 });
      let t4 = null;
      return e4 instanceof f2 && (t4 = e4), new c4({ parentfeatureset: this, whereclause: t4 });
    };
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/Adapted.js
var W = class {
  constructor(e4) {
    this.field = e4, this.sqlRewritable = false;
  }
  postInitialization(e4, t4) {
  }
};
var E = class extends W {
  constructor(e4) {
    super(e4), this.sqlRewritable = true;
  }
  extractValue(e4) {
    return e4.attributes[this.field.name];
  }
  rewriteSql(e4) {
    return { rewritten: this.sqlRewritable, where: e4 };
  }
};
var x6 = class extends W {
  constructor(e4, t4, r3) {
    super(o(e4)), this.originalField = e4, this.sqlRewritable = true, this.field.name = t4, this.field.alias = r3;
  }
  rewriteSql(e4, t4) {
    return { rewritten: this.sqlRewritable, where: p2(e4, this.field.name, this.originalField.name, t4.getFieldsIndex()) };
  }
  extractValue(e4) {
    return e4.attributes[this.originalField.name];
  }
};
var A2 = class extends W {
  constructor(e4, t4, r3) {
    super(e4), this.codefield = t4, this.lkp = r3, this.reverseLkp = {};
    for (const s5 in r3)
      this.reverseLkp[r3[s5]] = s5;
    this.sqlRewritable = true;
  }
  rewriteSql(e4, t4) {
    const r3 = this.evaluateNodeToWhereClause(e4.parseTree, i2.Standardised, this.field.name, this.codefield instanceof f2 ? u(this.codefield, i2.Standardised) : this.codefield, e4.parameters);
    return r3.includes(A2.BADNESS) ? { rewritten: false, where: e4 } : { rewritten: this.sqlRewritable, where: f2.create(r3, c(t4._parent).getFieldsIndex()) };
  }
  evaluateNodeToWhereClause(e4, r3, i3 = null, l = null, n6) {
    let o3, h2, u2, c5;
    switch (e4.type) {
      case "interval":
        return R(this.evaluateNodeToWhereClause(e4.value, r3, i3, l, n6), e4.qualifier, e4.op);
      case "case-expression": {
        let t4 = " CASE ";
        "simple" === e4.format && (t4 += this.evaluateNodeToWhereClause(e4.operand, r3, i3, A2.BADNESS, n6));
        for (let s5 = 0; s5 < e4.clauses.length; s5++)
          t4 += " WHEN " + this.evaluateNodeToWhereClause(e4.clauses[s5].operand, r3, i3, A2.BADNESS, n6) + " THEN " + this.evaluateNodeToWhereClause(e4.clauses[s5].value, r3, i3, A2.BADNESS, n6);
        return null !== e4.else && (t4 += " ELSE " + this.evaluateNodeToWhereClause(e4.else, r3, i3, A2.BADNESS, n6)), t4 += " END ", t4;
      }
      case "parameter": {
        const s5 = n6[e4.value.toLowerCase()];
        if ("string" == typeof s5)
          return "'" + s5.toString().replace(/'/g, "''") + "'";
        if (s5 instanceof Date)
          return T3(s5, r3, null);
        if (s5 instanceof c2)
          return h(s5, r3, null);
        if (s5 instanceof Array) {
          const e5 = [];
          for (let a6 = 0; a6 < s5.length; a6++)
            "string" == typeof s5[a6] ? e5.push("'" + s5[a6].toString().replace(/'/g, "''") + "'") : s5[a6] instanceof Date ? e5.push(T3(s5[a6], r3, null)) : s5[a6] instanceof c2 ? e5.push(h(s5[a6], r3, null)) : e5.push(s5[a6].toString());
          return e5;
        }
        return s5.toString();
      }
      case "expression-list":
        h2 = [];
        for (const t4 of e4.value)
          h2.push(this.evaluateNodeToWhereClause(t4, r3, i3, l, n6));
        return h2;
      case "unary-expression":
        return " ( NOT " + this.evaluateNodeToWhereClause(e4.expr, r3, i3, A2.BADNESS, n6) + " ) ";
      case "binary-expression":
        switch (e4.operator) {
          case "AND":
            return " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, l, n6) + " AND " + this.evaluateNodeToWhereClause(e4.right, r3, i3, l, n6) + ") ";
          case "OR":
            return " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, l, n6) + " OR " + this.evaluateNodeToWhereClause(e4.right, r3, i3, l, n6) + ") ";
          case "IS":
            if ("null" !== e4.right.type)
              throw new s(t.UnsupportedIsRhs);
            return " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, l, n6) + " IS NULL )";
          case "ISNOT":
            if ("null" !== e4.right.type)
              throw new s(t.UnsupportedIsRhs);
            return " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, l, n6) + " IS NOT NULL )";
          case "IN":
            if (o3 = [], "expression-list" === e4.right.type) {
              if ("column-reference" === e4.left.type && e4.left.column.toUpperCase() === this.field.name.toUpperCase()) {
                const t4 = [];
                let s5 = true;
                for (const r4 of e4.right.value) {
                  if ("string" !== r4.type) {
                    s5 = false;
                    break;
                  }
                  if (void 0 === this.lkp[r4.value]) {
                    s5 = false;
                    break;
                  }
                  t4.push(this.lkp[r4.value].toString());
                }
                if (s5)
                  return " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, l, n6) + " IN (" + t4.join(",") + ")) ";
              }
              return o3 = this.evaluateNodeToWhereClause(e4.right, r3, i3, l, n6), " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, l, n6) + " IN (" + o3.join(",") + ")) ";
            }
            return c5 = this.evaluateNodeToWhereClause(e4.right, r3, i3, l, n6), c5 instanceof Array ? " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, l, n6) + " IN (" + c5.join(",") + ")) " : " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, l, n6) + " IN (" + c5 + ")) ";
          case "NOT IN":
            if (o3 = [], "expression-list" === e4.right.type) {
              if ("column-reference" === e4.left.type && e4.left.column.toUpperCase() === this.field.name.toUpperCase()) {
                const t4 = [];
                let s5 = true;
                for (const r4 of e4.right.value) {
                  if ("string" !== r4.type) {
                    s5 = false;
                    break;
                  }
                  if (void 0 === this.lkp[r4.value]) {
                    s5 = false;
                    break;
                  }
                  t4.push(this.lkp[r4.value].toString());
                }
                if (s5)
                  return " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, l, n6) + " NOT IN (" + t4.join(",") + ")) ";
              }
              return o3 = this.evaluateNodeToWhereClause(e4.right, r3, i3, l, n6), " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, l, n6) + " NOT IN (" + o3.join(",") + ")) ";
            }
            return c5 = this.evaluateNodeToWhereClause(e4.right, r3, i3, l, n6), c5 instanceof Array ? " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, l, n6) + " NOT IN (" + c5.join(",") + ")) " : " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, l, n6) + " NOT IN (" + c5 + ")) ";
          case "BETWEEN":
            return u2 = this.evaluateNodeToWhereClause(e4.right, r3, i3, A2.BADNESS, n6), " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, A2.BADNESS, n6) + " BETWEEN " + u2[0] + " AND " + u2[1] + " ) ";
          case "NOTBETWEEN":
            return u2 = this.evaluateNodeToWhereClause(e4.right, r3, i3, A2.BADNESS, n6), " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, A2.BADNESS, n6) + " NOT BETWEEN " + u2[0] + " AND " + u2[1] + " ) ";
          case "LIKE":
            return "" !== e4.escape ? " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, A2.BADNESS, n6) + " LIKE " + this.evaluateNodeToWhereClause(e4.right, r3, i3, A2.BADNESS, n6) + " ESCAPE '" + e4.escape + "') " : " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, A2.BADNESS, n6) + " LIKE " + this.evaluateNodeToWhereClause(e4.right, r3, i3, A2.BADNESS, n6) + ") ";
          case "NOT LIKE":
            return "" !== e4.escape ? " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, A2.BADNESS, n6) + " NOT LIKE " + this.evaluateNodeToWhereClause(e4.right, r3, i3, A2.BADNESS, n6) + " ESCAPE '" + e4.escape + "') " : " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, A2.BADNESS, n6) + " NOT LIKE " + this.evaluateNodeToWhereClause(e4.right, r3, i3, A2.BADNESS, n6) + ") ";
          case "<>":
          case "=":
            if ("column-reference" === e4.left.type && "string" === e4.right.type) {
              if (e4.left.column.toUpperCase() === this.field.name.toUpperCase() && void 0 !== this.lkp[e4.right.value.toString()])
                return " (" + l + " " + e4.operator + " " + this.lkp[e4.right.value.toString()].toString() + ") ";
            } else if ("column-reference" === e4.right.type && "string" === e4.left.type && e4.right.column.toUpperCase() === this.field.name.toUpperCase())
              return " (" + this.lkp[e4.right.value.toString()].toString() + " " + e4.operator + " " + l + ") ";
            return " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, A2.BADNESS, n6) + " " + e4.operator + " " + this.evaluateNodeToWhereClause(e4.right, r3, i3, A2.BADNESS, n6) + ") ";
          case "<":
          case ">":
          case ">=":
          case "<=":
          case "*":
          case "-":
          case "+":
          case "/":
          case "||":
            return " (" + this.evaluateNodeToWhereClause(e4.left, r3, i3, A2.BADNESS, n6) + " " + e4.operator + " " + this.evaluateNodeToWhereClause(e4.right, r3, i3, A2.BADNESS, n6) + ") ";
        }
      case "null":
        return "null";
      case "boolean":
        return true === e4.value ? "1" : "0";
      case "string":
        return "'" + e4.value.toString().replace(/'/g, "''") + "'";
      case "timestamp":
      case "date":
        return T3(e4.value, r3, null);
      case "number":
        return e4.value.toString();
      case "current-time":
        return L("date" === e4.mode, r3);
      case "column-reference":
        return i3 && i3.toLowerCase() === e4.column.toLowerCase() ? "(" + l + ")" : e4.column;
      case "data-type":
        return e4.value;
      case "function": {
        const t4 = this.evaluateNodeToWhereClause(e4.args, r3, i3, A2.BADNESS, n6);
        return g2(e4.name, t4, r3);
      }
    }
    throw new s(t.UnsupportedSyntax, { node: e4.type });
  }
  extractValue(e4) {
    return this.codefield instanceof f2 ? this.reverseLkp[this.codefield.calculateValueCompiled(e4)] : this.reverseLkp[e4.attributes[this.codefield]];
  }
};
A2.BADNESS = "_!!!_BAD_LKP_!!!!";
var y2 = class extends W {
  constructor(e4, t4) {
    super(e4), this._sql = t4;
  }
  rewriteSql(e4, t4) {
    return { rewritten: true, where: p2(e4, this.field.name, u(this._sql, i2.Standardised), t4.getFieldsIndex()) };
  }
  extractValue(e4) {
    return this._sql.calculateValueCompiled(e4);
  }
};
var D = class extends v2 {
  static findField(e4, t4) {
    for (const r3 of e4)
      if (r3.name.toLowerCase() === t4.toString().toLowerCase())
        return r3;
    return null;
  }
  constructor(e4) {
    super(e4), this._calcFunc = null, this.declaredClass = "esri.arcade.featureset.actions.Adapted", this.adaptedFields = [], this._extraFilter = null, this._extraFilter = e4.extraFilter, this._parent = e4.parentfeatureset, this._maxProcessing = 30, this.adaptedFields = e4.adaptedFields;
  }
  _initialiseFeatureSet() {
    null !== this._parent ? (this.geometryType = this._parent.geometryType, this.objectIdField = this._parent.objectIdField, this.globalIdField = this._parent.globalIdField, this.spatialReference = this._parent.spatialReference, this.hasM = this._parent.hasM, this.hasZ = this._parent.hasZ, this.typeIdField = this._parent.typeIdField, this.types = this._parent.types) : (this.spatialReference = new f({ wkid: 4326 }), this.objectIdField = "", this.globalIdField = "", this.geometryType = P.point, this.typeIdField = "", this.types = null), this.fields = [];
    for (const e4 of this.adaptedFields)
      e4.postInitialization(this, this._parent), this.fields.push(e4.field);
  }
  async _getSet(e4) {
    var _a;
    if (null === this._wset) {
      await this._ensureLoaded();
      let t4 = null;
      return t4 = this._extraFilter ? await this._getFilteredSet("", null, null, null, e4) : await ((_a = this._parent) == null ? void 0 : _a._getSet(e4)), this._checkCancelled(e4), i(t4), this._wset = new t2(t4._candidates.slice(0), t4._known.slice(0), t4._ordered, this._clonePageDefinition(t4.pagesDefinition)), this._wset;
    }
    return this._wset;
  }
  _isInFeatureSet(e4) {
    return c(this._parent)._isInFeatureSet(e4);
  }
  async _getFeatures(t4, s5, a6, i3) {
    var _a, _b;
    const l = [];
    -1 !== s5 && void 0 === this._featureCache[s5] && l.push(s5);
    const n6 = this._maxQueryRate();
    if (true === this._checkIfNeedToExpandKnownPage(t4, n6))
      return await this._expandPagedSet(t4, n6, 0, 0, i3), this._getFeatures(t4, s5, a6, i3);
    let h2 = 0;
    for (let e4 = t4._lastFetchedIndex; e4 < t4._known.length && (h2++, h2 <= a6 && (t4._lastFetchedIndex += 1), !(void 0 === this._featureCache[t4._known[e4]] && (t4._known[e4] !== s5 && l.push(t4._known[e4]), l.length >= n6))); e4++)
      ;
    if (0 === l.length)
      return "success";
    t4 = new t2([], l, t4._ordered, null);
    const u2 = Math.min(l.length, a6);
    await ((_a = this._parent) == null ? void 0 : _a._getFeatures(t4, -1, u2, i3)), this._checkCancelled(i3);
    const c5 = [];
    for (let e4 = 0; e4 < u2; e4++) {
      const t5 = (_b = this._parent) == null ? void 0 : _b._featureFromCache(l[e4]);
      void 0 !== t5 && c5.push({ geometry: t5.geometry, attributes: t5.attributes, id: l[e4] });
    }
    for (const o3 of c5) {
      const t5 = [];
      for (const e4 of this.adaptedFields)
        t5[e4.field.name] = e4.extractValue(o3);
      this._featureCache[o3.id] = new g({ attributes: t5, geometry: c3(o3.geometry) });
    }
    return "success";
  }
  async _fetchAndRefineFeatures() {
    throw new o2(n2.NeverReach);
  }
  async _getFilteredSet(e4, t4, r3, s5, a6) {
    let i3 = false;
    const l = this._reformulateWithoutAdaptions(r3);
    i3 = l.cannot, r3 = l.where;
    let n6 = false;
    if (null !== s5) {
      n6 = true;
      const e5 = [];
      for (const t5 of this.adaptedFields)
        if (!(t5 instanceof E) && true === s5.scanForField(t5.field.name)) {
          if (!(t5 instanceof x6)) {
            s5 = null, n6 = false;
            break;
          }
          e5.push({ field: t5.field.name, newfield: t5.originalField.name });
        }
      s5 && e5.length > 0 && (s5 = s5.replaceFields(e5));
    }
    null !== r3 ? null !== this._extraFilter && (r3 = m2(this._extraFilter, r3)) : r3 = this._extraFilter, await this._ensureLoaded();
    const h2 = await c(this._parent)._getFilteredSet(e4, t4, r3, s5, a6);
    let u2;
    return this._checkCancelled(a6), u2 = true === i3 ? new t2(h2._candidates.slice(0).concat(h2._known.slice(0)), [], true === n6 && h2._ordered, this._clonePageDefinition(h2.pagesDefinition)) : new t2(h2._candidates.slice(0), h2._known.slice(0), true === n6 && h2._ordered, this._clonePageDefinition(h2.pagesDefinition)), u2;
  }
  _reformulateWithoutAdaptions(e4) {
    const t4 = { cannot: false, where: e4 };
    if (null !== e4) {
      for (const r3 of this.adaptedFields)
        if (true === N2(e4, r3.field.name)) {
          const s5 = r3.rewriteSql(e4, this);
          if (true !== s5.rewritten) {
            t4.cannot = true, t4.where = null;
            break;
          }
          t4.where = s5.where;
        }
    }
    return t4;
  }
  async _stat(e4, t4, r3, s5, a6, i3, l) {
    let n6 = false, o3 = this._reformulateWithoutAdaptions(t4);
    if (n6 = o3.cannot, t4 = o3.where, o3 = this._reformulateWithoutAdaptions(a6), n6 = n6 || o3.cannot, null !== (a6 = o3.where) ? null !== this._extraFilter && (a6 = m2(this._extraFilter, a6)) : a6 = this._extraFilter, true === n6)
      return null === a6 && "" === r3 && null === s5 ? this._manualStat(e4, t4, i3, l) : { calculated: false };
    const h2 = await c(this._parent)._stat(e4, t4, r3, s5, a6, i3, l);
    return false === h2.calculated ? null === a6 && "" === r3 && null === s5 ? this._manualStat(e4, t4, i3, l) : { calculated: false } : h2;
  }
  async _canDoAggregates(e4, t4, r3, s5, a6) {
    if (null === this._parent)
      return false;
    for (let n6 = 0; n6 < e4.length; n6++)
      for (const t5 of this.adaptedFields)
        if (e4[n6].toLowerCase() === t5.field.name.toLowerCase() && !(t5 instanceof E))
          return false;
    const i3 = [];
    for (let n6 = 0; n6 < t4.length; n6++) {
      const e5 = t4[n6];
      if (null !== e5.workingexpr) {
        const t5 = this._reformulateWithoutAdaptions(e5.workingexpr);
        if (t5.cannot)
          return false;
        const r4 = e5.clone();
        r4.workingexpr = t5.where, i3.push(r4);
      } else
        i3.push(e5);
    }
    const l = this._reformulateWithoutAdaptions(a6);
    return !l.cannot && (null !== (a6 = l.where) ? null !== this._extraFilter && (a6 = m2(this._extraFilter, a6)) : a6 = this._extraFilter, this._parent._canDoAggregates(e4, i3, r3, s5, a6));
  }
  async _getAggregatePagesDataSourceDefinition(e4, t4, r3, s5, a6, n6, o3) {
    if (null === this._parent)
      throw new o2(n2.NeverReach);
    const h2 = [];
    for (let c5 = 0; c5 < t4.length; c5++) {
      const e5 = t4[c5];
      if (null !== e5.workingexpr) {
        const t5 = this._reformulateWithoutAdaptions(e5.workingexpr);
        if (t5.cannot)
          throw new o2(n2.NeverReach);
        const r4 = e5.clone();
        r4.workingexpr = t5.where, h2.push(r4);
      } else
        h2.push(e5);
    }
    const u2 = this._reformulateWithoutAdaptions(a6);
    if (u2.cannot)
      throw new o2(n2.NeverReach);
    return null !== (a6 = u2.where) ? null !== this._extraFilter && (a6 = m2(this._extraFilter, a6)) : a6 = this._extraFilter, this._parent._getAggregatePagesDataSourceDefinition(e4, h2, r3, s5, a6, n6, o3);
  }
};

// node_modules/@arcgis/core/arcade/featureset/support/OrderbyClause.js
function t3(t4, e4) {
  return t4 === e4 ? 0 : null === t4 ? -1 : null === e4 ? 1 : t4 < e4 ? -1 : 1;
}
var e3 = class {
  constructor(t4) {
    const e4 = t4.split(",");
    this._fields = [], this._directions = [];
    for (let s5 = 0; s5 < e4.length; s5++) {
      const t5 = e4[s5].match(/\S+/g);
      this._fields.push(t5[0]), 2 === t5.length ? "asc" === t5[1].toLowerCase() ? this._directions.push(1) : this._directions.push(0) : this._directions.push(1);
    }
  }
  constructClause() {
    let t4 = "";
    for (let e4 = 0; e4 < this._fields.length; e4++)
      0 !== e4 && (t4 += ","), t4 += this._fields[e4], 1 === this._directions[e4] ? t4 += " ASC" : t4 += " DESC";
    return t4;
  }
  order(e4) {
    e4.sort((e5, s5) => {
      for (let i3 = 0; i3 < this._fields.length; i3++) {
        const r3 = this.featureValue(e5.feature, this._fields[i3], i3), l = this.featureValue(s5.feature, this._fields[i3], i3);
        let o3 = 0;
        if (o3 = 1 === this._directions[i3] ? t3(r3, l) : -1 * t3(r3, l), 0 !== o3)
          return o3;
      }
      return 0;
    });
  }
  scanForField(t4) {
    for (let e4 = 0; e4 < this._fields.length; e4++)
      if (this._fields[e4].toLowerCase().trim() === t4.toLowerCase().trim())
        return true;
    return false;
  }
  replaceFields(t4) {
    let s5 = "";
    for (let e4 = 0; e4 < this._fields.length; e4++) {
      0 !== e4 && (s5 += ",");
      let i3 = this._fields[e4];
      for (const e5 of t4)
        if (i3.toLowerCase() === e5.field.toLowerCase()) {
          i3 = e5.newfield;
          break;
        }
      s5 += i3, 1 === this._directions[e4] ? s5 += " ASC" : s5 += " DESC";
    }
    return new e3(s5);
  }
  featureValue(t4, e4, s5) {
    const i3 = t4.attributes[e4];
    if (void 0 !== i3)
      return i3;
    for (const r3 in t4.attributes)
      if (e4.toLowerCase() === r3.toLowerCase())
        return this._fields[s5] = r3, t4.attributes[r3];
    return null;
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/OrderBy.js
var a3 = class extends v2 {
  constructor(e4) {
    super(e4), this._orderbyclause = null, this.declaredClass = "esri.arcade.featureset.actions.OrderBy", this._maxProcessing = 100, this._orderbyclause = e4.orderbyclause, this._parent = e4.parentfeatureset;
  }
  async _getSet(e4) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t4 = await this._getFilteredSet("", null, null, this._orderbyclause, e4);
      return this._checkCancelled(e4), this._wset = t4, this._wset;
    }
    return this._wset;
  }
  async manualOrderSet(e4, t4) {
    var _a;
    const r3 = await this.getIdColumnDictionary(e4, [], -1, t4);
    (_a = this._orderbyclause) == null ? void 0 : _a.order(r3);
    const n6 = new t2([], [], true, null);
    for (let s5 = 0; s5 < r3.length; s5++)
      n6._known.push(r3[s5].id);
    return n6;
  }
  async getIdColumnDictionary(t4, r3, n6, s5) {
    if (n6 < t4._known.length - 1) {
      const i3 = this._maxQueryRate();
      if ("GETPAGES" === t4._known[n6 + 1])
        return await je(this._parent._expandPagedSet(t4, i3, 0, 0, s5)), this.getIdColumnDictionary(t4, r3, n6, s5);
      let a6 = n6 + 1;
      const o3 = [];
      for (; a6 < t4._known.length && "GETPAGES" !== t4._known[a6]; )
        o3.push(t4._known[a6]), a6++;
      n6 += o3.length;
      const u2 = await je(this._parent._getFeatureBatch(o3, s5));
      this._checkCancelled(s5);
      for (const e4 of u2)
        r3.push({ id: e4.attributes[this.objectIdField], feature: e4 });
      return this.getIdColumnDictionary(t4, r3, n6, s5);
    }
    return t4._candidates.length > 0 ? (await je(this._refineSetBlock(t4, this._maxProcessingRate(), s5)), this._checkCancelled(s5), this.getIdColumnDictionary(t4, r3, n6, s5)) : r3;
  }
  _isInFeatureSet(e4) {
    return this._parent._isInFeatureSet(e4);
  }
  _getFeatures(e4, t4, r3, n6) {
    return this._parent._getFeatures(e4, t4, r3, n6);
  }
  _featureFromCache(e4) {
    if (void 0 === this._featureCache[e4]) {
      const t4 = this._parent._featureFromCache(e4);
      if (void 0 === t4)
        return;
      return null === t4 ? null : (this._featureCache[e4] = t4, t4);
    }
    return this._featureCache[e4];
  }
  async _fetchAndRefineFeatures() {
    throw new o2(n2.NeverReach);
  }
  async _getFilteredSet(e4, t4, r3, n6, i3) {
    await this._ensureLoaded();
    const a6 = await this._parent._getFilteredSet(e4, t4, r3, null === n6 ? this._orderbyclause : n6, i3);
    this._checkCancelled(i3);
    const o3 = new t2(a6._candidates.slice(0), a6._known.slice(0), a6._ordered, this._clonePageDefinition(a6.pagesDefinition));
    let u2 = true;
    if (a6._candidates.length > 0 && (u2 = false), false === o3._ordered) {
      let e5 = await this.manualOrderSet(o3, i3);
      return false === u2 && (null === t4 && null === r3 || (e5 = new t2(e5._candidates.slice(0).concat(e5._known.slice(0)), [], e5._ordered, this._clonePageDefinition(e5.pagesDefinition)))), e5;
    }
    return o3;
  }
  static registerAction() {
    v2._featuresetFunctions.orderBy = function(e4) {
      return "" === e4 ? this : new a3({ parentfeatureset: this, orderbyclause: new e3(e4) });
    };
  }
};

// node_modules/@arcgis/core/arcade/featureset/support/StatsField.js
function s4(s5) {
  if ("function" === s5.parseTree.type) {
    if (0 === s5.parseTree.args.value.length)
      return { name: s5.parseTree.name, expr: null };
    if (s5.parseTree.args.value.length > 1)
      throw new s(t.MissingStatisticParameters);
    const a6 = f2.create(f4(s5.parseTree.args.value[0], i2.Standardised, s5.parameters), s5.fieldsIndex);
    return { name: s5.parseTree.name, expr: a6 };
  }
  return null;
}
var a4 = class {
  constructor() {
    this.field = "", this.tofieldname = "", this.typeofstat = "MIN", this.workingexpr = null;
  }
  clone() {
    const e4 = new a4();
    return e4.field = this.field, e4.tofieldname = this.tofieldname, e4.typeofstat = this.typeofstat, e4.workingexpr = this.workingexpr, e4;
  }
  static parseStatField(r3, n6, o3) {
    const l = new a4();
    l.field = r3;
    const p3 = f2.create(n6, o3), f7 = s4(p3);
    if (null === f7)
      throw new s(t.UnsupportedSqlFunction, { function: "" });
    const u2 = f7.name.toUpperCase().trim();
    if ("MIN" === u2) {
      if (l.typeofstat = "MIN", l.workingexpr = f7.expr, null === p3)
        throw new s(t.InvalidFunctionParameters, { function: "min" });
    } else if ("MAX" === u2) {
      if (l.typeofstat = "MAX", l.workingexpr = f7.expr, null === p3)
        throw new s(t.InvalidFunctionParameters, { function: "max" });
    } else if ("COUNT" === u2)
      l.typeofstat = "COUNT", l.workingexpr = f7.expr;
    else if ("STDEV" === u2) {
      if (l.typeofstat = "STDDEV", l.workingexpr = f7.expr, null === p3)
        throw new s(t.InvalidFunctionParameters, { function: "stdev" });
    } else if ("SUM" === u2) {
      if (l.typeofstat = "SUM", l.workingexpr = f7.expr, null === p3)
        throw new s(t.InvalidFunctionParameters, { function: "sum" });
    } else if ("MEAN" === u2) {
      if (l.typeofstat = "AVG", l.workingexpr = f7.expr, null === p3)
        throw new s(t.InvalidFunctionParameters, { function: u2 });
    } else if ("AVG" === u2) {
      if (l.typeofstat = "AVG", l.workingexpr = f7.expr, null === p3)
        throw new s(t.InvalidFunctionParameters, { function: "avg" });
    } else {
      if ("VAR" !== u2)
        throw new s(t.UnsupportedSqlFunction, { function: u2 });
      if (l.typeofstat = "VAR", l.workingexpr = f7.expr, null === p3)
        throw new s(t.InvalidFunctionParameters, { function: "var" });
    }
    return l;
  }
  toStatisticsName() {
    switch (this.typeofstat.toUpperCase()) {
      case "MIN":
        return "min";
      case "MAX":
        return "max";
      case "SUM":
        return "sum";
      case "COUNT":
      default:
        return "count";
      case "VAR":
        return "var";
      case "STDDEV":
        return "stddev";
      case "AVG":
        return "avg";
    }
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/GroupBy.js
function j(e4) {
  if (!e4)
    return "COUNT";
  switch (e4.toLowerCase()) {
    case "max":
      return "MAX";
    case "var":
    case "variance":
      return "VAR";
    case "avg":
    case "average":
    case "mean":
      return "AVG";
    case "min":
      return "MIN";
    case "sum":
      return "SUM";
    case "stdev":
    case "stddev":
      return "STDDEV";
    case "count":
      return "COUNT";
  }
  return "COUNT";
}
var C2 = class extends v2 {
  constructor(e4) {
    super(e4), this._decodedStatsfield = [], this._decodedGroupbyfield = [], this._candosimplegroupby = true, this.phsyicalgroupbyfields = [], this.objectIdField = "ROW__ID", this._internalObjectIdField = "ROW__ID", this._adaptedFields = [], this.declaredClass = "esri.arcade.featureset.actions.Aggregate", this._uniqueIds = 1, this._maxQuery = 10, this._maxProcessing = 10, this._parent = e4.parentfeatureset, this._config = e4;
  }
  isTable() {
    return true;
  }
  async _getSet(e4) {
    if (null === this._wset) {
      const t4 = await this._getFilteredSet("", null, null, null, e4);
      return this._wset = t4, this._wset;
    }
    return this._wset;
  }
  _isInFeatureSet() {
    return n.InFeatureSet;
  }
  _nextUniqueName(e4) {
    for (; 1 === e4["T" + this._uniqueIds.toString()]; )
      this._uniqueIds++;
    const t4 = "T" + this._uniqueIds.toString();
    return e4[t4] = 1, t4;
  }
  _convertToEsriFieldType(e4) {
    return e4;
  }
  _initialiseFeatureSet() {
    const e4 = {};
    let t4 = false, n6 = 1;
    const r3 = this._parent ? this._parent.getFieldsIndex() : new r([]);
    for (this.objectIdField = "ROW__ID", this.globalIdField = ""; false === t4; ) {
      let e5 = false;
      for (let t5 = 0; t5 < this._config.groupbyfields.length; t5++)
        if (this._config.groupbyfields[t5].name.toLowerCase() === this.objectIdField.toLowerCase()) {
          e5 = true;
          break;
        }
      if (false === e5) {
        for (let t5 = 0; t5 < this._config.statsfields.length; t5++)
          if (this._config.statsfields[t5].name.toLowerCase() === this.objectIdField.toLowerCase()) {
            e5 = true;
            break;
          }
      }
      false === e5 ? t4 = true : (this.objectIdField = "ROW__ID" + n6.toString(), n6++);
    }
    for (const i3 of this._config.statsfields) {
      const e5 = new a4();
      e5.field = i3.name, e5.tofieldname = i3.name, e5.workingexpr = i3.expression instanceof f2 ? i3.expression : f2.create(i3.expression, r3), e5.typeofstat = j(i3.statistic), this._decodedStatsfield.push(e5);
    }
    this._decodedGroupbyfield = [];
    for (const i3 of this._config.groupbyfields) {
      const e5 = { name: i3.name, singlefield: null, tofieldname: i3.name, expression: i3.expression instanceof f2 ? i3.expression : f2.create(i3.expression, r3) };
      this._decodedGroupbyfield.push(e5);
    }
    if (null !== this._parent) {
      this.geometryType = this._parent.geometryType, this.spatialReference = this._parent.spatialReference, this.hasM = this._parent.hasM, this.hasZ = this._parent.hasZ, this.typeIdField = "";
      for (const t5 of this._parent.fields)
        e4[t5.name.toUpperCase()] = 1;
      this.types = null;
    } else
      this.geometryType = P.point, this.typeIdField = "", this.types = null, this.spatialReference = new f({ wkid: 4326 });
    this.fields = [];
    const a6 = new a4();
    a6.field = this._nextUniqueName(e4), a6.tofieldname = this.objectIdField, a6.workingexpr = f2.create(this._parent.objectIdField, this._parent.getFieldsIndex()), a6.typeofstat = "MIN", this._decodedStatsfield.push(a6);
    for (const s5 of this._decodedGroupbyfield) {
      const t5 = new y();
      if (s5.name = this._nextUniqueName(e4), t5.name = s5.tofieldname, t5.alias = t5.name, A(s5.expression)) {
        const e5 = this._parent.getField(u(s5.expression, i2.Standardised));
        if (!e5)
          throw new o2(n2.AggregationFieldNotFound);
        s5.name = e5.name, s5.singlefield = e5.name, this.phsyicalgroupbyfields.push(e5.name), t5.type = e5.type;
      } else {
        t5.type = this._convertToEsriFieldType(S(s5.expression, this._parent.fields));
        const e5 = new y();
        e5.name = s5.name, e5.alias = e5.name, this.phsyicalgroupbyfields.push(s5.name), this._adaptedFields.push(new y2(e5, s5.expression)), this._candosimplegroupby = false;
      }
      this.fields.push(t5);
    }
    if (this._adaptedFields.length > 0)
      for (const i3 of this._parent.fields)
        this._adaptedFields.push(new E(i3));
    for (let i3 = 0; i3 < this._decodedStatsfield.length; i3++) {
      const t5 = new y();
      let s5 = null;
      const n7 = this._decodedStatsfield[i3];
      n7.field = this._nextUniqueName(e4), n7.tofieldname === this.objectIdField && (this._internalObjectIdField = n7.field), t5.name = n7.tofieldname, t5.alias = t5.name;
      const r4 = null !== n7.workingexpr && A(n7.workingexpr) ? u(n7.workingexpr, i2.Standardised) : "";
      switch (this._decodedStatsfield[i3].typeofstat) {
        case "SUM":
          if ("" !== r4) {
            if (s5 = this._parent.getField(r4), !s5)
              throw new o2(n2.AggregationFieldNotFound);
            t5.type = s5.type;
          } else
            t5.type = "double";
          break;
        case "MIN":
        case "MAX":
          if ("" !== r4) {
            if (s5 = this._parent.getField(r4), !s5)
              throw new o2(n2.AggregationFieldNotFound);
            t5.type = s5.type;
          } else
            t5.type = "double";
          break;
        case "COUNT":
          t5.type = "integer";
          break;
        case "STDDEV":
        case "VAR":
        case "AVG":
          if ("" !== r4 && (s5 = this._parent.getField(r4), !s5))
            throw new o2(n2.AggregationFieldNotFound);
          t5.type = "double";
      }
      this.fields.push(t5);
    }
  }
  async _canDoAggregates() {
    return false;
  }
  async _getFeatures(e4, t4, i3, s5) {
    -1 !== t4 && this._featureCache[t4];
    const n6 = this._maxQuery;
    return true === this._checkIfNeedToExpandKnownPage(e4, n6) ? (await this._expandPagedSet(e4, n6, 0, 0, s5), this._getFeatures(e4, t4, i3, s5)) : "success";
  }
  async _getFilteredSet(e4, t4, i3, s5, l) {
    if ("" !== e4)
      return new t2([], [], true, null);
    let u2 = null;
    const f7 = { ordered: false, nowhereclause: false };
    if (await this._ensureLoaded(), null !== i3) {
      for (let n6 = 0; n6 < this._decodedStatsfield.length; n6++)
        if (true === N2(i3, this._decodedStatsfield[n6].tofieldname)) {
          f7.nowhereclause = true, i3 = null;
          break;
        }
    }
    if (null !== s5) {
      f7.ordered = true;
      for (let e5 = 0; e5 < this._decodedStatsfield.length; e5++)
        if (true === s5.scanForField(this._decodedStatsfield[e5].tofieldname)) {
          s5 = null, f7.ordered = false;
          break;
        }
      if (null !== s5) {
        for (const e5 of this._decodedGroupbyfield)
          if (null === e5.singlefield && true === s5.scanForField(e5.tofieldname)) {
            s5 = null, f7.ordered = false;
            break;
          }
      }
    }
    if (false !== this._candosimplegroupby && await this._parent._canDoAggregates(this.phsyicalgroupbyfields, this._decodedStatsfield, "", null, null)) {
      let e5 = null;
      i3 && (e5 = this._reformulateWhereClauseWithoutGroupByFields(i3));
      let t5 = null;
      s5 && (t5 = this._reformulateOrderClauseWithoutGroupByFields(s5));
      const n6 = await this._parent._getAggregatePagesDataSourceDefinition(this.phsyicalgroupbyfields, this._decodedStatsfield, "", null, e5, t5, this._internalObjectIdField);
      return this._checkCancelled(l), u2 = true === f7.nowhereclause ? new t2(n6._candidates.slice(0).concat(n6._known.slice(0)), [], true === f7.ordered && n6._ordered, this._clonePageDefinition(n6.pagesDefinition)) : new t2(n6._candidates.slice(0), n6._known.slice(0), true === f7.ordered && n6._ordered, this._clonePageDefinition(n6.pagesDefinition)), u2;
    }
    let c5 = this._parent;
    if (this._adaptedFields.length > 0 && (c5 = new D({ parentfeatureset: this._parent, adaptedFields: this._adaptedFields, extraFilter: null })), true === f7.nowhereclause)
      u2 = new t2(["GETPAGES"], [], false, { aggregatefeaturesetpagedefinition: true, resultOffset: 0, resultRecordCount: this._maxQuery, internal: { fullyResolved: false, workingItem: null, type: "manual", iterator: null, set: [], subfeatureset: new a3({ parentfeatureset: c5, orderbyclause: new e3(this.phsyicalgroupbyfields.join(",") + "," + this._parent.objectIdField + " ASC") }) } });
    else {
      let e5 = c5;
      if (null !== i3) {
        let t5 = null;
        i3 && (t5 = this._reformulateWhereClauseWithoutGroupByFields(i3)), e5 = new c4({ parentfeatureset: e5, whereclause: t5 });
      }
      u2 = new t2(["GETPAGES"], [], false, { aggregatefeaturesetpagedefinition: true, resultOffset: 0, resultRecordCount: this._maxQuery, internal: { fullyResolved: false, workingItem: null, type: "manual", iterator: null, set: [], subfeatureset: new a3({ parentfeatureset: e5, orderbyclause: new e3(this.phsyicalgroupbyfields.join(",") + "," + this._parent.objectIdField + " ASC") }) } });
    }
    return u2;
  }
  _reformulateWhereClauseWithoutStatsFields(e4) {
    for (const t4 of this._decodedStatsfield)
      e4 = p2(e4, t4.tofieldname, u(t4.workingexpr, i2.Standardised), this._parent.getFieldsIndex());
    return e4;
  }
  _reformulateWhereClauseWithoutGroupByFields(e4) {
    for (const t4 of this._decodedGroupbyfield)
      t4.tofieldname !== t4.name && (e4 = p2(e4, t4.tofieldname, u(t4.expression, i2.Standardised), this._parent.getFieldsIndex()));
    return e4;
  }
  _reformulateOrderClauseWithoutGroupByFields(e4) {
    const t4 = [];
    for (const i3 of this._decodedGroupbyfield)
      i3.tofieldname !== i3.name && t4.push({ field: i3.tofieldname, newfield: i3.name });
    return t4.length > 0 ? e4.replaceFields(t4) : e4;
  }
  _clonePageDefinition(e4) {
    return null === e4 ? null : true === e4.aggregatefeaturesetpagedefinition ? { aggregatefeaturesetpagedefinition: true, resultRecordCount: e4.resultRecordCount, resultOffset: e4.resultOffset, internal: e4.internal } : this._parent._clonePageDefinition(e4);
  }
  async _refineSetBlock(e4, t4, i3) {
    if (true === this._checkIfNeedToExpandCandidatePage(e4, this._maxQuery))
      return await this._expandPagedSet(e4, this._maxQuery, 0, 0, i3), this._refineSetBlock(e4, t4, i3);
    this._checkCancelled(i3);
    const s5 = e4._candidates.length;
    this._refineKnowns(e4, t4);
    e4._candidates.length;
    return e4._candidates.length, e4;
  }
  _expandPagedSet(e4, t4, i3, s5, n6) {
    return this._expandPagedSetFeatureSet(e4, t4, i3, s5, n6);
  }
  async _getPhysicalPage(t4, i3, s5) {
    if (true === t4.pagesDefinition.aggregatefeaturesetpagedefinition)
      return this._sequentialGetPhysicalItem(t4, t4.pagesDefinition.resultRecordCount, s5, []);
    const n6 = await this._getAgregagtePhysicalPage(t4, i3, s5);
    for (const r3 of n6) {
      const t5 = { geometry: r3.geometry, attributes: {} };
      for (const e4 of this._decodedGroupbyfield)
        t5.attributes[e4.tofieldname] = r3.attributes[e4.name];
      for (const e4 of this._decodedStatsfield)
        t5.attributes[e4.tofieldname] = r3.attributes[e4.field];
      this._featureCache[t5.attributes[this.objectIdField]] = new g(t5);
    }
    return n6.length;
  }
  _sequentialGetPhysicalItem(e4, t4, i3, s5) {
    return new Promise((n6, r3) => {
      null === e4.pagesDefinition.internal.iterator && (e4.pagesDefinition.internal.iterator = e4.pagesDefinition.internal.subfeatureset.iterator(i3)), true === e4.pagesDefinition.internal.fullyResolved || 0 === t4 ? n6(s5.length) : this._nextAggregateItem(e4, t4, i3, s5, (r4) => {
        null === r4 ? n6(s5.length) : (t4 -= 1, n6(this._sequentialGetPhysicalItem(e4, t4, i3, s5)));
      }, r3);
    });
  }
  _nextAggregateItem(e4, i3, s5, n6, r3, a6) {
    try {
      je(e4.pagesDefinition.internal.iterator.next()).then((t4) => {
        if (null === t4)
          if (null !== e4.pagesDefinition.internal.workingItem) {
            const t5 = this._calculateAndAppendAggregateItem(e4.pagesDefinition.internal.workingItem);
            n6.push(t5), e4.pagesDefinition.internal.workingItem = null, e4.pagesDefinition.internal.set.push(t5.attributes[this.objectIdField]), e4.pagesDefinition.internal.fullyResolved = true, r3(null);
          } else
            e4.pagesDefinition.internal.fullyResolved = true, r3(null);
        else {
          const l = this._generateAggregateHash(t4);
          if (null === e4.pagesDefinition.internal.workingItem)
            e4.pagesDefinition.internal.workingItem = { features: [t4], id: l };
          else {
            if (l !== e4.pagesDefinition.internal.workingItem.id) {
              const s6 = this._calculateAndAppendAggregateItem(e4.pagesDefinition.internal.workingItem);
              return n6.push(s6), e4.pagesDefinition.internal.workingItem = null, e4.pagesDefinition.internal.set.push(s6.attributes[this.objectIdField]), i3 -= 1, e4.pagesDefinition.internal.workingItem = { features: [t4], id: l }, void r3(s6);
            }
            e4.pagesDefinition.internal.workingItem.features.push(t4);
          }
          this._nextAggregateItem(e4, i3, s5, n6, r3, a6);
        }
      }, a6);
    } catch (l) {
      a6(l);
    }
  }
  _calculateFieldStat(e4, t4, i3) {
    const s5 = [];
    for (let n6 = 0; n6 < e4.features.length; n6++)
      if (null !== t4.workingexpr) {
        const i4 = t4.workingexpr.calculateValue(e4.features[n6]);
        null !== i4 && s5.push(i4);
      } else
        s5.push(null);
    switch (t4.typeofstat) {
      case "MIN":
        i3.attributes[t4.tofieldname] = g3("min", s5, -1);
        break;
      case "MAX":
        i3.attributes[t4.tofieldname] = g3("max", s5, -1);
        break;
      case "SUM":
        i3.attributes[t4.tofieldname] = g3("sum", s5, -1);
        break;
      case "COUNT":
        i3.attributes[t4.tofieldname] = s5.length;
        break;
      case "VAR":
        i3.attributes[t4.tofieldname] = g3("var", s5, -1);
        break;
      case "STDDEV":
        i3.attributes[t4.tofieldname] = g3("stddev", s5, -1);
        break;
      case "AVG":
        i3.attributes[t4.tofieldname] = g3("avg", s5, -1);
    }
    return true;
  }
  _calculateAndAppendAggregateItem(t4) {
    const i3 = { attributes: {}, geometry: null };
    for (const e4 of this._decodedGroupbyfield) {
      const s6 = e4.singlefield ? t4.features[0].attributes[e4.singlefield] : e4.expression.calculateValue(t4.features[0]);
      i3.attributes[e4.tofieldname] = s6;
    }
    for (const e4 of this._decodedStatsfield)
      this._calculateFieldStat(t4, e4, i3);
    const s5 = [];
    for (let e4 = 0; e4 < this._decodedStatsfield.length; e4++)
      s5.push(this._calculateFieldStat(t4, this._decodedStatsfield[e4], i3));
    return this._featureCache[i3.attributes[this.objectIdField]] = new g({ attributes: i3.attributes, geometry: i3.geometry }), i3;
  }
  _generateAggregateHash(e4) {
    let t4 = "";
    for (const i3 of this._decodedGroupbyfield) {
      const s5 = i3.singlefield ? e4.attributes[i3.singlefield] : i3.expression.calculateValue(e4);
      t4 += null == s5 ? ":" : ":" + s5.toString();
    }
    return x5(t4, n3.String);
  }
  async _stat() {
    return { calculated: false };
  }
  async getFeatureByObjectId() {
    return null;
  }
  static registerAction() {
    v2._featuresetFunctions.groupby = function(e4, t4) {
      return new C2({ parentfeatureset: this, groupbyfields: e4, statsfields: t4 });
    };
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/Top.js
var a5 = class extends v2 {
  constructor(t4) {
    super(t4), this._topnum = 0, this.declaredClass = "esri.arcade.featureset.actions.Top", this._countedin = 0, this._maxProcessing = 100, this._topnum = t4.topnum, this._parent = t4.parentfeatureset;
  }
  async _getSet(t4) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const e4 = await this._parent._getSet(t4);
      return this._wset = new t2(e4._candidates.slice(0), e4._known.slice(0), false, this._clonePageDefinition(e4.pagesDefinition)), this._setKnownLength(this._wset) > this._topnum && (this._wset._known = this._wset._known.slice(0, this._topnum)), this._setKnownLength(this._wset) >= this._topnum && (this._wset._candidates = []), this._wset;
    }
    return this._wset;
  }
  _setKnownLength(t4) {
    return t4._known.length > 0 && "GETPAGES" === t4._known[t4._known.length - 1] ? t4._known.length - 1 : t4._known.length;
  }
  _isInFeatureSet(t4) {
    const e4 = this._parent._isInFeatureSet(t4);
    if (e4 === n.NotInFeatureSet)
      return e4;
    const n6 = this._idstates[t4];
    return n6 === n.InFeatureSet || n6 === n.NotInFeatureSet ? n6 : e4 === n.InFeatureSet && void 0 === n6 ? this._countedin < this._topnum ? (this._idstates[t4] = n.InFeatureSet, this._countedin++, n.InFeatureSet) : (this._idstates[t4] = n.NotInFeatureSet, n.NotInFeatureSet) : n.Unknown;
  }
  async _expandPagedSet(n6, s5, i3, a6, o3) {
    if (null === this._parent)
      throw new o2(n2.NotImplemented);
    if (s5 > this._topnum && (s5 = this._topnum), this._countedin >= this._topnum && n6.pagesDefinition.internal.set.length <= n6.pagesDefinition.resultOffset) {
      let t4 = n6._known.length;
      return t4 > 0 && "GETPAGES" === n6._known[t4 - 1] && (n6._known.length = t4 - 1), t4 = n6._candidates.length, t4 > 0 && "GETPAGES" === n6._candidates[t4 - 1] && (n6._candidates.length = t4 - 1), "success";
    }
    const r3 = await this._parent._expandPagedSet(n6, s5, i3, a6, o3);
    return this._setKnownLength(n6) > this._topnum && (n6._known.length = this._topnum), this._setKnownLength(n6) >= this._topnum && (n6._candidates.length = 0), r3;
  }
  async _getFeatures(t4, e4, n6, i3) {
    const a6 = [], o3 = this._maxQueryRate();
    if (true === this._checkIfNeedToExpandKnownPage(t4, o3))
      return await this._expandPagedSet(t4, o3, 0, 0, i3), this._getFeatures(t4, e4, n6, i3);
    -1 !== e4 && void 0 === this._featureCache[e4] && a6.push(e4);
    let r3 = 0;
    for (let s5 = t4._lastFetchedIndex; s5 < t4._known.length && (r3++, r3 <= n6 && (t4._lastFetchedIndex += 1), !(void 0 === this._featureCache[t4._known[s5]] && (t4._known[s5] !== e4 && a6.push(t4._known[s5]), a6.length > o3))); s5++)
      ;
    if (0 === a6.length)
      return "success";
    const _ = new t2([], a6, false, null), h2 = Math.min(a6.length, n6);
    await this._parent._getFeatures(_, -1, h2, i3);
    for (let s5 = 0; s5 < h2; s5++) {
      const t5 = this._parent._featureFromCache(a6[s5]);
      void 0 !== t5 && (this._featureCache[a6[s5]] = t5);
    }
    return "success";
  }
  async _getFilteredSet(t4, e4, n6, i3, a6) {
    await this._ensureLoaded();
    const o3 = await this._getSet(a6);
    return new t2(o3._candidates.slice(0).concat(o3._known.slice(0)), [], false, this._clonePageDefinition(o3.pagesDefinition));
  }
  _refineKnowns(t4, e4) {
    let n6 = 0, s5 = null;
    const a6 = [];
    for (let o3 = 0; o3 < t4._candidates.length; o3++) {
      const r3 = this._isInFeatureSet(t4._candidates[o3]);
      if (r3 === n.InFeatureSet) {
        if (t4._known.push(t4._candidates[o3]), n6 += 1, null === s5 ? s5 = { start: o3, end: o3 } : s5.end === o3 - 1 ? s5.end = o3 : (a6.push(s5), s5 = { start: o3, end: o3 }), t4._known.length >= this._topnum)
          break;
      } else if (r3 === n.NotInFeatureSet)
        null === s5 ? s5 = { start: o3, end: o3 } : s5.end === o3 - 1 ? s5.end = o3 : (a6.push(s5), s5 = { start: o3, end: o3 }), n6 += 1;
      else if (r3 === n.Unknown)
        break;
      if (n6 >= e4)
        break;
    }
    null !== s5 && a6.push(s5);
    for (let i3 = a6.length - 1; i3 >= 0; i3--)
      t4._candidates.splice(a6[i3].start, a6[i3].end - a6[i3].start + 1);
    this._setKnownLength(t4) > this._topnum && (t4._known = t4._known.slice(0, this._topnum)), this._setKnownLength(t4) >= this._topnum && (t4._candidates = []);
  }
  async _stat() {
    return { calculated: false };
  }
  async _canDoAggregates() {
    return false;
  }
  static registerAction() {
    v2._featuresetFunctions.top = function(t4) {
      return new a5({ parentfeatureset: this, topnum: t4 });
    };
  }
};

// node_modules/@arcgis/core/arcade/featureset/sources/FeatureLayerDynamic.js
var j2 = class extends v2 {
  constructor(e4) {
    super(e4), this.declaredClass = "esri.arcade.featureset.sources.FeatureLayerDynamic", this._removeGeometry = false, this._overrideFields = null, this.formulaCredential = null, this._pageJustIds = false, this._requestStandardised = false, this._useDefinitionExpression = true, this._cachedDateMetaData = {}, e4.spatialReference && (this.spatialReference = e4.spatialReference), this._transparent = true, this._maxProcessing = 1e3, this._layer = e4.layer, this._wset = null, void 0 !== e4.outFields && (this._overrideFields = e4.outFields), void 0 !== e4.includeGeometry && (this._removeGeometry = false === e4.includeGeometry);
  }
  _maxQueryRate() {
    return T;
  }
  end() {
    return this._layer;
  }
  optimisePagingFeatureQueries(e4) {
    this._pageJustIds = e4;
  }
  get urlQueryPath() {
    return this._layer.parsedUrl.path || "";
  }
  convertQueryToLruCacheKey(e4) {
    const t4 = this.urlQueryPath + "," + N(e4.toJSON());
    return x5(t4, n3.String);
  }
  async loadImpl() {
    return true === this._layer.loaded ? (this._initialiseFeatureSet(), this) : (await this._layer.load(), this._initialiseFeatureSet(), this);
  }
  _initialiseFeatureSet() {
    if (null == this.spatialReference && (this.spatialReference = this._layer.spatialReference), this.geometryType = this._layer.geometryType, this.fields = this._layer.fields.slice(0), this._layer.outFields)
      if (1 === this._layer.outFields.length && "*" === this._layer.outFields[0])
        ;
      else {
        const e4 = [];
        for (const t4 of this.fields)
          if ("oid" === t4.type)
            e4.push(t4);
          else
            for (const i3 of this._layer.outFields)
              if (i3.toLowerCase() === t4.name.toLowerCase()) {
                e4.push(t4);
                break;
              }
        this.fields = e4;
      }
    else
      ;
    if (null !== this._overrideFields)
      if (1 === this._overrideFields.length && "*" === this._overrideFields[0])
        this._overrideFields = null;
      else {
        const e4 = [], t4 = [];
        for (const i3 of this.fields)
          if ("oid" === i3.type)
            e4.push(i3), t4.push(i3.name);
          else
            for (const r3 of this._overrideFields)
              if (r3.toLowerCase() === i3.name.toLowerCase()) {
                e4.push(i3), t4.push(i3.name);
                break;
              }
        this.fields = e4, this._overrideFields = t4;
      }
    if (this._layer.source && this._layer.source.sourceJSON) {
      const e4 = this._layer.source.sourceJSON.currentVersion;
      true === this._layer.source.sourceJSON.useStandardizedQueries ? (this._databaseType = i2.StandardisedNoInterval, null != e4 && e4 >= 10.61 && (this._databaseType = i2.Standardised)) : null != e4 && (e4 >= 10.5 && (this._databaseType = i2.StandardisedNoInterval, this._requestStandardised = true), e4 >= 10.61 && (this._databaseType = i2.Standardised));
    }
    this.objectIdField = this._layer.objectIdField;
    for (const e4 of this.fields)
      "global-id" === e4.type && (this.globalIdField = e4.name);
    this.hasM = this._layer.supportsM, this.hasZ = this._layer.supportsZ, this.typeIdField = this._layer.typeIdField ?? "", this.types = this._layer.types;
  }
  _isInFeatureSet() {
    return n.InFeatureSet;
  }
  async _refineSetBlock(e4) {
    return e4;
  }
  _candidateIdTransform(e4) {
    return e4;
  }
  async _getSet(e4) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t4 = await this._getFilteredSet("", null, null, null, e4);
      return this._wset = t4, t4;
    }
    return this._wset;
  }
  async _runDatabaseProbe(e4) {
    await this._ensureLoaded();
    const t4 = new x2();
    this.datesInUnknownTimezone && (t4.timeReferenceUnknownClient = true), t4.where = e4.replace("OBJECTID", this._layer.objectIdField);
    try {
      return await this._layer.queryObjectIds(t4), true;
    } catch (i3) {
      return false;
    }
  }
  _canUsePagination() {
    return !(!this._layer.capabilities || !this._layer.capabilities.query || true !== this._layer.capabilities.query.supportsPagination);
  }
  _cacheableFeatureSetSourceKey() {
    return this._layer.url;
  }
  pbfSupportedForQuery(e4) {
    var _a, _b;
    const t4 = (_b = (_a = this._layer) == null ? void 0 : _a.capabilities) == null ? void 0 : _b.query;
    return !e4.outStatistics && true === (t4 == null ? void 0 : t4.supportsFormatPBF) && true === (t4 == null ? void 0 : t4.supportsQuantizationEditMode);
  }
  async queryPBF(e4) {
    e4.quantizationParameters = { mode: "edit" };
    const t4 = await f3(this._layer.parsedUrl, e4, new a({}));
    return x4.fromJSON(ft(t4.data)).unquantize();
  }
  get gdbVersion() {
    return this._layer && this._layer.capabilities && this._layer.capabilities.data && this._layer.capabilities.data.isVersioned ? this._layer.gdbVersion ? this._layer.gdbVersion : "SDE.DEFAULT" : "";
  }
  nativeCapabilities() {
    return { title: this._layer.title ?? "", source: this, canQueryRelated: true, capabilities: this._layer.capabilities, databaseType: this._databaseType, requestStandardised: this._requestStandardised };
  }
  executeQuery(e4, t4) {
    const i3 = "execute" === t4 ? s2 : "executeForCount" === t4 ? n5 : s3, r3 = "execute" === t4 && this.pbfSupportedForQuery(e4);
    let s5 = null;
    if (this.recentlyUsedQueries) {
      const t5 = this.convertQueryToLruCacheKey(e4);
      s5 = this.recentlyUsedQueries.getFromCache(t5), null === s5 && (s5 = true !== r3 ? i3(this._layer.parsedUrl.path, e4) : this.queryPBF(e4), this.recentlyUsedQueries.addToCache(t5, s5), s5 = s5.catch((e5) => {
        var _a;
        throw (_a = this.recentlyUsedQueries) == null ? void 0 : _a.removeFromCache(t5), e5;
      }));
    }
    return this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preLayerQueryCallback({ layer: this._layer, query: e4, method: t4 }), null === s5 && (s5 = true !== r3 ? i3(this._layer.parsedUrl.path, e4) : this.queryPBF(e4)), s5;
  }
  async _getFilteredSet(e4, t4, i3, r3, a6) {
    const n6 = await this.databaseType();
    if (this.isTable() && t4 && null !== e4 && "" !== e4) {
      return new t2([], [], true, null);
    }
    if (this._canUsePagination())
      return this._getFilteredSetUsingPaging(e4, t4, i3, r3, a6);
    let l = "", o3 = false;
    null !== r3 && this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsOrderBy && (l = r3.constructClause(), o3 = true);
    const u2 = new x2();
    this.datesInUnknownTimezone && (u2.timeReferenceUnknownClient = true), u2.where = null === i3 ? null === t4 ? "1=1" : "" : u(i3, n6), this._requestStandardised && (u2.sqlFormat = "standard"), u2.spatialRelationship = this._makeRelationshipEnum(e4), u2.outSpatialReference = this.spatialReference, u2.orderByFields = "" !== l ? l.split(",") : null, u2.geometry = null === t4 ? null : t4, u2.relationParameter = this._makeRelationshipParam(e4);
    let c5 = await this.executeQuery(u2, "executeForIds");
    null === c5 && (c5 = []), this._checkCancelled(a6);
    return new t2([], c5, o3, null);
  }
  _expandPagedSet(e4, t4, i3, r3, s5) {
    return this._expandPagedSetFeatureSet(e4, t4, i3, r3, s5);
  }
  async _getFilteredSetUsingPaging(e4, t4, i3, r3, a6) {
    var _a;
    let n6 = "", l = false;
    null !== r3 && this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsOrderBy && (n6 = r3.constructClause(), l = true);
    const o3 = await this.databaseType();
    let u2 = null === i3 ? null === t4 ? "1=1" : "" : u(i3, o3);
    this._layer.definitionExpression && this._useDefinitionExpression && (u2 = "" !== u2 ? "((" + this._layer.definitionExpression + ") AND (" + u2 + "))" : this._layer.definitionExpression);
    let c5 = this._maxQueryRate();
    const h2 = (_a = this._layer.capabilities) == null ? void 0 : _a.query.maxRecordCount;
    null != h2 && h2 < c5 && (c5 = h2);
    let p3 = null;
    if (true === this._pageJustIds)
      p3 = new t2([], ["GETPAGES"], l, { spatialRel: this._makeRelationshipEnum(e4), relationParam: this._makeRelationshipParam(e4), outFields: this._layer.objectIdField, resultRecordCount: c5, resultOffset: 0, geometry: null === t4 ? null : t4, where: u2, orderByFields: n6, returnGeometry: false, returnIdsOnly: "false", internal: { set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } });
    else {
      let i4 = true;
      true === this._removeGeometry && (i4 = false);
      const r4 = null !== this._overrideFields ? this._overrideFields : this._fieldsIncludingObjectId(this._layer.outFields ? this._layer.outFields : ["*"]);
      p3 = new t2([], ["GETPAGES"], l, { spatialRel: this._makeRelationshipEnum(e4), relationParam: this._makeRelationshipParam(e4), outFields: r4.join(","), resultRecordCount: c5, resultOffset: 0, geometry: null === t4 ? null : t4, where: u2, orderByFields: n6, returnGeometry: i4, returnIdsOnly: "false", internal: { set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } });
    }
    return await this._expandPagedSet(p3, c5, 0, 1, a6), p3;
  }
  _clonePageDefinition(e4) {
    return null === e4 ? null : true !== e4.groupbypage ? { groupbypage: false, spatialRel: e4.spatialRel, relationParam: e4.relationParam, outFields: e4.outFields, resultRecordCount: e4.resultRecordCount, resultOffset: e4.resultOffset, geometry: e4.geometry, where: e4.where, orderByFields: e4.orderByFields, returnGeometry: e4.returnGeometry, returnIdsOnly: e4.returnIdsOnly, internal: e4.internal } : { groupbypage: true, spatialRel: e4.spatialRel, relationParam: e4.relationParam, outFields: e4.outFields, resultRecordCount: e4.resultRecordCount, useOIDpagination: e4.useOIDpagination, generatedOid: e4.generatedOid, groupByFieldsForStatistics: e4.groupByFieldsForStatistics, resultOffset: e4.resultOffset, outStatistics: e4.outStatistics, geometry: e4.geometry, where: e4.where, orderByFields: e4.orderByFields, returnGeometry: e4.returnGeometry, returnIdsOnly: e4.returnIdsOnly, internal: e4.internal };
  }
  async _getPhysicalPage(e4, t4, i3) {
    const r3 = e4.pagesDefinition.internal.lastRetrieved, s5 = r3, a6 = e4.pagesDefinition.internal.lastPage, n6 = new x2();
    this._requestStandardised && (n6.sqlFormat = "standard"), this.datesInUnknownTimezone && (n6.timeReferenceUnknownClient = true), n6.spatialRelationship = e4.pagesDefinition.spatialRel, n6.relationParameter = e4.pagesDefinition.relationParam, n6.outFields = e4.pagesDefinition.outFields.split(","), n6.num = e4.pagesDefinition.resultRecordCount, n6.start = e4.pagesDefinition.internal.lastPage, n6.geometry = e4.pagesDefinition.geometry, n6.where = e4.pagesDefinition.where, n6.orderByFields = "" !== e4.pagesDefinition.orderByFields ? e4.pagesDefinition.orderByFields.split(",") : null, n6.returnGeometry = e4.pagesDefinition.returnGeometry, n6.outSpatialReference = this.spatialReference;
    const l = await this.executeQuery(n6, "execute");
    if (this._checkCancelled(i3), e4.pagesDefinition.internal.lastPage !== a6)
      return "done";
    const o3 = this._layer.objectIdField;
    for (let u2 = 0; u2 < l.features.length; u2++)
      e4.pagesDefinition.internal.set[s5 + u2] = l.features[u2].attributes[o3];
    if (false === this._pageJustIds)
      for (let u2 = 0; u2 < l.features.length; u2++)
        this._featureCache[l.features[u2].attributes[o3]] = l.features[u2];
    return (void 0 === l.exceededTransferLimit && l.features.length !== e4.pagesDefinition.resultRecordCount || false === l.exceededTransferLimit) && (e4.pagesDefinition.internal.fullyResolved = true), e4.pagesDefinition.internal.lastRetrieved = r3 + l.features.length, e4.pagesDefinition.internal.lastPage += e4.pagesDefinition.resultRecordCount, "done";
  }
  _fieldsIncludingObjectId(e4) {
    if (null === e4)
      return [this.objectIdField];
    const t4 = e4.slice(0);
    if (t4.includes("*"))
      return t4;
    let i3 = false;
    for (const r3 of t4)
      if (r3.toUpperCase() === this.objectIdField.toUpperCase()) {
        i3 = true;
        break;
      }
    return false === i3 && t4.push(this.objectIdField), t4;
  }
  async _getFeatures(e4, t4, i3, r3) {
    const s5 = [];
    if (-1 !== t4 && void 0 === this._featureCache[t4] && s5.push(t4), true === this._checkIfNeedToExpandKnownPage(e4, this._maxProcessingRate()))
      return await this._expandPagedSet(e4, this._maxProcessingRate(), 0, 0, r3), this._getFeatures(e4, t4, i3, r3);
    let a6 = 0;
    for (let u2 = e4._lastFetchedIndex; u2 < e4._known.length; u2++) {
      if (e4._lastFetchedIndex += 1, a6++, void 0 === this._featureCache[e4._known[u2]]) {
        let i4 = false;
        if (null !== this._layer._mode && void 0 !== this._layer._mode) {
          const t5 = this._layer._mode;
          if (void 0 !== t5._featureMap[e4._known[u2]]) {
            const r4 = t5._featureMap[e4._known[u2]];
            null !== r4 && (i4 = true, this._featureCache[e4._known[u2]] = r4);
          }
        }
        if (false === i4 && (e4._known[u2] !== t4 && s5.push(e4._known[u2]), s5.length >= this._maxProcessingRate() - 1))
          break;
      }
      if (a6 >= i3 && 0 === s5.length)
        break;
    }
    if (0 === s5.length)
      return "success";
    const n6 = new x2();
    this._requestStandardised && (n6.sqlFormat = "standard"), this.datesInUnknownTimezone && (n6.timeReferenceUnknownClient = true), n6.objectIds = s5, n6.outFields = null !== this._overrideFields ? this._overrideFields : this._fieldsIncludingObjectId(this._layer.outFields ? this._layer.outFields : ["*"]), n6.returnGeometry = true, true === this._removeGeometry && (n6.returnGeometry = false), n6.outSpatialReference = this.spatialReference;
    const l = await this.executeQuery(n6, "execute");
    if (this._checkCancelled(r3), void 0 !== l.error)
      throw new o2(n2.RequestFailed, { reason: l.error });
    const o3 = this._layer.objectIdField;
    for (let u2 = 0; u2 < l.features.length; u2++)
      this._featureCache[l.features[u2].attributes[o3]] = l.features[u2];
    return "success";
  }
  async _getDistinctPages(e4, t4, i3, r3, s5, a6, n6, l, o3) {
    var _a;
    await this._ensureLoaded();
    const u2 = await this.databaseType();
    let c5 = i3.parseTree.column;
    const h2 = this._layer.fields ?? [];
    for (let d3 = 0; d3 < h2.length; d3++)
      if (h2[d3].name.toLowerCase() === c5.toLowerCase()) {
        c5 = h2[d3].name;
        break;
      }
    const p3 = new x2();
    this._requestStandardised && (p3.sqlFormat = "standard"), this.datesInUnknownTimezone && (p3.timeReferenceUnknownClient = true);
    let y3 = null === a6 ? null === s5 ? "1=1" : "" : u(a6, u2);
    this._layer.definitionExpression && this._useDefinitionExpression && (y3 = "" !== y3 ? "((" + this._layer.definitionExpression + ") AND (" + y3 + "))" : this._layer.definitionExpression), p3.where = y3, p3.spatialRelationship = this._makeRelationshipEnum(r3), p3.relationParameter = this._makeRelationshipParam(r3), p3.geometry = null === s5 ? null : s5, p3.returnDistinctValues = true, p3.returnGeometry = false, p3.outFields = [c5];
    const f7 = await this.executeQuery(p3, "execute");
    if (this._checkCancelled(o3), !f7.hasOwnProperty("features"))
      throw new o2(n2.InvalidStatResponse);
    let m4 = false;
    for (let d3 = 0; d3 < h2.length; d3++)
      if (h2[d3].name === c5) {
        "date" === h2[d3].type && (m4 = true);
        break;
      }
    for (let d3 = 0; d3 < f7.features.length; d3++) {
      if (m4) {
        const e5 = f7.features[d3].attributes[c5];
        null !== e5 ? l.push(new Date(e5)) : l.push(e5);
      } else
        l.push(f7.features[d3].attributes[c5]);
      if (l.length >= n6)
        break;
    }
    if (0 === f7.features.length)
      return l;
    if (f7.features.length === ((_a = this._layer.capabilities) == null ? void 0 : _a.query.maxRecordCount) && l.length < n6) {
      return { calculated: true, result: await this._getDistinctPages(e4 + f7.features.length, t4, i3, r3, s5, a6, n6, l, o3) };
    }
    return l;
  }
  async _distinctStat(e4, t4, i3, r3, s5, a6, n6) {
    return { calculated: true, result: await this._getDistinctPages(0, e4, t4, i3, r3, s5, a6, [], n6) };
  }
  isTable() {
    return this._layer.isTable || null === this._layer.geometryType || "table" === this._layer.type || "" === this._layer.geometryType || "esriGeometryNull" === this._layer.geometryType;
  }
  async _countstat(e4, t4, i3, r3) {
    const s5 = await this.databaseType(), a6 = new x2();
    if (this._requestStandardised && (a6.sqlFormat = "standard"), this.isTable() && i3 && null !== t4 && "" !== t4)
      return { calculated: true, result: 0 };
    let n6 = null === r3 ? null === i3 ? "1=1" : "" : u(r3, s5);
    this._layer.definitionExpression && this._useDefinitionExpression && (n6 = "" !== n6 ? "((" + this._layer.definitionExpression + ") AND (" + n6 + "))" : this._layer.definitionExpression), a6.where = n6, this.datesInUnknownTimezone && (a6.timeReferenceUnknownClient = true), a6.where = n6, a6.spatialRelationship = this._makeRelationshipEnum(t4), a6.relationParameter = this._makeRelationshipParam(t4), a6.geometry = null === i3 ? null : i3, a6.returnGeometry = false;
    return { calculated: true, result: await this.executeQuery(a6, "executeForCount") };
  }
  async _stats(e4, t4, i3, r3, s5, a6, n6) {
    await this._ensureLoaded();
    const l = this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsSqlExpression, o3 = this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsStatistics, u2 = this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsDistinct;
    if ("count" === e4)
      return u2 ? this._countstat(e4, i3, r3, s5) : { calculated: false };
    if (false === o3 || false === A(t4) && false === l || false === t4.isStandardized)
      return "" !== i3 || null !== s5 ? { calculated: false } : this._manualStat(e4, t4, a6, n6);
    if ("distinct" === e4)
      return false === u2 ? "" !== i3 || null !== s5 ? { calculated: false } : this._manualStat(e4, t4, a6, n6) : this._distinctStat(e4, t4, i3, r3, s5, a6, n6);
    const p3 = await this.databaseType();
    if (this.isTable() && r3 && null !== i3 && "" !== i3)
      return { calculated: true, result: null };
    const y3 = new x2();
    this._requestStandardised && (y3.sqlFormat = "standard");
    let f7 = null === s5 ? null === r3 ? "1=1" : "" : u(s5, p3);
    this._layer.definitionExpression && this._useDefinitionExpression && (f7 = "" !== f7 ? "((" + this._layer.definitionExpression + ") AND (" + f7 + "))" : this._layer.definitionExpression), y3.where = f7, y3.spatialRelationship = this._makeRelationshipEnum(i3), y3.relationParameter = this._makeRelationshipParam(i3), y3.geometry = null === r3 ? null : r3, this.datesInUnknownTimezone && (y3.timeReferenceUnknownClient = true);
    const m4 = new m();
    m4.statisticType = m3(e4), m4.onStatisticField = u(t4, p3), m4.outStatisticFieldName = "ARCADE_STAT_RESULT", y3.returnGeometry = false;
    let _ = "ARCADE_STAT_RESULT";
    y3.outStatistics = [m4];
    const g5 = await this.executeQuery(y3, "execute");
    if (!g5.hasOwnProperty("features") || 0 === g5.features.length)
      throw new o2(n2.InvalidStatResponse);
    let R2 = false;
    const F2 = g5.fields ?? [];
    for (let d3 = 0; d3 < F2.length; d3++)
      if ("ARCADE_STAT_RESULT" === F2[d3].name.toUpperCase()) {
        _ = F2[d3].name, "date" === F2[d3].type && (R2 = true);
        break;
      }
    if (R2) {
      let e5 = g5.features[0].attributes[_];
      return null !== e5 && (e5 = new Date(g5.features[0].attributes[_])), { calculated: true, result: e5 };
    }
    return { calculated: true, result: g5.features[0].attributes[_] };
  }
  _stat(e4, t4, i3, r3, s5, a6, n6) {
    return this._stats(e4, t4, i3, r3, s5, a6, n6);
  }
  async _canDoAggregates(e4, t4) {
    var _a, _b;
    await this._ensureLoaded();
    let i3 = false;
    const r3 = (_a = this._layer.capabilities) == null ? void 0 : _a.query, s5 = true === (r3 == null ? void 0 : r3.supportsSqlExpression);
    if (null != r3 && true === r3.supportsStatistics && true === r3.supportsOrderBy && (i3 = true), i3)
      for (let a6 = 0; a6 < t4.length - 1; a6++)
        (false === ((_b = t4[a6].workingexpr) == null ? void 0 : _b.isStandardized) || false === A(t4[a6].workingexpr) && false === s5) && (i3 = false);
    return false !== i3;
  }
  _makeRelationshipEnum(e4) {
    if (e4.includes("esriSpatialRelRelation"))
      return "relation";
    switch (e4) {
      case "esriSpatialRelRelation":
        return "relation";
      case "esriSpatialRelIntersects":
        return "intersects";
      case "esriSpatialRelContains":
        return "contains";
      case "esriSpatialRelOverlaps":
        return "overlaps";
      case "esriSpatialRelWithin":
        return "within";
      case "esriSpatialRelTouches":
        return "touches";
      case "esriSpatialRelCrosses":
        return "crosses";
      case "esriSpatialRelEnvelopeIntersects":
        return "envelope-intersects";
    }
    return e4;
  }
  _makeRelationshipParam(e4) {
    return e4.includes("esriSpatialRelRelation") ? e4.split(":")[1] : "";
  }
  async _getAggregatePagesDataSourceDefinition(e4, t4, i3, r3, a6, n6, l) {
    var _a;
    await this._ensureLoaded();
    const o3 = await this.databaseType();
    let u2 = "", c5 = false, h2 = false;
    null !== n6 && this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsOrderBy && (u2 = n6.constructClause(), h2 = true), this._layer.capabilities && this._layer.capabilities.query && false === this._layer.capabilities.query.supportsPagination && (h2 = false, c5 = true, u2 = this._layer.objectIdField);
    const p3 = [];
    for (let s5 = 0; s5 < t4.length; s5++) {
      const e5 = new m();
      e5.onStatisticField = null !== t4[s5].workingexpr ? u(t4[s5].workingexpr, o3) : "", e5.outStatisticFieldName = t4[s5].field, e5.statisticType = t4[s5].toStatisticsName(), p3.push(e5);
    }
    "" === u2 && (u2 = e4.join(","));
    let y3 = this._maxQueryRate();
    const f7 = (_a = this._layer.capabilities) == null ? void 0 : _a.query.maxRecordCount;
    null != f7 && f7 < y3 && (y3 = f7);
    let m4 = null === a6 ? null === r3 ? "1=1" : "" : u(a6, o3);
    this._layer.definitionExpression && this._useDefinitionExpression && (m4 = "" !== m4 ? "((" + this._layer.definitionExpression + ") AND (" + m4 + "))" : this._layer.definitionExpression);
    return new t2([], ["GETPAGES"], h2, { groupbypage: true, spatialRel: this._makeRelationshipEnum(i3), relationParam: this._makeRelationshipParam(i3), outFields: ["*"], useOIDpagination: c5, generatedOid: l, resultRecordCount: y3, resultOffset: 0, groupByFieldsForStatistics: e4, outStatistics: p3, geometry: null === r3 ? null : r3, where: m4, orderByFields: u2, returnGeometry: false, returnIdsOnly: false, internal: { lastMaxId: -1, set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } });
  }
  async _getAgregagtePhysicalPage(t4, i3, r3) {
    let s5 = t4.pagesDefinition.where;
    true === t4.pagesDefinition.useOIDpagination && (s5 = "" !== s5 ? "(" + s5 + ") AND (" + t4.pagesDefinition.generatedOid + ">" + t4.pagesDefinition.internal.lastMaxId.toString() + ")" : t4.pagesDefinition.generatedOid + ">" + t4.pagesDefinition.internal.lastMaxId.toString());
    const a6 = t4.pagesDefinition.internal.lastRetrieved, n6 = a6, l = t4.pagesDefinition.internal.lastPage, o3 = new x2();
    if (this._requestStandardised && (o3.sqlFormat = "standard"), o3.where = s5, o3.spatialRelationship = t4.pagesDefinition.spatialRel, o3.relationParameter = t4.pagesDefinition.relationParam, o3.outFields = t4.pagesDefinition.outFields, o3.outStatistics = t4.pagesDefinition.outStatistics, o3.geometry = t4.pagesDefinition.geometry, o3.groupByFieldsForStatistics = t4.pagesDefinition.groupByFieldsForStatistics, o3.num = t4.pagesDefinition.resultRecordCount, o3.start = t4.pagesDefinition.internal.lastPage, o3.returnGeometry = t4.pagesDefinition.returnGeometry, this.datesInUnknownTimezone && (o3.timeReferenceUnknownClient = true), o3.orderByFields = "" !== t4.pagesDefinition.orderByFields ? t4.pagesDefinition.orderByFields.split(",") : null, this.isTable() && o3.geometry && o3.spatialRelationship)
      return [];
    const u2 = await this.executeQuery(o3, "execute");
    if (this._checkCancelled(r3), !u2.hasOwnProperty("features"))
      throw new o2(n2.InvalidStatResponse);
    const d3 = [];
    if (t4.pagesDefinition.internal.lastPage !== l)
      return [];
    for (let e4 = 0; e4 < u2.features.length; e4++)
      t4.pagesDefinition.internal.set[n6 + e4] = u2.features[e4].attributes[t4.pagesDefinition.generatedOid];
    for (let c5 = 0; c5 < u2.features.length; c5++)
      d3.push(new g({ attributes: u2.features[c5].attributes, geometry: null }));
    return true === t4.pagesDefinition.useOIDpagination ? 0 === u2.features.length ? t4.pagesDefinition.internal.fullyResolved = true : t4.pagesDefinition.internal.lastMaxId = u2.features[u2.features.length - 1].attributes[t4.pagesDefinition.generatedOid] : (void 0 === u2.exceededTransferLimit && u2.features.length !== t4.pagesDefinition.resultRecordCount || false === u2.exceededTransferLimit) && (t4.pagesDefinition.internal.fullyResolved = true), t4.pagesDefinition.internal.lastRetrieved = a6 + u2.features.length, t4.pagesDefinition.internal.lastPage += t4.pagesDefinition.resultRecordCount, d3;
  }
  static create(e4, t4, i3, r3, s5) {
    const a6 = new He({ url: e4, outFields: null === t4 ? ["*"] : t4 });
    return new j2({ layer: a6, spatialReference: i3, lrucache: r3, interceptor: s5 });
  }
  relationshipMetaData() {
    return this._layer && this._layer.source && this._layer.source.sourceJSON && this._layer.source.sourceJSON.relationships ? this._layer.source.sourceJSON.relationships : [];
  }
  serviceUrl() {
    return x(this._layer.parsedUrl.path);
  }
  async queryAttachments(e4, t4, r3, s5, a6) {
    const n6 = this._layer.capabilities;
    if ((n6 == null ? void 0 : n6.data.supportsAttachment) && (n6 == null ? void 0 : n6.operations.supportsQueryAttachments)) {
      const n7 = { objectIds: [e4], returnMetadata: a6 };
      (t4 && t4 > 0 || r3 && r3 > 0) && (n7.size = [t4 && t4 > 0 ? t4 : 0, r3 && r3 > 0 ? r3 : t4 + 1]), s5 && s5.length > 0 && (n7.attachmentTypes = s5), this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preLayerQueryCallback({ layer: this._layer, query: n7, method: "attachments" });
      const l = await this._layer.queryAttachments(n7), o3 = [];
      return l && l[e4] && l[e4].forEach((t5) => {
        const r4 = this._layer.parsedUrl.path + "/" + e4.toString() + "/attachments/" + t5.id.toString();
        let s6 = null;
        a6 && t5.exifInfo && (s6 = T2.convertJsonToArcade(t5.exifInfo, "system", true)), o3.push(new e(t5.id, t5.name, t5.contentType, t5.size, r4, s6));
      }), o3;
    }
    return [];
  }
  async queryRelatedFeatures(i3) {
    var _a;
    const r3 = { f: "json", relationshipId: i3.relationshipId.toString(), definitionExpression: i3.where, outFields: (_a = i3.outFields) == null ? void 0 : _a.join(","), returnGeometry: i3.returnGeometry.toString() };
    void 0 !== i3.resultOffset && null !== i3.resultOffset && (r3.resultOffset = i3.resultOffset.toString()), void 0 !== i3.resultRecordCount && null !== i3.resultRecordCount && (r3.resultRecordCount = i3.resultRecordCount.toString()), i3.orderByFields && (r3.orderByFields = i3.orderByFields.join(",")), i3.objectIds && i3.objectIds.length > 0 && (r3.objectIds = i3.objectIds.join(",")), i3.outSpatialReference && (r3.outSR = JSON.stringify(i3.outSpatialReference.toJSON())), this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preRequestCallback({ layer: this._layer, queryPayload: r3, method: "relatedrecords", url: this._layer.parsedUrl.path + "/queryRelatedRecords" });
    const s5 = await U(this._layer.parsedUrl.path + "/queryRelatedRecords", { responseType: "json", query: r3 });
    if (s5.data) {
      const t4 = {}, i4 = s5.data;
      if (i4 && i4.relatedRecordGroups) {
        const r4 = i4.spatialReference;
        for (const s6 of i4.relatedRecordGroups) {
          const a6 = s6.objectId, n6 = [];
          for (const t5 of s6.relatedRecords) {
            t5.geometry && (t5.geometry.spatialReference = r4);
            const i5 = new g({ geometry: t5.geometry ? v(t5.geometry) : null, attributes: t5.attributes });
            n6.push(i5);
          }
          t4[a6] = { features: n6, exceededTransferLimit: true === i4.exceededTransferLimit };
        }
      }
      return t4;
    }
    throw new o2(n2.InvalidRequest);
  }
  async getFeatureByObjectId(e4, t4) {
    const i3 = new x2();
    i3.outFields = t4, i3.returnGeometry = false, i3.outSpatialReference = this.spatialReference, i3.where = this.objectIdField + "=" + e4.toString(), this.datesInUnknownTimezone && (i3.timeReferenceUnknownClient = true), this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preLayerQueryCallback({ layer: this._layer, query: i3, method: "execute" });
    const r3 = await s2(this._layer.parsedUrl.path, i3);
    return 1 === r3.features.length ? r3.features[0] : null;
  }
  async getIdentityUser() {
    var _a;
    await this.load();
    const e4 = (_a = r2) == null ? void 0 : _a.findCredential(this._layer.url);
    return e4 ? e4.userId : null;
  }
  async getOwningSystemUrl() {
    var _a;
    await this.load();
    const e4 = (_a = r2) == null ? void 0 : _a.findServerInfo(this._layer.url);
    if (e4)
      return e4.owningSystemUrl;
    let i3 = this._layer.url;
    const r3 = i3.toLowerCase().indexOf("/rest/services");
    if (i3 = r3 > -1 ? i3.substring(0, r3) : i3, i3) {
      i3 += "/rest/info";
      try {
        const e5 = await U(i3, { query: { f: "json" } });
        let r4 = "";
        return e5.data && e5.data.owningSystemUrl && (r4 = e5.data.owningSystemUrl), r4;
      } catch (s5) {
        return "";
      }
    }
    return "";
  }
  getDataSourceFeatureSet() {
    const e4 = new j2({ layer: this._layer, spatialReference: this.spatialReference ?? void 0, outFields: this._overrideFields ?? void 0, includeGeometry: !this._removeGeometry, lrucache: this.recentlyUsedQueries ?? void 0, interceptor: this.featureSetQueryInterceptor ?? void 0 });
    return e4._useDefinitionExpression = false, e4;
  }
  get preferredTimeReference() {
    var _a, _b;
    return void 0 === this._cachedDateMetaData.preferredTimeReference && (this._cachedDateMetaData.preferredTimeReference = ((_b = (_a = this._layer) == null ? void 0 : _a.preferredTimeReference) == null ? void 0 : _b.toJSON()) ?? null), this._cachedDateMetaData.preferredTimeReference;
  }
  get dateFieldsTimeReference() {
    var _a, _b;
    return void 0 === this._cachedDateMetaData.dateFieldsTimeReference && (this._cachedDateMetaData.dateFieldsTimeReference = ((_b = (_a = this._layer) == null ? void 0 : _a.dateFieldsTimeReference) == null ? void 0 : _b.toJSON()) ?? null), this._cachedDateMetaData.dateFieldsTimeReference;
  }
  get datesInUnknownTimezone() {
    return this._layer.datesInUnknownTimezone;
  }
  get editFieldsInfo() {
    var _a, _b;
    return void 0 === this._cachedDateMetaData.editFieldsInfo && (this._cachedDateMetaData.editFieldsInfo = ((_b = (_a = this._layer) == null ? void 0 : _a.editFieldsInfo) == null ? void 0 : _b.toJSON()) ?? null), this._cachedDateMetaData.editFieldsInfo;
  }
  get timeInfo() {
    var _a, _b;
    return void 0 === this._cachedDateMetaData.timeInfo && (this._cachedDateMetaData.timeInfo = ((_b = (_a = this._layer) == null ? void 0 : _a.timeInfo) == null ? void 0 : _b.toJSON()) ?? null), this._cachedDateMetaData.timeInfo;
  }
};

// node_modules/@arcgis/core/arcade/featureset/sources/FeatureLayerMemory.js
var f6 = class extends v2 {
  constructor(e4) {
    super(e4), this.declaredClass = "esri.arcade.featureset.sources.FeatureLayerMemory", this._removeGeometry = false, this._overrideFields = null, this._forceIsTable = false, e4.spatialReference && (this.spatialReference = e4.spatialReference), this._transparent = true, this._maxProcessing = 1e3, this._layer = e4.layer, this._wset = null, true === e4.isTable && (this._forceIsTable = true), void 0 !== e4.outFields && (this._overrideFields = e4.outFields), void 0 !== e4.includeGeometry && (this._removeGeometry = false === e4.includeGeometry);
  }
  _maxQueryRate() {
    return T;
  }
  end() {
    return this._layer;
  }
  optimisePagingFeatureQueries() {
  }
  async loadImpl() {
    return true === this._layer.loaded ? (this._initialiseFeatureSet(), this) : (await this._layer.load(), this._initialiseFeatureSet(), this);
  }
  get gdbVersion() {
    return "";
  }
  _initialiseFeatureSet() {
    if (null == this.spatialReference && (this.spatialReference = this._layer.spatialReference), this.geometryType = this._layer.geometryType, this.fields = this._layer.fields.slice(0), this._layer.outFields)
      if (1 === this._layer.outFields.length && "*" === this._layer.outFields[0])
        ;
      else {
        const e4 = [];
        for (const t4 of this.fields)
          if ("oid" === t4.type)
            e4.push(t4);
          else
            for (const r3 of this._layer.outFields)
              if (r3.toLowerCase() === t4.name.toLowerCase()) {
                e4.push(t4);
                break;
              }
        this.fields = e4;
      }
    else
      ;
    if (null !== this._overrideFields)
      if (1 === this._overrideFields.length && "*" === this._overrideFields[0])
        this._overrideFields = null;
      else {
        const e4 = [], t4 = [];
        for (const r3 of this.fields)
          if ("oid" === r3.type)
            e4.push(r3), t4.push(r3.name);
          else
            for (const s5 of this._overrideFields)
              if (s5.toLowerCase() === r3.name.toLowerCase()) {
                e4.push(r3), t4.push(r3.name);
                break;
              }
        this.fields = e4, this._overrideFields = t4;
      }
    this.objectIdField = this._layer.objectIdField;
    for (const e4 of this.fields)
      "global-id" === e4.type && (this.globalIdField = e4.name);
    this.hasM = this._layer.supportsM, this.hasZ = this._layer.supportsZ, this._databaseType = i2.Standardised, this.typeIdField = this._layer.typeIdField, this.types = this._layer.types;
  }
  isTable() {
    return this._forceIsTable || this._layer.isTable || "table" === this._layer.type || !this._layer.geometryType;
  }
  _isInFeatureSet() {
    return n.InFeatureSet;
  }
  _candidateIdTransform(e4) {
    return e4;
  }
  async _getSet(e4) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t4 = await this._getFilteredSet("", null, null, null, e4);
      return this._wset = t4, t4;
    }
    return this._wset;
  }
  _changeFeature(t4) {
    const r3 = {};
    for (const e4 of this.fields)
      r3[e4.name] = t4.attributes[e4.name];
    return new g({ geometry: true === this._removeGeometry ? null : t4.geometry, attributes: r3 });
  }
  async _getFilteredSet(e4, t4, r3, s5, a6) {
    let n6 = "", u2 = false;
    if (null !== s5 && (n6 = s5.constructClause(), u2 = true), this.isTable() && t4 && null !== e4 && "" !== e4) {
      return new t2([], [], true, null);
    }
    const h2 = new x2();
    h2.where = null === r3 ? null === t4 ? "1=1" : "" : u(r3, i2.Standardised), h2.spatialRelationship = this._makeRelationshipEnum(e4), h2.outSpatialReference = this.spatialReference, h2.orderByFields = "" !== n6 ? n6.split(",") : null, h2.geometry = null === t4 ? null : t4, h2.returnGeometry = true, h2.relationParameter = this._makeRelationshipParam(e4);
    const c5 = await this._layer.queryFeatures(h2);
    if (null === c5)
      return new t2([], [], u2, null);
    this._checkCancelled(a6);
    const y3 = [];
    c5.features.forEach((e5) => {
      const t5 = e5.attributes[this._layer.objectIdField];
      y3.push(t5), this._featureCache[t5] = this._changeFeature(e5);
    });
    return new t2([], y3, u2, null);
  }
  _makeRelationshipEnum(e4) {
    if (e4.includes("esriSpatialRelRelation"))
      return "relation";
    switch (e4) {
      case "esriSpatialRelRelation":
        return "relation";
      case "esriSpatialRelIntersects":
        return "intersects";
      case "esriSpatialRelContains":
        return "contains";
      case "esriSpatialRelOverlaps":
        return "overlaps";
      case "esriSpatialRelWithin":
        return "within";
      case "esriSpatialRelTouches":
        return "touches";
      case "esriSpatialRelCrosses":
        return "crosses";
      case "esriSpatialRelEnvelopeIntersects":
        return "envelope-intersects";
    }
    return e4;
  }
  _makeRelationshipParam(e4) {
    return e4.includes("esriSpatialRelRelation") ? e4.split(":")[1] : "";
  }
  async _queryAllFeatures() {
    if (this._wset)
      return this._wset;
    const e4 = new x2();
    if (e4.where = "1=1", await this._ensureLoaded(), this._layer.source && this._layer.source.items) {
      const e5 = [];
      return this._layer.source.items.forEach((t5) => {
        const r4 = t5.attributes[this._layer.objectIdField];
        e5.push(r4), this._featureCache[r4] = this._changeFeature(t5);
      }), this._wset = new t2([], e5, false, null), this._wset;
    }
    const t4 = await this._layer.queryFeatures(e4), r3 = [];
    return t4.features.forEach((e5) => {
      const t5 = e5.attributes[this._layer.objectIdField];
      r3.push(t5), this._featureCache[t5] = this._changeFeature(e5);
    }), this._wset = new t2([], r3, false, null), this._wset;
  }
  async _getFeatures(e4, s5, i3) {
    const a6 = [];
    -1 !== s5 && void 0 === this._featureCache[s5] && a6.push(s5);
    for (let t4 = e4._lastFetchedIndex; t4 < e4._known.length && (e4._lastFetchedIndex += 1, !(void 0 === this._featureCache[e4._known[t4]] && (e4._known[t4] !== s5 && a6.push(e4._known[t4]), a6.length > i3))); t4++)
      ;
    if (0 === a6.length)
      return "success";
    throw new o2(n2.MissingFeatures);
  }
  async _refineSetBlock(e4) {
    return e4;
  }
  async _stat() {
    return { calculated: false };
  }
  async _canDoAggregates() {
    return false;
  }
  relationshipMetaData() {
    return [];
  }
  static _cloneAttr(e4) {
    const t4 = {};
    for (const r3 in e4)
      t4[r3] = e4[r3];
    return t4;
  }
  nativeCapabilities() {
    return { title: this._layer.title ?? "", canQueryRelated: false, source: this, capabilities: this._layer.capabilities, databaseType: this._databaseType, requestStandardised: true };
  }
  static create(e4, t4) {
    let r3 = e4.layerDefinition.objectIdField;
    const s5 = e4.layerDefinition.typeIdField ? e4.layerDefinition.typeIdField : "", i3 = [];
    if (e4.layerDefinition.types)
      for (const u2 of e4.layerDefinition.types)
        i3.push(n4.fromJSON(u2));
    let a6 = e4.layerDefinition.geometryType;
    void 0 === a6 && (a6 = e4.featureSet.geometryType || "");
    let l = e4.featureSet.features;
    const n6 = t4.toJSON();
    if ("" === r3 || void 0 === r3) {
      let t5 = false;
      for (const s6 of e4.layerDefinition.fields)
        if ("oid" === s6.type || "esriFieldTypeOID" === s6.type) {
          r3 = s6.name, t5 = true;
          break;
        }
      if (false === t5) {
        let t6 = "FID", s6 = true, i4 = 0;
        for (; s6; ) {
          let r4 = true;
          for (const s7 of e4.layerDefinition.fields)
            if (s7.name === t6) {
              r4 = false;
              break;
            }
          true === r4 ? s6 = false : (i4++, t6 = "FID" + i4.toString());
        }
        e4.layerDefinition.fields.push({ type: "esriFieldTypeOID", name: t6, alias: t6 });
        const a7 = [];
        for (let r4 = 0; r4 < l.length; r4++)
          a7.push({ geometry: e4.featureSet.features[r4].geometry, attributes: e4.featureSet.features[r4].attributes ? this._cloneAttr(e4.featureSet.features[r4].attributes) : {} }), a7[r4].attributes[t6] = r4;
        l = a7, r3 = t6;
      }
    }
    const o3 = [];
    for (const u2 of e4.layerDefinition.fields)
      u2 instanceof y ? o3.push(u2) : o3.push(y.fromJSON(u2));
    let d3 = a6;
    switch (d3 || (d3 = ""), d3) {
      case "esriGeometryPoint":
        d3 = "point";
        break;
      case "esriGeometryPolyline":
        d3 = "polyline";
        break;
      case "esriGeometryPolygon":
        d3 = "polygon";
        break;
      case "esriGeometryExtent":
        d3 = "extent";
        break;
      case "esriGeometryMultipoint":
        d3 = "multipoint";
        break;
      case "":
      case "esriGeometryNull":
        d3 = "esriGeometryNull";
    }
    if ("esriGeometryNull" !== d3)
      for (const h2 of l)
        h2.geometry && h2.geometry instanceof p == false && (h2.geometry.type = d3, void 0 === h2.geometry.spatialReference && (h2.geometry.spatialReference = n6));
    else
      for (const u2 of l)
        u2.geometry && (u2.geometry = null);
    const p3 = { outFields: ["*"], source: l, fields: o3, types: i3, typeIdField: s5, objectIdField: r3, spatialReference: t4 };
    "" !== d3 && "esriGeometryNull" !== d3 && null !== d3 && (p3.geometryType = d3);
    const m4 = new He(p3);
    return new f6({ layer: m4, spatialReference: t4, isTable: null === d3 || "" === d3 || "esriGeometryNull" === d3 });
  }
  async queryAttachments() {
    return [];
  }
  async getFeatureByObjectId(e4) {
    const t4 = new x2();
    t4.where = this.objectIdField + "=" + e4.toString();
    const r3 = await this._layer.queryFeatures(t4);
    return 1 === r3.features.length ? r3.features[0] : null;
  }
  async getOwningSystemUrl() {
    return "";
  }
  async getIdentityUser() {
    return "";
  }
  get preferredTimeReference() {
    var _a, _b;
    return ((_b = (_a = this._layer) == null ? void 0 : _a.preferredTimeReference) == null ? void 0 : _b.toJSON()) ?? null;
  }
  get dateFieldsTimeReference() {
    var _a, _b;
    return ((_b = (_a = this._layer) == null ? void 0 : _a.dateFieldsTimeReference) == null ? void 0 : _b.toJSON()) ?? null;
  }
  get datesInUnknownTimezone() {
    var _a;
    return (_a = this._layer) == null ? void 0 : _a.datesInUnknownTimezone;
  }
  get editFieldsInfo() {
    var _a, _b;
    return ((_b = (_a = this._layer) == null ? void 0 : _a.editFieldsInfo) == null ? void 0 : _b.toJSON()) ?? null;
  }
  get timeInfo() {
    var _a, _b;
    return ((_b = (_a = this._layer) == null ? void 0 : _a.timeInfo) == null ? void 0 : _b.toJSON()) ?? null;
  }
};

// node_modules/@arcgis/core/arcade/featureset/sources/FeatureLayerRelated.js
var d2 = class extends v2 {
  constructor(e4) {
    super(e4), this.declaredClass = "esri.arcade.featureset.sources.FeatureLayerRelated", this._findObjectId = -1, this._requestStandardised = false, this._removeGeometry = false, this._overrideFields = null, this.featureObjectId = null, e4.spatialReference && (this.spatialReference = e4.spatialReference), this._transparent = true, this._maxProcessing = 1e3, this._layer = e4.layer, this._wset = null, this._findObjectId = e4.objectId, this.featureObjectId = e4.objectId, this.relationship = e4.relationship, this._relatedLayer = e4.relatedLayer, void 0 !== e4.outFields && (this._overrideFields = e4.outFields), void 0 !== e4.includeGeometry && (this._removeGeometry = false === e4.includeGeometry);
  }
  _maxQueryRate() {
    return T;
  }
  end() {
    return this._layer;
  }
  optimisePagingFeatureQueries() {
  }
  async loadImpl() {
    var _a;
    return await Promise.all([this._layer.load(), (_a = this._relatedLayer) == null ? void 0 : _a.load()]), this._initialiseFeatureSet(), this;
  }
  nativeCapabilities() {
    return this._relatedLayer.nativeCapabilities();
  }
  _initialiseFeatureSet() {
    if (null == this.spatialReference && (this.spatialReference = this._layer.spatialReference), this.geometryType = this._relatedLayer.geometryType, this.fields = this._relatedLayer.fields.slice(0), null !== this._overrideFields)
      if (1 === this._overrideFields.length && "*" === this._overrideFields[0])
        this._overrideFields = null;
      else {
        const e5 = [], t4 = [];
        for (const r3 of this.fields)
          if ("oid" === r3.type)
            e5.push(r3), t4.push(r3.name);
          else
            for (const i3 of this._overrideFields)
              if (i3.toLowerCase() === r3.name.toLowerCase()) {
                e5.push(r3), t4.push(r3.name);
                break;
              }
        this.fields = e5, this._overrideFields = t4;
      }
    const e4 = this._layer.nativeCapabilities();
    e4 && (this._databaseType = e4.databaseType, this._requestStandardised = e4.requestStandardised), this.objectIdField = this._relatedLayer.objectIdField, this.globalIdField = this._relatedLayer.globalIdField, this.hasM = this._relatedLayer.supportsM, this.hasZ = this._relatedLayer.supportsZ, this.typeIdField = this._relatedLayer.typeIdField, this.types = this._relatedLayer.types;
  }
  async databaseType() {
    return await this._relatedLayer.databaseType(), this._databaseType = this._relatedLayer._databaseType, this._databaseType;
  }
  isTable() {
    return this._relatedLayer.isTable();
  }
  _isInFeatureSet() {
    return n.InFeatureSet;
  }
  _candidateIdTransform(e4) {
    return e4;
  }
  async _getSet(e4) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t4 = await this._getFilteredSet("", null, null, null, e4);
      return this._wset = t4, t4;
    }
    return this._wset;
  }
  _changeFeature(t4) {
    const r3 = {};
    for (const e4 of this.fields)
      r3[e4.name] = t4.attributes[e4.name];
    return new g({ geometry: true === this._removeGeometry ? null : t4.geometry, attributes: r3 });
  }
  async _getFilteredSet(e4, t4, r3, i3, a6) {
    var _a;
    if (await this.databaseType(), this.isTable() && t4 && null !== e4 && "" !== e4) {
      return new t2([], [], true, null);
    }
    const n6 = this._layer.nativeCapabilities();
    if (false === n6.canQueryRelated) {
      return new t2([], [], true, null);
    }
    if (((_a = n6.capabilities) == null ? void 0 : _a.queryRelated) && n6.capabilities.queryRelated.supportsPagination)
      return this._getFilteredSetUsingPaging(e4, t4, r3, i3, a6);
    let d3 = "", o3 = false;
    null !== i3 && n6.capabilities && n6.capabilities.queryRelated && true === n6.capabilities.queryRelated.supportsOrderBy && (d3 = i3.constructClause(), o3 = true);
    const u2 = new d();
    u2.objectIds = [this._findObjectId];
    const h2 = null !== this._overrideFields ? this._overrideFields : this._fieldsIncludingObjectId(this._relatedLayer.fields ? this._relatedLayer.fields.map((e5) => e5.name) : ["*"]);
    u2.outFields = h2, u2.relationshipId = this.relationship.id, u2.where = "1=1";
    let c5 = true;
    true === this._removeGeometry && (c5 = false), u2.returnGeometry = c5, this._requestStandardised && (u2.sqlFormat = "standard"), u2.outSpatialReference = this.spatialReference, u2.orderByFields = "" !== d3 ? d3.split(",") : null;
    const y3 = await n6.source.queryRelatedFeatures(u2);
    this._checkCancelled(a6);
    const p3 = y3[this._findObjectId] ? y3[this._findObjectId].features : [], _ = [];
    for (let s5 = 0; s5 < p3.length; s5++)
      this._featureCache[p3[s5].attributes[this._relatedLayer.objectIdField]] = p3[s5], _.push(p3[s5].attributes[this._relatedLayer.objectIdField]);
    const f7 = t4 && null !== e4 && "" !== e4, g5 = null != r3;
    return new t2(f7 || g5 ? _ : [], f7 || g5 ? [] : _, o3, null);
  }
  _fieldsIncludingObjectId(e4) {
    if (null === e4)
      return [this.objectIdField];
    const t4 = e4.slice(0);
    if (t4.includes("*"))
      return t4;
    let r3 = false;
    for (const i3 of t4)
      if (i3.toUpperCase() === this.objectIdField.toUpperCase()) {
        r3 = true;
        break;
      }
    return false === r3 && t4.push(this.objectIdField), t4;
  }
  async _getFilteredSetUsingPaging(e4, t4, r3, i3, a6) {
    var _a, _b;
    let n6 = "", l = false;
    const d3 = this._layer.nativeCapabilities();
    null !== i3 && d3 && ((_a = d3.capabilities) == null ? void 0 : _a.queryRelated) && true === d3.capabilities.queryRelated.supportsOrderBy && (n6 = i3.constructClause(), l = true), await this.databaseType();
    const o3 = "1=1";
    let u2 = this._maxQueryRate();
    const h2 = (_b = d3.capabilities) == null ? void 0 : _b.query.maxRecordCount;
    null != h2 && h2 < u2 && (u2 = h2);
    const c5 = t4 && null !== e4 && "" !== e4, y3 = null != r3;
    let p3 = null, _ = true;
    true === this._removeGeometry && (_ = false);
    const f7 = null !== this._overrideFields ? this._overrideFields : this._fieldsIncludingObjectId(this._relatedLayer.fields ? this._relatedLayer.fields.map((e5) => e5.name) : ["*"]);
    return p3 = new t2(c5 || y3 ? ["GETPAGES"] : [], c5 || y3 ? [] : ["GETPAGES"], l, { outFields: f7.join(","), resultRecordCount: u2, resultOffset: 0, objectIds: [this._findObjectId], where: o3, orderByFields: n6, returnGeometry: _, returnIdsOnly: "false", internal: { set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } }), await this._expandPagedSet(p3, u2, 0, 0, a6), p3;
  }
  _expandPagedSet(e4, t4, r3, i3, s5) {
    return this._expandPagedSetFeatureSet(e4, t4, r3, i3, s5);
  }
  _clonePageDefinition(e4) {
    return null === e4 ? null : true !== e4.groupbypage ? { groupbypage: false, outFields: e4.outFields, resultRecordCount: e4.resultRecordCount, resultOffset: e4.resultOffset, where: e4.where, objectIds: e4.objectIds, orderByFields: e4.orderByFields, returnGeometry: e4.returnGeometry, returnIdsOnly: e4.returnIdsOnly, internal: e4.internal } : { groupbypage: true, outFields: e4.outFields, resultRecordCount: e4.resultRecordCount, useOIDpagination: e4.useOIDpagination, generatedOid: e4.generatedOid, groupByFieldsForStatistics: e4.groupByFieldsForStatistics, resultOffset: e4.resultOffset, outStatistics: e4.outStatistics, geometry: e4.geometry, where: e4.where, objectIds: e4.objectIds, orderByFields: e4.orderByFields, returnGeometry: e4.returnGeometry, returnIdsOnly: e4.returnIdsOnly, internal: e4.internal };
  }
  async _getPhysicalPage(e4, t4, r3) {
    const i3 = e4.pagesDefinition.internal.lastRetrieved, s5 = i3, a6 = e4.pagesDefinition.internal.lastPage, n6 = this._layer.nativeCapabilities(), d3 = new d();
    true === this._requestStandardised && (d3.sqlFormat = "standard"), d3.relationshipId = this.relationship.id, d3.objectIds = e4.pagesDefinition.objectIds, d3.resultOffset = e4.pagesDefinition.internal.lastPage, d3.resultRecordCount = e4.pagesDefinition.resultRecordCount, d3.outFields = e4.pagesDefinition.outFields.split(","), d3.where = e4.pagesDefinition.where, d3.orderByFields = "" !== e4.pagesDefinition.orderByFields ? e4.pagesDefinition.orderByFields.split(",") : null, d3.returnGeometry = e4.pagesDefinition.returnGeometry, d3.outSpatialReference = this.spatialReference;
    const o3 = await n6.source.queryRelatedFeatures(d3);
    if (this._checkCancelled(r3), e4.pagesDefinition.internal.lastPage !== a6)
      return 0;
    const u2 = o3[this._findObjectId] ? o3[this._findObjectId].features : [];
    for (let l = 0; l < u2.length; l++)
      e4.pagesDefinition.internal.set[s5 + l] = u2[l].attributes[this._relatedLayer.objectIdField];
    for (let l = 0; l < u2.length; l++)
      this._featureCache[u2[l].attributes[this._relatedLayer.objectIdField]] = u2[l];
    const h2 = !o3[this._findObjectId] || false === o3[this._findObjectId].exceededTransferLimit;
    return u2.length !== e4.pagesDefinition.resultRecordCount && h2 && (e4.pagesDefinition.internal.fullyResolved = true), e4.pagesDefinition.internal.lastRetrieved = i3 + u2.length, e4.pagesDefinition.internal.lastPage += e4.pagesDefinition.resultRecordCount, u2.length;
  }
  async _getFeatures(e4, i3, s5, a6) {
    const n6 = [];
    -1 !== i3 && void 0 === this._featureCache[i3] && n6.push(i3);
    const l = this._maxQueryRate();
    if (true === this._checkIfNeedToExpandKnownPage(e4, l))
      return await this._expandPagedSet(e4, l, 0, 0, a6), this._getFeatures(e4, i3, s5, a6);
    let d3 = 0;
    for (let t4 = e4._lastFetchedIndex; t4 < e4._known.length && (d3++, d3 <= s5 && (e4._lastFetchedIndex += 1), !("GETPAGES" !== e4._known[t4] && void 0 === this._featureCache[e4._known[t4]] && (e4._known[t4] !== i3 && n6.push(e4._known[t4]), n6.length > s5))) && !(d3 >= s5 && 0 === n6.length); t4++)
      ;
    if (0 === n6.length)
      return "success";
    throw new o2(n2.MissingFeatures);
  }
  async _refineSetBlock(e4, t4, r3) {
    return e4;
  }
  async _stat(e4, t4, r3, i3, s5, a6, n6) {
    return { calculated: false };
  }
  get gdbVersion() {
    return this._relatedLayer.gdbVersion;
  }
  async _canDoAggregates(e4, t4, r3, i3, s5) {
    return false;
  }
  relationshipMetaData() {
    return this._relatedLayer.relationshipMetaData();
  }
  serviceUrl() {
    return this._relatedLayer.serviceUrl();
  }
  queryAttachments(e4, t4, r3, i3, s5) {
    return this._relatedLayer.queryAttachments(e4, t4, r3, i3, s5);
  }
  getFeatureByObjectId(e4, t4) {
    return this._relatedLayer.getFeatureByObjectId(e4, t4);
  }
  getOwningSystemUrl() {
    return this._relatedLayer.getOwningSystemUrl();
  }
  getIdentityUser() {
    return this._relatedLayer.getIdentityUser();
  }
  getDataSourceFeatureSet() {
    return this._relatedLayer;
  }
  get preferredTimeReference() {
    var _a;
    return ((_a = this._relatedLayer) == null ? void 0 : _a.preferredTimeReference) ?? null;
  }
  get dateFieldsTimeReference() {
    var _a;
    return ((_a = this._relatedLayer) == null ? void 0 : _a.dateFieldsTimeReference) ?? null;
  }
  get datesInUnknownTimezone() {
    var _a;
    return (_a = this._relatedLayer) == null ? void 0 : _a.datesInUnknownTimezone;
  }
  get editFieldsInfo() {
    var _a;
    return ((_a = this._relatedLayer) == null ? void 0 : _a.editFieldsInfo) ?? null;
  }
  get timeInfo() {
    var _a;
    return ((_a = this._relatedLayer) == null ? void 0 : _a.timeInfo) ?? null;
  }
};

// node_modules/@arcgis/core/arcade/featureSetUtils.js
function L2() {
  null === a2.applicationCache && (a2.applicationCache = new a2());
}
async function w(e4, t4) {
  if (a2.applicationCache) {
    const r3 = a2.applicationCache.getLayerInfo(e4);
    if (r3) {
      const a6 = await r3;
      return new He({ url: e4, outFields: t4, sourceJSON: a6 });
    }
    const n6 = new He({ url: e4, outFields: t4 }), i3 = (async () => (await n6.load(), n6.sourceJSON))();
    if (a2.applicationCache) {
      a2.applicationCache.setLayerInfo(e4, i3);
      try {
        return await i3, n6;
      } catch (a6) {
        throw a2.applicationCache.clearLayerInfo(e4), a6;
      }
    }
    return await i3, n6;
  }
  return new He({ url: e4, outFields: t4 });
}
async function I(e4, t4, a6, r3, n6, i3 = null) {
  return S2(await w(e4, ["*"]), t4, a6, r3, n6, i3);
}
function S2(e4, t4 = null, a6 = null, r3 = true, n6 = null, i3 = null) {
  const s5 = { layer: e4, spatialReference: t4, outFields: a6, includeGeometry: r3, lrucache: n6, interceptor: i3 };
  return true === e4._hasMemorySource() ? new f6(s5) : new j2(s5);
}
async function N3(t4) {
  if (null !== a2.applicationCache) {
    const e4 = a2.applicationCache.getLayerInfo(t4);
    if (null !== e4)
      return e4;
  }
  const a6 = (async () => {
    const a7 = await U(t4, { responseType: "json", query: { f: "json" } });
    return a7.data ? a7.data : null;
  })();
  if (null !== a2.applicationCache) {
    a2.applicationCache.setLayerInfo(t4, a6);
    try {
      return await a6;
    } catch (r3) {
      throw a2.applicationCache.clearLayerInfo(t4), r3;
    }
  }
  return a6;
}
async function F(t4, a6) {
  const r3 = "QUERYDATAELEMTS:" + a6.toString() + ":" + t4;
  if (null !== a2.applicationCache) {
    const e4 = a2.applicationCache.getLayerInfo(r3);
    if (null !== e4)
      return e4;
  }
  const n6 = (async () => {
    const r4 = await U(t4 + "/queryDataElements", { method: "post", responseType: "json", query: { layers: JSON.stringify([a6.toString()]), f: "json" } });
    if (r4.data) {
      const e4 = r4.data;
      if (e4.layerDataElements && e4.layerDataElements[0])
        return e4.layerDataElements[0];
    }
    throw new o2(n2.DataElementsNotFound);
  })();
  if (null !== a2.applicationCache) {
    a2.applicationCache.setLayerInfo(r3, n6);
    try {
      return await n6;
    } catch (i3) {
      throw a2.applicationCache.clearLayerInfo(r3), i3;
    }
  }
  return n6;
}
async function g4(t4) {
  if (null !== a2.applicationCache) {
    const e4 = a2.applicationCache.getLayerInfo(t4);
    if (null !== e4)
      return e4;
  }
  const a6 = (async () => {
    const a7 = await U(t4, { responseType: "json", query: { f: "json" } });
    if (a7.data) {
      const e4 = a7.data;
      return e4.layers || (e4.layers = []), e4.tables || (e4.tables = []), e4;
    }
    return { layers: [], tables: [] };
  })();
  if (null !== a2.applicationCache) {
    a2.applicationCache.setLayerInfo(t4, a6);
    try {
      return await a6;
    } catch (r3) {
      throw a2.applicationCache.clearLayerInfo(t4), r3;
    }
  }
  return a6;
}
async function A3(e4, t4) {
  const a6 = { metadata: null, networkId: -1, unVersion: 3, terminals: [], queryelem: null, layerNameLkp: {}, lkp: null }, r3 = await g4(e4);
  if (a6.metadata = r3, r3.controllerDatasetLayers && void 0 !== r3.controllerDatasetLayers.utilityNetworkLayerId && null !== r3.controllerDatasetLayers.utilityNetworkLayerId) {
    if (r3.layers)
      for (const e5 of r3.layers)
        a6.layerNameLkp[e5.id] = e5.name;
    if (r3.tables)
      for (const e5 of r3.tables)
        a6.layerNameLkp[e5.id] = e5.name;
    const n6 = r3.controllerDatasetLayers.utilityNetworkLayerId;
    a6.networkId = n6;
    const i3 = await F(e4, n6);
    if (i3) {
      a6.queryelem = i3, a6.queryelem && a6.queryelem.dataElement && void 0 !== a6.queryelem.dataElement.schemaGeneration && (a6.unVersion = a6.queryelem.dataElement.schemaGeneration), a6.lkp = {}, a6.queryelem.dataElement.domainNetworks || (a6.queryelem.dataElement.domainNetworks = []);
      for (const e5 of a6.queryelem.dataElement.domainNetworks) {
        for (const t5 of e5.edgeSources ? e5.edgeSources : []) {
          const e6 = { layerId: t5.layerId, sourceId: t5.sourceId, className: a6.layerNameLkp[t5.layerId] ? a6.layerNameLkp[t5.layerId] : null };
          e6.className && (a6.lkp[e6.className] = e6);
        }
        for (const t5 of e5.junctionSources ? e5.junctionSources : []) {
          const e6 = { layerId: t5.layerId, sourceId: t5.sourceId, className: a6.layerNameLkp[t5.layerId] ? a6.layerNameLkp[t5.layerId] : null };
          e6.className && (a6.lkp[e6.className] = e6);
        }
      }
      if (a6.queryelem.dataElement.terminalConfigurations)
        for (const e5 of a6.queryelem.dataElement.terminalConfigurations)
          for (const t5 of e5.terminals)
            a6.terminals.push({ terminalId: t5.terminalId, terminalName: t5.terminalName });
      const r4 = await N3(e4 + "/" + n6);
      if (r4.systemLayers && void 0 !== r4.systemLayers.associationsTableId && null !== r4.systemLayers.associationsTableId) {
        const n7 = [];
        a6.unVersion >= 4 && (n7.push("STATUS"), n7.push("PERCENTALONG"));
        let i4 = await I(e4 + "/" + r4.systemLayers.associationsTableId.toString(), t4, ["OBJECTID", "FROMNETWORKSOURCEID", "TONETWORKSOURCEID", "FROMGLOBALID", "TOGLOBALID", "TOTERMINALID", "FROMTERMINALID", "ASSOCIATIONTYPE", "ISCONTENTVISIBLE", "GLOBALID", ...n7], false, null, null);
        return await i4.load(), a6.unVersion >= 4 && (i4 = i4.filter(f2.create("STATUS NOT IN (1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62,63)", i4.getFieldsIndex())), await i4.load()), { lkp: a6.lkp, associations: i4, unVersion: a6.unVersion, terminals: a6.terminals };
      }
      return { associations: null, unVersion: a6.unVersion, lkp: null, terminals: [] };
    }
    return { associations: null, unVersion: a6.unVersion, lkp: null, terminals: [] };
  }
  return { associations: null, unVersion: a6.unVersion, lkp: null, terminals: [] };
}
async function C3(e4, t4, a6, r3 = null, n6 = null, i3 = true, s5 = null, l = null) {
  let o3 = e4.serviceUrl();
  if (!o3)
    return null;
  o3 = "/" === o3.charAt(o3.length - 1) ? o3 + t4.relatedTableId.toString() : o3 + "/" + t4.relatedTableId.toString();
  const c5 = await I(o3, r3, n6, i3, s5, l);
  return new d2({ layer: e4, relatedLayer: c5, relationship: t4, objectId: a6, spatialReference: r3, outFields: n6, includeGeometry: i3, lrucache: s5, interceptor: l });
}
c4.registerAction(), C2.registerAction(), a3.registerAction(), f5.registerAction(), a5.registerAction();
var T4 = class extends e2 {
  constructor(e4, t4 = null, a6 = null, r3 = null) {
    super(), this._map = e4, this._overridespref = t4, this._lrucache = a6, this._interceptor = r3, this._instantLayers = [];
  }
  _makeAndAddFeatureSet(e4, t4 = true, a6 = null) {
    const r3 = S2(e4, this._overridespref, null === a6 ? ["*"] : a6, t4, this._lrucache, this._interceptor);
    return this._instantLayers.push({ featureset: r3, opitem: e4, includeGeometry: t4, outFields: JSON.stringify(a6) }), r3;
  }
  async featureSetByName(e4, t4 = true, a6 = null) {
    if (void 0 !== this._map.loaded && void 0 !== this._map.load && false === this._map.loaded)
      return await this._map.load(), this.featureSetByName(e4, t4, a6);
    null === a6 && (a6 = ["*"]), a6 = (a6 = a6.slice(0)).sort();
    const r3 = JSON.stringify(a6);
    for (let i3 = 0; i3 < this._instantLayers.length; i3++) {
      const a7 = this._instantLayers[i3];
      if (a7.opitem.title === e4 && a7.includeGeometry === t4 && a7.outFields === r3)
        return this._instantLayers[i3].featureset;
    }
    const n6 = this._map.allLayers.find((t5) => t5 instanceof He && t5.title === e4);
    if (n6)
      return this._makeAndAddFeatureSet(n6, t4, a6);
    if (this._map.tables) {
      const r4 = this._map.tables.find((t5) => !!(t5.title && t5.title === e4 || t5.title && t5.title === e4));
      if (r4) {
        if (r4 instanceof He)
          return this._makeAndAddFeatureSet(r4, t4, a6);
        if (r4._materializedTable)
          ;
        else {
          const e5 = r4.outFields ? r4 : { ...r4, outFields: ["*"] };
          r4._materializedTable = new He(e5);
        }
        return await r4._materializedTable.load(), this._makeAndAddFeatureSet(r4._materializedTable, t4, a6);
      }
    }
    return null;
  }
  async featureSetById(e4, t4 = true, a6 = ["*"]) {
    if (void 0 !== this._map.loaded && void 0 !== this._map.load && false === this._map.loaded)
      return await this._map.load(), this.featureSetById(e4, t4, a6);
    null === a6 && (a6 = ["*"]), a6 = (a6 = a6.slice(0)).sort();
    const r3 = JSON.stringify(a6);
    for (let i3 = 0; i3 < this._instantLayers.length; i3++) {
      const a7 = this._instantLayers[i3];
      if (a7.opitem.id === e4 && a7.includeGeometry === t4 && a7.outFields === r3)
        return this._instantLayers[i3].featureset;
    }
    const n6 = this._map.allLayers.find((t5) => t5 instanceof He && t5.id === e4);
    if (n6)
      return this._makeAndAddFeatureSet(n6, t4, a6);
    if (this._map.tables) {
      const r4 = this._map.tables.find((t5) => t5.id === e4);
      if (r4) {
        if (r4 instanceof He)
          return this._makeAndAddFeatureSet(r4, t4, a6);
        if (r4._materializedTable)
          ;
        else {
          const e5 = { ...r4, outFields: ["*"] };
          r4._materializedTable = new He(e5);
        }
        return await r4._materializedTable.load(), this._makeAndAddFeatureSet(r4._materializedTable, t4, a6);
      }
    }
    return null;
  }
};
var k = class extends e2 {
  constructor(e4, t4 = null, a6 = null, r3 = null) {
    super(), this._url = e4, this._overridespref = t4, this._lrucache = a6, this._interceptor = r3, this.metadata = null, this._instantLayers = [];
  }
  get url() {
    return this._url;
  }
  _makeAndAddFeatureSet(e4, t4 = true, a6 = null) {
    const r3 = S2(e4, this._overridespref, null === a6 ? ["*"] : a6, t4, this._lrucache);
    return this._instantLayers.push({ featureset: r3, opitem: e4, includeGeometry: t4, outFields: JSON.stringify(a6) }), r3;
  }
  async _loadMetaData() {
    const e4 = await g4(this._url);
    return this.metadata = e4, e4;
  }
  load() {
    return this._loadMetaData();
  }
  clone() {
    return new k(this._url, this._overridespref, this._lrucache, this._interceptor);
  }
  async featureSetByName(e4, t4 = true, a6 = null) {
    null === a6 && (a6 = ["*"]), a6 = (a6 = a6.slice(0)).sort();
    const r3 = JSON.stringify(a6);
    for (let s5 = 0; s5 < this._instantLayers.length; s5++) {
      const a7 = this._instantLayers[s5];
      if (a7.opitem.title === e4 && a7.includeGeometry === t4 && a7.outFields === r3)
        return this._instantLayers[s5].featureset;
    }
    const n6 = await this._loadMetaData();
    let i3 = null;
    for (const s5 of n6.layers ? n6.layers : [])
      s5.name === e4 && (i3 = s5);
    if (!i3)
      for (const s5 of n6.tables ? n6.tables : [])
        s5.name === e4 && (i3 = s5);
    if (i3) {
      const e5 = await w(this._url + "/" + i3.id, ["*"]);
      return this._makeAndAddFeatureSet(e5, t4, a6);
    }
    return null;
  }
  async featureSetById(e4, t4 = true, a6 = ["*"]) {
    null === a6 && (a6 = ["*"]), a6 = (a6 = a6.slice(0)).sort();
    const r3 = JSON.stringify(a6);
    e4 = null != e4 ? e4.toString() : "";
    for (let s5 = 0; s5 < this._instantLayers.length; s5++) {
      const a7 = this._instantLayers[s5];
      if (a7.opitem.id === e4 && a7.includeGeometry === t4 && a7.outFields === r3)
        return this._instantLayers[s5].featureset;
    }
    const n6 = await this._loadMetaData();
    let i3 = null;
    for (const s5 of n6.layers ? n6.layers : [])
      null !== s5.id && void 0 !== s5.id && s5.id.toString() === e4 && (i3 = s5);
    if (!i3)
      for (const s5 of n6.tables ? n6.tables : [])
        null !== s5.id && void 0 !== s5.id && s5.id.toString() === e4 && (i3 = s5);
    if (i3) {
      const e5 = await w(this._url + "/" + i3.id, ["*"]);
      return this._makeAndAddFeatureSet(e5, t4, a6);
    }
    return null;
  }
};
function O(e4, t4, a6 = null, r3 = null) {
  return new T4(e4, t4, a6, r3);
}
function b(e4, t4, a6 = null, r3 = null) {
  return new k(e4, t4, a6, r3);
}
function E2(e4, t4, a6, r3, n6) {
  if (null === e4)
    return null;
  if (e4 instanceof He) {
    switch (t4) {
      case "datasource":
        return S2(e4, n6, e4.outFields, true, a6, r3).getDataSourceFeatureSet();
      case "parent":
      case "root":
        return S2(e4, n6, e4.outFields, true, a6, r3);
    }
    return null;
  }
  if (e4 instanceof v2)
    switch (t4) {
      case "datasource":
        return e4.getDataSourceFeatureSet();
      case "parent":
        return e4;
      case "root":
        return e4.getRootFeatureSet();
    }
  return null;
}
async function j3(e4, t4, a6, r3, n6, i3, s5, l = null) {
  if (a2.applicationCache) {
    const o4 = a2.applicationCache.getLayerInfo(e4 + ":" + i3.url);
    if (o4) {
      const e5 = await o4;
      return S2(new He({ url: x(e5.url) + "/" + t4, outFields: ["*"] }), a6, r3, n6, s5, l);
    }
  }
  const o3 = new x3({ id: e4, portal: i3 }).load();
  a2.applicationCache && a2.applicationCache.setLayerInfo(e4 + ":" + i3.url, o3);
  try {
    const e5 = await o3;
    return S2(new He({ url: x(e5.url ?? "") + "/" + t4, outFields: ["*"] }), a6, r3, n6, s5, l);
  } catch (u2) {
    throw a2.applicationCache && a2.applicationCache.clearLayerInfo(e4 + ":" + i3.url), u2;
  }
}

export {
  e2 as e,
  c4 as c,
  E,
  x6 as x,
  A2 as A,
  y2 as y,
  D,
  e3 as e2,
  a3 as a,
  a5 as a2,
  f6 as f,
  L2 as L,
  I,
  S2 as S,
  A3 as A2,
  C3 as C,
  O,
  b,
  E2,
  j3 as j
};
//# sourceMappingURL=chunk-PUUKR3J4.js.map
