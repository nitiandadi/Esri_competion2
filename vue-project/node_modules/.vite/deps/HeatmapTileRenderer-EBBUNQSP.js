import {
  n
} from "./chunk-WPQ2ZKAK.js";
import "./chunk-J7OMJ47S.js";
import {
  o
} from "./chunk-JZXLSHK2.js";
import "./chunk-VLSIPNEZ.js";
import "./chunk-4FSIMQ5G.js";
import "./chunk-5MOZZS3P.js";
import "./chunk-7XVHXPW5.js";
import "./chunk-GR3QAE4S.js";
import "./chunk-XBPKFV6W.js";
import "./chunk-J6VS6FXY.js";
import "./chunk-AZEN5UFW.js";
import "./chunk-R3MRUDAD.js";
import "./chunk-R6XKQWZ7.js";
import "./chunk-63WRUMNA.js";
import "./chunk-O2JKCGK6.js";
import "./chunk-WAPZ634R.js";
import "./chunk-53FPJYCC.js";
import "./chunk-RURSJOSG.js";
import "./chunk-23AC3IC7.js";
import "./chunk-GKD7ZY5C.js";
import "./chunk-TQAOUM4T.js";
import "./chunk-RRNRSHX3.js";
import "./chunk-IEBU4QQL.js";
import "./chunk-4M3AMTD4.js";
import "./chunk-34FJTA26.js";
import "./chunk-DUEDINK5.js";
import "./chunk-MZ267CZB.js";
import "./chunk-3DBV4JBL.js";
import "./chunk-CJ2YD4VU.js";
import "./chunk-PRXITTX7.js";
import "./chunk-JGIZLXNQ.js";
import "./chunk-NOYTM57S.js";
import "./chunk-OPQ632ST.js";
import "./chunk-U6GC73UT.js";
import "./chunk-LC5BGIRA.js";
import "./chunk-ST7DNJJS.js";
import "./chunk-PELFA5QO.js";
import "./chunk-EPJSBV4J.js";
import "./chunk-REIXEATJ.js";
import {
  l,
  u
} from "./chunk-CCNZLEW5.js";
import "./chunk-FGXNBIU5.js";
import "./chunk-FXMJJBXP.js";
import "./chunk-BHQVXYUV.js";
import "./chunk-DKH5QOVM.js";
import "./chunk-Y3KJPDCE.js";
import "./chunk-LSUFI7PR.js";
import "./chunk-BQXNXAP2.js";
import "./chunk-JT54I3AY.js";
import "./chunk-TNTTCGVB.js";
import "./chunk-DC3QI5ZE.js";
import "./chunk-EGHLQERQ.js";
import "./chunk-FQ7L63IU.js";
import "./chunk-B6GJAETG.js";
import "./chunk-FC74MT6E.js";
import "./chunk-H2ENCYR3.js";
import "./chunk-SVHG5VY2.js";
import "./chunk-S47644HM.js";
import "./chunk-QXPN4D5D.js";
import "./chunk-DLM7WQKI.js";
import {
  a2 as a,
  e
} from "./chunk-7GTATSRF.js";
import "./chunk-MTJ2HM2W.js";
import "./chunk-PXVSWY3C.js";
import "./chunk-QLY5H3XF.js";
import "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import "./chunk-WHB7G7RI.js";
import "./chunk-DFKQJ226.js";

// node_modules/@arcgis/core/views/2d/layers/features/tileRenderers/support/HeatmapSource.js
var i = class {
  constructor() {
    this.gradient = null, this.height = 512, this.intensities = null, this.width = 512;
  }
  render(i2) {
    l(i2, 512, this.intensities, this.gradient, this.minDensity, this.maxDensity);
  }
};

// node_modules/@arcgis/core/views/2d/layers/features/tileRenderers/HeatmapTileRenderer.js
var o2 = class extends o {
  constructor(e2) {
    super(e2), this._intensityInfo = { minDensity: 0, maxDensity: 0 }, this.type = "heatmap", this.featuresView = { attributeView: { initialize: () => {
    }, requestUpdate: () => {
    } }, requestRender: () => {
    } }, this._container = new n(e2.tileInfoView);
  }
  createTile(e2) {
    const t = this._container.createTile(e2);
    return this.tileInfoView.getTileCoords(t.bitmap, e2), t.bitmap.resolution = this.tileInfoView.getTileResolution(e2), t;
  }
  onConfigUpdate() {
    const e2 = this.layer.renderer;
    if ("heatmap" === e2.type) {
      const { minDensity: t, maxDensity: r, colorStops: s } = e2;
      this._intensityInfo.minDensity = t, this._intensityInfo.maxDensity = r, this._gradient = u(s), this.tiles.forEach((e3) => {
        const i2 = e3.bitmap.source;
        i2 && (i2.minDensity = t, i2.maxDensity = r, i2.gradient = this._gradient, e3.bitmap.invalidateTexture());
      });
    }
  }
  hitTest() {
    return Promise.resolve([]);
  }
  install(e2) {
    e2.addChild(this._container);
  }
  uninstall(e2) {
    this._container.removeAllChildren(), e2.removeChild(this._container);
  }
  disposeTile(e2) {
    this._container.removeChild(e2), e2.destroy();
  }
  supportsRenderer(e2) {
    return e2 && "heatmap" === e2.type;
  }
  onTileData(e2) {
    const t = this.tiles.get(e2.tileKey);
    if (!t)
      return;
    const i2 = e2.intensityInfo, { minDensity: r, maxDensity: s } = this._intensityInfo, o3 = t.bitmap.source || new i();
    o3.intensities = i2 && i2.matrix || null, o3.minDensity = r, o3.maxDensity = s, o3.gradient = this._gradient, t.bitmap.source = o3, this._container.addChild(t), this._container.requestRender(), this.requestUpdate();
  }
  onTileError(e2) {
    console.error(e2);
  }
  lockGPUUploads() {
  }
  unlockGPUUploads() {
  }
  fetchResource(e2, t) {
    return console.error(e2), Promise.reject();
  }
};
o2 = e([a("esri.views.2d.layers.features.tileRenderers.HeatmapTileRenderer")], o2);
var a2 = o2;
export {
  a2 as default
};
//# sourceMappingURL=HeatmapTileRenderer-EBBUNQSP.js.map
