import {
  _
} from "./chunk-Y5U3GPYY.js";
import "./chunk-XFW76F64.js";
import {
  p
} from "./chunk-TXZADL6E.js";
import {
  n
} from "./chunk-72FH64H2.js";
import {
  t
} from "./chunk-XSWH32P3.js";
import {
  c as c2
} from "./chunk-MR6MDWDW.js";
import {
  O
} from "./chunk-TGWKHDFY.js";
import {
  b
} from "./chunk-RLEK6TWZ.js";
import "./chunk-A3YQWDU2.js";
import "./chunk-UBZEFQ76.js";
import "./chunk-D5KVII6M.js";
import "./chunk-RZNNSB7A.js";
import "./chunk-5Z6OHN6Z.js";
import "./chunk-TKZTELJQ.js";
import {
  c,
  f,
  v
} from "./chunk-OXPHYLAY.js";
import "./chunk-JKIHHWKC.js";
import "./chunk-NBVRAQMU.js";
import "./chunk-BLEGKDS6.js";
import "./chunk-BHKUW5DD.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-HNMSCBZJ.js";
import "./chunk-VTZGYKHD.js";
import {
  S2 as S,
  n as n2
} from "./chunk-3ZZKMNU2.js";
import "./chunk-SXUQWH7K.js";
import "./chunk-WAUZFAX7.js";
import "./chunk-3JPUCMWK.js";
import "./chunk-GCXFCVSM.js";
import "./chunk-CU2KO5NT.js";
import "./chunk-EXL23DF3.js";
import "./chunk-ECM7B2HV.js";
import "./chunk-L5JOPRWD.js";
import "./chunk-JYFMP3PO.js";
import "./chunk-CBAVHWPY.js";
import "./chunk-OJCBSPLX.js";
import "./chunk-EMRZKKP3.js";
import "./chunk-SQBJ6KPL.js";
import {
  U
} from "./chunk-MKMLHQNH.js";
import "./chunk-PHPHIDTF.js";
import {
  qt
} from "./chunk-P6SQPYDS.js";
import "./chunk-GWFG4NRK.js";
import "./chunk-YXFIF2O5.js";
import "./chunk-E4MAG7OK.js";
import "./chunk-YVQV6YXG.js";
import "./chunk-3KALZGFA.js";
import "./chunk-OJKTPYH5.js";
import "./chunk-PEP3ZFMY.js";
import "./chunk-3U7SS7RC.js";
import "./chunk-UHF3OUQV.js";
import "./chunk-6U5BQYRW.js";
import "./chunk-LUOENZ4F.js";
import "./chunk-QGRPG4XS.js";
import "./chunk-M73MMEC7.js";
import {
  G,
  w2
} from "./chunk-A5CTLI5A.js";
import "./chunk-WUBKNERF.js";
import {
  m,
  y as y2
} from "./chunk-VACYSSCT.js";
import {
  a as a2
} from "./chunk-4HXSKBAW.js";
import "./chunk-FFQG5TD2.js";
import "./chunk-DDRAFOUW.js";
import "./chunk-F4DUNBGT.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-GLDJLPWH.js";
import "./chunk-GMLVDTS4.js";
import {
  o
} from "./chunk-G7CHVXDR.js";
import "./chunk-OAZLVZFS.js";
import "./chunk-CPSZPA6H.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-Y54MR3BP.js";
import "./chunk-6VTYOWNK.js";
import "./chunk-JY6H6KI3.js";
import {
  w
} from "./chunk-TTCQP5LX.js";
import "./chunk-C2WY74GI.js";
import "./chunk-MCOYI7PX.js";
import {
  s
} from "./chunk-EL4OGCJC.js";
import "./chunk-XPATKIHO.js";
import "./chunk-MKHZ5X6F.js";
import {
  r
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/layers/GeoRSSLayer.js
var L = ["atom", "xml"];
var R = { base: a2, key: "type", typeMap: { "simple-line": m }, errorContext: "symbol" };
var k = { base: a2, key: "type", typeMap: { "picture-marker": n2, "simple-marker": y2 }, errorContext: "symbol" };
var _2 = { base: a2, key: "type", typeMap: { "simple-fill": S }, errorContext: "symbol" };
var w3 = class extends n(p(c2(_(t(O(b)))))) {
  constructor(...e2) {
    super(...e2), this.description = null, this.fullExtent = null, this.legendEnabled = true, this.lineSymbol = null, this.pointSymbol = null, this.polygonSymbol = null, this.operationalLayerType = "GeoRSS", this.url = null, this.type = "geo-rss";
  }
  normalizeCtorArgs(e2, o2) {
    return "string" == typeof e2 ? { url: e2, ...o2 } : e2;
  }
  readFeatureCollections(e2, o2) {
    return o2.featureCollection.layers.forEach((e3) => {
      var _a;
      const o3 = e3.layerDefinition.drawingInfo.renderer.symbol;
      o3 && "esriSFS" === o3.type && ((_a = o3.outline) == null ? void 0 : _a.style.includes("esriSFS")) && (o3.outline.style = "esriSLSSolid");
    }), o2.featureCollection.layers;
  }
  get hasPoints() {
    return this._hasGeometry("esriGeometryPoint");
  }
  get hasPolylines() {
    return this._hasGeometry("esriGeometryPolyline");
  }
  get hasPolygons() {
    return this._hasGeometry("esriGeometryPolygon");
  }
  get title() {
    const e2 = this._get("title");
    return e2 && "defaults" !== this.originOf("title") ? e2 : this.url ? qt(this.url, L) || "GeoRSS" : e2 || "";
  }
  set title(e2) {
    this._set("title", e2);
  }
  load(e2) {
    const o2 = r(e2) ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service", "Feature Service", "Feature Collection", "Scene Service"] }, e2).catch(w).then(() => this._fetchService(o2)).then((e3) => {
      this.read(e3, { origin: "service" });
    })), Promise.resolve(this);
  }
  async hasDataChanged() {
    const e2 = await this._fetchService();
    return this.read(e2, { origin: "service", ignoreDefaults: true }), true;
  }
  async _fetchService(e2) {
    const t2 = this.spatialReference, { data: s2 } = await U(s.geoRSSServiceUrl, { query: { url: this.url, refresh: !!this.loaded || void 0, outSR: G(t2) ? void 0 : t2.wkid ?? JSON.stringify(t2) }, signal: e2 });
    return s2;
  }
  _hasGeometry(e2) {
    var _a;
    return ((_a = this.featureCollections) == null ? void 0 : _a.some((o2) => {
      var _a2, _b;
      return ((_a2 = o2.featureSet) == null ? void 0 : _a2.geometryType) === e2 && ((_b = o2.featureSet.features) == null ? void 0 : _b.length) > 0;
    })) ?? false;
  }
};
e([y()], w3.prototype, "description", void 0), e([y()], w3.prototype, "featureCollections", void 0), e([o("service", "featureCollections", ["featureCollection.layers"])], w3.prototype, "readFeatureCollections", null), e([y({ type: w2, json: { name: "lookAtExtent" } })], w3.prototype, "fullExtent", void 0), e([y(v)], w3.prototype, "id", void 0), e([y(c)], w3.prototype, "legendEnabled", void 0), e([y({ types: R, json: { write: true } })], w3.prototype, "lineSymbol", void 0), e([y({ type: ["show", "hide"] })], w3.prototype, "listMode", void 0), e([y({ types: k, json: { write: true } })], w3.prototype, "pointSymbol", void 0), e([y({ types: _2, json: { write: true } })], w3.prototype, "polygonSymbol", void 0), e([y({ type: ["GeoRSS"] })], w3.prototype, "operationalLayerType", void 0), e([y(f)], w3.prototype, "url", void 0), e([y({ json: { origins: { service: { read: { source: "name", reader: (e2) => e2 || void 0 } } } } })], w3.prototype, "title", null), e([y({ readOnly: true, json: { read: false }, value: "geo-rss" })], w3.prototype, "type", void 0), w3 = e([a("esri.layers.GeoRSSLayer")], w3);
var F = w3;
export {
  F as default
};
//# sourceMappingURL=GeoRSSLayer-OR5WH766.js.map
