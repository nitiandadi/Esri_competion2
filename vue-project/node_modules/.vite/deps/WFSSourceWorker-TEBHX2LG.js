import {
  K
} from "./chunk-E6WEN2WK.js";
import "./chunk-2755SAL2.js";
import {
  I,
  T
} from "./chunk-L4NKCNNL.js";
import {
  m
} from "./chunk-PJ7FPXAZ.js";
import {
  g as g2
} from "./chunk-57LONGNP.js";
import {
  ee
} from "./chunk-NGYZN53J.js";
import "./chunk-K5SZG32J.js";
import "./chunk-FLFW4GNA.js";
import "./chunk-OGEJGMAT.js";
import "./chunk-PQDIOR7M.js";
import {
  f as f2,
  g
} from "./chunk-7BJCYBN2.js";
import "./chunk-JPJD3IXN.js";
import "./chunk-T5ZE4H5E.js";
import "./chunk-U6XTEYEL.js";
import "./chunk-OQAHVNAP.js";
import "./chunk-QDIJO3T2.js";
import "./chunk-53LE4Q7I.js";
import "./chunk-MK67573A.js";
import "./chunk-MLSUYO53.js";
import "./chunk-6WFGRBCZ.js";
import "./chunk-W7XI6AVS.js";
import "./chunk-IJT6XLR5.js";
import "./chunk-VOUOLBXG.js";
import "./chunk-KGJHWKNE.js";
import {
  ct,
  ut
} from "./chunk-X7NPMCZZ.js";
import "./chunk-CFTD44JM.js";
import "./chunk-MI7FJDLG.js";
import "./chunk-E4FSIE7C.js";
import "./chunk-6ZR5GOPR.js";
import "./chunk-IN3HJEU7.js";
import "./chunk-KQSNRPAM.js";
import {
  r as r2
} from "./chunk-RZLXFQKV.js";
import "./chunk-UBZEFQ76.js";
import "./chunk-D5KVII6M.js";
import "./chunk-G3ZCYHOR.js";
import {
  j as j2
} from "./chunk-BLEGKDS6.js";
import "./chunk-BHKUW5DD.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-HNMSCBZJ.js";
import "./chunk-P4V73ZOM.js";
import "./chunk-Y44VKGHM.js";
import "./chunk-OJCBSPLX.js";
import "./chunk-EMRZKKP3.js";
import "./chunk-MKMLHQNH.js";
import "./chunk-PHPHIDTF.js";
import "./chunk-P6SQPYDS.js";
import "./chunk-YXFIF2O5.js";
import "./chunk-E4MAG7OK.js";
import "./chunk-3KALZGFA.js";
import "./chunk-OJKTPYH5.js";
import "./chunk-FY3NCRRH.js";
import "./chunk-CIPSOFMY.js";
import "./chunk-6U5BQYRW.js";
import "./chunk-LUOENZ4F.js";
import "./chunk-QGRPG4XS.js";
import "./chunk-M73MMEC7.js";
import {
  E,
  c
} from "./chunk-A5CTLI5A.js";
import "./chunk-WUBKNERF.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-GLDJLPWH.js";
import "./chunk-GMLVDTS4.js";
import "./chunk-G7CHVXDR.js";
import "./chunk-OAZLVZFS.js";
import "./chunk-CPSZPA6H.js";
import "./chunk-Y54MR3BP.js";
import "./chunk-6VTYOWNK.js";
import "./chunk-JY6H6KI3.js";
import {
  f,
  j
} from "./chunk-TTCQP5LX.js";
import {
  s,
  s2
} from "./chunk-C2WY74GI.js";
import "./chunk-MCOYI7PX.js";
import "./chunk-EL4OGCJC.js";
import "./chunk-XPATKIHO.js";
import "./chunk-MKHZ5X6F.js";
import {
  e,
  r
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/layers/graphics/sources/WFSSourceWorker.js
var E2 = class {
  constructor() {
    this._queryEngine = null, this._customParameters = null, this._snapshotFeatures = async (e2) => {
      const { objectIdField: t } = this._queryEngine, r3 = await K(this._getFeatureUrl ?? "", this._featureType.typeName, this._getFeatureOutputFormat, { customParameters: this._customParameters, dateFields: this._queryEngine.fieldsIndex.dateFields.map((e3) => e3.name), signal: e2 });
      await T(r3), f(e2);
      const a = I(r3, { geometryType: this._queryEngine.geometryType, hasZ: false, objectIdField: t });
      if (!E(this._queryEngine.spatialReference, c))
        for (const i of a)
          r(i.geometry) && (i.geometry = ct(g(ut(i.geometry, this._queryEngine.geometryType, false, false), c, this._queryEngine.spatialReference)));
      let o = 1;
      for (const s3 of a) {
        const e3 = {};
        m(this._fieldsIndex, e3, s3.attributes, true), s3.attributes = e3, null == s3.attributes[t] && (s3.objectId = s3.attributes[t] = o++);
      }
      return a;
    };
  }
  destroy() {
    var _a;
    (_a = this._queryEngine) == null ? void 0 : _a.destroy(), this._queryEngine = null;
  }
  async load(e2, t) {
    const { getFeatureUrl: r3, getFeatureOutputFormat: s3, spatialReference: o, fields: n, geometryType: u, featureType: p, objectIdField: h, customParameters: c2 } = e2;
    this._featureType = p, this._customParameters = c2, this._getFeatureUrl = r3, this._getFeatureOutputFormat = s3, this._fieldsIndex = new r2(n), await this._checkProjection(o), f(t), this._queryEngine = new ee({ fields: n, geometryType: u, hasM: false, hasZ: false, objectIdField: h, spatialReference: o, timeInfo: null, featureStore: new g2({ geometryType: u, hasM: false, hasZ: false }) });
    const m2 = await this._snapshotFeatures(e(t.signal));
    return this._queryEngine.featureStore.addMany(m2), { extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async applyEdits() {
    throw new s2("wfs-source:editing-not-supported", "applyEdits() is not supported on WFSLayer");
  }
  async queryFeatures(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQuery(e2, t.signal);
  }
  async queryFeatureCount(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForCount(e2, t.signal);
  }
  async queryObjectIds(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForIds(e2, t.signal);
  }
  async queryExtent(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForExtent(e2, t.signal);
  }
  async querySnapping(e2, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForSnapping(e2, t.signal);
  }
  async refresh(s3) {
    var _a;
    return this._customParameters = s3, (_a = this._snapshotTask) == null ? void 0 : _a.abort(), this._snapshotTask = j2(this._snapshotFeatures), this._snapshotTask.promise.then((e2) => {
      this._queryEngine.featureStore.clear(), e2 && this._queryEngine.featureStore.addMany(e2);
    }, (e2) => {
      this._queryEngine.featureStore.clear(), j(e2) || s.getLogger("esri.layers.WFSLayer").error(new s2("wfs-layer:getfeature-error", "An error occurred during the GetFeature request", { error: e2 }));
    }), await this._waitSnapshotComplete(), { extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async _waitSnapshotComplete() {
    if (this._snapshotTask && !this._snapshotTask.finished) {
      try {
        await this._snapshotTask.promise;
      } catch {
      }
      return this._waitSnapshotComplete();
    }
  }
  async _checkProjection(e2) {
    try {
      await f2(c, e2);
    } catch {
      throw new s2("unsupported-projection", "Projection not supported", { spatialReference: e2 });
    }
  }
};
export {
  E2 as default
};
//# sourceMappingURL=WFSSourceWorker-TEBHX2LG.js.map
