import {
  a as a2
} from "./chunk-UIMO4FGN.js";
import {
  l as l2
} from "./chunk-NXJOIK2O.js";
import {
  o as o3
} from "./chunk-F4DUNBGT.js";
import {
  o as o2
} from "./chunk-E4M4B5ZQ.js";
import {
  r
} from "./chunk-JATK7CEQ.js";
import {
  o
} from "./chunk-74TXAD7S.js";
import {
  s
} from "./chunk-HIRLBWV3.js";
import {
  l
} from "./chunk-AFQAO5F4.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-OA5ES74L.js";
import {
  p
} from "./chunk-H32MMKAJ.js";

// node_modules/@arcgis/core/symbols/MarkerSymbol.js
var p2 = class extends a2 {
  constructor(t) {
    super(t), this.angle = 0, this.type = null, this.xoffset = 0, this.yoffset = 0, this.size = 9;
  }
  hash() {
    return `${this.type}.${this.angle}.${this.size}.${this.xoffset}.${this.yoffset}`;
  }
};
e([y({ type: Number, json: { read: (t) => t && -1 * t, write: (t, e3) => e3.angle = t && -1 * t } })], p2.prototype, "angle", void 0), e([y({ type: ["simple-marker", "picture-marker"], readOnly: true })], p2.prototype, "type", void 0), e([y({ type: Number, cast: o3, json: { write: true } })], p2.prototype, "xoffset", void 0), e([y({ type: Number, cast: o3, json: { write: true } })], p2.prototype, "yoffset", void 0), e([y({ type: Number, cast: (t) => "auto" === t ? t : o3(t), json: { write: true } })], p2.prototype, "size", void 0), p2 = e([a("esri.symbols.MarkerSymbol")], p2);
var i = p2;

// node_modules/@arcgis/core/symbols/LineSymbol.js
var i2 = class extends a2 {
  constructor(r2) {
    super(r2), this.type = "simple-line", this.width = 0.75;
  }
  hash() {
    return `${this.type}.${this.width}`;
  }
};
e([o2({ esriSLS: "simple-line" }, { readOnly: true })], i2.prototype, "type", void 0), e([y({ type: Number, cast: o3, json: { write: true } })], i2.prototype, "width", void 0), i2 = e([a("esri.symbols.LineSymbol")], i2);
var c = i2;

// node_modules/@arcgis/core/symbols/support/lineMarkers.js
var e2 = ["begin", "end", "begin-end"];
var n = ["arrow", "circle", "square", "diamond", "cross", "x"];

// node_modules/@arcgis/core/symbols/LineSymbolMarker.js
var n2;
var m = n2 = class extends l {
  constructor(r2) {
    super(r2), this.placement = "begin-end", this.type = "line-marker", this.style = "arrow";
  }
  writeStyle(r2, o4, e3, t) {
    o4[e3] = "web-map" === (t == null ? void 0 : t.origin) ? "arrow" : r2;
  }
  set color(r2) {
    this._set("color", r2);
  }
  readColor(r2) {
    return r2 && null != r2[0] ? [r2[0], r2[1], r2[2], r2[3] / 255] : r2;
  }
  writeColor(r2, o4, e3, t) {
    "web-map" === (t == null ? void 0 : t.origin) || (o4[e3] = r2);
  }
  clone() {
    return new n2({ color: p(this.color), placement: this.placement, style: this.style });
  }
  hash() {
    var _a;
    return `${this.placement}.${(_a = this.color) == null ? void 0 : _a.hash()}.${this.style}`;
  }
};
e([y({ type: ["begin", "end", "begin-end"], json: { write: true } })], m.prototype, "placement", void 0), e([o2({ "line-marker": "line-marker" }, { readOnly: true }), y({ json: { origins: { "web-map": { write: false } } } })], m.prototype, "type", void 0), e([y({ type: n })], m.prototype, "style", void 0), e([r("style")], m.prototype, "writeStyle", null), e([y({ type: l2, value: null, json: { write: { allowNull: true } } })], m.prototype, "color", null), e([o("color")], m.prototype, "readColor", null), e([r("color")], m.prototype, "writeColor", null), m = n2 = e([a("esri.symbols.LineSymbolMarker")], m);
var u = m;

// node_modules/@arcgis/core/symbols/SimpleLineSymbol.js
var p3;
var h = new s({ esriSLSSolid: "solid", esriSLSDash: "dash", esriSLSDot: "dot", esriSLSDashDot: "dash-dot", esriSLSDashDotDot: "long-dash-dot-dot", esriSLSNull: "none", esriSLSInsideFrame: "inside-frame", esriSLSShortDash: "short-dash", esriSLSShortDot: "short-dot", esriSLSShortDashDot: "short-dash-dot", esriSLSShortDashDotDot: "short-dash-dot-dot", esriSLSLongDash: "long-dash", esriSLSLongDashDot: "long-dash-dot" });
var d = p3 = class extends c {
  constructor(...r2) {
    super(...r2), this.type = "simple-line", this.style = "solid", this.cap = "round", this.join = "round", this.marker = null, this.miterLimit = 2;
  }
  normalizeCtorArgs(r2, o4, e3, s2, i3, n3) {
    if (r2 && "string" != typeof r2)
      return r2;
    const l3 = {};
    return null != r2 && (l3.style = r2), null != o4 && (l3.color = o4), null != e3 && (l3.width = o3(e3)), null != s2 && (l3.cap = s2), null != i3 && (l3.join = i3), null != n3 && (l3.miterLimit = o3(n3)), l3;
  }
  clone() {
    var _a;
    return new p3({ color: p(this.color), style: this.style, width: this.width, cap: this.cap, join: this.join, miterLimit: this.miterLimit, marker: (_a = this.marker) == null ? void 0 : _a.clone() });
  }
  hash() {
    var _a, _b;
    return `${super.hash()}.${(_a = this.color) == null ? void 0 : _a.hash()}.${this.style}.${this.cap}.${this.join}.${this.miterLimit}.${(_b = this.marker) == null ? void 0 : _b.hash()}`;
  }
};
e([o2({ esriSLS: "simple-line" }, { readOnly: true })], d.prototype, "type", void 0), e([y({ type: h.apiValues, json: { read: h.read, write: h.write } })], d.prototype, "style", void 0), e([y({ type: ["butt", "round", "square"], json: { write: { overridePolicy: (r2, o4, e3) => ({ enabled: "round" !== r2 && (null == e3 || null == e3.origin) }) } } })], d.prototype, "cap", void 0), e([y({ type: ["miter", "round", "bevel"], json: { write: { overridePolicy: (r2, o4, e3) => ({ enabled: "round" !== r2 && (null == e3 || null == e3.origin) }) } } })], d.prototype, "join", void 0), e([y({ types: { key: "type", base: null, defaultKeyValue: "line-marker", typeMap: { "line-marker": u } }, json: { write: true, origins: { "web-scene": { write: false } } } })], d.prototype, "marker", void 0), e([y({ type: Number, json: { read: false, write: false } })], d.prototype, "miterLimit", void 0), d = p3 = e([a("esri.symbols.SimpleLineSymbol")], d);
var m2 = d;

// node_modules/@arcgis/core/symbols/SimpleMarkerSymbol.js
var h2;
var m3 = new s({ esriSMSCircle: "circle", esriSMSSquare: "square", esriSMSCross: "cross", esriSMSX: "x", esriSMSDiamond: "diamond", esriSMSTriangle: "triangle", esriSMSPath: "path" });
var u2 = h2 = class extends i {
  constructor(...e3) {
    super(...e3), this.color = new l2([255, 255, 255, 0.25]), this.type = "simple-marker", this.size = 12, this.style = "circle", this.outline = new m2();
  }
  normalizeCtorArgs(e3, o4, r2, t) {
    if (e3 && "string" != typeof e3)
      return e3;
    const i3 = {};
    return e3 && (i3.style = e3), null != o4 && (i3.size = o3(o4)), r2 && (i3.outline = r2), t && (i3.color = t), i3;
  }
  writeColor(e3, o4) {
    e3 && "x" !== this.style && "cross" !== this.style && (o4.color = e3.toJSON()), null === e3 && (o4.color = null);
  }
  set path(e3) {
    this.style = "path", this._set("path", e3);
  }
  clone() {
    return new h2({ angle: this.angle, color: p(this.color), outline: this.outline && this.outline.clone(), path: this.path, size: this.size, style: this.style, xoffset: this.xoffset, yoffset: this.yoffset });
  }
  hash() {
    var _a;
    return `${super.hash()}.${this.color && this.color.hash()}.${this.path}.${this.style}.${(_a = this.outline) == null ? void 0 : _a.hash()}`;
  }
};
e([y()], u2.prototype, "color", void 0), e([r("color")], u2.prototype, "writeColor", null), e([o2({ esriSMS: "simple-marker" }, { readOnly: true })], u2.prototype, "type", void 0), e([y()], u2.prototype, "size", void 0), e([y({ type: m3.apiValues, json: { read: m3.read, write: m3.write } })], u2.prototype, "style", void 0), e([y({ type: String, json: { write: true } })], u2.prototype, "path", null), e([y({ types: { key: "type", base: null, defaultKeyValue: "simple-line", typeMap: { "simple-line": m2 } }, json: { default: null, write: true } })], u2.prototype, "outline", void 0), u2 = h2 = e([a("esri.symbols.SimpleMarkerSymbol")], u2);
var y2 = u2;

export {
  e2 as e,
  n,
  m2 as m,
  i,
  y2 as y
};
//# sourceMappingURL=chunk-FSB7TIRN.js.map
