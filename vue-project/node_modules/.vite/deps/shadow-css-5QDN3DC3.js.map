{
  "version": 3,
  "sources": ["../../@stencil/core/internal/client/shadow-css.js"],
  "sourcesContent": ["/*\r\n Stencil Client Platform v2.20.0 | MIT Licensed | https://stenciljs.com\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n *\r\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\r\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\r\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\r\n */\r\nconst safeSelector = (selector) => {\r\n    const placeholders = [];\r\n    let index = 0;\r\n    // Replaces attribute selectors with placeholders.\r\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\r\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\r\n        const replaceBy = `__ph-${index}__`;\r\n        placeholders.push(keep);\r\n        index++;\r\n        return replaceBy;\r\n    });\r\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\r\n    // WS and \"+\" would otherwise be interpreted as selector separators.\r\n    const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\r\n        const replaceBy = `__ph-${index}__`;\r\n        placeholders.push(exp);\r\n        index++;\r\n        return pseudo + replaceBy;\r\n    });\r\n    const ss = {\r\n        content,\r\n        placeholders,\r\n    };\r\n    return ss;\r\n};\r\nconst restoreSafeSelector = (placeholders, content) => {\r\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\r\n};\r\nconst _polyfillHost = '-shadowcsshost';\r\nconst _polyfillSlotted = '-shadowcssslotted';\r\n// note: :host-context pre-processed to -shadowcsshostcontext.\r\nconst _polyfillHostContext = '-shadowcsscontext';\r\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\r\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\r\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\r\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\r\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\r\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\r\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\r\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\r\nconst _polyfillHostRe = /-shadowcsshost/gim;\r\nconst _colonHostRe = /:host/gim;\r\nconst _colonSlottedRe = /::slotted/gim;\r\nconst _colonHostContextRe = /:host-context/gim;\r\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\r\nconst stripComments = (input) => {\r\n    return input.replace(_commentRe, '');\r\n};\r\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\r\nconst extractCommentsWithHash = (input) => {\r\n    return input.match(_commentWithHashRe) || [];\r\n};\r\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\r\nconst _curlyRe = /([{}])/g;\r\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\r\nconst OPEN_CURLY = '{';\r\nconst CLOSE_CURLY = '}';\r\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\r\nconst processRules = (input, ruleCallback) => {\r\n    const inputWithEscapedBlocks = escapeBlocks(input);\r\n    let nextBlockIndex = 0;\r\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\r\n        const selector = m[2];\r\n        let content = '';\r\n        let suffix = m[4];\r\n        let contentPrefix = '';\r\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\r\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\r\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\r\n            contentPrefix = '{';\r\n        }\r\n        const cssRule = {\r\n            selector,\r\n            content,\r\n        };\r\n        const rule = ruleCallback(cssRule);\r\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\r\n    });\r\n};\r\nconst escapeBlocks = (input) => {\r\n    const inputParts = input.split(_curlyRe);\r\n    const resultParts = [];\r\n    const escapedBlocks = [];\r\n    let bracketCount = 0;\r\n    let currentBlockParts = [];\r\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\r\n        const part = inputParts[partIndex];\r\n        if (part === CLOSE_CURLY) {\r\n            bracketCount--;\r\n        }\r\n        if (bracketCount > 0) {\r\n            currentBlockParts.push(part);\r\n        }\r\n        else {\r\n            if (currentBlockParts.length > 0) {\r\n                escapedBlocks.push(currentBlockParts.join(''));\r\n                resultParts.push(BLOCK_PLACEHOLDER);\r\n                currentBlockParts = [];\r\n            }\r\n            resultParts.push(part);\r\n        }\r\n        if (part === OPEN_CURLY) {\r\n            bracketCount++;\r\n        }\r\n    }\r\n    if (currentBlockParts.length > 0) {\r\n        escapedBlocks.push(currentBlockParts.join(''));\r\n        resultParts.push(BLOCK_PLACEHOLDER);\r\n    }\r\n    const strEscapedBlocks = {\r\n        escapedString: resultParts.join(''),\r\n        blocks: escapedBlocks,\r\n    };\r\n    return strEscapedBlocks;\r\n};\r\nconst insertPolyfillHostInCssText = (selector) => {\r\n    selector = selector\r\n        .replace(_colonHostContextRe, _polyfillHostContext)\r\n        .replace(_colonHostRe, _polyfillHost)\r\n        .replace(_colonSlottedRe, _polyfillSlotted);\r\n    return selector;\r\n};\r\nconst convertColonRule = (cssText, regExp, partReplacer) => {\r\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\r\n    return cssText.replace(regExp, (...m) => {\r\n        if (m[2]) {\r\n            const parts = m[2].split(',');\r\n            const r = [];\r\n            for (let i = 0; i < parts.length; i++) {\r\n                const p = parts[i].trim();\r\n                if (!p)\r\n                    break;\r\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\r\n            }\r\n            return r.join(',');\r\n        }\r\n        else {\r\n            return _polyfillHostNoCombinator + m[3];\r\n        }\r\n    });\r\n};\r\nconst colonHostPartReplacer = (host, part, suffix) => {\r\n    return host + part.replace(_polyfillHost, '') + suffix;\r\n};\r\nconst convertColonHost = (cssText) => {\r\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\r\n};\r\nconst colonHostContextPartReplacer = (host, part, suffix) => {\r\n    if (part.indexOf(_polyfillHost) > -1) {\r\n        return colonHostPartReplacer(host, part, suffix);\r\n    }\r\n    else {\r\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\r\n    }\r\n};\r\nconst convertColonSlotted = (cssText, slotScopeId) => {\r\n    const slotClass = '.' + slotScopeId + ' > ';\r\n    const selectors = [];\r\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\r\n        if (m[2]) {\r\n            const compound = m[2].trim();\r\n            const suffix = m[3];\r\n            const slottedSelector = slotClass + compound + suffix;\r\n            let prefixSelector = '';\r\n            for (let i = m[4] - 1; i >= 0; i--) {\r\n                const char = m[5][i];\r\n                if (char === '}' || char === ',') {\r\n                    break;\r\n                }\r\n                prefixSelector = char + prefixSelector;\r\n            }\r\n            const orgSelector = prefixSelector + slottedSelector;\r\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\r\n            if (orgSelector.trim() !== addedSelector.trim()) {\r\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\r\n                selectors.push({\r\n                    orgSelector,\r\n                    updatedSelector,\r\n                });\r\n            }\r\n            return slottedSelector;\r\n        }\r\n        else {\r\n            return _polyfillHostNoCombinator + m[3];\r\n        }\r\n    });\r\n    return {\r\n        selectors,\r\n        cssText,\r\n    };\r\n};\r\nconst convertColonHostContext = (cssText) => {\r\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\r\n};\r\nconst convertShadowDOMSelectors = (cssText) => {\r\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\r\n};\r\nconst makeScopeMatcher = (scopeSelector) => {\r\n    const lre = /\\[/g;\r\n    const rre = /\\]/g;\r\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\r\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\r\n};\r\nconst selectorNeedsScoping = (selector, scopeSelector) => {\r\n    const re = makeScopeMatcher(scopeSelector);\r\n    return !re.test(selector);\r\n};\r\nconst injectScopingSelector = (selector, scopingSelector) => {\r\n    return selector.replace(_selectorPartsRe, (_, before = '', _colonGroup, colon = '', after = '') => {\r\n        return before + scopingSelector + colon + after;\r\n    });\r\n};\r\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\r\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\r\n    _polyfillHostRe.lastIndex = 0;\r\n    if (_polyfillHostRe.test(selector)) {\r\n        const replaceBy = `.${hostSelector}`;\r\n        return selector\r\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy))\r\n            .replace(_polyfillHostRe, replaceBy + ' ');\r\n    }\r\n    return scopeSelector + ' ' + selector;\r\n};\r\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\r\n    const isRe = /\\[is=([^\\]]*)\\]/g;\r\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\r\n    const className = '.' + scopeSelector;\r\n    const _scopeSelectorPart = (p) => {\r\n        let scopedP = p.trim();\r\n        if (!scopedP) {\r\n            return '';\r\n        }\r\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\r\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\r\n        }\r\n        else {\r\n            // remove :host since it should be unnecessary\r\n            const t = p.replace(_polyfillHostRe, '');\r\n            if (t.length > 0) {\r\n                scopedP = injectScopingSelector(t, className);\r\n            }\r\n        }\r\n        return scopedP;\r\n    };\r\n    const safeContent = safeSelector(selector);\r\n    selector = safeContent.content;\r\n    let scopedSelector = '';\r\n    let startIndex = 0;\r\n    let res;\r\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\r\n    // If a selector appears before :host it should not be shimmed as it\r\n    // matches on ancestor elements and not on elements in the host's shadow\r\n    // `:host-context(div)` is transformed to\r\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\r\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\r\n    // Historically `component-tag:host` was matching the component so we also want to preserve\r\n    // this behavior to avoid breaking legacy apps (it should not match).\r\n    // The behavior should be:\r\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\r\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\r\n    //   `:host-context(tag)`)\r\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\r\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\r\n    let shouldScope = !hasHost;\r\n    while ((res = sep.exec(selector)) !== null) {\r\n        const separator = res[1];\r\n        const part = selector.slice(startIndex, res.index).trim();\r\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\r\n        scopedSelector += `${scopedPart} ${separator} `;\r\n        startIndex = sep.lastIndex;\r\n    }\r\n    const part = selector.substring(startIndex);\r\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\r\n    // replace the placeholders with their original values\r\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\r\n};\r\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\r\n    return selector\r\n        .split(',')\r\n        .map((shallowPart) => {\r\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\r\n            return shallowPart.trim();\r\n        }\r\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\r\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\r\n        }\r\n        else {\r\n            return shallowPart.trim();\r\n        }\r\n    })\r\n        .join(', ');\r\n};\r\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\r\n    return processRules(cssText, (rule) => {\r\n        let selector = rule.selector;\r\n        let content = rule.content;\r\n        if (rule.selector[0] !== '@') {\r\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\r\n        }\r\n        else if (rule.selector.startsWith('@media') ||\r\n            rule.selector.startsWith('@supports') ||\r\n            rule.selector.startsWith('@page') ||\r\n            rule.selector.startsWith('@document')) {\r\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\r\n        }\r\n        const cssRule = {\r\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\r\n            content,\r\n        };\r\n        return cssRule;\r\n    });\r\n};\r\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\r\n    cssText = insertPolyfillHostInCssText(cssText);\r\n    cssText = convertColonHost(cssText);\r\n    cssText = convertColonHostContext(cssText);\r\n    const slotted = convertColonSlotted(cssText, slotScopeId);\r\n    cssText = slotted.cssText;\r\n    cssText = convertShadowDOMSelectors(cssText);\r\n    if (scopeId) {\r\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\r\n    }\r\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\r\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\r\n    return {\r\n        cssText: cssText.trim(),\r\n        slottedSelectors: slotted.selectors,\r\n    };\r\n};\r\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\r\n    const hostScopeId = scopeId + '-h';\r\n    const slotScopeId = scopeId + '-s';\r\n    const commentsWithHash = extractCommentsWithHash(cssText);\r\n    cssText = stripComments(cssText);\r\n    const orgSelectors = [];\r\n    if (commentOriginalSelector) {\r\n        const processCommentedSelector = (rule) => {\r\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\r\n            const comment = `/*!@${rule.selector}*/`;\r\n            orgSelectors.push({ placeholder, comment });\r\n            rule.selector = placeholder + rule.selector;\r\n            return rule;\r\n        };\r\n        cssText = processRules(cssText, (rule) => {\r\n            if (rule.selector[0] !== '@') {\r\n                return processCommentedSelector(rule);\r\n            }\r\n            else if (rule.selector.startsWith('@media') ||\r\n                rule.selector.startsWith('@supports') ||\r\n                rule.selector.startsWith('@page') ||\r\n                rule.selector.startsWith('@document')) {\r\n                rule.content = processRules(rule.content, processCommentedSelector);\r\n                return rule;\r\n            }\r\n            return rule;\r\n        });\r\n    }\r\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\r\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\r\n    if (commentOriginalSelector) {\r\n        orgSelectors.forEach(({ placeholder, comment }) => {\r\n            cssText = cssText.replace(placeholder, comment);\r\n        });\r\n    }\r\n    scoped.slottedSelectors.forEach((slottedSelector) => {\r\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\r\n    });\r\n    return cssText;\r\n};\r\n\r\nexport { scopeCss };\r\n"],
  "mappings": "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",
  "names": ["scopeSelector", "selector", "part"]
}
