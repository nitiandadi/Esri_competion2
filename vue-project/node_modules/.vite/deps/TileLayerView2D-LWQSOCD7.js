import {
  n as n2,
  o,
  t
} from "./chunk-XZNZE36Q.js";
import {
  P,
  S,
  a as a2
} from "./chunk-DGJ73GQH.js";
import {
  n
} from "./chunk-VOASWX25.js";
import "./chunk-4VZJOJXW.js";
import "./chunk-BVS3NILK.js";
import "./chunk-ZK7UMXRA.js";
import "./chunk-RLJ53M5D.js";
import "./chunk-RHRVMFYS.js";
import {
  i as i2
} from "./chunk-X2II7CAR.js";
import "./chunk-ZIWT55SL.js";
import {
  ae
} from "./chunk-YVWMHTJA.js";
import "./chunk-C47NUFM3.js";
import "./chunk-OXDZTKIK.js";
import "./chunk-JOI7RZGI.js";
import "./chunk-C6SENRFO.js";
import "./chunk-G3IR6EOM.js";
import "./chunk-6CHYNNZQ.js";
import "./chunk-OFMRQG54.js";
import "./chunk-W4RTPEF7.js";
import {
  f,
  u
} from "./chunk-2PEMPHHT.js";
import "./chunk-KK7UXBV2.js";
import "./chunk-BLQJFVYJ.js";
import "./chunk-7XVHXPW5.js";
import "./chunk-BBZRQ4H6.js";
import "./chunk-7FAY4Z4C.js";
import "./chunk-J6VS6FXY.js";
import "./chunk-3H5NJQM5.js";
import "./chunk-LLOJIW4K.js";
import "./chunk-QX7RONCE.js";
import "./chunk-AZEN5UFW.js";
import "./chunk-5BAT5OP4.js";
import "./chunk-VV2CU7S7.js";
import "./chunk-FYA3X5C5.js";
import "./chunk-B3A3THPO.js";
import "./chunk-DKDRIIV4.js";
import "./chunk-5SYMUP5B.js";
import "./chunk-R3MRUDAD.js";
import "./chunk-R6XKQWZ7.js";
import "./chunk-N7UECSSE.js";
import "./chunk-LYEEAWXU.js";
import "./chunk-6SCM5LCL.js";
import "./chunk-223SE4BY.js";
import "./chunk-63WRUMNA.js";
import "./chunk-O2JKCGK6.js";
import "./chunk-WAPZ634R.js";
import "./chunk-6YWY2BIN.js";
import "./chunk-7F3YO5N7.js";
import "./chunk-AEPSMJZJ.js";
import "./chunk-2B52LX6T.js";
import "./chunk-53FPJYCC.js";
import "./chunk-MSPZCZRZ.js";
import "./chunk-RURSJOSG.js";
import "./chunk-L225EF7W.js";
import "./chunk-UR7T2PHF.js";
import "./chunk-7FRYP2QO.js";
import "./chunk-23AC3IC7.js";
import "./chunk-GKD7ZY5C.js";
import "./chunk-ITU2WGYR.js";
import "./chunk-7OXAXJPF.js";
import "./chunk-UHA44FM7.js";
import "./chunk-FSOPJKVB.js";
import "./chunk-L5V3AZEL.js";
import "./chunk-TQAOUM4T.js";
import "./chunk-TFWV44LH.js";
import "./chunk-RRNRSHX3.js";
import "./chunk-IEBU4QQL.js";
import "./chunk-4M3AMTD4.js";
import "./chunk-MXRYGWSY.js";
import "./chunk-R4BFOFGL.js";
import "./chunk-KVNI5TTW.js";
import "./chunk-U34LDFXK.js";
import "./chunk-L6KWUR6B.js";
import "./chunk-OEIEPNC6.js";
import "./chunk-75NMPQ6B.js";
import "./chunk-LEI2H7AZ.js";
import "./chunk-3JEZ4NOL.js";
import "./chunk-ZTTXR2P2.js";
import "./chunk-BXXB2APG.js";
import "./chunk-VG55DFRV.js";
import "./chunk-WQ64YIYM.js";
import {
  r
} from "./chunk-NXYKN3ZF.js";
import {
  y as y2
} from "./chunk-5MAK42GD.js";
import "./chunk-NWZTRS6O.js";
import "./chunk-77E52HT5.js";
import "./chunk-KYJD6PVR.js";
import {
  h
} from "./chunk-RITPHS54.js";
import "./chunk-D2UI2BQN.js";
import "./chunk-5MV6T7MH.js";
import "./chunk-U3IHIDSP.js";
import {
  e as e2
} from "./chunk-34FJTA26.js";
import {
  i
} from "./chunk-6EQJNBJO.js";
import "./chunk-DUEDINK5.js";
import "./chunk-MZ267CZB.js";
import "./chunk-3DBV4JBL.js";
import "./chunk-UTGANG7C.js";
import "./chunk-CJ2YD4VU.js";
import "./chunk-26N6FACI.js";
import "./chunk-PRXITTX7.js";
import "./chunk-JGIZLXNQ.js";
import "./chunk-JY5TSDLZ.js";
import "./chunk-PXPM76YN.js";
import "./chunk-CP43AUSV.js";
import "./chunk-G63AQLOB.js";
import "./chunk-M5GIVS5Q.js";
import "./chunk-XXDTEEJA.js";
import "./chunk-OPQ632ST.js";
import "./chunk-U6GC73UT.js";
import "./chunk-VSOGWTK5.js";
import "./chunk-QS7JATZ7.js";
import "./chunk-RSGOERDK.js";
import "./chunk-WVLEGBEW.js";
import "./chunk-KIR65PYA.js";
import "./chunk-N5RJDK35.js";
import "./chunk-DP34NAR5.js";
import "./chunk-OP7TT6MW.js";
import "./chunk-AJY7W6KP.js";
import "./chunk-G65A4RB3.js";
import "./chunk-MN4E5VOA.js";
import "./chunk-ST7DNJJS.js";
import "./chunk-2CREJO6O.js";
import "./chunk-RVPWRWBW.js";
import "./chunk-EPJSBV4J.js";
import "./chunk-SLPOHICA.js";
import "./chunk-REIXEATJ.js";
import "./chunk-7YGY53FV.js";
import "./chunk-XP5MC636.js";
import "./chunk-ZSE573CF.js";
import "./chunk-IGOXVXHJ.js";
import "./chunk-6YBCJ6DZ.js";
import "./chunk-4NXG3DDL.js";
import "./chunk-H5PGGDUF.js";
import "./chunk-XS2IGMN6.js";
import "./chunk-YEBACBC7.js";
import "./chunk-UKGDL4FF.js";
import "./chunk-ZV33SC25.js";
import "./chunk-ONJXOTQ7.js";
import "./chunk-4VX5PWQN.js";
import "./chunk-K55CPJL4.js";
import "./chunk-HM62IZSE.js";
import "./chunk-2OJTWNQ6.js";
import "./chunk-QKWZO2WR.js";
import "./chunk-GEQPBGLO.js";
import {
  l
} from "./chunk-2UAIGHM2.js";
import "./chunk-CCAF47ZU.js";
import "./chunk-CCNZLEW5.js";
import "./chunk-FGXNBIU5.js";
import "./chunk-KGIL42MH.js";
import "./chunk-A3HP4ESO.js";
import "./chunk-Z5QBM3A6.js";
import "./chunk-MRALC5D7.js";
import "./chunk-CYZ4XVBT.js";
import "./chunk-LVRAFE6T.js";
import "./chunk-XF2RZJFH.js";
import "./chunk-HRFBINZY.js";
import "./chunk-WAN4YZSB.js";
import "./chunk-EALW5DHT.js";
import "./chunk-EAKUFEPO.js";
import "./chunk-EQMIUIFH.js";
import "./chunk-KK57CPHE.js";
import "./chunk-7MMTDLQQ.js";
import "./chunk-TJWUU7NW.js";
import "./chunk-Q62HELM6.js";
import "./chunk-BQXNXAP2.js";
import "./chunk-BHQVXYUV.js";
import "./chunk-DKH5QOVM.js";
import "./chunk-JT54I3AY.js";
import "./chunk-DC3QI5ZE.js";
import "./chunk-TNTTCGVB.js";
import "./chunk-EGHLQERQ.js";
import "./chunk-6CVKQGVU.js";
import "./chunk-2HZTCGYV.js";
import "./chunk-Z3YY72G4.js";
import "./chunk-M3KO43BW.js";
import "./chunk-LRFOTULU.js";
import "./chunk-HPP5IXU5.js";
import "./chunk-UADQEL54.js";
import "./chunk-4D6JGHEF.js";
import "./chunk-CT6YILLI.js";
import "./chunk-LJAKPJDJ.js";
import "./chunk-CCWBAM3L.js";
import "./chunk-TKWZACTO.js";
import "./chunk-6K5VVUVI.js";
import "./chunk-DOQX2NNO.js";
import "./chunk-MJFFZ3MM.js";
import "./chunk-2ZX6RZTI.js";
import "./chunk-5Q7F7FJ6.js";
import {
  E
} from "./chunk-XFNXUG2G.js";
import "./chunk-27R7KBOL.js";
import "./chunk-RDTHWDIE.js";
import "./chunk-EAFLFTSD.js";
import "./chunk-DOVXDFWE.js";
import "./chunk-M4BAPJ3L.js";
import "./chunk-QXPN4D5D.js";
import "./chunk-KGIB6IYW.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-3PPVODAA.js";
import "./chunk-MTJ2HM2W.js";
import "./chunk-PXVSWY3C.js";
import {
  j
} from "./chunk-WTKFW2TD.js";
import {
  s
} from "./chunk-UG2OEDEE.js";
import "./chunk-HSFMVUPO.js";
import "./chunk-IOCWNUEO.js";
import "./chunk-PR6SXADK.js";
import "./chunk-MGJMBJDY.js";
import "./chunk-WHB7G7RI.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/views/2d/layers/TileLayerView2D.js
var T = [0, 0];
var v = class extends i2(t(f(u))) {
  constructor() {
    super(...arguments), this._fetchQueue = null, this._highlightGraphics = new i(), this._highlightView = null, this._popupHighlightHelper = null, this._tileStrategy = null, this.layer = null;
  }
  get resampling() {
    return !("resampling" in this.layer) || false !== this.layer.resampling;
  }
  update(e3) {
    var _a;
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume(), (_a = this._highlightView) == null ? void 0 : _a.processUpdate(e3);
  }
  attach() {
    const e3 = "tileServers" in this.layer ? this.layer.tileServers : null;
    if (this._tileInfoView = new h(this.layer.tileInfo, this.layer.fullExtent), this._fetchQueue = new y2({ tileInfoView: this._tileInfoView, concurrency: e3 && 10 * e3.length || 10, process: (e4, i3) => this.fetchTile(e4, i3) }), this._tileStrategy = new r({ cachePolicy: "keep", resampling: this.resampling, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), P(this, this.layer)) {
      const e4 = this._highlightView = new ae({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new n(this.view.featuresTilingScheme), defaultPointSymbolEnabled: false });
      this.container.addChild(this._highlightView.container), this._popupHighlightHelper = new S({ createFetchPopupFeaturesQueryGeometry: (e5, i3) => a2(e5, i3, this.view), highlightGraphics: this._highlightGraphics, highlightGraphicUpdated: (i3, t2) => {
        e4.graphicUpdateHandler({ graphic: i3, property: t2 });
      }, layerView: this, updatingHandles: this.updatingHandles });
    }
    this.requestUpdate(), this.addAttachHandles(l(() => this.resampling, () => {
      this.doRefresh();
    })), super.attach();
  }
  detach() {
    var _a;
    super.detach(), this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), (_a = this._popupHighlightHelper) == null ? void 0 : _a.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = this._popupHighlightHelper = null;
  }
  async fetchPopupFeatures(e3, i3) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.fetchPopupFeatures(e3, i3) : [];
  }
  highlight(e3) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.highlight(e3) : { remove() {
    } };
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e3) {
    var _a;
    return E((_a = this.layer.tileInfo) == null ? void 0 : _a.spatialReference, e3);
  }
  async doRefresh() {
    !this.attached || this.updateRequested || this.suspended || (this._fetchQueue.reset(), this._tileStrategy.tiles.forEach((e3) => this._enqueueTileFetch(e3)));
  }
  isUpdating() {
    var _a;
    return ((_a = this._fetchQueue) == null ? void 0 : _a.updating) ?? false;
  }
  acquireTile(e3) {
    const i3 = this._bitmapView.createTile(e3), t2 = i3.bitmap;
    return [t2.x, t2.y] = this._tileInfoView.getTileCoords(T, i3.key), t2.resolution = this._tileInfoView.getTileResolution(i3.key), [t2.width, t2.height] = this._tileInfoView.tileInfo.size, this._enqueueTileFetch(i3), this._bitmapView.addChild(i3), this.requestUpdate(), i3;
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  async fetchTile(e3, i3 = {}) {
    const r2 = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: s2, resamplingLevel: o2 = 0 } = i3;
    if (!r2)
      try {
        return await this._fetchImage(e3, s2);
      } catch (a3) {
        if (!j(a3) && !this.resampling)
          return o(this._tileInfoView.tileInfo.size);
        if (o2 < 3) {
          const t2 = this._tileInfoView.getTileParentId(e3.id);
          if (t2) {
            const r3 = new e2(t2), s3 = await this.fetchTile(r3, { ...i3, resamplingLevel: o2 + 1 });
            return n2(this._tileInfoView, s3, r3, e3);
          }
        }
        throw a3;
      }
    const l2 = new e2(0, 0, 0, 0);
    let h2;
    try {
      if (await r2.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, l2, { signal: s2 }), l2.level !== e3.level && !this.resampling)
        return o(this._tileInfoView.tileInfo.size);
      h2 = await this._fetchImage(l2, s2);
    } catch (a3) {
      if (j(a3))
        throw a3;
      h2 = await this._fetchImage(e3, s2);
    }
    return this.resampling ? n2(this._tileInfoView, h2, l2, e3) : h2;
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const i3 = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = i3, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (r2) {
        j(r2) || s.getLogger(this.declaredClass).error(r2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, i3) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: i3 });
  }
};
e([y()], v.prototype, "_fetchQueue", void 0), e([y()], v.prototype, "resampling", null), v = e([a("esri.views.2d.layers.TileLayerView2D")], v);
var I = v;
export {
  I as default
};
//# sourceMappingURL=TileLayerView2D-LWQSOCD7.js.map
