import {
  k3 as k
} from "./chunk-TXWV7DPW.js";
import "./chunk-37RNA4EB.js";
import "./chunk-XVNZE2S7.js";
import "./chunk-HSVY6GEC.js";
import "./chunk-4BQ7IEED.js";
import "./chunk-LIRZ5PLW.js";
import "./chunk-QEKBHUVW.js";
import "./chunk-DLJVYYNK.js";
import {
  h
} from "./chunk-Y2A35C5L.js";
import "./chunk-M2DTCG2D.js";
import "./chunk-AVTBKAM2.js";
import "./chunk-E4FSIE7C.js";
import "./chunk-HWGER6NN.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-ZXEHLMMH.js";
import "./chunk-5W2WWLX7.js";
import "./chunk-33RBBVRO.js";
import "./chunk-JU2WP2RZ.js";
import "./chunk-NI6ENKKR.js";
import "./chunk-6XDV3BWZ.js";
import "./chunk-QLGPYDHY.js";
import "./chunk-ERJGVLTB.js";
import "./chunk-T5VSOT6T.js";
import "./chunk-OHZM2VYI.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-JATK7CEQ.js";
import "./chunk-74TXAD7S.js";
import "./chunk-HIRLBWV3.js";
import "./chunk-AFQAO5F4.js";
import "./chunk-OA5ES74L.js";
import "./chunk-6VTYOWNK.js";
import "./chunk-RLEMMDH4.js";
import "./chunk-6ZUWLK7F.js";
import "./chunk-YVZY5LDV.js";
import {
  has
} from "./chunk-H32MMKAJ.js";
import "./chunk-MKHZ5X6F.js";
import {
  r
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/geometry/support/meshUtils/ElevationSamplerWorker.js
var n = class {
  async createIndex(r2, n2) {
    const o2 = new Array();
    if (!r2.vertexAttributes || !r2.vertexAttributes.position)
      return new h();
    const s = this._createMeshData(r2), a = r(n2) ? await n2.invoke("createIndexThread", s, { transferList: o2 }) : this.createIndexThread(s).result;
    return this._createPooledRBush().fromJSON(a);
  }
  createIndexThread(e) {
    const t = new Float64Array(e.position), r2 = this._createPooledRBush();
    return e.components ? this._createIndexComponentsThread(r2, t, e.components.map((e2) => new Uint32Array(e2))) : this._createIndexAllThread(r2, t);
  }
  _createIndexAllThread(e, t) {
    const r2 = new Array(t.length / 9);
    let n2 = 0;
    for (let s = 0; s < t.length; s += 9)
      r2[n2++] = o(t, s + 0, s + 3, s + 6);
    return e.load(r2), { result: e.toJSON() };
  }
  _createIndexComponentsThread(e, t, r2) {
    let n2 = 0;
    for (const o2 of r2)
      n2 += o2.length / 3;
    const s = new Array(n2);
    let a = 0;
    for (const i of r2)
      for (let e2 = 0; e2 < i.length; e2 += 3)
        s[a++] = o(t, 3 * i[e2 + 0], 3 * i[e2 + 1], 3 * i[e2 + 2]);
    return e.load(s), { result: e.toJSON() };
  }
  _createMeshData(e) {
    const t = (e.transform ? k({ position: e.vertexAttributes.position, normal: null, tangent: null }, e.transform, e.spatialReference).position : e.vertexAttributes.position).buffer;
    return !e.components || e.components.some((e2) => !e2.faces) ? { position: t } : { position: t, components: e.components.map((e2) => e2.faces) };
  }
  _createPooledRBush() {
    return new h(9, has("esri-csp-restrictions") ? (e) => e : [".minX", ".minY", ".maxX", ".maxY"]);
  }
};
function o(e, t, r2, n2) {
  return { minX: Math.min(e[t + 0], e[r2 + 0], e[n2 + 0]), maxX: Math.max(e[t + 0], e[r2 + 0], e[n2 + 0]), minY: Math.min(e[t + 1], e[r2 + 1], e[n2 + 1]), maxY: Math.max(e[t + 1], e[r2 + 1], e[n2 + 1]), p0: [e[t + 0], e[t + 1], e[t + 2]], p1: [e[r2 + 0], e[r2 + 1], e[r2 + 2]], p2: [e[n2 + 0], e[n2 + 1], e[n2 + 2]] };
}
export {
  n as default
};
//# sourceMappingURL=ElevationSamplerWorker-5H5NMR3W.js.map
