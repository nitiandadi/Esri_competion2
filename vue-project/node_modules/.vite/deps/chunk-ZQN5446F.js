import {
  C,
  b,
  i
} from "./chunk-YFO2JKEL.js";
import {
  c
} from "./chunk-QKNKBGUI.js";
import {
  U
} from "./chunk-MKMLHQNH.js";
import {
  n4 as n
} from "./chunk-Y54MR3BP.js";
import {
  f,
  j
} from "./chunk-TTCQP5LX.js";
import {
  s2 as s
} from "./chunk-C2WY74GI.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/animatedFormats/apng.js
async function r(r3, n4) {
  const i3 = i(r3);
  if (i3 instanceof Error)
    throw i3;
  await i3.createImages(), f(n4);
  const { frames: a3, width: s2, height: p } = i3, c3 = document.createElement("canvas");
  c3.width = s2, c3.height = p;
  const l = c3.getContext("2d", { willReadFrequently: true }), m = [], h2 = [];
  for (const t of a3) {
    h2.push(n(t.delay || 100));
    const e = t.imageElement;
    0 === t.blendOp ? l.globalCompositeOperation = "copy" : l.globalCompositeOperation = "source-over";
    const r4 = 2 === t.disposeOp ? l.getImageData(t.left, t.top, t.width, t.height) : void 0;
    l.drawImage(e, t.left, t.top);
    const n5 = l.getImageData(0, 0, s2, p);
    m.push(n5), 0 === t.disposeOp || (1 === t.disposeOp ? l.clearRect(t.left, t.top, t.width, t.height) : 2 === t.disposeOp && l.putImageData(r4, t.left, t.top));
  }
  return { frameDurations: h2, getFrame: (t) => m[t], width: s2, height: p };
}
var n2 = [137, 80, 78, 71, 13, 10, 26, 10];
function i2(t) {
  const e = new Uint8Array(t);
  return !n2.some((t2, o3) => t2 !== e[o3]);
}
function a(t) {
  if (!i2(t))
    return false;
  const e = new DataView(t), o3 = new Uint8Array(t);
  let r3, n4 = 8;
  do {
    const t2 = e.getUint32(n4);
    if (r3 = String.fromCharCode.apply(String, Array.prototype.slice.call(o3.subarray(n4 + 4, n4 + 8))), "acTL" === r3)
      return true;
    n4 += 12 + t2;
  } while ("IEND" !== r3 && n4 < o3.length);
  return false;
}

// node_modules/@arcgis/core/views/2d/engine/webgl/animatedFormats/gif.js
async function n3(n4, a3) {
  const r3 = C(n4), o3 = b(r3, true), { width: c3, height: d } = r3.lsd, m = document.createElement("canvas");
  m.width = c3, m.height = d;
  const u2 = m.getContext("2d", { willReadFrequently: true }), f2 = [], h2 = [];
  for (const i3 of o3) {
    h2.push(n(i3.delay || 100));
    const s2 = new ImageData(i3.patch, i3.dims.width, i3.dims.height), n5 = c(s2), a4 = 3 === i3.disposalType ? u2.getImageData(i3.dims.left, i3.dims.top, i3.dims.width, i3.dims.height) : void 0;
    u2.drawImage(n5, i3.dims.left, i3.dims.top);
    const r4 = u2.getImageData(0, 0, c3, d);
    f2.push(r4), 1 === i3.disposalType || (2 === i3.disposalType ? u2.clearRect(i3.dims.left, i3.dims.top, i3.dims.width, i3.dims.height) : 3 === i3.disposalType && u2.putImageData(a4, i3.dims.left, i3.dims.top));
  }
  return { frameDurations: h2, getFrame: (t) => f2[t], width: c3, height: d };
}
var a2 = [71, 73, 70];
function r2(t) {
  const e = new Uint8Array(t);
  return !a2.some((t2, i3) => t2 !== e[i3]);
}
function o(t) {
  if (!r2(t))
    return false;
  const e = new DataView(t), i3 = e.getUint8(10);
  let s2 = 13 + (128 & i3 ? 3 * 2 ** (1 + (7 & i3)) : 0), n4 = 0, a3 = false;
  for (; !a3; ) {
    switch (e.getUint8(s2++)) {
      case 33:
        if (!o3())
          return false;
        break;
      case 44:
        c3();
        break;
      case 59:
        a3 = true;
        break;
      default:
        return false;
    }
    if (n4 > 1)
      return true;
  }
  function o3() {
    switch (e.getUint8(s2++)) {
      case 249:
        d();
        break;
      case 1:
        m();
        break;
      case 254:
        u2();
        break;
      case 255:
        f2();
        break;
      default:
        return false;
    }
    return true;
  }
  function c3() {
    n4++, s2 += 8;
    const t2 = e.getUint8(s2++);
    s2 += 128 & t2 ? 3 * 2 ** (1 + (7 & t2)) : 0, s2++, h2();
  }
  function d() {
    s2++, s2 += 4, h2();
  }
  function m() {
    n4++, s2++, s2 += 12, h2();
  }
  function u2() {
    h2();
  }
  function f2() {
    s2++, s2 += 8, s2 += 3, h2();
  }
  function h2() {
    let t2;
    for (; t2 = e.getUint8(s2++); )
      s2 += t2;
  }
  return false;
}

// node_modules/@arcgis/core/symbols/cim/CIMResourceManager.js
var o2 = class {
  constructor() {
    this._resourceMap = /* @__PURE__ */ new Map(), this._inFlightResourceMap = /* @__PURE__ */ new Map(), this.geometryEngine = null, this.geometryEnginePromise = null;
  }
  destroy() {
    this._inFlightResourceMap.clear(), this._resourceMap.clear();
  }
  getResource(e) {
    return this._resourceMap.get(e) ?? null;
  }
  async fetchResource(e, t) {
    const r3 = this._resourceMap.get(e);
    if (r3)
      return { width: r3.width, height: r3.height };
    let i3 = this._inFlightResourceMap.get(e);
    return i3 ? i3.then((e2) => ({ width: e2.width, height: e2.height })) : (i3 = c2(e, t), this._inFlightResourceMap.set(e, i3), i3.then((t2) => (this._inFlightResourceMap.delete(e), this._resourceMap.set(e, t2), { width: t2.width, height: t2.height }), () => ({ width: 0, height: 0 })));
  }
  deleteResource(e) {
    this._inFlightResourceMap.delete(e), this._resourceMap.delete(e);
  }
};
async function h(i3, s2) {
  const n4 = window.URL.createObjectURL(i3);
  try {
    const { data: t } = await U(n4, { ...s2, responseType: "image" });
    return t;
  } catch (a3) {
    if (!j(a3))
      throw new s("mapview-invalid-resource", `Could not fetch requested resource at ${n4}`);
    throw a3;
  } finally {
    window.URL.revokeObjectURL(n4);
  }
}
async function c2(e, t) {
  const { arrayBuffer: r3, mediaType: o3 } = await u(e, t), c3 = "image/png" === o3;
  if ("image/gif" === o3 && o(r3))
    return n3(r3);
  if (c3 && a(r3))
    return r(r3, t);
  return h(new Blob([r3], { type: o3 }), t);
}
async function u(i3, s2) {
  let n4;
  const a3 = ";base64,";
  if (i3.includes(a3)) {
    const e = i3.indexOf(a3), t = i3.indexOf(a3) + a3.length, r3 = i3.substring(t), s3 = atob(r3), o3 = new Uint8Array(s3.length);
    for (let i4 = 0; i4 < s3.length; i4++)
      o3[i4] = s3.charCodeAt(i4);
    n4 = { arrayBuffer: o3.buffer, mediaType: i3.substring(0, e).replace("data:", "") };
  } else
    try {
      const t = await U(i3, { responseType: "array-buffer", ...s2 }), r3 = t.data;
      n4 = { arrayBuffer: r3, mediaType: t.getHeader("Content-Type") };
    } catch (o3) {
      if (!j(o3))
        throw new s("mapview-invalid-resource", `Could not fetch requested resource at ${i3}`);
    }
  return n4;
}

export {
  o2 as o
};
//# sourceMappingURL=chunk-ZQN5446F.js.map
