import {
  E,
  Z,
  y as y2
} from "./chunk-IEFYL2IS.js";
import "./chunk-OGX6J3DJ.js";
import "./chunk-A33TFRHV.js";
import "./chunk-3MGDBME5.js";
import {
  s as s3
} from "./chunk-ABJJZKPH.js";
import "./chunk-4UCOZDWC.js";
import {
  e as e2
} from "./chunk-V5EOPCGF.js";
import "./chunk-3MAEJ4CR.js";
import "./chunk-CTDAE47L.js";
import "./chunk-XCZVGB7V.js";
import "./chunk-GK4XSQTX.js";
import "./chunk-LT2MTVPF.js";
import "./chunk-3F26JL34.js";
import "./chunk-KEA4MCOH.js";
import "./chunk-PSKRKTRX.js";
import "./chunk-G5KRBGFN.js";
import "./chunk-V6QYNDMP.js";
import "./chunk-UZM66DAH.js";
import "./chunk-CFTD44JM.js";
import "./chunk-MI7FJDLG.js";
import "./chunk-JDPKCYHU.js";
import {
  l
} from "./chunk-ITPL42M7.js";
import "./chunk-55MPB7OZ.js";
import "./chunk-BDRIBQHS.js";
import "./chunk-POASDJDE.js";
import "./chunk-I472ON7U.js";
import "./chunk-UQVFVW24.js";
import "./chunk-PKRRI2EQ.js";
import {
  i
} from "./chunk-Z4V4JOQU.js";
import {
  p as p2
} from "./chunk-2HL3WCZQ.js";
import "./chunk-KXH42XSQ.js";
import "./chunk-KQT37XTK.js";
import "./chunk-ARRABRN2.js";
import "./chunk-XKQGIVQO.js";
import {
  o as o2
} from "./chunk-Y26PAPAL.js";
import "./chunk-TQCDA7Z6.js";
import "./chunk-TDFTAVQL.js";
import {
  _
} from "./chunk-VRZTCZFJ.js";
import {
  p
} from "./chunk-AZFJJ5Y2.js";
import {
  n
} from "./chunk-EJKIE4MZ.js";
import "./chunk-YZ3HZMEM.js";
import "./chunk-5XBZ477A.js";
import {
  t
} from "./chunk-YUXNJDFN.js";
import "./chunk-TKZTELJQ.js";
import {
  c
} from "./chunk-CPJE5ZZA.js";
import {
  f as f2
} from "./chunk-LJFFMEVT.js";
import "./chunk-5IWWLTWU.js";
import {
  O
} from "./chunk-74KT22JL.js";
import "./chunk-BQHZXXFC.js";
import {
  b
} from "./chunk-4JB2KWLF.js";
import "./chunk-3MAMOMOP.js";
import "./chunk-YUDZNCBK.js";
import "./chunk-QPSL5BDS.js";
import {
  d,
  g,
  m
} from "./chunk-37HBRPHL.js";
import "./chunk-AIOICOJJ.js";
import "./chunk-7WIVOZQ6.js";
import "./chunk-OXCMSIKI.js";
import "./chunk-HWGER6NN.js";
import "./chunk-FI2SN5P7.js";
import "./chunk-ZXEHLMMH.js";
import "./chunk-BHKUW5DD.js";
import {
  a as a2
} from "./chunk-F6Y6UABE.js";
import "./chunk-5W2WWLX7.js";
import "./chunk-U6PCZE74.js";
import "./chunk-WLWGIFGY.js";
import "./chunk-IZJW67TO.js";
import "./chunk-Q4UXP7RG.js";
import "./chunk-JZSNGIOH.js";
import "./chunk-EXHPOUUQ.js";
import "./chunk-6PNW7TCI.js";
import "./chunk-6UZRMITW.js";
import "./chunk-HSDJ4PR2.js";
import "./chunk-QP5ZWBKN.js";
import "./chunk-QAGMOCSO.js";
import "./chunk-EPZLAQP3.js";
import "./chunk-VSUGA5AN.js";
import "./chunk-E3JHIVZP.js";
import "./chunk-3ACAMBZX.js";
import "./chunk-G3A2XEXX.js";
import "./chunk-JKBONAYS.js";
import "./chunk-YSJ4W32U.js";
import "./chunk-3EIJOCWD.js";
import "./chunk-HRIBADXS.js";
import "./chunk-CSFUQCFV.js";
import "./chunk-ZUIHAM2A.js";
import "./chunk-SABBLK7S.js";
import "./chunk-2G4WAYFD.js";
import "./chunk-PK5IA5PH.js";
import "./chunk-7FGYV4GW.js";
import "./chunk-CXHYHUY6.js";
import "./chunk-CXBJMCKT.js";
import "./chunk-ULOJUU6K.js";
import "./chunk-3CXPBSW5.js";
import "./chunk-PLL74BYO.js";
import "./chunk-AMV7VELH.js";
import "./chunk-UZTIVDTR.js";
import "./chunk-33RBBVRO.js";
import "./chunk-VWOAL3VX.js";
import "./chunk-II3EAW7L.js";
import {
  U
} from "./chunk-JU2WP2RZ.js";
import "./chunk-NI6ENKKR.js";
import {
  A,
  F,
  L
} from "./chunk-6XDV3BWZ.js";
import "./chunk-CH2BQDQT.js";
import "./chunk-OTDDRQS2.js";
import "./chunk-W3UIP6CW.js";
import "./chunk-CHJGFW3N.js";
import "./chunk-25GQOVW6.js";
import "./chunk-QLGPYDHY.js";
import "./chunk-IMKS3PQX.js";
import "./chunk-5WYME2YP.js";
import "./chunk-PEP3ZFMY.js";
import "./chunk-FZCZQIVS.js";
import "./chunk-JYX5X6UR.js";
import "./chunk-MQUNEV3K.js";
import "./chunk-WVICJPEU.js";
import "./chunk-TZBBKXOW.js";
import "./chunk-VOSZ2G24.js";
import "./chunk-YMGINT43.js";
import "./chunk-2WLZX6A7.js";
import "./chunk-M7CMZTD6.js";
import "./chunk-ERJGVLTB.js";
import {
  f2 as f
} from "./chunk-T5VSOT6T.js";
import {
  s as s2
} from "./chunk-OHZM2VYI.js";
import "./chunk-FSB7TIRN.js";
import "./chunk-UIMO4FGN.js";
import "./chunk-NXJOIK2O.js";
import "./chunk-DDRAFOUW.js";
import "./chunk-F4DUNBGT.js";
import "./chunk-BF3T2CWA.js";
import "./chunk-PTCP7EIR.js";
import "./chunk-Z4G4Y7TU.js";
import "./chunk-4TEGWGCF.js";
import "./chunk-E4M4B5ZQ.js";
import {
  r as r2
} from "./chunk-JATK7CEQ.js";
import {
  o
} from "./chunk-74TXAD7S.js";
import "./chunk-HIRLBWV3.js";
import "./chunk-AFQAO5F4.js";
import {
  a2 as a,
  e,
  y3 as y
} from "./chunk-OA5ES74L.js";
import "./chunk-6VTYOWNK.js";
import "./chunk-RLEMMDH4.js";
import {
  w
} from "./chunk-6ZUWLK7F.js";
import {
  s3 as s
} from "./chunk-YVZY5LDV.js";
import "./chunk-H32MMKAJ.js";
import "./chunk-MKHZ5X6F.js";
import {
  r
} from "./chunk-HVCAHUYB.js";
import "./chunk-4EOJPDL2.js";

// node_modules/@arcgis/core/layers/TileLayer.js
var B = ["Canvas/World_Dark_Gray_Base", "Canvas/World_Dark_Gray_Reference", "Canvas/World_Light_Gray_Base", "Canvas/World_Light_Gray_Reference", "Elevation/World_Hillshade", "Elevation/World_Hillshade_Dark", "Ocean/World_Ocean_Base", "Ocean/World_Ocean_Reference", "Ocean_Basemap", "Reference/World_Boundaries_and_Places", "Reference/World_Boundaries_and_Places_Alternate", "Reference/World_Transportation", "World_Imagery", "World_Street_Map", "World_Topo_Map"];
var C = class extends n(E(t(c(_(s3(y2(p2(O(a2(p(i(o2(b))))))))))))) {
  constructor(...e3) {
    super(...e3), this.listMode = "show", this.isReference = null, this.operationalLayerType = "ArcGISTiledMapServiceLayer", this.resampling = true, this.sourceJSON = null, this.spatialReference = null, this.path = null, this.sublayers = null, this.type = "tile", this.url = null;
  }
  normalizeCtorArgs(e3, r3) {
    return "string" == typeof e3 ? { url: e3, ...r3 } : e3;
  }
  load(e3) {
    const r3 = r(e3) ? e3.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e3).catch(w).then(() => this._fetchService(r3))), Promise.resolve(this);
  }
  get attributionDataUrl() {
    var _a;
    const e3 = (_a = this.parsedUrl) == null ? void 0 : _a.path.toLowerCase();
    return e3 ? this._getDefaultAttribution(this._getMapName(e3)) : null;
  }
  readSpatialReference(e3, r3) {
    return (e3 = e3 || r3.tileInfo && r3.tileInfo.spatialReference) && f.fromJSON(e3);
  }
  writeSublayers(e3, r3, t2, s4) {
    if (!this.loaded || !e3)
      return;
    const i2 = e3.slice().reverse().flatten(({ sublayers: e4 }) => e4 && e4.toArray().reverse()).toArray(), o3 = [], a3 = { writeSublayerStructure: false, ...s4 };
    i2.forEach((e4) => {
      const r4 = e4.write({}, a3);
      o3.push(r4);
    });
    o3.some((e4) => Object.keys(e4).length > 1) && (r3.layers = o3);
  }
  get tileServers() {
    var _a;
    return this._getDefaultTileServers((_a = this.parsedUrl) == null ? void 0 : _a.path);
  }
  castTileServers(e3) {
    return Array.isArray(e3) ? e3.map((e4) => L(e4).path) : null;
  }
  fetchTile(e3, t2, s4, i2 = {}) {
    const { signal: o3 } = i2, a3 = this.getTileUrl(e3, t2, s4), l2 = { responseType: "image", signal: o3, query: { ...this.refreshParameters } };
    return U(a3, l2).then((e4) => e4.data);
  }
  async fetchImageBitmapTile(e3, t2, s4, i2 = {}) {
    const { signal: o3 } = i2, a3 = this.getTileUrl(e3, t2, s4), l2 = { responseType: "blob", signal: o3, query: { ...this.refreshParameters } }, { data: n2 } = await U(a3, l2);
    return e2(n2, a3);
  }
  getTileUrl(e3, r3, t2) {
    var _a, _b;
    const s4 = !this.tilemapCache && this.supportsBlankTile, i2 = A({ ...(_a = this.parsedUrl) == null ? void 0 : _a.query, blankTile: !s4 && null, ...this.customParameters, token: this.apiKey }), o3 = this.tileServers;
    return `${o3 && o3.length ? o3[r3 % o3.length] : (_b = this.parsedUrl) == null ? void 0 : _b.path}/tile/${e3}/${r3}/${t2}${i2 ? "?" + i2 : ""}`;
  }
  loadAll() {
    return l(this, (e3) => {
      e3(this.allSublayers);
    });
  }
  _fetchService(e3) {
    return new Promise((s4, i2) => {
      if (this.sourceJSON) {
        if (null != this.sourceJSON.bandCount && null != this.sourceJSON.pixelSizeX)
          throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
        return void s4({ data: this.sourceJSON });
      }
      if (!this.parsedUrl)
        throw new s("tile-layer:undefined-url", "layer's url is not defined");
      const a3 = d(this.parsedUrl.path);
      if (r(a3) && "ImageServer" === a3.serverType)
        throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
      U(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, responseType: "json", signal: e3 }).then(s4, i2);
    }).then((r3) => {
      let t2 = this.url;
      if (r3.ssl && (t2 = this.url = t2.replace(/^http:/i, "https:")), this.sourceJSON = r3.data, this.read(r3.data, { origin: "service", url: this.parsedUrl }), 10.1 === this.version && !g(t2))
        return this._fetchServerVersion(t2, e3).then((e4) => {
          this.read({ currentVersion: e4 });
        }).catch(() => {
        });
    });
  }
  _fetchServerVersion(e3, s4) {
    if (!m(e3))
      return Promise.reject();
    const i2 = e3.replace(/(.*\/rest)\/.*/i, "$1") + "/info";
    return U(i2, { query: { f: "json", ...this.customParameters, token: this.apiKey }, responseType: "json", signal: s4 }).then((e4) => {
      if (e4.data && e4.data.currentVersion)
        return e4.data.currentVersion;
      throw new s("tile-layer:version-not-available");
    });
  }
  _getMapName(e3) {
    const r3 = e3.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);
    return r3 ? r3[2] : void 0;
  }
  _getDefaultAttribution(e3) {
    if (null == e3)
      return null;
    let r3;
    e3 = e3.toLowerCase();
    for (let t2 = 0, s4 = B.length; t2 < s4; t2++)
      if (r3 = B[t2], r3.toLowerCase().includes(e3))
        return F("//static.arcgis.com/attribution/" + r3);
    return null;
  }
  _getDefaultTileServers(e3) {
    if (null == e3)
      return [];
    const r3 = -1 !== e3.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i), t2 = -1 !== e3.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);
    return r3 || t2 ? [e3, e3.replace(r3 ? /server\.arcgisonline/i : /services\.arcgisonline/i, r3 ? "services.arcgisonline" : "server.arcgisonline")] : [];
  }
  get hasOverriddenFetchTile() {
    return !this.fetchTile.__isDefault__;
  }
};
e([y({ readOnly: true })], C.prototype, "attributionDataUrl", null), e([y({ type: ["show", "hide", "hide-children"] })], C.prototype, "listMode", void 0), e([y({ json: { read: true, write: true } })], C.prototype, "blendMode", void 0), e([y({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], C.prototype, "isReference", void 0), e([y({ readOnly: true, type: ["ArcGISTiledMapServiceLayer"] })], C.prototype, "operationalLayerType", void 0), e([y({ type: Boolean })], C.prototype, "resampling", void 0), e([y()], C.prototype, "sourceJSON", void 0), e([y({ type: f })], C.prototype, "spatialReference", void 0), e([o("spatialReference", ["spatialReference", "tileInfo"])], C.prototype, "readSpatialReference", null), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], C.prototype, "path", void 0), e([y({ readOnly: true })], C.prototype, "sublayers", void 0), e([r2("sublayers", { layers: { type: [Z] } })], C.prototype, "writeSublayers", null), e([y({ json: { read: false, write: false } })], C.prototype, "popupEnabled", void 0), e([y()], C.prototype, "tileServers", null), e([s2("tileServers")], C.prototype, "castTileServers", null), e([y({ readOnly: true, json: { read: false } })], C.prototype, "type", void 0), e([y(f2)], C.prototype, "url", void 0), C = e([a("esri.layers.TileLayer")], C), C.prototype.fetchTile.__isDefault__ = true;
var D = C;
export {
  D as default
};
//# sourceMappingURL=TileLayer-BCR2LT4B.js.map
