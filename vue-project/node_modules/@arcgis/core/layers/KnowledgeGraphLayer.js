/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import i from"../core/Collection.js";import t from"../core/Error.js";import o from"../core/Logger.js";import{property as a}from"../core/accessorSupport/decorators/property.js";import"../core/accessorSupport/ensureType.js";import"../core/arrayUtils.js";import{subclass as n}from"../core/accessorSupport/decorators/subclass.js";import s from"./Layer.js";import{KnowledgeGraphLayerDataManager as r}from"./knowledgeGraph/KnowledgeGraphLayerDataManager.js";import p from"./knowledgeGraph/KnowledgeGraphSubLayer.js";import{BlendLayer as l}from"./mixins/BlendLayer.js";import{ScaleRangeLayer as d}from"./mixins/ScaleRangeLayer.js";import{fetchKnowledgeGraph as h}from"../rest/knowledgeGraphService.js";import y from"../rest/knowledgeGraph/EntityType.js";import m from"../rest/knowledgeGraph/RelationshipType.js";let c=class extends(l(d(s))){constructor(e){super(e),this.layers=new i,this.sublayerIdsCache=new Map,this.tables=new i,this.type="knowledge-graph",this._originalInclusionList=e.inclusionModeDefinition}normalizeCtorArgs(e){return{url:e.url,title:e.title}}_initializeLayerProperties(e){const i=new Set,a=new Map;let n=[],s=[];if(e.inclusionModeDefinition&&(!e.inclusionModeDefinition.namedTypeDefinitions||e.inclusionModeDefinition.namedTypeDefinitions.size<1))throw new t("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");e.inclusionModeDefinition?.generateAllSublayers?(n=e.knowledgeGraph.dataModel.entityTypes?e.knowledgeGraph.dataModel.entityTypes:[],s=e.knowledgeGraph.dataModel.relationshipTypes?e.knowledgeGraph.dataModel.relationshipTypes:[]):e.inclusionModeDefinition?.namedTypeDefinitions&&e.inclusionModeDefinition?.namedTypeDefinitions.size>0?(e.knowledgeGraph.dataModel.entityTypes?.forEach((e=>{e.name&&a.set(e.name,e)})),e.knowledgeGraph.dataModel.relationshipTypes?.forEach((e=>{e.name&&a.set(e.name,e)})),e.inclusionModeDefinition?.namedTypeDefinitions.forEach(((t,r)=>{if(!a.get(r))return o.getLogger(this.declaredClass).warn(`A named type, ${r}, was in the inclusion list that wasn't in the data model and will be removed`),void e.inclusionModeDefinition?.namedTypeDefinitions.delete(r);a.get(r)instanceof m||"strictOrigin"in a.get(r)?i.has(r)||(i.add(r),s.push(a.get(r))):a.get(r)instanceof y||"properties"in a.get(r)?i.has(r)||(i.add(r),n.push(a.get(r))):(o.getLogger(this.declaredClass).warn(`A named type, ${r}, was in the inclusion list that wasn't properly modeled and will be removed`),e.inclusionModeDefinition?.namedTypeDefinitions.delete(r))}))):(n=e.knowledgeGraph.dataModel.entityTypes?e.knowledgeGraph.dataModel.entityTypes:[],s=e.knowledgeGraph.dataModel.relationshipTypes?e.knowledgeGraph.dataModel.relationshipTypes:[]);const p=new r({knowledgeGraph:e.knowledgeGraph,inclusionModeDefinition:e.inclusionModeDefinition});this.knowledgeGraph=e.knowledgeGraph,this.memberEntityTypes=n,this.memberRelationshipTypes=s,this.dataManager=p}load(){return this.addResolvingPromise(h(this.url).then((e=>{this._initializeLayerProperties({knowledgeGraph:e,inclusionModeDefinition:this._originalInclusionList}),this.loadLayerAssumingLocalCache()}))),Promise.resolve(this)}loadLayerAssumingLocalCache(){this.memberEntityTypes.forEach((e=>{const i=new p({objectType:e,parentCompositeLayer:this,graphType:"entity",title:e.name});i.geometryType?this.layers.push(i):this.tables.push(i),this.dataManager.sublayerCaches.has(e.name)||this.dataManager.sublayerCaches.set(e.name,new Map)})),this.memberRelationshipTypes.forEach((e=>{const i=new p({objectType:e,parentCompositeLayer:this,graphType:"relationship",title:e.name});i.geometryType?this.layers.push(i):this.tables.push(i),this.dataManager.sublayerCaches.has(e.name)||this.dataManager.sublayerCaches.set(e.name,new Map)})),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach(((e,i)=>{e.members?.forEach((e=>{this.sublayerIdsCache.has(i)?this.sublayerIdsCache.get(i)?.push(e.id):this.sublayerIdsCache.set(i,[e.id])}))})),Array.from(this.sublayerIdsCache.values()).forEach((e=>e.sort()))}};e([a()],c.prototype,"dataManager",void 0),e([a()],c.prototype,"knowledgeGraph",void 0),e([a()],c.prototype,"layers",void 0),e([a()],c.prototype,"memberEntityTypes",void 0),e([a()],c.prototype,"memberRelationshipTypes",void 0),e([a()],c.prototype,"sublayerIdsCache",void 0),e([a()],c.prototype,"tables",void 0),e([a({json:{read:!1}})],c.prototype,"type",void 0),c=e([n("esri.layers.KnowledgeGraphLayer")],c);const g=c;export{g as default};
