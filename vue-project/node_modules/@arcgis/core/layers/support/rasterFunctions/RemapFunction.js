/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import{NUMBER_MAX_FLOAT32 as e}from"../../../core/mathUtils.js";import{isSome as s,isNone as n}from"../../../core/maybe.js";import{property as o}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/arrayUtils.js";import{subclass as a}from"../../../core/accessorSupport/decorators/subclass.js";import{getPixelValueRange as r}from"../rasterFormats/pixelRangeUtils.js";import u from"./BaseRasterFunction.js";import{createRemapLUT as i,MAX_MAP_SIZE_GPU as l,lookupPixels as p,lookupBandValues as c,remap as m}from"./pixelUtils.js";import g from"./RemapFunctionArguments.js";let h=class extends u{constructor(){super(...arguments),this.functionName="Remap",this.functionArguments=null,this.rasterArgumentNames=["raster"],this.lookup=null}_bindSourceRasters(){const t=this.sourceRasterInfos[0].clone(),{pixelType:e}=t;this.outputPixelType=this._getOutputPixelType(e),t.pixelType=this.outputPixelType,t.colormap=null,t.histograms=null,t.bandCount=1,t.attributeTable=null;const{statistics:n}=t,{allowUnmatched:o,outputValues:a,inputRanges:r,noDataRanges:u,isLastInputRangeInclusive:p}=this.functionArguments;if(s(n)&&n.length&&a?.length)if(o){const e=Math.min.apply(null,[...a,n[0].min]),s=Math.max.apply(null,[...a,n[0].max]);t.statistics=[{...n[0],min:e,max:s}]}else{let e=a[0],s=e;for(let t=0;t<a.length;t++)e=e>a[t]?a[t]:e,s=s>a[t]?s:a[t];t.statistics=[{...n[0],min:e,max:s}]}this.rasterInfo=t,this.lookup=o?null:i({srcPixelType:e,inputRanges:r,outputValues:a,noDataRanges:u,allowUnmatched:o,isLastInputRangeInclusive:p,outputPixelType:this.outputPixelType});return{success:!0,supportsGPU:(!a||a.length<=l)&&(!u||u.length<=l)}}_processPixels(t){const e=t.pixelBlocks?.[0];if(n(e))return null;const{lookup:o,outputPixelType:a}=this;if(o){const t=p(e,{lut:[o.lut],offset:o.offset,outputPixelType:a});return s(t)&&o.mask&&(t.mask=c(e.pixels[0],e.mask,o.mask,o.offset,"u8")),t}const{inputRanges:r,outputValues:u,noDataRanges:i,allowUnmatched:l,isLastInputRangeInclusive:g}=this.functionArguments;return m(e,{inputRanges:r,outputValues:u,noDataRanges:i,outputPixelType:a,allowUnmatched:l,isLastInputRangeInclusive:g})}_getWebGLParameters(){const{allowUnmatched:t,inputRanges:s,outputValues:n,noDataRanges:o,isLastInputRangeInclusive:a}=this.functionArguments,u=new Float32Array(3*l),i=1e-5,p=n.length;if(s?.length){let t=0,o=0;for(let r=0;r<u.length;r+=3)u[r]=s[t++]??e-1,u[r+1]=s[t++]??e,u[r+2]=n[o++]??0,o<=p&&(r>0&&(u[r]-=i),(o<p||!a)&&(u[r+1]-=i))}const c=new Float32Array(2*l);c.fill(e),o?.length&&c.set(o);return{allowUnmatched:t,rangeMaps:u,noDataRanges:c,clampRange:r(this.outputPixelType)}}};t([o({json:{write:!0,name:"rasterFunction"}})],h.prototype,"functionName",void 0),t([o({type:g,json:{write:!0,name:"rasterFunctionArguments"}})],h.prototype,"functionArguments",void 0),t([o()],h.prototype,"rasterArgumentNames",void 0),t([o({json:{write:!0}})],h.prototype,"lookup",void 0),h=t([a("esri.layers.support.rasterFunctions.RemapFunction")],h);const f=h;export{f as default};
