/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import{isSome as s,isNone as e}from"../../../core/maybe.js";import{property as n}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/arrayUtils.js";import{subclass as r}from"../../../core/accessorSupport/decorators/subclass.js";import{getBandMatrix3 as o}from"./bandIndexUtils.js";import i from"./BaseRasterFunction.js";import a from"./ExtractBandFunctionArguments.js";import{MissingBandAction as u}from"./pixelUtils.js";let c=class extends i{constructor(){super(...arguments),this.functionName="ExtractBand",this.functionArguments=null,this.rasterArgumentNames=["raster"]}_bindSourceRasters(){const{sourceRasterInfos:t}=this,e=t[0],{bandCount:n}=e,{bandIds:r,missingBandAction:o}=this.functionArguments;if(o===u.fail&&r.some((t=>t<0||t>=n)))return{success:!1,supportsGPU:!1,error:"extract-band-function: invalid bandIds"};this.outputPixelType=this._getOutputPixelType("f32");const i=e.clone();i.pixelType=this.outputPixelType,i.bandCount=r.length;const{statistics:a,histograms:c}=i;s(a)&&a.length&&(i.statistics=r.map((t=>a[t]||a[a.length-1]))),s(c)&&c.length&&(i.histograms=r.map((t=>c[t]||c[c.length-1]))),this.rasterInfo=i;return{success:!0,supportsGPU:i.bandCount<=3}}_processPixels(t){const s=t.pixelBlocks?.[0];if(e(s))return null;const n=s.pixels.length,r=this.functionArguments.bandIds.map((t=>t>=n?n-1:t));return s.extractBands(r)}_getWebGLParameters(){let t;if(this.isInputBandIdsSwizzled)t=this.swizzledBandSelection.length?this.swizzledBandSelection:[0,1,2];else{t=[...this.functionArguments.bandIds],0===t.length?t=[0,1,2]:t.length<3&&(t[1]=t[1]??t[0],t[2]=t[2]??t[1]);for(let s=0;s<3;s++)t[s]=Math.min(t[s],2)}return{bandIndexMat3:o(t)}}_getInputBandIds(t){const s=t.length;return this.functionArguments.bandIds.map((t=>t>=s?s-1:t)).map((s=>t[s]))}};t([n({json:{write:!0,name:"rasterFunction"}})],c.prototype,"functionName",void 0),t([n({type:a,json:{write:!0,name:"rasterFunctionArguments"}})],c.prototype,"functionArguments",void 0),t([n()],c.prototype,"rasterArgumentNames",void 0),c=t([r("esri.layers.support.rasterFunctions.ExtractBandFunction")],c);const p=c;export{p as default};
