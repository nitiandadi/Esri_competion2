/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../request.js";import r from"../../core/Error.js";import{isNone as o}from"../../core/maybe.js";import{isDataProtocol as s,isBlobProtocol as i,isAbsolute as n,dataToBlob as a,join as m}from"../../core/urlUtils.js";import{generateUUID as p}from"../../core/uuid.js";import{property as c}from"../../core/accessorSupport/decorators/property.js";import"../../core/accessorSupport/ensureType.js";import"../../core/arrayUtils.js";import{reader as l}from"../../core/accessorSupport/decorators/reader.js";import{subclass as u}from"../../core/accessorSupport/decorators/subclass.js";import{writer as d}from"../../core/accessorSupport/decorators/writer.js";import f from"./MediaElementBase.js";import{getResourceContentExtension as g}from"../../portal/support/resourceExtension.js";import{f as h,t as y,i as v,M as j}from"../../chunks/persistableUrlUtils.js";let I=class extends f{constructor(e){super(e),this.content=null,this.image=null,this.type="image",this.image=null}load(){const e=this.image;if("string"==typeof e){const r=t(e,{responseType:"image"}).then((({data:e})=>{this._set("content",e)}));this.addResolvingPromise(r)}else if(e instanceof HTMLImageElement){const t=e.decode().then((()=>{this._set("content",e)}));this.addResolvingPromise(t)}else e?this._set("content",e):this.addResolvingPromise(Promise.reject(new r("image-element:invalid-image-type","Invalid image type",{image:e})));return Promise.resolve(this)}readImage(e,t,r){return h(t.url,r)}writeImage(e,t,r,a){if(o(e))return;const m=a?.portalItem,p=a?.resources;if(!m||!p)return void("string"==typeof e&&(t[r]=y(e,a)));const c="string"!=typeof e||s(e)||i(e)?null:e;if(c){if(null==v(c))return void(t[r]=c);const e=y(c,{...a,verifyItemRelativeUrls:a&&a.verifyItemRelativeUrls?{writtenUrls:a.verifyItemRelativeUrls.writtenUrls,rootPath:void 0}:void 0},j.NO);if(m&&e&&!n(e))return p.toKeep.push({resource:m.resourceFromPath(e),compress:!1}),void(t[r]=e)}t[r]="<pending>",p.pendingOperations.push(E(e).then((e=>{const o=U(e,m);t[r]=o.itemRelativeUrl,p.toAdd.push({resource:o,content:e,compress:!1,finish:e=>{this.image=e.url}})})))}};e([c({readOnly:!0})],I.prototype,"content",void 0),e([c({json:{name:"url",type:String}})],I.prototype,"image",void 0),e([l("image",["url"])],I.prototype,"readImage",null),e([d("image")],I.prototype,"writeImage",null),e([c({readOnly:!0,json:{name:"mediaType"}})],I.prototype,"type",void 0),I=e([u("esri.layers.support.ImageElement")],I);const w=I;async function E(e){if("string"==typeof e){if(i(e)){const{data:r}=await t(e,{responseType:"blob"});return r}if(s(e))return a(e);return E((await t(e,{responseType:"image"})).data)}return new Promise((t=>T(e).toBlob(t)))}function T(e){if(e instanceof HTMLCanvasElement)return e;const t=e instanceof HTMLImageElement?e.naturalWidth:e.width,r=e instanceof HTMLImageElement?e.naturalHeight:e.height,o=document.createElement("canvas"),s=o.getContext("2d");return o.width=t,o.height=r,e instanceof HTMLImageElement?s.drawImage(e,0,0,e.width,e.height):e instanceof ImageData&&s.putImageData(e,0,0),o}function U(e,t){const r=p(),o=`${m("media",r)}.${g(e)}`;return t.resourceFromPath(o)}export{w as default};
