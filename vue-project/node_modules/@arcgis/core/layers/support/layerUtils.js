/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
import{id as e}from"../../kernel.js";import t from"../../request.js";import{isSome as n}from"../../core/maybe.js";function r(e){const t=e?.type;return"imagery-tile"===t||"tile"===t||"open-street-map"===t||"vector-tile"===t||"web-tile"===t||"wmts"===t}function i(e){const t=e?.type;return"base-tile"===t||"tile"===t||"elevation"===t||"imagery-tile"===t||"base-elevation"===t||"open-street-map"===t||"wcs"===t||"web-tile"===t||"wmts"===t||"vector-tile"===t}function s(e){return null!=e&&"type"in e&&"group"===e.type}const a={Point:"SceneLayer","3DObject":"SceneLayer",IntegratedMesh:"IntegratedMeshLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};function u(e){const t=e?.type;return"building-scene"===t||"integrated-mesh"===t||"point-cloud"===t||"scene"===t}function c(e){return"voxel"===e?.type}function o(e){return"imagery-tile"===e?.type}function l(e){return null!=e&&null!=e.parent&&"declaredClass"in e.parent&&"esri.Basemap"===e.parent.declaredClass&&e.parent.baseLayers.includes(e)}function f(e){return"feature"===e?.type&&!e.url&&"memory"===e.source?.type}function y(e){return"feature"===e?.type&&"feature-layer"===e.source?.type}function p(e){const t=/[:;]/,n=[];let r=!1;if(e&&(e.forEach(((e,i)=>{n.push([i,e]),!r&&t.test(e)&&(r=!0)})),n.length>0)){let e;if(r){const t={};n.forEach((e=>{t[e[0]]=e[1]})),e=JSON.stringify(t)}else{const t=[];n.forEach((e=>{t.push(e[0]+":"+e[1])})),e=t.join(";")}return e}return null}function g(e){if(!e)return;const t=[];return e.forEach(((e,n)=>{t.push('"'+n+'":'+JSON.stringify(e))})),t.length?"{"+t.join(",")+"}":void 0}function d(e){if(e.activeLayer){const t=e.activeLayer.tileMatrixSet;if(t)return t;const n=e.activeLayer.tileMatrixSets;if(n)return n}return null}async function b(r,i){const s=e?.findServerInfo(r);if(null!=s?.currentVersion)return s.owningSystemUrl||null;const a=r.toLowerCase().indexOf("/rest/services");if(-1===a)return null;const u=`${r.substring(0,a)}/rest/info`,c=n(i)?i.signal:null,{data:o}=await t(u,{query:{f:"json"},responseType:"json",signal:c});return o?.owningSystemUrl||null}function m(e){if(!("capabilities"in e))return!1;switch(e.type){case"csv":case"feature":case"geojson":case"imagery":case"knowledge-graph-sublayer":case"ogc-feature":case"oriented-imagery":case"scene":case"subtype-group":case"subtype-sublayer":case"wfs":return!0;default:return!1}}function v(e){return m(e)?"effectiveCapabilities"in e?e.effectiveCapabilities:e.capabilities:null}function h(e){if(!("editingEnabled"in e))return!1;switch(e.type){case"csv":case"feature":case"geojson":case"oriented-imagery":case"scene":case"subtype-group":case"subtype-sublayer":return!0;default:return!1}}function w(e){return!!h(e)&&("effectiveEditingEnabled"in e?e.effectiveEditingEnabled:e.editingEnabled)}export{w as getEffectiveEditingEnabled,v as getEffectiveLayerCapabilities,b as getOwningPortalUrl,d as getTileMaxtrixSetFromActiveLayer,l as isBaseLayer,r as isBasemapSupportedLayer,f as isFeatureCollectionLayer,y as isFeatureServiceLayer,s as isGroupLayer,o as isImageryTileLayer,u as isSceneServiceLayer,i as isTiledLayer,c as isVoxelLayer,a as sceneServiceLayerTypeToClassName,p as serializeLayerDefinitions,g as serializeTimeOptions};
