/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import t from"../../../request.js";import i from"../../../core/Error.js";import{JSONSupport as o}from"../../../core/JSONSupport.js";import r from"../../../core/Logger.js";import{isSome as n,isNone as s,unwrap as a,unwrapOrThrow as l}from"../../../core/maybe.js";import{EsriPromiseMixin as c}from"../../../core/Promise.js";import{onAbort as m}from"../../../core/promiseUtils.js";import{property as f}from"../../../core/accessorSupport/decorators/property.js";import{ensureClass as h}from"../../../core/accessorSupport/ensureType.js";import"../../../core/arrayUtils.js";import{subclass as u}from"../../../core/accessorSupport/decorators/subclass.js";import{sanitizeUrl as p}from"../arcgisLayerUrl.js";import{url as d}from"../commonProperties.js";import x from"../DimensionalDefinition.js";import y from"../LOD.js";import g from"../RasterStorageInfo.js";import I from"../TileInfo.js";import{isMultiSliceOrRangeDefinition as R,getSliceIndex as w,createSlices as k,getSliceIds as S}from"./multidimensionalUtils.js";import{getRasterId as v,getBlock as T,putBlock as b,deleteBlock as B,decreaseRefCount as P}from"./RawBlockCache.js";import{convertNoDataToMask as M}from"../rasterFormats/pixelRangeUtils.js";import{decode as W}from"../rasterFormats/RasterCodec.js";import{mosaic as _,approximateTransform as C,getLocalArithmeticNorthRotations as j}from"../rasterFunctions/pixelUtils.js";import{load as H,getWorldWidth as L,projectPoint as E,snapPyramid as D,snapExtent as z,getWorldWrapCount as A,projectExtent as F,getProjectionOffsetGrid as q,getRasterDatasetAlignmentInfo as O,projectResolution as G}from"../rasterFunctions/rasterProjectionHelper.js";import{convertToLocalDirections as J,uvComponentToVector as N}from"../rasterFunctions/vectorFieldUtils.js";import V from"../../../geometry/Extent.js";import U from"../../../geometry/Point.js";const $=8,X=256;let K=class extends(c(o)){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const e=H();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:I.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,t=L(e.spatialReference);return n(t)&&e.extent.width>=t/2}set url(e){this._set("url",p(e,r.getLogger(this.declaredClass)))}async open(e){throw new i("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,t,i,o={}){const r=o.tileInfo||this.rasterInfo.storageInfo.tileInfo,n=this.getTileExtentFromTileInfo(e,t,i,r);return this.fetchPixels(n,r.size[0],r.size[1],o)}async identify(e,t={}){e=h(U,e).clone().normalize();const{multidimensionalDefinition:i,timeExtent:o}=t,{rasterInfo:r}=this,{hasMultidimensionalTranspose:l,multidimensionalInfo:c}=r;let{transposedVariableName:m}=t;const f=n(c)&&l&&(null!=o||R(i));if(f&&!m){m=n(i)&&i.length>0?i[0].variableName??void 0:c.variables[0].name,t={...t,transposedVariableName:m}}t=this._getRequestOptionsWithSliceId(t);const{spatialReference:u,extent:p}=r,{datumTransformation:d}=t;let x=E(e,u,d);if(!p.intersects(x))return{location:x,value:null};if(n(r.transform)){const e=r.transform.inverseTransform(x);if(!r.nativeExtent.intersects(e))return{location:e,value:null};x=e}let y=0;const g=n(m)&&n(c)&&r.hasMultidimensionalTranspose;if("Function"===this.datasetFormat){const e=this.primaryRasters.rasters[0];if(g)return e.identify(x,t);const{pixelSize:i}=r,o=3,a=i.x*o/2,l=i.y*o/2,c=new V({xmin:x.x-a,xmax:x.x+a,ymin:x.y-l,ymax:x.y+l,spatialReference:u}),m={interpolation:"nearest"},{pixelBlock:f}=await e.fetchPixels(c,o,o,m),{pixelBlock:h}=await this.fetchPixels(c,o,o,m);if(s(f))return{location:x,value:null};const p=Math.floor(o*o*.5),d=!f.mask||f.mask[p]?f.pixels.map((e=>e[p])):null;let y;return n(h)&&(y=!h.mask||h.mask[p]?h.pixels.map((e=>e[p])):void 0),{location:x,value:d,processedValue:y,pyramidLevel:0}}if(!g)if(t.srcResolution){y=D(t.srcResolution,r,this.ioConfig.sampling).pyramidLevel}else if(y=await this.computeBestPyramidLevelForLocation(e,t),null==y)return{location:x,value:null};const I=this.identifyPixelLocation(x,y,null,g);if(null===I)return{location:x,value:null};const{row:w,col:k,rowOffset:S,colOffset:B,blockWidth:P}=I,M=m??a(t.sliceId),W=v(this.url,M),_=`${y}/${w}/${k}`;let C=T(W,null,_);s(C)&&(C=this.fetchRawTile(y,w,k,t),b(W,null,_,C));const j=await C;if(s(j)||!j.pixels?.length)return{location:x,value:null};const H=S*P+B;return this._processIdentifyResult(j,{srcLocation:x,position:H,pyramidLevel:y,useTransposedTile:!!g,requestSomeSlices:f,identifyOptions:t})}async fetchPixels(e,t,i,o={}){if(e=z(e),(o=this._getRequestOptionsWithSliceId(o)).requestRawData)return this._fetchPixels(e,t,i,o);const r=L(e.spatialReference),n=A(e);if(s(r)||0===n||1===n&&this._isGlobalWrappableSource)return this._fetchPixels(e,t,i,o);if(n>=3)return{extent:e,pixelBlock:null};const a=[],{xmin:l,xmax:c}=e,m=Math.round(r/(c-l)*t),f=m-Math.round((r/2-l)/(c-l)*t);let h=0;const u=[];for(let s=0;s<=n;s++){const p=new V({xmin:0===s?l:-r/2,xmax:s===n?c-r*s:r/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),d=0===s?m-f:s===n?t-h:m;h+=d,u.push(d);const x=o.disableWrapAround&&s>0?null:this._fetchPixels(p,d,i,o);a.push(x)}const p=(await Promise.all(a)).map((e=>e?.pixelBlock));let d=null;const x={width:t,height:i};if(this.rasterJobHandler){d=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:p,srcMosaicSize:x,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:u},o)).pixelBlock}else d=_(p,x,{blockWidths:u});return{extent:e,srcExtent:F(e,this.rasterInfo.spatialReference,o.datumTransformation),pixelBlock:d}}async fetchRawPixels(e,t,i,o={}){t={x:Math.floor(t.x),y:Math.floor(t.y)};const r=await this._fetchRawTiles(e,t,i,o),{nativeExtent:s,nativePixelSize:a,storageInfo:l}=this.rasterInfo,c=2**e,m=a.x*c,f=a.y*c,h=new V({xmin:s.xmin+m*t.x,xmax:s.xmin+m*(t.x+i.width-1),ymin:s.ymax-f*(t.y+i.height-1),ymax:s.ymax-f*t.y,spatialReference:s.spatialReference});if(!r)return{extent:h,srcExtent:h,pixelBlock:null};const{pixelBlocks:u,mosaicSize:p}=r;if(1===u.length&&n(u[0])&&u[0].width===i.width&&u[0].height===i.height)return{extent:h,srcExtent:h,pixelBlock:r.pixelBlocks[0]};const d=e>0?l.pyramidBlockWidth:l.blockWidth,x=e>0?l.pyramidBlockHeight:l.blockHeight,y={x:t.x%d,y:t.y%x};let g;if(this.rasterJobHandler){g=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:u,srcMosaicSize:p,destDimension:i,clipOffset:y,clipSize:i,coefs:null,sampleSpacing:null,interpolation:o.interpolation,alignmentInfo:null,blockWidths:null},o)).pixelBlock}else g=_(u,p,{clipOffset:y,clipSize:i});return{extent:h,srcExtent:h,pixelBlock:g}}fetchRawTile(e,t,o,r){throw new i("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return F(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?W(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,i,o=0){const{customFetchParameters:r}=this.ioConfig,{range:n,query:s,headers:a}=i;o=o??i.retryCount??this.ioConfig.retryCount;const l=n?{Range:`bytes=${n.from}-${n.to}`}:null;try{return await t(e,{...i,query:{...s,...r},headers:{...a,...l}})}catch(c){if(o>0)return o--,this.request(e,i,o);throw c}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;return s(t)||s(e)||0===e.length?null:w(e,t)}getTileExtentFromTileInfo(e,t,i,o){const r=l(o.lodAt(e));return this.getTileExtent({x:r.resolution,y:r.resolution},t,i,o.origin,o.spatialReference,o.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:i,pixelSize:o}=this.rasterInfo;if(!e.tileInfo){const r=[],n=e.maximumPyramidLevel||0;let s=Math.max(o.x,o.y),a=1/.0254*96*s;for(let e=0;e<=n;e++)r.push(new y({level:n-e,resolution:s,scale:a})),s*=2,a*=2;const l=new U({x:i.xmin,y:i.ymax,spatialReference:t});e.tileInfo=new I({origin:l,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:r}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,t=512,i=512,o){const{width:r,height:n,nativeExtent:s,pixelSize:a,spatialReference:l}=e,c=new U({x:s.xmin,y:s.ymax,spatialReference:l});null==o&&(o=Math.max(0,Math.round(Math.log(Math.max(r,n))/Math.LN2-8)));const m=this.computeBlockBoundary(s,512,512,{x:s.xmin,y:s.ymax},[a],o);e.storageInfo=new g({blockWidth:t,blockHeight:i,pyramidBlockWidth:t,pyramidBlockHeight:i,origin:c,firstPyramidLevel:1,maximumPyramidLevel:o,blockBoundary:m})}async computeBestPyramidLevelForLocation(e,t={}){return 0}computeBlockBoundary(e,t,i,o,r,n=0,s=2){if(1===r.length&&n>0){r=[...r];let{x:e,y:t}=r[0];for(let i=0;i<n;i++)e*=s,t*=s,r.push({x:e,y:t})}const a=[],{x:l,y:c}=o;for(let m=0;m<r.length;m++){const{x:o,y:n}=r[m];a.push({minCol:Math.floor((e.xmin-l+.1*o)/t/o),maxCol:Math.floor((e.xmax-l-.1*o)/t/o),minRow:Math.floor((c-e.ymax+.1*n)/i/n),maxRow:Math.floor((c-e.ymin-.1*n)/i/n)})}return a}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:o}=this.rasterInfo.storageInfo;if(0===e)return t;if(n(i)&&i.length)return i[e-1];const r=o**e;return{x:t.x*r,y:t.y*r}}identifyPixelLocation(e,t,i,o){const{spatialReference:r,nativeExtent:s,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:l,origin:c,transposeInfo:m}=a,f=o&&n(m)?m.tileSize[0]:a.blockWidth,h=o&&n(m)?m.tileSize[1]:a.blockHeight,u=E(e,r,i);if(!s.intersects(u))return null;if(t<0||t>l)return null;const p=this.getPyramidPixelSize(t),{x:d,y:x}=p,y=(c.y-u.y)/x/h,g=(u.x-c.x)/d/f,I=Math.min(h-1,Math.floor((y-Math.floor(y))*h)),R=Math.min(f-1,Math.floor((g-Math.floor(g))*f));return{pyramidLevel:t,row:Math.floor(y),col:Math.floor(g),rowOffset:I,colOffset:R,blockWidth:f,srcLocation:u}}getTileExtent(e,t,i,o,r,n){const[s,a]=n,l=o.x+i*s*e.x,c=l+s*e.x,m=o.y-t*a*e.y,f=m-a*e.y;return new V({xmin:l,xmax:c,ymin:f,ymax:m,spatialReference:r})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,i){const o=this.rasterInfo.storageInfo.blockBoundary[e];return!o||o.maxRow<t||o.maxCol<i||o.minRow>t||o.minCol>i}async _fetchPixels(e,t,i,o={}){let r=A(e);if(r>=2)return{extent:e,pixelBlock:null};const s=this._getSourceDataInfo(e,t,i,o),{pyramidLevel:l,pyramidResolution:c,srcResolution:m,srcExtent:f,srcWidth:h,srcHeight:u}=s;if(0===h||0===u)return{extent:e,srcExtent:f,pixelBlock:null};const p=a(this.rasterInfo.transform),d="gcs-shift"===p?.type,x=n(L(e.spatialReference));!d&&x||(r=A(s.srcExtent,d));const y=this.rasterInfo.storageInfo,g={x:Math.floor((f.xmin-y.origin.x)/c.x+.1),y:Math.floor((y.origin.y-f.ymax)/c.y+.1)},I=await this._fetchRawTiles(l,g,{width:h,height:u,wrapCount:r},o);if(!I)return{extent:e,srcExtent:f,pixelBlock:null};const R=l>0?y.pyramidBlockWidth:y.blockWidth,w=l>0?y.pyramidBlockHeight:y.blockHeight,k=R===h&&w===u&&g.x%R==0&&g.y%w==0,S=new U({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference}),v=!e.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:T}=o;if(!v&&k&&1===I.pixelBlocks.length&&R===t&&w===i&&m.x===S.x&&m.y===S.y)return{extent:e,srcExtent:f,pixelBlock:I.pixelBlocks[0]};const b=x&&n(L(f.spatialReference)),B=o.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");B&&!this.rasterJobHandler&&await H();const P=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:I.extent,pixelSize:S.toJSON(),datumTransformation:T,rasterTransform:p,hasWrapAround:r>0||b,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:B},o):q({projectedExtent:e,srcBufferExtent:I.extent,pixelSize:S,datumTransformation:T,rasterTransform:p,hasWrapAround:r>0||b,isAdaptive:!1,includeGCSGrid:B});let M;const W=!o.requestRawData,E={rows:P.spacing[0],cols:P.spacing[1]},D=a(this._getRasterTileAlignmentInfo(l,I.extent.xmin)),{pixelBlocks:z,mosaicSize:F,isPartiallyFilled:O}=I;let G=null;if(this.rasterJobHandler){const e=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:z,srcMosaicSize:F,destDimension:W?{width:t,height:i}:null,coefs:W?P.coefficients:null,sampleSpacing:W?E:null,projectDirections:B,gcsGrid:B?P.gcsGrid:null,isUV:"vector-uv"===this.rasterInfo.dataType,interpolation:o.interpolation,alignmentInfo:D,blockWidths:null},o);({pixelBlock:M,localNorthDirections:G}=e)}else{const e=_(z,F,{alignmentInfo:D});M=W?C(e,{width:t,height:i},P.coefficients,E,o.interpolation):e,B&&P.gcsGrid&&(G=j({width:t,height:i},P.gcsGrid),M=J(M,this.rasterInfo.dataType,G))}return o.requestRawData||B?{srcExtent:f,pixelBlock:M,transformGrid:P,localNorthDirections:G,extent:e,isPartiallyFilled:O}:{srcExtent:f,extent:e,pixelBlock:M}}async _fetchRawTiles(e,t,i,o){const{origin:r,blockBoundary:s}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:l}=this.getBlockWidthHeight(e);let{x:c,y:m}=t,{width:f,height:h,wrapCount:u}=i;const p=this._getRasterTileAlignmentInfo(e,0);o.buffer&&(c-=o.buffer.cols,m-=o.buffer.rows,f+=2*o.buffer.cols,h+=2*o.buffer.rows);let d=0,x=0,y=0;if(u&&n(p)){({worldColumnCountFromOrigin:x,originColumnOffset:y,rightPadding:d}=p);x*p.blockWidth-d>=c+f&&(d=0)}const g=Math.floor(c/a),I=Math.floor(m/l),R=Math.floor((c+f+d-1)/a),w=Math.floor((m+h+d-1)/l),k=s[e];if(!k)return null;const{minRow:S,minCol:v,maxCol:T,maxRow:b}=k;if(0===u&&(w<S||R<v||I>b||g>T))return null;const B=new Array;let P=!1;const M=null==this.ioConfig.allowPartialFill?o.allowPartialFill:this.ioConfig.allowPartialFill;for(let E=I;E<=w;E++)for(let t=g;t<=R;t++){let i=t;if(!o.disableWrapAround&&u&&n(p)&&x<=t&&(i=t-x-y),E>=S&&i>=v&&b>=E&&T>=i){const t=this._fetchRawTile(e,E,i,o);M?B.push(new Promise((e=>{t.then((t=>e(t))).catch((()=>{P=!0,e(null)}))}))):B.push(t)}else B.push(Promise.resolve(null))}if(0===B.length)return null;const W=await Promise.all(B),_={height:(w-I+1)*l,width:(R-g+1)*a},{spatialReference:C}=this.rasterInfo,j=this.getPyramidPixelSize(e),{x:H,y:L}=j;return{extent:new V({xmin:r.x+g*a*H,xmax:r.x+(R+1)*a*H,ymin:r.y-(w+1)*l*L,ymax:r.y-I*l*L,spatialReference:C}),pixelBlocks:W,mosaicSize:_,isPartiallyFilled:P}}_fetchRawTile(e,t,i,o){const r=this.rasterInfo.storageInfo.blockBoundary[e];if(!r)return Promise.resolve(null);const{minRow:n,minCol:a,maxCol:l,maxRow:c}=r;if(t<n||i<a||t>c||i>l)return Promise.resolve(null);const f=v(this.url,o.sliceId),h=`${e}/${t}/${i}`;let u=T(f,o.registryId,h);if(s(u)){const r=new AbortController;u=this.fetchRawTile(e,t,i,{...o,signal:r.signal}),b(f,o.registryId,h,u,r),u.catch((()=>B(f,o.registryId,h)))}return o.signal&&m(o,(()=>{P(f,o.registryId,h)})),u}_computeMagDirValues(e){const{bandCount:t,dataType:i}=this.rasterInfo;if(!(2===t&&"vector-magdir"===i||"vector-uv"===i)||2!==e?.length||!e[0]?.length)return null;const o=e[0].length;if("vector-magdir"===i){const t=e[1].map((e=>(e+360)%360));return[e[0],t]}const[r,n]=e,s=[],a=[];for(let l=0;l<o;l++){const[e,t]=N([r[l],n[l]]);s.push(e),a.push(t)}return[s,a]}_getRasterTileAlignmentInfo(e,t){return null==this._rasterTileAlighmentInfo&&(this._rasterTileAlighmentInfo=O(this.rasterInfo)),s(this._rasterTileAlighmentInfo.pyramidsInfo)?null:{startX:t,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[e]}}_getSourceDataInfo(e,t,i,o={}){const r={datumTransformation:o.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0};o.srcResolution&&(r.srcResolution=o.srcResolution,this._updateSourceDataInfo(e,r));const n=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:s,srcHeight:a,pyramidLevel:l}=r,c=s/t,m=a/i,f=l<n&&c*m>=16,h=l===n&&this._requireTooManySrcTiles(s,a,t,i);if(f||h||(0===s||0===a)){const s=new U({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference});let a=G(s,this.rasterInfo.spatialReference,e,r.datumTransformation);const h=!a||o.srcResolution&&a.x+a.y<o.srcResolution.x+o.srcResolution.y;if(f&&o.srcResolution&&h){const e=Math.round(Math.log(Math.max(c,m))/Math.LN2)-1;if(n-l+3>=e){const t=2**e;a={x:o.srcResolution.x*t,y:o.srcResolution.y*t}}}a&&(r.srcResolution=a,this._updateSourceDataInfo(e,r))}return this._requireTooManySrcTiles(r.srcWidth,r.srcHeight,t,i)&&(r.srcWidth=0,r.srcHeight=0),r}_requireTooManySrcTiles(e,t,i,o){const{tileInfo:r}=this.rasterInfo.storageInfo;return Math.ceil(e/r.size[0])*Math.ceil(t/r.size[1])>=X||e/i>$||t/o>$}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const i=this.rasterInfo.spatialReference,{srcResolution:o,datumTransformation:r}=t,{pyramidLevel:n,pyramidResolution:s,excessiveReading:l}=D(o,this.rasterInfo,this.ioConfig.sampling);if(l)return;let c=t.srcExtent||F(e,i,r);if(null==c)return;const m=a(this.rasterInfo.transform);m&&(c=m.inverseTransform(c)),t.srcExtent=c;const f=Math.ceil((c.xmax-c.xmin)/s.x-.1),h=Math.ceil((c.ymax-c.ymin)/s.y-.1);t.pyramidLevel=n,t.pyramidResolution=s,t.srcWidth=f,t.srcHeight=h}_getRequestOptionsWithSliceId(e){return n(this.rasterInfo.multidimensionalInfo)&&null==e.sliceId&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}_processIdentifyResult(e,t){const{srcLocation:i,position:o,pyramidLevel:r,useTransposedTile:l}=t,c=e.pixels[0].length/e.width/e.height;if(!(!e.mask||e.mask[o]))return{location:i,value:null};const{multidimensionalInfo:m}=this.rasterInfo;if(s(m)||!l){const t=e.pixels.map((e=>e[o])),n={location:i,value:t,pyramidLevel:r},s=this._computeMagDirValues(t.map((e=>[e])));return s?.length&&(n.magdirValue=s.map((e=>e[0]))),n}let f=e.pixels.map((e=>e.slice(o*c,o*c+c))),h=this._computeMagDirValues(f);const{requestSomeSlices:u,identifyOptions:p}=t;let d=k(m,p.transposedVariableName);if(u){const e=S(d,a(p.multidimensionalDefinition),a(p.timeExtent));f=f.map((t=>e.map((e=>t[e])))),h=h?.map((t=>e.map((e=>t[e])))),d=e.map((e=>d[e]))}const y=e.noDataValues||this.rasterInfo.noDataValue,g={pixels:f,pixelType:e.pixelType};let I;n(y)&&(M(g,y),I=g.mask);return{location:i,value:null,dataSeries:d.map(((e,t)=>{const i={value:0===I?.[t]?null:f.map((e=>e[t])),multidimensionalDefinition:e.multidimensionalDefinition.map((e=>new x({...e,isSlice:!0})))};return h?.length&&(i.magdirValue=[h[0][t],h[1][t]]),i})),pyramidLevel:r}}};e([f()],K.prototype,"_rasterTileAlighmentInfo",void 0),e([f({readOnly:!0})],K.prototype,"_isGlobalWrappableSource",null),e([f(d)],K.prototype,"url",null),e([f({type:String,json:{write:!0}})],K.prototype,"datasetName",void 0),e([f({type:String,json:{write:!0}})],K.prototype,"datasetFormat",void 0),e([f()],K.prototype,"hasUniqueSourceStorageInfo",void 0),e([f()],K.prototype,"rasterInfo",void 0),e([f()],K.prototype,"ioConfig",void 0),e([f()],K.prototype,"sourceJSON",void 0),K=e([u("esri.layers.support.rasterDatasets.BaseRaster")],K);const Q=K;export{Q as default};
