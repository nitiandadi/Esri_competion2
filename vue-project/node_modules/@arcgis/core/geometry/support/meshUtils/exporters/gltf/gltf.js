/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
import e from"../../../../../core/Logger.js";import{getOrCreateMapValue as t}from"../../../../../core/MapUtils.js";import{applySome as s,isSome as r,isNone as i}from"../../../../../core/maybe.js";import{j as a}from"../../../../../chunks/quat.js";import{I as o,b as n}from"../../../../../chunks/quatf64.js";import{k as l}from"../../../../../chunks/vec3.js";import{Z as c,a as h,O as f}from"../../../../../chunks/vec3f64.js";import u from"../../../MeshMaterialMetallicRoughness.js";import p from"../../../MeshTransform.js";import{ungeoreferenceByTransform as d}from"../../georeference.js";import{Buffer as m}from"./buffer.js";import{computeOrigin as g,smoothNormals as _}from"./geometry.js";import{BufferOutputType as x,ImageOutputType as A,AttributeType as T,TargetBuffer as R,AlphaMode as b}from"./types.js";import{imageToArrayBuffer as E,imageToDataURI as M}from"./imageutils.js";import{isEncodedMeshTexture as O}from"../../../../../views/3d/glTF/internal/resourceUtils.js";import{DataType as w,TextureWrapMode as N}from"../../../../../views/webgl/enums.js";const B=e.getLogger("gltf");class C{constructor(e,t,s){this.params={},this._materialMap=new Array,this._imageMap=new Map,this._textureMap=new Map,this.gltf={asset:{version:"2.0",copyright:e.copyright,generator:e.generator},extras:{options:t,binChunkBuffer:null,promises:[]}},s&&(this.params=s),this._addScenes(e)}_addScenes(e){this.gltf.scene=e.defaultScene;const t=this.gltf.extras,s=t.options.bufferOutputType===x.GLB||t.options.imageOutputType===A.GLB;s&&(t.binChunkBuffer=new m(this.gltf)),e.forEachScene((e=>{this._addScene(e)})),s&&t.binChunkBuffer.finalize()}_addScene(e){this.gltf.scenes||(this.gltf.scenes=[]);const t={};e.name&&(t.name=e.name),e.forEachNode((e=>{t.nodes||(t.nodes=[]);const s=this._addNode(e);t.nodes.push(s)})),this.gltf.scenes.push(t)}_addNode(e){this.gltf.nodes||(this.gltf.nodes=[]);const t={};e.name&&(t.name=e.name);const s=e.translation;l(s,c)||(t.translation=h(s));const r=e.rotation;a(r,o)||(t.rotation=n(r));const i=e.scale;l(i,f)||(t.scale=h(i)),e.mesh&&e.mesh.vertexAttributes.position?t.mesh=this._addMesh(e.mesh):e.forEachNode((e=>{t.children||(t.children=[]);const s=this._addNode(e);t.children.push(s)}));const u=this.gltf.nodes.length;return this.gltf.nodes.push(t),u}_addMesh(e){this.gltf.meshes||(this.gltf.meshes=[]);const t={primitives:[]},i=this.gltf.extras,a=i.options.bufferOutputType===x.GLB;let o;o=a?i.binChunkBuffer:new m(this.gltf),this.params.origin||(this.params.origin=g(e));const n=this.params.ignoreLocalTransform?s(e.transform,(e=>new p({origin:[e.origin[0],e.origin[1],e.origin[2]],geographic:!1}))):e.transform,l=d(e.vertexAttributes,n,this.params.origin,{geographic:this.params.geographic,unit:"meters"});_(e,l),this._flipYZAxis(l);const c=o.addBufferView(w.FLOAT,T.VEC3,R.ARRAY_BUFFER);let h,f,u,A;l.normal&&(h=o.addBufferView(w.FLOAT,T.VEC3,R.ARRAY_BUFFER)),e.vertexAttributes.uv&&(f=o.addBufferView(w.FLOAT,T.VEC2,R.ARRAY_BUFFER)),l.tangent&&(u=o.addBufferView(w.FLOAT,T.VEC4,R.ARRAY_BUFFER)),e.vertexAttributes.color&&(A=o.addBufferView(w.UNSIGNED_BYTE,T.VEC4,R.ARRAY_BUFFER)),c.startAccessor("POSITION"),h&&h.startAccessor("NORMAL"),f&&f.startAccessor("TEXCOORD_0"),u&&u.startAccessor("TANGENT"),A&&A.startAccessor("COLOR_0");const b=l.position.length/3,{position:E,normal:M,tangent:O}=l,{color:N,uv:B}=e.vertexAttributes;for(let s=0;s<b;++s)c.push(E[3*s+0]),c.push(E[3*s+1]),c.push(E[3*s+2]),h&&r(M)&&(h.push(M[3*s+0]),h.push(M[3*s+1]),h.push(M[3*s+2])),f&&r(B)&&(f.push(B[2*s+0]),f.push(B[2*s+1])),u&&r(O)&&(u.push(O[4*s+0]),u.push(O[4*s+1]),u.push(O[4*s+2]),u.push(O[4*s+3])),A&&r(N)&&(A.push(N[4*s+0]),A.push(N[4*s+1]),A.push(N[4*s+2]),A.push(N[4*s+3]));const C=c.endAccessor(),I=this._addAccessor(c.index,C);let L,v,y,F,S;if(h){const e=h.endAccessor();L=this._addAccessor(h.index,e)}if(f){const e=f.endAccessor();v=this._addAccessor(f.index,e)}if(u){const e=u.endAccessor();y=this._addAccessor(u.index,e)}if(A){const e=A.endAccessor();F=this._addAccessor(A.index,e)}e.components&&e.components.length>0&&e.components[0].faces?(S=o.addBufferView(w.UNSIGNED_INT,T.SCALAR,R.ELEMENT_ARRAY_BUFFER),this._addMeshVertexIndexed(S,e.components,t,I,L,v,y,F)):this._addMeshVertexNonIndexed(e.components,t,I,L,v,y,F),c.finalize(),h&&h.finalize(),f&&f.finalize(),u&&u.finalize(),S&&S.finalize(),A&&A.finalize(),a||o.finalize();const k=this.gltf.meshes.length;return this.gltf.meshes.push(t),k}_flipYZAxis({position:e,normal:t,tangent:s}){this._flipYZBuffer(e,3),this._flipYZBuffer(t,3),this._flipYZBuffer(s,4)}_flipYZBuffer(e,t){if(!i(e))for(let s=1,r=2;s<e.length;s+=t,r+=t){const t=e[s],i=e[r];e[s]=i,e[r]=-t}}_addMaterial(e){if(null===e)return;const t=this._materialMap.indexOf(e);if(-1!==t)return t;this.gltf.materials||(this.gltf.materials=[]);const s={};switch(e.alphaMode){case"mask":s.alphaMode=b.MASK;break;case"auto":case"blend":s.alphaMode=b.BLEND}.5!==e.alphaCutoff&&(s.alphaCutoff=e.alphaCutoff),e.doubleSided&&(s.doubleSided=e.doubleSided),s.pbrMetallicRoughness={};const i=e=>e**2.1,a=e=>{const t=e.toRgba();return t[0]=i(t[0]/255),t[1]=i(t[1]/255),t[2]=i(t[2]/255),t};if(r(e.color)&&(s.pbrMetallicRoughness.baseColorFactor=a(e.color)),r(e.colorTexture)&&(s.pbrMetallicRoughness.baseColorTexture={index:this._addTexture(e.colorTexture)}),r(e.normalTexture)&&(s.normalTexture={index:this._addTexture(e.normalTexture)}),e instanceof u){if(r(e.emissiveTexture)&&(s.emissiveTexture={index:this._addTexture(e.emissiveTexture)}),r(e.emissiveColor)){const t=a(e.emissiveColor);s.emissiveFactor=[t[0],t[1],t[2]]}r(e.occlusionTexture)&&(s.occlusionTexture={index:this._addTexture(e.occlusionTexture)}),r(e.metallicRoughnessTexture)&&(s.pbrMetallicRoughness.metallicRoughnessTexture={index:this._addTexture(e.metallicRoughnessTexture)}),s.pbrMetallicRoughness.metallicFactor=e.metallic,s.pbrMetallicRoughness.roughnessFactor=e.roughness}else s.pbrMetallicRoughness.metallicFactor=1,s.pbrMetallicRoughness.roughnessFactor=1,B.warnOnce("Meshes exported to GLTF without MeshMaterialMetallicRoughness material will appear different when imported back.");const o=this.gltf.materials.length;return this.gltf.materials.push(s),this._materialMap.push(e),o}_addTexture(e){const s=this.gltf.textures??[];return this.gltf.textures=s,t(this._textureMap,e,(()=>{const t={sampler:this._addSampler(e),source:this._addImage(e)},r=s.length;return s.push(t),r}))}_addImage(e){const t=this._imageMap.get(e);if(null!=t)return t;this.gltf.images||(this.gltf.images=[]);const s={};if(e.url)s.uri=e.url;else{const t=e.data;s.extras=t;for(let e=0;e<this.gltf.images.length;++e)if(t===this.gltf.images[e].extras)return e;const i=this.gltf.extras;switch(i.options.imageOutputType){case A.GLB:{const e=i.binChunkBuffer.addBufferView(w.UNSIGNED_BYTE,T.SCALAR);if(O(t))r(t.data)&&e.writeOutToBuffer(t.data,0);else{const r=E(t).then((({data:e,type:t})=>(s.mimeType=t,e)));e.writeAsync(r).then((()=>{e.finalize()}))}s.bufferView=e.index;break}case A.DataURI:if(O(t)){B.warnOnce("Image export for basis compressed textures not available.");break}s.uri=M(t);break;default:if(O(t)){B.warnOnce("Image export for basis compressed textures not available.");break}i.promises.push(E(t).then((({data:e,type:t})=>{s.uri=e,s.mimeType=t})))}}const i=this.gltf.images.length;return this.gltf.images.push(s),this._imageMap.set(e,i),i}_addSampler(e){this.gltf.samplers||(this.gltf.samplers=[]);let t=N.REPEAT,s=N.REPEAT;if("string"==typeof e.wrap)switch(e.wrap){case"clamp":t=N.CLAMP_TO_EDGE,s=N.CLAMP_TO_EDGE;break;case"mirror":t=N.MIRRORED_REPEAT,s=N.MIRRORED_REPEAT}else{switch(e.wrap.vertical){case"clamp":s=N.CLAMP_TO_EDGE;break;case"mirror":s=N.MIRRORED_REPEAT}switch(e.wrap.horizontal){case"clamp":t=N.CLAMP_TO_EDGE;break;case"mirror":t=N.MIRRORED_REPEAT}}const r={wrapS:t,wrapT:s};for(let a=0;a<this.gltf.samplers.length;++a)if(JSON.stringify(r)===JSON.stringify(this.gltf.samplers[a]))return a;const i=this.gltf.samplers.length;return this.gltf.samplers.push(r),i}_addAccessor(e,t){this.gltf.accessors||(this.gltf.accessors=[]);const s={bufferView:e,byteOffset:t.byteOffset,componentType:t.componentType,count:t.count,type:t.type,min:t.min,max:t.max,name:t.name};t.normalized&&(s.normalized=!0);const r=this.gltf.accessors.length;return this.gltf.accessors.push(s),r}_addMeshVertexIndexed(e,t,s,r,i,a,o,n){for(const l of t){e.startAccessor("INDICES");for(let s=0;s<l.faces.length;++s)e.push(l.faces[s]);const t=e.endAccessor(),c={attributes:{POSITION:r},indices:this._addAccessor(e.index,t),material:this._addMaterial(l.material)};i&&"flat"!==l.shading&&(c.attributes.NORMAL=i),a&&(c.attributes.TEXCOORD_0=a),o&&"flat"!==l.shading&&(c.attributes.TANGENT=o),n&&(c.attributes.COLOR_0=n),s.primitives.push(c)}}_addMeshVertexNonIndexed(e,t,s,r,i,a,o){const n={attributes:{POSITION:s}};r&&(n.attributes.NORMAL=r),i&&(n.attributes.TEXCOORD_0=i),a&&(n.attributes.TANGENT=a),o&&(n.attributes.COLOR_0=o),e&&(n.material=this._addMaterial(e[0].material)),t.primitives.push(n)}}export{C as GLTF};
