/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import r from"../../../core/Handles.js";import{isNone as s,isSome as i}from"../../../core/maybe.js";import n from"../../../core/PooledArray.js";import{isPromiseLike as o}from"../../../core/promiseUtils.js";import{property as d}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/arrayUtils.js";import{subclass as a}from"../../../core/accessorSupport/decorators/subclass.js";import{isIntersectionHandler as h}from"../state/helpers/SceneIntersectionHelper.js";import{ChangeSet as y}from"./lib/ChangeSet.js";import{UpdatePolicy as l}from"./lib/UpdatePolicy.js";import{isWebGLLayer as c}from"./lib/WebGLLayer.js";import{Model as m}from"./parts/Model.js";import{RenderView as p}from"./parts/RenderView.js";import{TaskPriority as u,noBudget as _}from"../../support/Scheduler.js";let g=class extends t{constructor(e){super(e),this._handles=new r,this._model=new m,this._layers=new n,this._asyncChangeSet=new y,this._syncChangeSet=new y,this._layerSyncSet=new Set}initialize(){this._set("renderView",new p(this)),this._frameTask=this.view.resourceController.scheduler.registerTask(u.STAGE,this),this._handles.add(this._frameTask)}destroy(){this._handles.destroy()}get viewingMode(){return this.view.state.viewingMode}get updating(){return this.running||this.renderView.updating||this._frameTask.updating}get renderer(){return this.renderView?.renderer}add(e){this._model.add(e),c(e)&&(e.attachStage(this),this._addLayer(e)),this.renderView.requestRender()}remove(e){s(e)||(this.renderView.requestRender(),this._model.remove(e),c(e)&&(this._removeLayer(e),e.detachStage()))}addMany(e){i(e)&&(this._model.addMany(e),this.renderView.requestRender())}removeMany(e){i(e)&&(this._model.removeMany(e),this.renderView.requestRender())}async load(e,t){s(e)||(Array.isArray(e)||(e=[e]),await Promise.all(e.filter((e=>s(e.glTexture))).map((e=>this.schedule((()=>this._model.has(e)?e.load(this.renderView.renderingContext,(()=>this.renderView.textureRepository.textureTechnique)):null))),t)))}loadImmediate(e){return e.load(this.renderView.renderingContext,(()=>this.renderView.textureRepository.textureTechnique))}forEachOfType(e,t){this._model.forEachOfType(e,t)}handleEvent(e,t){this.destroyed||(this._model.dirtySet[e](t),this.renderView.requestRender())}get running(){return this._model.dirtySet.dirty||!this._asyncChangeSet.empty}runTask(e){this._frameTask.processQueue(e),this._commit(e)}_commit(e){const t=this._model.dirtySet;this._asyncChangeSet.empty||e.done||(this.renderer.modify(this._asyncChangeSet,e),this.renderView.requestRender(),e.madeProgress()),this._layers.forAll((r=>{if(e.done)return;const s=this._layerSyncSet.has(r.id)||r.updatePolicy===l.SYNC,i=s?this._syncChangeSet:this._asyncChangeSet;t.commitLayer(r.id,i),this._layerSyncSet.delete(r.id),i.empty||(this.renderer.modify(i,s?_:e),this.renderView.requestRender(),e.madeProgress())})),this._syncChangeSet.empty||(this.renderer.modify(this._syncChangeSet,_),this.renderView.requestRender(),e.madeProgress()),this._layers.forAll((r=>{e.done||this._layerSyncSet.has(r.id)||r.updatePolicy!==l.ASYNC||(t.commitLayer(r.id,this._asyncChangeSet),this._asyncChangeSet.empty||(this.renderer.modify(this._asyncChangeSet,e),this.renderView.requestRender(),e.madeProgress()))})),this._layerSyncSet.clear(),this.notifyChange("running")}commitSyncLayers(){const e=this._model.dirtySet;this._layers.forAll((t=>{(this._layerSyncSet.has(t.id)||t.updatePolicy===l.SYNC)&&(e.commitLayer(t.id,this._syncChangeSet),this._layerSyncSet.delete(t.id))}));for(const t of this._layerSyncSet)e.commitLayer(t,this._syncChangeSet);this._layerSyncSet.clear(),this._syncChangeSet.empty||(this.renderer.modify(this._syncChangeSet,_),this.renderView.requestRender())}_commitLayer(e){this._model.dirtySet.commitLayer(e.id,this._syncChangeSet),this._layerSyncSet.delete(e.id),this._syncChangeSet.empty||(this.renderer.modify(this._syncChangeSet,_),this.renderView.requestRender())}schedule(e,t){return this._frameTask.schedule(e,t)}reschedule(e,t){return this._frameTask.reschedule(e,t)}syncLayer(e){this._layerSyncSet.add(e),this.renderView.requestRender()}getObject(e){return this._model.getObject(e)}get layers(){return this._layers}_addLayer(e){this._layers.includes(e)||this._layers.push(e)}_removeLayer(e){this._commitLayer(e),null!=this._layers.removeUnordered(e)&&(this._model.dirtySet.getResidentRenderGeometries(e.id,this._syncChangeSet.removes),this.renderer.modify(this._syncChangeSet,_))}addRenderPlugin(e,t,r){const s=this.renderer.renderPlugins.add(e,t,r),i=()=>{h(t)&&this.view.sceneIntersectionHelper.addIntersectionHandler(t)};if(o(s))return s.then(i);i()}removeRenderPlugin(e){h(e)&&this.view.sceneIntersectionHelper.removeIntersectionHandler(e),this.renderer.renderPlugins.remove(e)}get performanceInfo(){return{renderView:this.renderView.performanceInfo,model:this._model.getStats()}}get test(){const e=this;return{getCount:t=>e._model.test.content.filter((e=>e.type===t)).length,model:e._model}}};g.DebugSettings={endFrameContentValidation:!1},e([d({constructOnly:!0})],g.prototype,"view",void 0),e([d({constructOnly:!0})],g.prototype,"options",void 0),e([d({readOnly:!0})],g.prototype,"viewingMode",null),e([d({constructOnly:!0})],g.prototype,"container",void 0),e([d({constructOnly:!0})],g.prototype,"_handles",void 0),e([d({readOnly:!0})],g.prototype,"updating",null),e([d({constructOnly:!0})],g.prototype,"_model",void 0),e([d({autoDestroy:!0})],g.prototype,"renderView",void 0),e([d({readOnly:!0})],g.prototype,"renderer",null),e([d({readOnly:!0})],g.prototype,"running",null),g=e([a("esri.views.3d.webgl-engine.Stage")],g);export{g as Stage};
