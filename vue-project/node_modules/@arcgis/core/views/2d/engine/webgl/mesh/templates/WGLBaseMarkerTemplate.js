/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
import{isSome as t,isNone as e,unwrap as i}from"../../../../../../core/maybe.js";import{pt2px as r}from"../../../../../../core/screenUtils.js";import{a as s,r as o}from"../../../../../../chunks/mat2d.js";import{c as h}from"../../../../../../chunks/mat2df32.js";import{s as n,t as f}from"../../../../../../chunks/vec2.js";import{f as a,c as x}from"../../../../../../chunks/vec2f32.js";import{deltaDecodeGeometry as m,convertFromGeometry as _}from"../../../../../../layers/graphics/featureConversionUtils.js";import{CIMMarkerPlacementHelper as l}from"../../../../../../symbols/cim/placements/CIMMarkerPlacementHelper.js";import{TILE_SIZE as p}from"../../definitions.js";import{WGLGeometryType as c,WGLSymbologyType as v}from"../../enums.js";import{i1616to32 as d}from"../../number.js";import{MarkerMaterialKey as W}from"../../materialKey/MaterialKey.js";const g=3.14159265359/180,y=8,u=u=>class extends u{constructor(...t){super(...t),this.angle=0,this.xOffset=0,this.yOffset=0,this.width=0,this.height=0,this.boundsType="square",this._anchorX=0,this._anchorY=0,this._computedWidth=0,this._computedHeight=0,this._allowBorrowing=!0,this._vertexBoundsScaleX=1,this._vertexBoundsScaleY=1,this._offsets={xUpperLeft:0,yUpperLeft:0,xUpperRight:0,yUpperRight:0,xBottomLeft:0,yBottomLeft:0,xBottomRight:0,yBottomRight:0},this.geometryType=c.MARKER}_write(t,e,i,r){const s=e.getDisplayId();t.recordStart(s,this._materialKey,this.geometryType,!0),this._writeGeometry(t,e,s,i,r),t.recordEnd()}_writeGeometry(i,r,s,o,h){if(t(this._markerPlacement))return this._writePlacedMarkers(i,r,o,h);if(this._allowBorrowing=!0,!h&&"esriGeometryPoint"===r.geometryType){const t=r.getX(),e=r.getY();if(!i.hasAggregates&&i.hasPixelBufferEnabled&&(t<0||t>=513||e<0||e>=513))return;return this._writeVertices(i,s,this._getPos(t,e),t,e)}const n=h?m(_(h),2):"esriGeometryPolygon"===r.geometryType?r.readCentroid():r.readGeometryForDisplay();if(!e(n)){if(n.isPoint){const[t,e]=n.coords;if(!i.hasAggregates&&i.hasPixelBufferEnabled&&(t<0||t>=512||e<0||e>=512))return;return this._writeVertices(i,s,this._getPos(t,e),t,e)}n.forEachVertex(((t,e)=>{const r=2*p;t<-r||t>=r||e<-r||e>=r||this._writeVertices(i,s,this._getPos(t,e),t,e)}))}}_writePlacedMarkers(t,e,s,o){const n=o??e.readLegacyGeometryForDisplay(),f=l.getPlacement(n,i(this._markerPlacement),r(1),t.tileKey,s.geometryEngine);if(!f)return;this._allowBorrowing="esriGeometryPolygon"!==e.geometryType;const a=e.getDisplayId(),m=x(),_=h(),p=-128,c=640;let v=f.next();for(;null!=v;){const e=v.tx,i=-v.ty;e>=p&&e<=c&&i>=p&&i<=c&&(this._applyTransformation(_,m,-v.getAngle()/g),this._writeVertices(t,a,this._getPos(e,i),e,i)),v=f.next()}}_writeVertices(t,e,i,r,s){const o=W.load(this._materialKey);return o.symbologyType===v.HEATMAP?this._writeHeatmapVertices(t,e,i):this._writeMarkerVertices(t,e,o,i,r,s)}_writeMarkerVertices(t,e,i,r,s,o){const h=i.vvRotation,n=t.vertexCount();let f=this._computedWidth*this._vertexBoundsScaleX,a=this._computedHeight*this._vertexBoundsScaleY;if(this.angle){const t=Math.max(f,a);f=t,a=t}if(h){const t=Math.max(this.xOffset,this.yOffset);f+=t,a+=t}this._allowBorrowing&&t.vertexBounds(s+this.xOffset,o-this.yOffset,f,a),t.vertexWrite(r),t.vertexWrite(this._offsetUpperLeft),t.vertexWrite(this._texUpperLeft),t.vertexWrite(this._bitestAndDistRatio),t.vertexWrite(e),t.vertexWrite(this._fillColor),t.vertexWrite(this._outlineColor),t.vertexWrite(this._sizeOutlineWidth),t.vertexWrite(this._minMaxZoom),t.vertexEnd(),t.vertexWrite(r),t.vertexWrite(this._offsetUpperRight),t.vertexWrite(this._texUpperRight),t.vertexWrite(this._bitestAndDistRatio),t.vertexWrite(e),t.vertexWrite(this._fillColor),t.vertexWrite(this._outlineColor),t.vertexWrite(this._sizeOutlineWidth),t.vertexWrite(this._minMaxZoom),t.vertexEnd(),t.vertexWrite(r),t.vertexWrite(this._offsetBottomLeft),t.vertexWrite(this._texBottomLeft),t.vertexWrite(this._bitestAndDistRatio),t.vertexWrite(e),t.vertexWrite(this._fillColor),t.vertexWrite(this._outlineColor),t.vertexWrite(this._sizeOutlineWidth),t.vertexWrite(this._minMaxZoom),t.vertexEnd(),t.vertexWrite(r),t.vertexWrite(this._offsetBottomRight),t.vertexWrite(this._texBottomRight),t.vertexWrite(this._bitestAndDistRatio),t.vertexWrite(e),t.vertexWrite(this._fillColor),t.vertexWrite(this._outlineColor),t.vertexWrite(this._sizeOutlineWidth),t.vertexWrite(this._minMaxZoom),t.vertexEnd(),this._writeIndices(t,n)}_writeHeatmapVertices(t,e,i){const r=t.vertexCount();t.vertexWrite(i),t.vertexWrite(this._offsetUpperLeft),t.vertexWrite(e),t.vertexEnd(),t.vertexWrite(i),t.vertexWrite(this._offsetUpperRight),t.vertexWrite(e),t.vertexEnd(),t.vertexWrite(i),t.vertexWrite(this._offsetBottomLeft),t.vertexWrite(e),t.vertexEnd(),t.vertexWrite(i),t.vertexWrite(this._offsetBottomRight),t.vertexWrite(e),t.vertexEnd(),this._writeIndices(t,r)}_writeIndices(t,e){t.indexWrite(e+0),t.indexWrite(e+1),t.indexWrite(e+2),t.indexWrite(e+1),t.indexWrite(e+3),t.indexWrite(e+2)}_applyTransformation(t,e,i=0){s(t,a(this.xOffset,-this.yOffset)),null!=this.angle&&this.angle+i!==0&&o(t,t,g*(this.angle+i));const r=this._computedWidth,h=this._computedHeight,x=-(.5+this._anchorX)*r,m=-(.5-this._anchorY)*h;n(e,x,m),f(e,e,t),this._offsetUpperLeft=d(16*e[0],16*e[1]),this._offsets.xUpperLeft=e[0],this._offsets.yUpperLeft=e[1],n(e,x+r,m),f(e,e,t),this._offsetUpperRight=d(16*e[0],16*e[1]),this._offsets.xUpperRight=e[0],this._offsets.yUpperRight=e[1],n(e,x,m+h),f(e,e,t),this._offsetBottomLeft=d(16*e[0],16*e[1]),this._offsets.xBottomLeft=e[0],this._offsets.yBottomLeft=e[1],n(e,x+r,m+h),f(e,e,t),this._offsetBottomRight=d(16*e[0],16*e[1]),this._offsets.xBottomRight=e[0],this._offsets.yBottomRight=e[1]}_getPos(t,e){return d(Math.round(y*t),Math.round(y*e))}};export{u as default};
