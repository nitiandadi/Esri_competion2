/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
import{unpackFloatRGBA as e}from"../../core/floatRGBA.js";import has from"../../core/has.js";import{disposeMaybe as n,isNone as t}from"../../core/maybe.js";import{f as o}from"../../chunks/vec3f64.js";import{BufferObject as r}from"./BufferObject.js";import{encodeDoubleArray as i}from"./doublePrecisionUtils.js";import{TargetType as s,DepthStencilTargetType as a,TextureType as c,TextureWrapMode as u,PixelFormat as l,PixelType as p,TextureSamplingMode as f,Usage as v,DataType as h,PrimitiveType as m}from"./enums.js";import{FramebufferObject as d}from"./FramebufferObject.js";import{VertexArrayObject as _}from"./VertexArrayObject.js";import{VertexElementDescriptor as A}from"./VertexElementDescriptor.js";import{WebGLDriverTestModule as b}from"./WebGLDriverTestModule.js";class g extends b{constructor(e){super(),this._rctx=e,this._program=B(this._rctx,!1),this._obfuscated=B(this._rctx,!0)}dispose(){super.dispose(),this._obfuscated=n(this._obfuscated)}_test(e){if(has("force-double-precision-obfuscation"))return!0;if(t(this._obfuscated))return!1;const n=this._runProgram(e),o=this._runProgram(this._obfuscated);return 0!==n&&(0===o||n/o>5)}_runProgram(n){const t=this._rctx;t.resetState();const b=new d(t,{colorTarget:s.TEXTURE,depthStencilTarget:a.NONE},{target:c.TEXTURE_2D,wrapMode:u.CLAMP_TO_EDGE,pixelFormat:l.RGBA,dataType:p.UNSIGNED_BYTE,samplingMode:f.NEAREST,width:1,height:1}),g=r.createVertex(t,v.STATIC_DRAW,new Uint16Array([0,0,1,0,0,1,1,1])),B=new _(t,new Map([["position",0]]),{geometry:[new A("position",2,h.UNSIGNED_SHORT,0,4)]},{geometry:g}),E=o(5633261.287538229,2626832.878767164,1434988.0495278358),T=o(5633271.46742708,2626873.6381334523,1434963.231608387),F=new Float32Array(6);i(E,F,3);const O=new Float32Array(6);i(T,O,3),t.useProgram(n),n.setUniform3f("u_highA",F[0],F[2],F[4]),n.setUniform3f("u_lowA",F[1],F[3],F[5]),n.setUniform3f("u_highB",O[0],O[2],O[4]),n.setUniform3f("u_lowB",O[1],O[3],O[5]),t.bindFramebuffer(b),t.setViewport(0,0,1,1),t.bindVAO(B),t.drawArrays(m.TRIANGLE_STRIP,0,4);const U=new Uint8Array(4);b.readPixels(0,0,1,1,l.RGBA,p.UNSIGNED_BYTE,U),B.dispose(!1),g.dispose(),b.dispose();const w=(E[2]-T[2])/25,I=e(U);return Math.abs(w-I)}}function B(e,n){const t=`\n\n  precision highp float;\n\n  attribute vec2 position;\n\n  uniform vec3 u_highA;\n  uniform vec3 u_lowA;\n  uniform vec3 u_highB;\n  uniform vec3 u_lowB;\n\n  varying vec4 v_color;\n\n  ${n?"#define DOUBLE_PRECISION_REQUIRES_OBFUSCATION":""}\n\n  #ifdef DOUBLE_PRECISION_REQUIRES_OBFUSCATION\n\n  vec3 dpPlusFrc(vec3 a, vec3 b) {\n    return mix(a, a + b, vec3(notEqual(b, vec3(0))));\n  }\n\n  vec3 dpMinusFrc(vec3 a, vec3 b) {\n    return mix(vec3(0), a - b, vec3(notEqual(a, b)));\n  }\n\n  vec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {\n    vec3 t1 = dpPlusFrc(hiA, hiB);\n    vec3 e = dpMinusFrc(t1, hiA);\n    vec3 t2 = dpMinusFrc(hiB, e) + dpMinusFrc(hiA, dpMinusFrc(t1, e)) + loA + loB;\n    return t1 + t2;\n  }\n\n  #else\n\n  vec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {\n    vec3 t1 = hiA + hiB;\n    vec3 e = t1 - hiA;\n    vec3 t2 = ((hiB - e) + (hiA - (t1 - e))) + loA + loB;\n    return t1 + t2;\n  }\n\n  #endif\n\n  const float MAX_RGBA_FLOAT =\n    255.0 / 256.0 +\n    255.0 / 256.0 / 256.0 +\n    255.0 / 256.0 / 256.0 / 256.0 +\n    255.0 / 256.0 / 256.0 / 256.0 / 256.0;\n\n  const vec4 FIXED_POINT_FACTORS = vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);\n\n  vec4 float2rgba(const float value) {\n    // Make sure value is in the domain we can represent\n    float valueInValidDomain = clamp(value, 0.0, MAX_RGBA_FLOAT);\n\n    // Decompose value in 32bit fixed point parts represented as\n    // uint8 rgba components. Decomposition uses the fractional part after multiplying\n    // by a power of 256 (this removes the bits that are represented in the previous\n    // component) and then converts the fractional part to 8bits.\n    vec4 fixedPointU8 = floor(fract(valueInValidDomain * FIXED_POINT_FACTORS) * 256.0);\n\n    // Convert uint8 values (from 0 to 255) to floating point representation for\n    // the shader\n    const float toU8AsFloat = 1.0 / 255.0;\n\n    return fixedPointU8 * toU8AsFloat;\n  }\n\n  void main() {\n    vec3 val = dpAdd(u_highA, u_lowA, -u_highB, -u_lowB);\n\n    v_color = float2rgba(val.z / 25.0);\n\n    gl_Position = vec4(position * 2.0 - 1.0, 0.0, 1.0);\n  }\n  `,o="\n  precision highp float;\n\n  varying vec4 v_color;\n\n  void main() {\n    gl_FragColor = v_color;\n  }\n  ";return e.programCache.acquire(t,o,new Map([["position",0]]))}export{g as DoublePrecisionRequiresObfuscation};
