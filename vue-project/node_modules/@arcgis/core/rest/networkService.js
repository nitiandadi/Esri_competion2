/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
import e from"../request.js";import r from"../core/Error.js";import t from"../core/Logger.js";import{isSome as o}from"../core/maybe.js";import{getDeepValue as s}from"../core/object.js";import{removeTrailingSlash as a}from"../core/urlUtils.js";import{asValidOptions as n,parseUrl as i}from"./utils.js";import l from"./support/NetworkServiceDescription.js";const f=t.getLogger("esri.rest.networkService");function u(e,r,t,o){o[t]=[r.length,r.length+e.length],e.forEach((e=>{r.push(e.geometry)}))}function c(e,r){for(let t=0;t<r.length;t++){const o=e[r[t]];if(o&&o.length)for(const e of o)e.z=void 0}f.warnOnce("The remote Network Analysis service is powered by a network dataset which is not Z-aware.\nZ-coordinates of the input geometry are ignored.")}function d(e,r){for(let t=0;t<r.length;t++){const s=e[r[t]];if(s&&s.length)for(const e of s)if(o(e)&&e.hasZ)return!0}return!1}async function p(t,o,s){if(!t)throw new r("network-service:missing-url","Url to Network service is missing");const a=n({f:"json",token:o},s),{data:i}=await e(t,a),f=i.currentVersion>=10.4?m(t,o,s):v(t,s),{defaultTravelMode:u,supportedTravelModes:c}=await f;return i.defaultTravelMode=u,i.supportedTravelModes=c,l.fromJSON(i)}async function v(r,t){const o=n({f:"json"},t),{data:l}=await e(r.replace(/\/rest\/.*$/i,"/info"),o);if(!l||!l.owningSystemUrl)return{supportedTravelModes:[],defaultTravelMode:null};const{owningSystemUrl:f}=l,u=a(f)+"/sharing/rest/portals/self",{data:c}=await e(u,o),d=s("helperServices.routingUtilities.url",c);if(!d)return{supportedTravelModes:[],defaultTravelMode:null};const p=i(f),v=/\/solve$/i.test(p.path)?"Route":/\/solveclosestfacility$/i.test(p.path)?"ClosestFacility":"ServiceAreas",m=n({f:"json",serviceName:v},t),h=a(d)+"/GetTravelModes/execute",g=await e(h,m),w=[];let T=null;if(g?.data?.results?.length){const e=g.data.results;for(const r of e)if("supportedTravelModes"===r.paramName){if(r.value?.features)for(const{attributes:e}of r.value.features)if(e){const r=JSON.parse(e.TravelMode);w.push(r)}}else"defaultTravelMode"===r.paramName&&(T=r.value)}return{supportedTravelModes:w,defaultTravelMode:T}}async function m(t,o,s){try{const r=n({f:"json",token:o},s),i=a(t)+"/retrieveTravelModes",{data:{supportedTravelModes:l,defaultTravelMode:f}}=await e(i,r);return{supportedTravelModes:l,defaultTravelMode:f}}catch(i){throw new r("network-service:retrieveTravelModes","Could not get to the NAServer's retrieveTravelModes.",{error:i})}}export{u as collectGeometries,c as dropZValuesOffInputGeometry,p as fetchServiceDescription,d as isInputGeometryZAware};
