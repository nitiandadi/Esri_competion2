/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import r from"../../../../core/Error.js";import{isNone as e}from"../../../../core/maybe.js";import{property as a}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/arrayUtils.js";import{subclass as s}from"../../../../core/accessorSupport/decorators/subclass.js";import o from"../../../../geometry/Extent.js";import{estimateStatisticsHistograms as i}from"../../../../layers/support/rasterFunctions/stretchUtils.js";import n from"./RasterLayerAdapter.js";let m=class extends n{async generateRasterInfo(t){const{layer:r}=this;if("imagery-tile"===r.type){return await r.generateRasterInfo(r.rasterFunction,{signal:t?.signal})??r.rasterInfo}return this.rasterInfo}async estimateStatisticsHistograms(t){if(null!==this._statsCache)return this._statsCache;const{raster:a}=this.layer,{extent:s,width:o,height:n}=this._getSamplePixelBlockDescriptor(a.rasterInfo),{pixelBlock:m}=await a.fetchPixels(s,o,n,t);if(e(m))throw new r("raster-layer-adapter","Unable to estimate histograms");return this._statsCache=i(m),this._statsCache}supportsMultidirectionalHillshade(){return!0}load(t){return this.addResolvingPromise(this.layer.load(t).then((()=>this.rasterInfo=this.layer.raster.rasterInfo))),Promise.resolve(this)}_getSamplePixelBlockDescriptor(t,r=1e3){const{pyramidScalingFactor:e,maximumPyramidLevel:a}=t.storageInfo;let{extent:s,width:i,height:n,pixelSize:m}=t,l=Math.ceil(Math.log(Math.max(i,n)/r)/Math.log(e))-1,h=0,c=0;if(l<=a){const t=e**l;i=Math.floor(i/t),n=Math.floor(n/t)}else l=0,i=Math.min(i,r),n=Math.min(n,r),h=Math.max(Math.floor(i/2-500),0),c=Math.max(Math.floor(n/2-500),0),s=new o({xmin:s.xmin+h*m.x,xmax:Math.min(s.xmax,s.xmin+h*m.x*r),ymin:s.ymin+c*m.y,ymax:Math.min(s.ymax,s.ymin+c*m.y*r)});return{extent:s,width:i,height:n,origin:{x:h,y:c}}}};t([a()],m.prototype,"layer",void 0),m=t([s("esri.smartMapping.support.adapters.ImageryTileLayerAdapter")],m);const l=m;export{l as default};
