import{eB as Z,c as I,c2 as H,ex as _,c1 as tt,fP as z,fQ as et,fR as nt,fS as st}from"./mapviewstore-8a6f290e.js";function J(t){if(!t)return null;if(et(t)&&t.wkid){const e=nt[t.wkid];if(e)return e}if(t.wkt){const e=at(t.wkt);if(e)return e}return null}function at(t){const e=st.exec(t);if(!e||e.length!==2)return null;const n=e[1].split(",");if(!n||n.length<3)return null;const l=parseFloat(n[1]),s=parseFloat(n[2]);return isNaN(l)||isNaN(s)?null:{a:l,f:s===0?0:1/s}}function E(t){const e=J(t??Z.WGS84);if(it(e))return e;const n=e.a*(1-e.f);return Object.assign(e,{b:n,eSq:1-(n/e.a)**2,radius:(2*e.a+n)/3,densificationRatio:1e4/((2*e.a+n)/3)})}function it(t){return t!=null&&"b"in t&&"eSq"in t&&"radius"in t}function C(t,e,n){const{a:l,eSq:s}=E(n),a=Math.sqrt(s),r=Math.sin(e[1]*z),i=l*e[0]*z;let h;return s>0?h=l*((1-s)*(r/(1-s*(r*r))-1/(2*a)*Math.log((1-a*r)/(1+a*r))))*.5:h=l*r,t[0]=i,t[1]=h,t}function W(t){return J(t)!==null}function ht(t,e="square-meters"){if(t.some(r=>!W(r.spatialReference)))throw new I("geodesic-areas:invalid-spatial-reference","the input geometries spatial reference is not supported");const n=[];for(let r=0;r<t.length;r++){const i=t[r],h=i.spatialReference,{radius:c,densificationRatio:f}=E(h),o=c*f;n.push(ot(i,o))}const l=[],s=[0,0],a=[0,0];for(let r=0;r<n.length;r++){const{rings:i,spatialReference:h}=n[r];let c=0;for(let f=0;f<i.length;f++){const o=i[f];C(s,o[0],h),C(a,o[o.length-1],h);let M=a[0]*s[1]-s[0]*a[1];for(let d=0;d<o.length-1;d++)C(s,o[d+1],h),C(a,o[d],h),M+=a[0]*s[1]-s[0]*a[1];c+=M}c=H(c,"square-meters",e),l.push(c/-2)}return l}function ct(t,e="meters"){if(!t)throw new I("geodesic-lengths:invalid-geometries","the input geometries type is not supported");if(t.some(l=>!W(l.spatialReference)))throw new I("geodesic-lengths:invalid-spatial-reference","the input geometries spatial reference is not supported");const n=[];for(let l=0;l<t.length;l++){const s=t[l],{spatialReference:a}=s,r=s.type==="polyline"?s.paths:s.rings;let i=0;for(let h=0;h<r.length;h++){const c=r[h];let f=0;for(let o=1;o<c.length;o++){const M=c[o-1][0],d=c[o][0],y=c[o-1][1],g=c[o][1];if(y!==g||M!==d){const p=new K;L(p,[M,y],[d,g],a),f+=p.distance}}i+=f}i=H(i,"meters",e),n.push(i)}return n}function ot(t,e){if(t.type!=="polyline"&&t.type!=="polygon")throw new I("geodesic-densify:invalid-geometry","the input geometry is neither polyline nor polygon");const{spatialReference:n}=t;if(!W(n))throw new I("geodesic-densify:invalid-spatial-reference","the input geometry spatial reference is not supported");const l=t.type==="polyline"?t.paths:t.rings,s=[],a=[0,0],r=new K;for(const i of l){const h=[];s.push(h),h.push([i[0][0],i[0][1]]);let c,f,o=i[0][0],M=i[0][1];for(let d=0;d<i.length-1;d++){if(c=i[d+1][0],f=i[d+1][1],o===c&&M===f)continue;const y=[o,M];L(r,[o,M],[c,f],n);const{azimuth:g,distance:p}=r,v=p/e;if(v>1){for(let m=1;m<=v-1;m++)Q(a,y,g,m*e,n),h.push(a.slice(0));Q(a,y,g,(p+Math.floor(v-1)*e)/2,n),h.push(a.slice(0))}Q(a,y,g,p,n),h.push(a.slice(0)),o=a[0],M=a[1]}}return t.type==="polyline"?new _({paths:s,spatialReference:n}):new tt({rings:s,spatialReference:n})}class K{constructor(e=0,n,l){this.distance=e,this.azimuth=n,this.reverseAzimuth=l}}function Q(t,e,n,l,s){const a=e[0],r=e[1],i=a*z,h=r*z,c=(n??0)*z,{a:f,b:o,f:M}=E(s),d=Math.sin(c),y=Math.cos(c),g=(1-M)*Math.tan(h),p=1/Math.sqrt(1+g*g),v=g*p,m=Math.atan2(g,y),P=p*d,k=P*P,q=1-k,u=q*(f*f-o*o)/(o*o),A=1+u/16384*(4096+u*(u*(320-175*u)-768)),x=u/1024*(256+u*(u*(74-47*u)-128));let R,N,w,F,S=l/(o*A),b=2*Math.PI;for(;Math.abs(S-b)>1e-12;)w=Math.cos(2*m+S),R=Math.sin(S),N=Math.cos(S),F=x*R*(w+x/4*(N*(2*w*w-1)-x/6*w*(4*R*R-3)*(4*w*w-3))),b=S,S=l/(o*A)+F;const $=v*R-p*N*y,j=Math.atan2(v*N+p*R*y,(1-M)*Math.sqrt(k+$*$)),O=Math.atan2(R*d,p*N-v*R*y),G=M/16*q*(4+M*(4-3*q)),U=j/z,B=(i+(O-(1-G)*M*P*(S+G*R*(w+G*N*(2*w*w-1)))))/z;return t[0]=B,t[1]=U,t}function L(t,e,n,l){const s=e[0]*z,a=e[1]*z,r=n[0]*z,i=n[1]*z,{a:h,b:c,f,radius:o}=E(l),M=r-s,d=Math.atan((1-f)*Math.tan(a)),y=Math.atan((1-f)*Math.tan(i)),g=Math.sin(d),p=Math.cos(d),v=Math.sin(y),m=Math.cos(y);let P,k,q,u,A,x,R,N,w,F,S=1e3,b=M;do{if(R=Math.sin(b),N=Math.cos(b),q=Math.sqrt(m*R*(m*R)+(p*v-g*m*N)*(p*v-g*m*N)),q===0)return t.distance=0,t.azimuth=void 0,t.reverseAzimuth=void 0,t;A=g*v+p*m*N,x=Math.atan2(q,A),w=p*m*R/q,k=1-w*w,u=A-2*g*v/k,isNaN(u)&&(u=0),F=f/16*k*(4+f*(4-3*k)),P=b,b=M+(1-F)*f*w*(x+F*q*(u+F*A*(2*u*u-1)))}while(Math.abs(b-P)>1e-12&&--S>0);if(S===0){const B=o,T=Math.acos(Math.sin(a)*Math.sin(i)+Math.cos(a)*Math.cos(i)*Math.cos(r-s))*B,D=r-s,V=Math.sin(D)*Math.cos(i),X=Math.cos(a)*Math.sin(i)-Math.sin(a)*Math.cos(i)*Math.cos(D),Y=Math.atan2(V,X);return t.azimuth=Y/z,t.distance=T,t.reverseAzimuth=void 0,t}const $=k*(h*h-c*c)/(c*c),j=$/1024*(256+$*($*(74-47*$)-128)),O=c*(1+$/16384*(4096+$*($*(320-175*$)-768)))*(x-j*q*(u+j/4*(A*(2*u*u-1)-j/6*u*(4*q*q-3)*(4*u*u-3)))),G=Math.atan2(m*Math.sin(b),p*v-g*m*Math.cos(b)),U=Math.atan2(p*Math.sin(b),p*v*Math.cos(b)-g*m);return t.azimuth=G/z,t.distance=O,t.reverseAzimuth=U/z,t}export{W as M,L as b,K as v,ht as w,ct as y,Q as z};
