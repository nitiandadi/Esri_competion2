import{r,bB as b,e as a,v as D,eh as G,o as M,t as d,p as z,cu as I,wt as H,ct as S,fw as v,cb as E,ce as L,hu as O,dd as R,y as n,b as X,cq as Y,fM as k}from"./mapviewstore-8a6f290e.js";import{l as q}from"./elevationInfoUtils-db1a4384.js";import{o as N}from"./drapedUtils-23d99367.js";function V(e){let s=0,i=0,t=0;return e?(e.type==="cim"&&e.data.symbol&&"symbolLayers"in e.data.symbol&&e.data.symbol.symbolLayers&&e.data.symbol.symbolLayers.map(o=>{o.type==="CIMVectorMarker"&&o.anchorPoint&&(Math.abs(o.anchorPoint.x)>s&&(s=o.anchorPoint.x),Math.abs(o.anchorPoint.y)>i&&(i=o.anchorPoint.y),r(o.size)&&o.size>t&&(t=o.size))}),s=b(s),i=b(i),t=b(t),{offsetX:s,offsetY:i,size:t}):{offsetX:s,offsetY:i,size:t}}let l=class extends D{set graphic(e){this._circleCollisionCache=null,this._originalSymbol=e.symbol,this._set("graphic",e),this.attachSymbolChanged()}get elevationInfo(){const{layer:e}=this.graphic,s=e&&"elevationInfo"in e?e.elevationInfo:null,i=q(this.graphic),t=s?s.offset:0;return new G({mode:i,offset:t})}set focusedSymbol(e){e!==this._get("focusedSymbol")&&(this._set("focusedSymbol",e),this._updateGraphicSymbol(),this._circleCollisionCache=null)}grabbableForEvent(){return!0}set grabbing(e){e!==this._get("grabbing")&&(this._set("grabbing",e),this._updateGraphicSymbol())}set hovering(e){e!==this._get("hovering")&&(this._set("hovering",e),this._updateGraphicSymbol())}set selected(e){e!==this._get("selected")&&(this._set("selected",e),this._updateGraphicSymbol(),this.events.emit("select-changed",{action:e?"select":"deselect"}))}get _focused(){return this._get("hovering")||this._get("grabbing")}constructor(e){super(e),this.layer=null,this.interactive=!0,this.selectable=!1,this.grabbable=!0,this.dragging=!1,this.cursor=null,this.events=new M.EventEmitter,this._circleCollisionCache=null,this._graphicSymbolChangedHandle=null,this._originalSymbol=null}destroy(){this.detachSymbolChanged(),this._resetGraphicSymbol(),this._set("view",null)}intersectionDistance(e){const s=this.graphic;if(s.visible===!1)return null;const i=s.geometry;if(d(i))return null;const t=this._get("focusedSymbol"),o=r(t)?t:s.symbol;return this.view.type==="2d"?this._intersectDistance2D(this.view,e,i,o):this._intersectDistance3D(this.view,e,s)}attach(){this.attachSymbolChanged(),r(this.layer)&&this.layer.add(this.graphic)}detach(){this.detachSymbolChanged(),this._resetGraphicSymbol(),r(this.layer)&&this.layer.remove(this.graphic)}attachSymbolChanged(){this.detachSymbolChanged(),this._graphicSymbolChangedHandle=z(()=>{var e;return(e=this.graphic)==null?void 0:e.symbol},e=>{r(e)&&e!==this.focusedSymbol&&e!==this._originalSymbol&&(this._originalSymbol=e,this._focused&&r(this.focusedSymbol)&&(this.graphic.symbol=this.focusedSymbol))},I)}detachSymbolChanged(){r(this._graphicSymbolChangedHandle)&&(this._graphicSymbolChangedHandle.remove(),this._graphicSymbolChangedHandle=null)}onElevationChange(){}onViewChange(){}_updateGraphicSymbol(){this.graphic.symbol=this._focused&&r(this.focusedSymbol)?this.focusedSymbol:this._originalSymbol}_resetGraphicSymbol(){this.graphic.symbol=this._originalSymbol}_intersectDistance2D(e,s,i,t){var m,f;if(t=t||H(i),d(t))return null;const o=1;let c=this._circleCollisionCache;if(i.type==="point"&&t.type==="cim"&&((m=t.data.symbol)==null?void 0:m.type)==="CIMPointSymbol"&&t.data.symbol.symbolLayers){const{offsetX:y,offsetY:h,size:p}=V(t),g=S(s,w),u=p/2,_=e.toScreen(i),P=_.x+y,x=_.y+h;return v(g,[P,x])<u*u?o:null}if(i.type!=="point"||t.type!=="simple-marker")return N(s,i,e)?o:null;if(d(c)||!c.originalPoint.equals(i)){const y=i,h=e.spatialReference;if(E(y.spatialReference,h)){const p=L(y,h);c={originalPoint:y.clone(),mapPoint:p,radiusPx:b(t.size)},this._circleCollisionCache=c}}if(r(c)){const y=S(s,w),h=(f=e.toScreen)==null?void 0:f.call(e,c.mapPoint);if(!h)return null;const p=c.radiusPx,g=h.x+b(t.xoffset),u=h.y-b(t.yoffset);return v(y,[g,u])<p*p?o:null}return null}_intersectDistance3D(e,s,i){const t=e.toMap(s,{include:[i]});return t&&O(t,C,e.renderSpatialReference)?R(C,e.state.camera.eye):null}};a([n({constructOnly:!0,nonNullable:!0})],l.prototype,"graphic",null),a([n()],l.prototype,"elevationInfo",null),a([n({constructOnly:!0,nonNullable:!0})],l.prototype,"view",void 0),a([n({value:null})],l.prototype,"focusedSymbol",null),a([n({constructOnly:!0})],l.prototype,"layer",void 0),a([n()],l.prototype,"interactive",void 0),a([n()],l.prototype,"selectable",void 0),a([n()],l.prototype,"grabbable",void 0),a([n({value:!1})],l.prototype,"grabbing",null),a([n()],l.prototype,"dragging",void 0),a([n()],l.prototype,"hovering",null),a([n({value:!1})],l.prototype,"selected",null),a([n()],l.prototype,"cursor",void 0),l=a([X("esri.views.interactive.GraphicManipulator")],l);const C=Y(),w=k();export{l as j,V as t};
