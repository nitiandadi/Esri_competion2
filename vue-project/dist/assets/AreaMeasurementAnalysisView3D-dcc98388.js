import{cq as c,i8 as Te,gR as ee,cb as Ve,qI as Ie,hu as Z,hv as Ee,hx as je,fm as oe,dd as Ue,qJ as qe,qK as he,qL as le,fE as We,ft as Fe,hM as ke,fs as J,hT as de,fo as R,g$ as Y,fF as ce,h5 as pe,qM as Ne,c7 as Be,fH as He,mb as ue,qN as ge,qO as Ke,eB as Je,im as Xe,r as _,cg as Re,js as Qe,e as o,y as l,b as Q,v as ne,p as j,cu as me,qP as Ze,qQ as Ye,s as et,o as tt,ba as Ge,h4 as _e,av as v,h7 as st,E as te,qR as it,t as U,q as E,aD as rt,iB as nt,jE as at,ho as x,iA as Le,jG as ot,iz as ht,iR as ye,jD as lt,jI as q,iE as dt,qS as ct,ds as N,iF as pt,iG as ut,iU as gt,iH as mt,jM as _t,ka as Lt,jO as yt,jP as ft,iJ as vt,iO as G,jK as St,kf as wt,c_ as fe,c$ as B,kh as Ct,ki as bt,jT as Pt,jU as At,dD as De,i9 as X,hC as $,i4 as Mt,hE as ve,hF as Se,oi as $t,jh as Vt,h1 as we,b3 as z,gI as Rt,qT as Gt,au as Dt,qU as xt,c2 as Ot,je as zt,qV as Tt,qW as It,qX as Et,qY as jt,ax as Ut}from"./mapviewstore-8a6f290e.js";import{e as qt}from"./defaultUnit-99281ff3.js";import{n as Wt}from"./AnalysisView3D-cc96cd7b.js";import{c as se,e as ie,t as Ft}from"./UnitNormalizer-4a541ea8.js";import{a as T,o as Ce,v as kt,g as be}from"./quantityFormatUtils-6059fd77.js";import{q as Nt,P as Bt,x as Ht,v as Kt,M as Jt,w as Xt,k as Qt,b as Zt}from"./measurementUtils-101e252c.js";import{v as Pe}from"./euclideanAreaMeasurementUtils-352e0847.js";import{a as Yt,n as es,g as I}from"./LineVisualElement-edc641a4.js";import{V as Ae,g as ts,w as ss,p as is}from"./EditGeometryOperations-03e088f6.js";import{i as H,u as rs,s as ns,c as as}from"./analysisThemeUtils-81ceedff.js";import{g as K,m as Me,f as re}from"./Segment-07134633.js";import{l as os}from"./index-93a23f67.js";class hs{constructor(e,s){this.positionsWorldCoords=[],this.positionsRenderCoords=[],this.positionsProjectedWorldCoords=[],this.positionsFittedRenderCoords=[],this.positionsGeographic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.areaCentroidWorldCoords=c(),this.areaCentroidRenderCoords=c(),this.geodesicAreaCentroidRenderCoords=c(),this.area=null,this.geodesicArea=null,this.pathLength=null,this.geodesicPathLength=null,this.perimeterLength=null,this._length=0,this._centroidRenderCoords=c(),this._planeWorldCoords=Te(),this._worldUp=c(),this._worldTangent=c(),this._frame=[c(),c(),c()],this._pathVersion=-1,this._validMeasurement=!1,this._hasCursorPoint=!1,this._mode=null,this._tempU=c(),this._tempV=c(),this._tempVec3=c(),this._tempSphere={center:c(),radius:0},this._sceneView=e,this.unitNormalizer=s}update(e,s,i,r,a,n,h){const d=this.unitNormalizer,u=this._sceneView.renderSpatialReference,p=this.unitNormalizer.spatialReference,m=_(s);if(this._pathVersion===e.version&&this._validMeasurement===r&&!h&&this._hasCursorPoint===m&&this._mode===n)return!e.isValidPolygon&&(this._updateCursorSegmentLength(e,s),!0);this._pathVersion=e.version,this._validMeasurement=r,this._hasCursorPoint=m;const g=e.numVertices;this._resize(g);const f=ee(i.spatialReference),C=Ve(i.spatialReference,f)&&Ie(i.spatialReference),{positionsGeographic:b,positionsWorldCoords:W,positionsRenderCoords:P,positionsSpherical:V}=this;e.forEachVertexPosition((y,w)=>{ls(i.elevationProvider,y),Z(y,W[w],p),Z(y,P[w],u),C&&(Ee(y,b[w]),Z(y,V[w],f),je(V[w],V[w]))});const F=this._updatePathLengths(r);if(this.pathLength=this._length>1?T(d.normalizeDistance(F),"meters"):null,C){const y=this._updateGeodesicPathLengths(r,p);this.geodesicPathLength=this._length>1?T(y,"meters"):null}else this.geodesicPathLength=null;return this._updateCursorSegmentLength(e,s),this._updateMode(e,n),r?(this._updateArea(i,d,u,p,a),C&&this._updateGeodesicArea(i),!0):(this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),this.geodesicIntersectingSegments.clear(),!0)}getData(){return{positionsWorldCoords:this.positionsWorldCoords,positionsRenderCoords:this.positionsRenderCoords,positionsProjectedWorldCoords:this.positionsProjectedWorldCoords,positionsFittedRenderCoords:this.positionsFittedRenderCoords,positionsGeographic:this.positionsGeographic,positionsSpherical:this.positionsSpherical,positionsStereographic:this.positionsStereographic,pathSegmentLengths:this.pathSegmentLengths,geodesicPathSegmentLengths:this.geodesicPathSegmentLengths,perimeterSegmentLengths:this.perimeterSegmentLengths,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidWorldCoords:this.areaCentroidWorldCoords,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,fittingMode:this.fittingMode,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,cursorSegmentLength:this.cursorSegmentLength,geodesicCursorSegmentLength:this.geodesicCursorSegmentLength,unitNormalizer:this.unitNormalizer,actualMeasurementMode:this.actualMeasurementMode}}_resize(e){for(e<this._length&&(this.positionsWorldCoords.length=e,this.positionsRenderCoords.length=e,this.positionsProjectedWorldCoords.length=e,this.positionsFittedRenderCoords.length=e,this.positionsGeographic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorldCoords.push(c()),this.positionsRenderCoords.push(c()),this.positionsProjectedWorldCoords.push(oe()),this.positionsFittedRenderCoords.push(c()),this.positionsGeographic.push(c()),this.positionsSpherical.push(c()),this.positionsStereographic.push(oe()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const s=this.positionsWorldCoords,i=this.pathSegmentLengths;let r=0;for(let a=0;a<this._length;++a){const n=i[a]=Ue(s[a],s[(a+1)%this._length]);(a<this._length-1||e)&&(r+=n)}return r}_updateGeodesicPathLengths(e,s){const i=this.positionsGeographic,r=this.geodesicPathSegmentLengths;let a=0;for(let n=0;n<this._length;++n){const h=r[n]=Nt(i[n],i[(n+1)%this._length],s??void 0);(n<this._length-1||e)&&(a+=h)}return a}_updateArea(e,s,i,r,a){const n=e.renderCoordsHelper,h=this.positionsWorldCoords,d=this.positionsRenderCoords,u=this.positionsProjectedWorldCoords,p=this.positionsFittedRenderCoords,m=this._planeWorldCoords,g=this._centroidRenderCoords;se(d,g),n.worldUpAtPosition(g,this._worldUp),n.worldBasisAtPosition(g,qe.X,this._worldTangent),he(g,this._worldUp,i,this._worldUp,r),he(g,this._worldTangent,i,this._worldTangent,r),h.length>2&&Bt(h,m),this.fittingMode=this._selectFittingMode(m,h,this._worldUp,a);let f=0;if(this.fittingMode==="horizontal"){let y=-1/0;d.forEach((w,k)=>{const ae=n.getAltitude(d[k]);ae>y&&(y=ae,f=k)})}const C=h[f];let b=m,W=this._worldTangent;this.fittingMode==="horizontal"?b=this._worldUp:this.fittingMode==="vertical"&&(b=this._tempVec3,W=this._worldUp,le(m,this._worldUp,b)),We(this._frame[2],b),le(W,b,this._frame[0]),Fe(this._frame[1],this._frame[0],this._frame[2]),ke(this._frame[1],this._frame[1]);const P=this._tempVec3,V=this._tempU,F=this._tempV;for(let y=0;y<this._length;++y){const w=u[y],k=p[y];J(P,h[y],C),de(w,R(this._frame[0],P),R(this._frame[1],P)),Y(V,this._frame[0],w[0]),Y(F,this._frame[1],w[1]),ce(P,V,F),ce(P,P,C),pe(P,r,k,i)}this.perimeterLength=this._length>0?T(s.normalizeDistance(this._updatePerimeterLengths()),"meters"):null,se(p,this.areaCentroidRenderCoords),pe(this.areaCentroidRenderCoords,i,this.areaCentroidWorldCoords,r),this._updateIntersectingSegments(),this.area=this.intersectingSegments.size===0?Ce(s.normalizeArea(this._computeArea()),"square-meters"):null}_updateGeodesicArea(e){const{renderCoordsHelper:s,spatialReference:i}=e,{positionsSpherical:r,positionsStereographic:a}=this,n=this._tempVec3,h=Ht(r,n);if(!h)return void(this.geodesicArea=null);const d=this._tempU,u=this._tempV;Ne(n,d,u);for(let p=0;p<this._length;++p){const m=R(r[p],d),g=R(r[p],u),f=R(r[p],n);de(a[p],m/f,g/f)}Y(n,n,Be(i).radius),s.toRenderCoords(n,ee(i),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=h&&this.geodesicIntersectingSegments.size===0?Ce(this._computeGeodesicArea(),"square-meters"):null}_updatePerimeterLengths(){const e=this.positionsProjectedWorldCoords,s=this.perimeterSegmentLengths;let i=0;for(let r=0;r<this._length;++r)i+=s[r]=He(e[r],e[(r+1)%this._length]);return i}_updateIntersectingSegments(){const e=this.positionsProjectedWorldCoords,s=this.intersectingSegments;s.clear();for(let i=0;i<this._length;++i)for(let r=i+2;r<this._length;++r){if((r+1)%this._length===i)continue;const a=e[i],n=e[(i+1)%this._length],h=e[r],d=e[(r+1)%this._length];ue(a,n,h,d)&&(s.add(i),s.add(r))}}_computeArea(){const e=this.positionsProjectedWorldCoords,s=this.triangleIndices=ge(Pe(e));let i=0;for(let r=0;r<s.length;r+=3)i+=Ke(e[s[r]],e[s[r+1]],e[s[r+2]]);return i}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,s=this.geodesicIntersectingSegments;s.clear();for(let i=0;i<this._length;++i)for(let r=i+2;r<this._length;++r){if((r+1)%this._length===i)continue;const a=e[i],n=e[(i+1)%this._length],h=e[r],d=e[(r+1)%this._length];ue(a,n,h,d)&&(s.add(i),s.add(r))}}_computeGeodesicArea(){const e=this.positionsGeographic,s=this.positionsStereographic,i=this.geodesicTriangleIndices=ge(Pe(s));let r=0;for(let a=0;a<i.length;a+=3)r+=Kt(e[i[a]],e[i[a+1]],e[i[a+2]],Je.WGS84);return r}_selectFittingMode(e,s,i,r){const a=s.map(p=>Math.abs(Jt(e,p))).reduce((p,m)=>Math.max(p,m),0);Xt(s,this._tempSphere);const n=a/(2*this._tempSphere.radius),h=n<r.maxRelativeErrorCoplanar,d=n<r.maxRelativeErrorAlmostCoplanar;let u="horizontal";return h?u="oblique":d&&(u=Math.abs(R(i,e))>Math.cos(Xe(r.verticalAngleThreshold))?"horizontal":"vertical"),u}_updateCursorSegmentLength(e,s){const i=e.lastPoint;!e.isValidPolygon&&_(i)&&_(s)?(this.geodesicCursorSegmentLength=T(Qt(i,s),"meters"),this.cursorSegmentLength=T(this.unitNormalizer.normalizeDistance(Zt(i,s,this.unitNormalizer.spatialReference)),"meters")):(this.geodesicCursorSegmentLength=null,this.cursorSegmentLength=null)}_updateMode(e,s){if(s===ie.Auto){this.actualMeasurementMode="euclidean";let i=0;this.geodesicPathLength!=null&&(i+=this.geodesicPathLength.value),!e.isValidPolygon&&_(this.geodesicCursorSegmentLength)&&(i+=this.geodesicCursorSegmentLength.value),i>ds&&(this.actualMeasurementMode="geodesic")}else this.actualMeasurementMode=s===ie.Euclidean?"euclidean":"geodesic";this.geodesicPathLength==null&&(this.actualMeasurementMode="euclidean"),this._mode=s}}function ls(t,e){e.hasZ||(e.z=Re(Qe(t,e,"ground"),0))}const ds=1e5;let D=class extends ne{constructor(t){super(t)}initialize(){const t=this.view.spatialReference,e=ee(t),s=e===Ze?Ye:e,i=!t||Ve(t,s)?s:t,r=new Ft(i);this._measurementDataManager=new hs(this.view,r),this.addHandles([this.analysisViewData.path.on("change",()=>this._update()),j(()=>this.analysisViewData.cursorPoint,()=>this._update(),me),j(()=>this.analysisViewData.mode,()=>this._update(),me)]),this._update()}_update(t=!1){const{analysisViewData:e,view:s}=this,i={maxRelativeErrorCoplanar:.005,maxRelativeErrorAlmostCoplanar:.01,verticalAngleThreshold:80};this._measurementDataManager.update(e.path,e.cursorPoint,s,e.validMeasurement,i,e.mode,t)&&(e.measurementData=this._measurementDataManager.getData())}};o([l({constructOnly:!0})],D.prototype,"view",void 0),o([l({constructOnly:!0})],D.prototype,"analysis",void 0),o([l({constructOnly:!0})],D.prototype,"analysisViewData",void 0),D=o([Q("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementController")],D);const xe="esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurement3DPathHelper",cs=et.getLogger(xe);let A=class extends tt.EventedAccessor{constructor(t={}){super(t),this._handles=new Ge,this._version=0,this._internalGeometryChange=!1,this._extent=_e()}destroy(){this._handles=v(this._handles)}set areaMeasurement(t){this._set("areaMeasurement",t),_(t)&&_(this.view)&&this._initialize(t,this.view)}set view(t){this._set("view",t),_(t)&&_(this.areaMeasurement)&&this._initialize(this.areaMeasurement,t)}get constructed(){return _(this.areaMeasurement)&&_(this.view)}get version(){return this._version}get isValidPolygon(){return this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].isClosed()}get extent(){if(this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].vertices.length>0){const t=_e(this._extent);return this.forEachVertex(e=>{st(t,e.pos)}),t}return null}get spatialReference(){return this.constructed?this._editGeometry.coordinateHelper.spatialReference:null}_initialize(t,e){this._handles.removeAll(),this._handles.add(j(()=>t.geometry,()=>{this._updateEditGeometryFromModelGeometry(t,e)},te)),this._makeDirty(!0)}_makeDirty(t=!1){this.notifyChange("isValidPolygon"),this.notifyChange("initialized"),this.notifyChange("extent"),t&&this.notifyChange("numVertices")}_updateEditGeometryFromModelGeometry(t,e){if(this._version++,this._internalGeometryChange)return;this._handles.remove("EditGeometry");let s=t.geometry;if(_(s)){const i=it(s,e.spatialReference);U(i)&&Yt(t,s.spatialReference,cs),s=i}_(s)?this._editGeometryOperations=Ae.fromGeometry(s,e.state.viewingMode):this._editGeometryOperations=new Ae(new ts("polygon",ss(!0,!1,e.spatialReference))),this._makeDirty(!0),this.emit("change"),this._handles.add(this._editGeometry.on("change",i=>{this._makeDirty(i.addedVertices!=null||i.removedVertices!=null),this._internalGeometryChange=!0,t.geometry=this.numVertices>0?this._editGeometry.geometry:null,this._internalGeometryChange=!1}),"EditGeometry")}get _editGeometry(){return this._editGeometryOperations.data}get vertices(){const t=[];return this.forEachVertex(e=>{t.push(e)}),t}get numVertices(){return this.constructed&&this._editGeometry.components.length>0?this._editGeometry.components[0].vertices.length:0}get lastPoint(){if(this.constructed&&this._editGeometry.components.length>0){const t=this._editGeometry.components[0].getLastVertex();if(_(t))return this._editGeometry.coordinateHelper.vectorToPoint(t.pos)}return null}getVertex(t){if(!this.constructed||this._editGeometry.components.length===0||this._editGeometry.components[0].vertices.length===0)return null;const e=this._editGeometry.components[0].vertices[0];let s=e;do{if(s.index===t)return s;s=s.rightEdge.rightVertex}while(s!==e&&s!=null);return null}getVertexPositionAsPoint(t){return this._editGeometry.coordinateHelper.vectorToPoint(t.pos)}getVertexPositionAsPointFromIndex(t){return this._editGeometry.coordinateHelper.vectorToPoint(this.getVertex(t).pos)}forEachVertex(t){this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].iterateVertices(t)}forEachVertexPosition(t){const e=this._editGeometry.coordinateHelper;this.forEachVertex((s,i)=>{e.vectorToPoint(s.pos,$e),t($e,i)})}clear(){_(this.areaMeasurement)&&(this.areaMeasurement.geometry=null)}add(t){if(!this.constructed)return null;if(this._editGeometry.components.length===0){const s=E(this.view);this._editGeometry.components.push(new is(s.spatialReference,s.state.viewingMode))}const e=this._editGeometryOperations.appendVertex(this._editGeometry.coordinateHelper.pointToVector(t));return this.emit("change"),e}close(){if(!this.constructed||this._editGeometry.components.length===0)return null;const t=this._editGeometryOperations.closeComponent(this._editGeometry.components[0]);return this.emit("change"),t}ensureContains(t,e=""){let s=!1;if(this._editGeometry.components.forEach(i=>{i.iterateVertices(r=>{r===t&&(s=!0)})}),!s)throw new Error(`vertex doesnt exist ${e}`);return s}setVertexPosition(t,e){if(!this.constructed)return null;const s=this._editGeometryOperations.setVertexPosition(t,this._editGeometry.coordinateHelper.pointToVector(e));return this.emit("change"),s}equals(t){if(this.numVertices!==t.numVertices)return!1;let e=!0;return this.forEachVertexPosition((s,i)=>{const r=t.getVertexPositionAsPointFromIndex(i);s.equals(r)||(e=!1)}),!!e}};o([l({value:null})],A.prototype,"areaMeasurement",null),o([l({value:null})],A.prototype,"view",null),o([l()],A.prototype,"isValidPolygon",null),o([l()],A.prototype,"extent",null),o([l()],A.prototype,"spatialReference",null),o([l()],A.prototype,"numVertices",null),A=o([Q(xe)],A);const $e=new rt;function ps(t){const e=new nt;e.extensions.add("GL_OES_standard_derivatives");const{vertex:s,fragment:i}=e;return at(s,t),e.attributes.add(x.POSITION,"vec3"),e.attributes.add(x.UV0,"vec2"),e.varyings.add("vUV","vec2"),t.hasMultipassTerrain&&e.varyings.add("depth","float"),s.code.add(Le`
    void main(void) {
      vUV = uv0;
      ${t.hasMultipassTerrain?"depth = (view * vec4(position, 1.0)).z;":""}
      gl_Position = proj * view * vec4(position, 1.0);
    }
  `),e.include(ot,t),i.uniforms.add(new ht("size",r=>r.size)),i.uniforms.add(new ye("color1",r=>r.color1)),i.uniforms.add(new ye("color2",r=>r.color2)),i.include(lt),i.code.add(Le`
    void main() {
      ${t.hasMultipassTerrain?"terrainDepthTest(gl_FragCoord, depth);":""}
      vec2 uvScaled = vUV / (2.0 * size);

      vec2 uv = fract(uvScaled - 0.25);
      vec2 ab = clamp((abs(uv - 0.5) - 0.25) / fwidth(uvScaled), -0.5, 0.5);
      float fade = smoothstep(0.25, 0.5, max(fwidth(uvScaled.x), fwidth(uvScaled.y)));
      float t = mix(abs(ab.x + ab.y), 0.5, fade);

      gl_FragColor = mix(color2, color1, t);
      ${t.transparencyPassType===q.Color?"gl_FragColor = premultiplyAlpha(gl_FragColor);":""}
    }
  `),e}const us=Object.freeze(Object.defineProperty({__proto__:null,build:ps},Symbol.toStringTag,{value:"Module"}));let Oe=class ze extends pt{initializeProgram(e){return new ut(e.rctx,ze.shader.get().build(this.configuration),gt)}_setPipelineState(e){const s=this.configuration,i=e===q.NONE,r=e===q.FrontFace;return mt({blending:s.transparent?i?ms:_t(e):null,depthTest:{func:Lt(e)},depthWrite:i?s.writeDepth?yt:null:ft(e),colorWrite:vt,polygonOffset:i||r?s.polygonOffset?gs:null:{factor:-1,units:-25}})}initializePipeline(){return this._setPipelineState(this.configuration.transparencyPassType)}};Oe.shader=new dt(us,()=>os(()=>import("./CheckerBoard.glsl-13c80a98.js"),["assets/CheckerBoard.glsl-13c80a98.js","assets/mapviewstore-8a6f290e.js","assets/index-93a23f67.js","assets/index-2d69a2d2.css","assets/defaultUnit-99281ff3.js","assets/getDefaultUnitForView-09ed9ab9.js","assets/AnalysisView3D-cc96cd7b.js","assets/UnitNormalizer-4a541ea8.js","assets/quantityFormatUtils-6059fd77.js","assets/measurementUtils-101e252c.js","assets/geometryEngine-31bba3a2.js","assets/geometryEngineBase-e1a33b0a.js","assets/hydrated-a556b3e7.js","assets/geodesicUtils-0ed15d7f.js","assets/euclideanAreaMeasurementUtils-352e0847.js","assets/measurementUtils-834d1f5d.js","assets/LineVisualElement-edc641a4.js","assets/VisualElement-cf195c8c.js","assets/EditGeometryOperations-03e088f6.js","assets/geometry2dUtils-3b519363.js","assets/analysisThemeUtils-81ceedff.js","assets/colorUtils-9fd88e2d.js","assets/Segment-07134633.js","assets/viewUtils-4b1f07e9.js","assets/elevationInfoUtils-db1a4384.js","assets/TextOverlayItem-0a39aaf7.js"]));const gs={factor:0,units:-25},ms=ct(N.SRC_ALPHA,N.ONE,N.ONE_MINUS_SRC_ALPHA,N.ONE_MINUS_SRC_ALPHA);class M extends St{constructor(){super(...arguments),this.transparencyPassType=q.NONE,this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1,this.hasMultipassTerrain=!1,this.cullAboveGround=!1}}o([G({count:q.COUNT})],M.prototype,"transparencyPassType",void 0),o([G()],M.prototype,"transparent",void 0),o([G()],M.prototype,"writeDepth",void 0),o([G()],M.prototype,"polygonOffset",void 0),o([G()],M.prototype,"hasMultipassTerrain",void 0),o([G()],M.prototype,"cullAboveGround",void 0);class _s extends wt{constructor(e){super(e,new ys),this._configuration=new M}dispose(){}getConfiguration(e,s){return this._configuration.transparent=this.parameters.transparent,this._configuration.writeDepth=this.parameters.writeDepth,this._configuration.polygonOffset=this.parameters.polygonOffset,this._configuration.transparencyPassType=s.transparencyPassType,this._configuration.hasMultipassTerrain=s.multipassTerrain.enabled,this._configuration.cullAboveGround=s.multipassTerrain.cullAboveGround,this._configuration}requiresSlot(e,s){return s===fe.Color||s===fe.Alpha?e===(this.parameters.transparent?this.parameters.writeDepth?B.TRANSPARENT_MATERIAL:B.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL:B.OPAQUE_MATERIAL)||e===B.DRAPED_MATERIAL:!1}createGLMaterial(e){return new Ls(e)}createBufferWriter(){return new Ct(bt)}}let Ls=class extends Pt{beginSlot(e){return this.ensureTechnique(Oe,e)}};class ys extends At{constructor(){super(...arguments),this.size=De(1,1),this.color1=X(.75,.75,.75,1),this.color2=X(.5,.5,.5,1),this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1}}class fs extends es{constructor(e){super(e),this._checkerBoardMaterial=null,this._renderOccluded=$.OccludeAndTransparent,this._geometry=null,this._size=De(1,1),this._color1=X(1,.5,0,.5),this._color2=X(1,1,1,.5),this.applyProps(e)}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this._updateMaterial())}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this._geometryChanged()}get size(){return this._size}set size(e){Mt(this._size,e),this._updateMaterial()}get color1(){return this._color1}set color1(e){ve(e,this._color1)||(Se(this._color1,e),this._updateMaterial())}get color2(){return this._color2}set color2(e){ve(e,this._color2)||(Se(this._color2,e),this._updateMaterial())}_updateMaterial(){_(this._checkerBoardMaterial)&&this._checkerBoardMaterial.setParameters({size:this._size,color1:this._color1,color2:this._color2,renderOccluded:this._renderOccluded})}createExternalResources(){this._checkerBoardMaterial=new _s({size:this._size,color1:this._color1,color2:this._color2,transparent:!0,writeDepth:!1,polygonOffset:!0,renderOccluded:$.OccludeAndTransparent})}destroyExternalResources(){this._checkerBoardMaterial=null}forEachExternalMaterial(e){_(this._checkerBoardMaterial)&&e(this._checkerBoardMaterial)}createGeometries(e){if(U(this._geometry)||U(this._checkerBoardMaterial))return;const s=vs;$t(s,this.transform);const i=this._geometry,r=[],a=c();i.position.forEach(d=>{J(a,d,s),r.push(a[0],a[1],a[2])});const n=[];i.uv.forEach(d=>{n.push(d[0],d[1])});const h=new Vt(this._checkerBoardMaterial,[[x.POSITION,new we(r,3,!0)],[x.UV0,new we(n,2,!0)]],[[x.POSITION,i.triangleIndices],[x.UV0,i.triangleIndices]]);e.addGeometry(h)}_geometryChanged(){this.recreateGeometry()}}const vs=c();let S=class extends ne{get visible(){return this.analysisViewData.visible}get testData(){return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,perimeterLength:this._perimeterLengthLabel}}}constructor(t){super(t),this._handles=new Ge,this._params={pathLineColor:z.toUnitRGBA(H()),pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:z.toUnitRGBA(H()),perimeterLineWidth:2,projectionLineColor:z.toUnitRGBA(H()),projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:z.toUnitRGBA(H(.5)),areaColor2:z.toUnitRGBA(rs(.5)),labelDistance:25},this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._measurementArea=null,this._areaLabel=null,this._pathLengthLabel=null,this._cursorSegmentLengthLabel=null,this._perimeterLengthLabel=null,this._pathSegments=[],this._perimeterSegments=[],this._cursorSegment=null,this._origin=c(),this._originTransform=Rt(),this._cursorPositionRenderSpace=c(),this.messages=null,this.viewData=Ss,this.areaLabel=null,this.perimeterLengthLabel=null,this.loadingMessages=!0}initialize(){const{analysisViewData:t,_params:e,view:s}=this;this._path=new I({view:s,attached:!0,width:e.pathLineWidth,color:e.pathLineColor,polygonOffset:!0,renderOccluded:$.OccludeAndTransparent}),this._intersectedPath=new I({view:s,attached:!0,width:e.pathLineWidth,color:e.intersectingLineColor,polygonOffset:!0,renderOccluded:$.OccludeAndTransparent}),this._perimeter=new I({view:s,attached:!0,width:e.perimeterLineWidth,color:e.perimeterLineColor,polygonOffset:!0,renderOccluded:$.OccludeAndTransparent}),this._intersectedPerimeter=new I({view:s,attached:!0,width:e.perimeterLineWidth,color:e.intersectingLineColor,polygonOffset:!0,renderOccluded:$.OccludeAndTransparent}),this._projectionLines=new I({view:s,attached:!0,width:e.projectionLineWidth,color:e.projectionLineColor,stipplePattern:Gt(e.projectionLineStippleSize),polygonOffset:!0,renderOccluded:$.OccludeAndTransparent}),this._measurementArea=new fs({view:s,attached:!0,color1:e.areaColor1,color2:e.areaColor2});const i={attached:!0,backgroundColor:ns(.6),textColor:as(),view:s};this._areaLabel=new K({...i,fontSize:O.Large}),this._pathLengthLabel=new K({...i,fontSize:O.Small}),this._cursorSegmentLengthLabel=new K({...i,fontSize:O.Small}),this._perimeterLengthLabel=new K({...i,fontSize:O.Small}),this._handles.add([j(()=>[t.mode,this.visible,t.unit,t.measurementData,t.cursorPoint],()=>this._update(),te),j(()=>{var r;return(r=s.state)==null?void 0:r.camera},()=>this._updateLabels(),te),Dt(()=>this._updateMessageBundle())]),this._updateMessageBundle()}destroy(){this._measurementArea=v(this._measurementArea),this._path=v(this._path),this._intersectedPath=v(this._intersectedPath),this._perimeter=v(this._perimeter),this._intersectedPerimeter=v(this._intersectedPerimeter),this._areaLabel=v(this._areaLabel),this._pathLengthLabel=v(this._pathLengthLabel),this._cursorSegmentLengthLabel=v(this._cursorSegmentLengthLabel),this._perimeterLengthLabel=v(this._perimeterLengthLabel),this._projectionLines=v(this._projectionLines),this._handles=v(this._handles),this.set("view",null)}_update(){if(this.destroyed||!this.view.ready||!this.view.renderCoordsHelper)return;const{analysisViewData:{measurementData:t},analysisViewData:e}=this;U(t)||(this._updateViewData(t,e.path,e.cursorPoint),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())}_updateViewData(t,e,s){const i=e.isValidPolygon,r=t.actualMeasurementMode==="geodesic",a=r?t.geodesicArea:t.area;let n=1;if(a){const d=this._toPreferredAreaUnit(a,this.analysisViewData.unit);n=xt(Math.sqrt(d.value)/Math.sqrt(300)),n*=Math.sqrt(Ot(1,d.unit,"square-meters")),n/=t.unitNormalizer.normalizeDistance(1)}const h={validMeasurement:i,path:e,pathVersion:e.version,cursorPoint:s,measurementData:t,mode:t.actualMeasurementMode,positionsGeographic:t.positionsGeographic,positionsRenderCoords:t.positionsRenderCoords,positionsProjected:t.positionsProjectedWorldCoords,positionsFittedRenderCoords:t.positionsFittedRenderCoords,intersectingSegments:r?t.geodesicIntersectingSegments:t.intersectingSegments,triangleIndices:r?t.geodesicTriangleIndices:t.triangleIndices,fittingMode:t.fittingMode,areaCentroid:r?t.geodesicAreaCentroidRenderCoords:t.areaCentroidRenderCoords,pathLengthLabelSegmentIndex:i?0:e.numVertices-2,perimeterLengthLabelSegmentIndex:0,checkerSize:n};this._set("viewData",h)}_updateOrigin(){const t=this.viewData;se(t.positionsRenderCoords,this._origin),zt(this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform}_createSegments(t){const e=this.viewData,s=e.path,i=this.view.renderCoordsHelper.spatialReference,r=e.mode,a=[],n=[],h=[],d=e.validMeasurement?s.numVertices:s.numVertices-1;for(let u=0;u<d;++u){const p=e[t][u],m=e[t][(u+1)%s.numVertices];let g=null;switch(r){case"euclidean":g=new re(p,m);break;case"geodesic":g=new Me(p,m,i)}e.intersectingSegments.has(u)?h.push(g):n.push(g),a.push(g)}return{all:a,nonIntersecting:n,intersecting:h}}_updatePathSegments(){const{view:{renderCoordsHelper:t},viewData:e,visible:s}=this,i=this._createSegments("positionsRenderCoords"),{cursorPoint:r,mode:a,path:n}=e,h=!n.isValidPolygon,d=t.spatialReference;if(this._cursorSegment=null,n.numVertices>0&&h&&_(r)&&t.toRenderCoords(r,this._cursorPositionRenderSpace)){const u=e.positionsRenderCoords[n.numVertices-1],p=this._cursorPositionRenderSpace;let m=null;switch(a){case"euclidean":m=new re(u,p);break;case"geodesic":m=new Me(u,p,d)}i.nonIntersecting.push(m),this._cursorSegment=m}this._path.setGeometryFromSegments(i.nonIntersecting,this._origin),this._path.visible=s,this._intersectedPath.setGeometryFromSegments(i.intersecting,this._origin),this._intersectedPath.visible=s,this._pathSegments=i.all}_updatePerimeterSegments(){const t=this.visible&&this.viewData.mode==="euclidean",e=this._createSegments("positionsFittedRenderCoords");this._perimeter.setGeometryFromSegments(e.nonIntersecting,this._origin),this._perimeter.visible=t,this._intersectedPerimeter.setGeometryFromSegments(e.intersecting,this._origin),this._intersectedPerimeter.visible=t,this._perimeterSegments=e.all}_updateArea(){const t=this.viewData;switch(t.mode){case"euclidean":this._updateAreaEuclidean(t);break;case"geodesic":this._updateAreaGeodesic()}}_updateAreaEuclidean(t){const e=this.visible;t.validMeasurement&&t.intersectingSegments.size===0&&t.triangleIndices?(this._measurementArea.geometry={uv:t.positionsProjected,position:t.positionsFittedRenderCoords,triangleIndices:t.triangleIndices},this._measurementArea.size=[t.checkerSize,t.checkerSize],this._measurementArea.visible=e):this._measurementArea.visible=!1}_updateAreaGeodesic(){this._measurementArea.visible=!1}_updateProjectionLines(){const t=this.viewData,e=this.visible,s=t.path,i=t.mode;if(s.numVertices>0&&t.validMeasurement&&i==="euclidean"){const r=[];for(let a=0;a<s.numVertices;++a){const n=c();J(n,t.positionsRenderCoords[a],this._origin);const h=c();J(h,t.positionsFittedRenderCoords[a],this._origin),r.push([n,h])}this._projectionLines.geometry=r,this._projectionLines.visible=e}else this._projectionLines.geometry=null,this._projectionLines.visible=!1}_updateLabels(){if(this.destroyed)return;const{viewData:t}=this,{measurementData:e,mode:s,path:i}=t;if(!i)return;const r=!i.isValidPolygon,a=this.visible,n=this._formatAreaLabel(this.messages,s==="geodesic"?e.geodesicArea:e.area,this.analysisViewData.unit);_(n)?(this._areaLabel.geometry={type:"point",point:t.areaCentroid},this._areaLabel.text=n,this._areaLabel.visible=t.validMeasurement&&t.intersectingSegments.size===0&&a):this._areaLabel.visible=!1,this._set("areaLabel",E(n));const h=this._formatLengthLabel(this.messages,s==="geodesic"?e.geodesicPathLength:e.pathLength,this.analysisViewData.unit);if(_(h)&&t.pathLengthLabelSegmentIndex>=0&&t.pathLengthLabelSegmentIndex<this._pathSegments.length){const g=this._pathSegments[t.pathLengthLabelSegmentIndex],f=_(this._cursorSegment)?this._cursorSegment:ws;this._pathLengthLabel.distance=this._params.labelDistance,this._pathLengthLabel.geometry={type:"corner",left:g,right:f},this._pathLengthLabel.text=h,this._pathLengthLabel.visible=r&&i.numVertices>0&&a}else this._pathLengthLabel.visible=!1;const d=s==="geodesic"?t.measurementData.geodesicCursorSegmentLength:t.measurementData.cursorSegmentLength;if(_(d)){const g=this._formatLengthLabel(this.messages,d,this.analysisViewData.unit);this._cursorSegmentLengthLabel.distance=this._params.labelDistance,this._cursorSegmentLengthLabel.geometry=_(this._cursorSegment)?{type:"segment",segment:this._cursorSegment,sampleLocation:"end"}:null,this._cursorSegmentLengthLabel.anchor="bottom",this._cursorSegmentLengthLabel.text=E(g),this._cursorSegmentLengthLabel.visible=r&&d.value!==0&&a}else this._cursorSegmentLengthLabel.visible=!1;this._cursorSegmentLengthLabel.overlaps(this._pathLengthLabel)&&(this._cursorSegmentLengthLabel.visible=!1),this._pathLengthLabel.overlaps(this._areaLabel)&&(this._pathLengthLabel.visible=!1);const u=t.mode==="geodesic",p=u?e.geodesicPathLength:e.perimeterLength,m=this._formatLengthLabel(this.messages,p,this.analysisViewData.unit);if(this._set("perimeterLengthLabel",E(m)),t.validMeasurement&&t.intersectingSegments.size===0){this._perimeterLengthLabel.distance=this._params.labelDistance,this._perimeterLengthLabel.anchor="top",this._perimeterLengthLabel.text=E(m),this._perimeterLengthLabel.visible=!0;let g=!0;for(let f=0;f<t.path.numVertices;++f){const C=(t.perimeterLengthLabelSegmentIndex+f)%t.path.numVertices,b=u?this._pathSegments[C]:this._perimeterSegments[C];if(g=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:b,sampleLocation:"center"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;g=!1}this._perimeterLengthLabel.visible=g&&a}else this._perimeterLengthLabel.visible=!1}_toPreferredAreaUnit(t,e){return kt(t,this._preferredAreaUnit(t,e))}_preferredAreaUnit(t,e){switch(e){case"metric":return It(t.value,t.unit);case"imperial":return Tt(t.value,t.unit);default:return e}}_preferredLengthUnit(t,e){const s=this._deriveLengthUnitFromAreaUnit(e);switch(s){case"metric":return jt(t.value,t.unit);case"imperial":return Et(t.value,t.unit);default:return s}}_deriveLengthUnitFromAreaUnit(t){switch(t){case"metric":case"ares":case"hectares":return"metric";case"imperial":case"acres":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers"}throw new Error("unhandled area unit")}_formatAreaLabel(t,e,s){return t&&e&&be(t,e,this._preferredAreaUnit(e,s))}_formatLengthLabel(t,e,s){return t&&e&&be(t,e,this._preferredLengthUnit(e,s))}_updateMessageBundle(){this.loadingMessages=!0,Ut("esri/core/t9n/Units").then(t=>{this.messages=t,this.view&&this._update()}).finally(()=>{this.loadingMessages=!1})}};var O;o([l()],S.prototype,"view",void 0),o([l()],S.prototype,"messages",void 0),o([l()],S.prototype,"analysis",void 0),o([l()],S.prototype,"viewData",void 0),o([l()],S.prototype,"analysisViewData",void 0),o([l({readOnly:!0})],S.prototype,"areaLabel",void 0),o([l({readOnly:!0})],S.prototype,"perimeterLengthLabel",void 0),o([l()],S.prototype,"loadingMessages",void 0),o([l()],S.prototype,"visible",null),S=o([Q("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementVisualization")],S),function(t){t[t.Small=12]="Small",t[t.Large=16]="Large"}(O||(O={}));const Ss={validMeasurement:!1,path:null,pathVersion:-1,cursorPoint:null,measurementData:null,mode:null,positionsGeographic:null,positionsRenderCoords:null,positionsProjected:null,positionsFittedRenderCoords:null,intersectingSegments:null,triangleIndices:null,fittingMode:null,areaCentroid:null,pathLengthLabelSegmentIndex:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null},ws=new re(c(),c());let L=class extends Wt(ne){constructor(t){super(t),this.type="area-measurement-view-3d",this.analysis=null,this.measurementData=null,this.lastDraggedVertex=null,this.cursorPoint=null,this.mode=ie.Auto}initialize(){const{analysis:t,view:e}=this;this.path=new A({view:e,areaMeasurement:t}),this.analysisVisualization=new S({view:e,analysis:t,analysisViewData:this}),this.analysisController=new D({view:e,analysis:t,analysisViewData:this})}destroy(){this.analysisController=v(this.analysisController),this.analysisVisualization=v(this.analysisVisualization),this.path.destroy()}get updating(){var t;return!!((t=this.analysisVisualization)!=null&&t.loadingMessages)}get result(){const{measurementData:t}=this;return U(t)?{area:null,mode:null,perimeter:null}:t.actualMeasurementMode==="euclidean"?{area:t.area,perimeter:t.perimeterLength,mode:"euclidean"}:{area:t.geodesicArea,perimeter:t.pathLength,mode:"geodesic"}}get viewData(){return this.analysisVisualization.viewData}get validMeasurement(){return this.path.isValidPolygon}get unit(){return Re(this.analysis.unit,this._defaultUnit)}get testData(){return{visualization:this.analysisVisualization,controller:this.analysisController}}};o([l({readOnly:!0})],L.prototype,"type",void 0),o([l({constructOnly:!0,nonNullable:!0})],L.prototype,"analysis",void 0),o([l()],L.prototype,"updating",null),o([l()],L.prototype,"analysisVisualization",void 0),o([l()],L.prototype,"analysisController",void 0),o([l()],L.prototype,"result",null),o([l()],L.prototype,"measurementData",void 0),o([l()],L.prototype,"viewData",null),o([l()],L.prototype,"validMeasurement",null),o([l()],L.prototype,"path",void 0),o([l()],L.prototype,"lastDraggedVertex",void 0),o([l()],L.prototype,"cursorPoint",void 0),o([l()],L.prototype,"mode",void 0),o([l()],L.prototype,"unit",null),o([l(qt)],L.prototype,"_defaultUnit",void 0),L=o([Q("esri.views.3d.analysis.AreaMeasurementAnalysisView3D")],L);const Cs=L,Is=Object.freeze(Object.defineProperty({__proto__:null,default:Cs},Symbol.toStringTag,{value:"Module"}));export{Is as A,ps as n};
