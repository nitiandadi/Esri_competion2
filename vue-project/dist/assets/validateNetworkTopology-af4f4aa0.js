import{bN as v,nL as c,nM as y,a0 as m,uH as g,c as S}from"./mapviewstore-8a6f290e.js";import"./index-93a23f67.js";async function b(e,t,s){var u;const o=v(e),i=t.toJSON();t.validationSet&&(i.validationSet=JSON.stringify(t.validationSet));const n={...i,returnEdits:!0,f:"json"},r=c({...o.query,...n}),a=y(r,{...s,method:"post"}),f=`${o.path}/validateNetworkTopology`,{data:l}=await m(f,a);if(!l)return null;const d=g.fromJSON(l);return d.serviceEdits=((u=d.serviceEdits)==null?void 0:u.map(p=>({layerId:p.id,editedFeatures:p.editedFeatures})))??[],d}async function J(e,t,s){if(!t.gdbVersion)throw new S("submit-validate-network-topology-job:missing-gdb-version","version is missing");const o=v(e),i=t.toJSON();t.validationSet&&(i.validationSet=JSON.stringify(t.validationSet));const n=y(o.query,{query:c({...i,returnEdits:!0,async:!0,f:"json"}),...s,method:"post"}),r=`${o.path}/validateNetworkTopology`,{data:a}=await m(r,n);return a?a.statusUrl:null}export{J as submitValidateNetworkTopologyJob,b as validateNetworkTopology};
