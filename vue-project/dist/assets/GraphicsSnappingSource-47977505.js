import{m as w,v as b,r as d,D as g,p as k,bb as E,e9 as F,bR as c,q as C,t as h,cx as A,fJ as $,c1 as G,pj as m,cb as R,ce as x,mV as P,kG as I,eT as O,e as a,y as l,b as H,bL as Z,o3 as z}from"./mapviewstore-8a6f290e.js";import{p as L}from"./normalizeUtilsSync-60d2daaf.js";import{g as M}from"./FeatureStore-92853357.js";import{e as q}from"./QueryEngine-d8795282.js";import{y as W}from"./elevationInfoUtils-db1a4384.js";import{q as j,k as T}from"./SnappingManager-e678da87.js";import{i as B,p as D}from"./queryEngineUtils-e185f7d2.js";import{r as _,a as J,n as f}from"./symbologySnappingCandidates-de7646d1.js";import"./index-93a23f67.js";import"./BoundsStore-ebfef852.js";import"./PooledRBush-d915efbf.js";import"./optimizedFeatureQueryEngineAdapter-2b234c6e.js";import"./centroid-15f2128f.js";import"./utils-756c69af.js";import"./projectionSupport-2ac8e0ed.js";import"./json-48e3ea08.js";import"./QueryEngineResult-555e15c4.js";import"./WhereClause-1d488167.js";import"./executionError-fb3f283a.js";import"./utils-da1501b7.js";import"./ClassBreaksDefinition-e0623088.js";import"./QueryEngineCapabilities-42e44ded.js";import"./timeSupport-592d163d.js";import"./geometry2dUtils-3b519363.js";import"./viewUtils-4b1f07e9.js";import"./VertexSnappingCandidate-8a726754.js";import"./PointSnappingHint-65883099.js";const v="graphics-collections";let n=class extends w(b){get updating(){return this.updatingHandles.updating}get _hasZ(){const e=this.view;return d(e)&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:e}=this,{layer:t}=this.layerSource,s=d(e)&&e.type==="3d";if(!s||t.type==="map-notes")return _();const i=async(r,o)=>(await Z(e.whenLayerView(t),o)).elevationAlignPointsInFeatures(r,o);return _(s,{elevationInfo:t.elevationInfo,alignPointsInFeatures:i,spatialReference:e.spatialReference})}get _snappingElevationFilter(){const{view:e}=this,t=d(e)&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes";return J(t)}get _symbologySnappingFetcher(){const{view:e}=this,{layer:t}=this.layerSource,s=d(e)&&e.type==="3d",i=this._extrudedPolygonSymbolsCount>0;return s&&t.type!=="map-notes"&&i?f(i,async(r,o)=>{const p=await e.whenLayerView(t);return c(o),p.queryForSymbologySnapping({candidates:r,spatialReference:e.spatialReference},o)}):f()}constructor(e){super(e),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0}destroy(){for(const e of this._pendingAdds)e.task.abort();this._pendingAdds.length=0,this._mapSources(e=>this._destroySource(e))}initialize(){this.updatingHandles.add(()=>this.getGraphicsLayers(),s=>{this.updatingHandles.removeHandles(v);for(const i of s)this._addMany(i.graphics.toArray()),this.handles.add([i.on("graphic-update",r=>this._onGraphicUpdate(r)),this.updatingHandles.addOnCollectionChange(()=>i.graphics,r=>this._onGraphicsChanged(r))],v)},g);const{view:e}=this,{layer:t}=this.layerSource;d(e)&&e.type==="3d"&&t.type!=="map-notes"&&this.addHandles([e.elevationProvider.on("elevation-change",({context:s})=>{W(s,t.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),k(()=>t.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),g),E(()=>t,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(e,t){const{point:s}=e,i=await F(this._mapSources(p=>this._fetchCandidatesForSource(p,e,t)));c(t);const r=this._getGroundElevation,o=i.flat().map(p=>B(p,r));return j(s,o),o}get _getGroundElevation(){return D(this.view)}async _fetchCandidatesForSource(e,t,s){var y;const i=T(t,((y=C(this.view))==null?void 0:y.type)??"2d"),r=await e.queryEngine.executeQueryForSnapping(i,s);c(s);const o=await this._snappingElevationAligner.alignCandidates(r.candidates,s);c(s);const p=await this._symbologySnappingFetcher.fetch(o,s);c(s);const S=p.length===0?o:[...o,...p];return this._snappingElevationFilter.filter(i,S)}refresh(){}_onGraphicUpdate(e){if(this.getGraphicsLayers().some(t=>t.graphics.includes(e.graphic)))switch(e.property){case"geometry":case"visible":this._remove(e.graphic),this._addMany([e.graphic])}}_onGraphicsChanged(e){for(const t of e.removed)this._remove(t);this._addMany(e.added)}_addMany(e){const t=[],s=new Map;for(const i of e)h(i.geometry)||(this._needsInitializeProjection(i.geometry.spatialReference)?(t.push(i.geometry.spatialReference),s.set(i.uid,i)):this._add(i));this._createPendingAdd(t,s)}_createPendingAdd(e,t){if(!e.length)return;const s=A(async o=>{await $(e.map(p=>({source:p,dest:this.spatialReference})),{signal:o}),this._markLoadedSpatialReferences(e);for(const[,p]of t)this._add(p)});this.updatingHandles.addPromise(s.promise);const i={task:s,graphics:t},r=()=>z(this._pendingAdds,i);s.promise.then(r,r),this._pendingAdds.push(i)}_markLoadedSpatialReferences(e){for(const t of e)t.wkid!=null&&this._loadedWkids.add(t.wkid),t.wkt!=null&&this._loadedWkts.add(t.wkt)}_add(e){if(h(e.geometry)||!e.visible)return;let t=e.geometry;if(t.type==="mesh")return;t.type==="extent"&&(t=G.fromExtent(t));const s=this._ensureSource(t.type);if(h(s))return;const i=this._createOptimizedFeature(e.uid,t);h(i)||(s.featureStore.add(i),m(e.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(e){return(e.wkid==null||!this._loadedWkids.has(e.wkid))&&(e.wkt==null||!this._loadedWkts.has(e.wkt))&&!R(e,this.spatialReference)}_createOptimizedFeature(e,t){const s=x(L(t),this.spatialReference);if(!s)return null;const i=this._ensureGeometryHasZ(s),r=P(i,this._hasZ,!1);return new I(r,{[u]:e},null,e)}_ensureGeometryHasZ(e){if(!this._hasZ)return e;const t=i=>{for(;i.length<3;)i.push(0)},s=e.clone();switch(s.hasZ=!0,s.type){case"point":s.z=s.z??0;break;case"multipoint":s.points.forEach(t);break;case"polyline":s.paths.forEach(i=>i.forEach(t));break;case"polygon":s.rings.forEach(i=>i.forEach(t))}return s}_ensureSource(e){const t=this._sources[e];if(d(t))return t;const s=this._createSource(e);return this._sources[e]=s,s}_createSource(e){const t=O.toJSON(e),s=this._hasZ,i=new M({geometryType:t,hasZ:s,hasM:!1});return{featureStore:i,queryEngine:new q({featureStore:i,fields:[{name:u,type:"esriFieldTypeOID",alias:u}],geometryType:t,hasM:!1,hasZ:s,objectIdField:u,spatialReference:this.spatialReference,scheduler:d(this.view)&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:e}}_remove(e){this._mapSources(t=>this._removeFromSource(t,e));for(const t of this._pendingAdds)t.graphics.delete(e.uid),t.graphics.size===0&&t.task.abort()}_removeFromSource(e,t){const s=t.uid;e.featureStore.has(s)&&(e.featureStore.removeById(t.uid),m(t.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(e){e.queryEngine.destroy(),this._sources[e.type]=null}_mapSources(e){const{point:t,polygon:s,polyline:i,multipoint:r}=this._sources,o=[];return d(t)&&o.push(e(t)),d(s)&&o.push(e(s)),d(i)&&o.push(e(i)),d(r)&&o.push(e(r)),o}};a([l()],n.prototype,"getGraphicsLayers",void 0),a([l({constructOnly:!0})],n.prototype,"layerSource",void 0),a([l({constructOnly:!0})],n.prototype,"spatialReference",void 0),a([l({constructOnly:!0})],n.prototype,"view",void 0),a([l({readOnly:!0})],n.prototype,"updating",null),a([l({readOnly:!0})],n.prototype,"availability",void 0),a([l()],n.prototype,"_hasZ",null),a([l()],n.prototype,"_snappingElevationAligner",null),a([l()],n.prototype,"_snappingElevationFilter",null),a([l()],n.prototype,"_symbologySnappingFetcher",null),a([l()],n.prototype,"_extrudedPolygonSymbolsCount",void 0),a([l()],n.prototype,"_getGroundElevation",null),n=a([H("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],n);const u="OBJECTID";export{n as GraphicsSnappingSource};
