import{cj as b,gJ as w,k4 as A,k5 as G}from"./mapviewstore-8a6f290e.js";function Z(n,a,e,o){if(o==null||n.hasZ||(o=void 0),n.type==="point")return n.x+=a,n.y+=e,n.hasZ&&o!=null&&(n.z+=o),n;if(n.type==="multipoint"){const x=n.points;for(let i=0;i<x.length;i++)x[i]=B(x[i],a,e,o);return n}if(n.type==="extent")return n.xmin+=a,n.xmax+=a,n.ymin+=e,n.ymax+=e,o!=null&&(n.zmin??(n.zmin=0),n.zmin+=o,n.zmax??(n.zmax=0),n.zmax+=o),n;const r=b(n),t=n.type==="polyline"?n.paths:n.rings;for(let x=0;x<r.length;x++){const i=r[x];for(let s=0;s<i.length;s++)i[s]=B(i[s],a,e,o)}return"paths"in n?n.paths=t:n.rings=t,n}function I(n,a,e,o,r){const t=n.clone(),x=o.resolution;if(t.type==="point"){if(r)Z(t,a*x,-e*x);else{const i=o.state.transform,s=o.state.inverseTransform,l=i[0]*t.x+i[2]*t.y+i[4],y=i[1]*t.x+i[3]*t.y+i[5];t.x=s[0]*(l+a)+s[2]*(y+e)+s[4],t.y=s[1]*(l+a)+s[3]*(y+e)+s[5]}return t}if(t.type==="multipoint"){if(r)Z(t,a*x,-e*x);else{const i=t.points,s=o.state.transform,l=o.state.inverseTransform;for(let y=0;y<i.length;y++){const c=i[y],p=s[0]*c[0]+s[2]*c[1]+s[4],z=s[1]*c[0]+s[3]*c[1]+s[5],f=l[0]*(p+a)+l[2]*(z+e)+l[4],u=l[1]*(p+a)+l[3]*(z+e)+l[5];i[y]=k(c,f,u,void 0)}}return t}if(t.type==="extent"){if(r)Z(t,a*x,-e*x);else{const i=o.state.transform,s=o.state.inverseTransform,l=i[0]*t.xmin+i[2]*t.ymin+i[4],y=i[1]*t.xmin+i[3]*t.ymin+i[5],c=i[0]*t.xmax+i[2]*t.ymax+i[4],p=i[1]*t.xmax+i[3]*t.ymax+i[5];t.xmin=s[0]*(l+a)+s[2]*(y+e)+s[4],t.ymin=s[1]*(l+a)+s[3]*(y+e)+s[5],t.xmax=s[0]*(c+a)+s[2]*(p+e)+s[4],t.ymax=s[1]*(c+a)+s[3]*(p+e)+s[5]}return t}if(r)Z(t,a*x,-e*x);else{const i=b(t),s=t.type==="polyline"?t.paths:t.rings,l=o.state.transform,y=o.state.inverseTransform;for(let c=0;c<i.length;c++){const p=i[c];for(let z=0;z<p.length;z++){const f=p[z],u=l[0]*f[0]+l[2]*f[1]+l[4],h=l[1]*f[0]+l[3]*f[1]+l[5],v=y[0]*(u+a)+y[2]*(h+e)+y[4],g=y[1]*(u+a)+y[3]*(h+e)+y[5];p[z]=k(f,v,g,void 0)}}"paths"in t?t.paths=s:t.rings=s}return t}function K(n,a,e,o){if(n.type==="point"){const{x:f,y:u}=n,h=o?o[0]:f,v=o?o[1]:u,g=n.clone(),M=(f-h)*a+h,m=(u-v)*e+v;return g.x=M,g.y=m,g}if(n.type==="multipoint"){const f=b(n),u=w(),[h,v,g,M]=A(u,[f]),m=o?o[0]:(h+g)/2,d=o?o[1]:(M+v)/2,T=n.clone(),j=T.points;for(let q=0;q<j.length;q++){const J=j[q],[C,D]=J,E=(C-m)*a+m,F=(D-d)*e+d;j[q]=k(J,E,F,void 0)}return T}if(n.type==="extent"){const{xmin:f,xmax:u,ymin:h,ymax:v}=n,g=o?o[0]:(f+u)/2,M=o?o[1]:(v+h)/2,m=n.clone();if(m.xmin=(f-g)*a+g,m.ymax=(v-M)*e+M,m.xmax=(u-g)*a+g,m.ymin=(h-M)*e+M,m.xmin>m.xmax){const d=m.xmin,T=m.xmax;m.xmin=T,m.xmax=d}if(m.ymin>m.ymax){const d=m.ymin,T=m.ymax;m.ymin=T,m.ymax=d}return m}const r=b(n),t=w(),[x,i,s,l]=A(t,r),y=o?o[0]:(x+s)/2,c=o?o[1]:(l+i)/2,p=n.clone(),z=p.type==="polyline"?p.paths:p.rings;for(let f=0;f<r.length;f++){const u=r[f];for(let h=0;h<u.length;h++){const v=u[h],[g,M]=v,m=(g-y)*a+y,d=(M-c)*e+c;z[f][h]=k(v,m,d,void 0)}}return"paths"in p?p.paths=z:p.rings=z,p}function L(n,a,e,o,r,t){const x=Math.sqrt((e-n)*(e-n)+(o-a)*(o-a));return Math.sqrt((r-n)*(r-n)+(t-a)*(t-a))/x}function N(n,a,e,o=!1){const r=Math.atan2(a.y-e.y,a.x-e.x)-Math.atan2(n.y-e.y,n.x-e.x),t=Math.atan2(Math.sin(r),Math.cos(r));return o?t:G(t)}function B(n,a,e,o){return k(n,n[0]+a,n[1]+e,n[2]!=null&&o!=null?n[2]+o:void 0)}function k(n,a,e,o){const r=[a,e];return n.length>2&&r.push(o??n[2]),n.length>3&&r.push(n[3]),r}export{N as a,Z as i,L as m,I as r,K as s};
