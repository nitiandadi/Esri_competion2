import{fg as $,eB as C,kX as q,kY as z,bR as v,t as m,pH as F,j6 as G,pI as O,r as k,a4 as B}from"./mapviewstore-8a6f290e.js";import{a as E}from"./elevationInfoUtils-db1a4384.js";async function A(s,d,p,f,r){const{elevationProvider:h,renderCoordsHelper:c,spatialReference:b}=s,{elevationInfo:y}=d,I=q(y,!0),w=await z(I,b,r);v(r);const i=[],u=new Set,l=new Set;for(const{objectId:e,points:a}of f){const n=p(e);if(m(n)){for(const o of a)i.push(o[2]);u.add(e);continue}n.isDraped&&l.add(e);const t=n.graphic.geometry;R.setFromElevationInfo(E(t,y)),R.updateFeatureExpressionInfoContext(w,n.graphic,d),g.spatialReference=s.spatialReference;for(const{x:o,y:x,z:D}of a)g.x=o,g.y=x,g.z=D??0,F(g,h,R,c,S),i.push(S.z)}return{elevations:i,drapedObjectIds:l,failedObjectIds:u}}const R=new G,g=$(0,0,0,C.WGS84),S=new O;async function M(s,d,p){if(m(s)||d.candidates.length===0)return j;const f=s.graphics3DGraphicsByObjectID??s.graphics3DGraphics,r=[],h=[],{renderer:c}=s,b=k(c)&&"arcadeRequired"in c&&c.arcadeRequired?B():null,y=async(e,{graphic:a,graphics3DSymbol:n})=>{const t=await b,o=await s.getRenderingInfoAsync(a,c,t,{signal:p});return m(o)?[]:n.queryForSnapping(e,w,o,p)},{candidates:I,spatialReference:w}=d;for(let e=0;e<I.length;++e){const a=I[e],{objectId:n}=a,t=typeof n=="number"?f==null?void 0:f.get(n):void 0;if(m(t))continue;const{graphics3DSymbol:o}=t;o.symbologySnappingSupported&&(r.push(y(a,t)),h.push(e))}if(r.length===0)return j;const i=await Promise.all(r);v(p);const u=[],l=[];for(let e=0;e<i.length;++e){const a=i[e],n=h[e];for(const t of a)u.push(t),l.push(n)}return{candidates:u,sourceCandidateIndices:l}}const j={candidates:[],sourceCandidateIndices:[]};export{M as a,A as m};
