import{fp as l,dd as m,fF as g,iT as x,tP as _,e as V,b as v,tQ as b,hz as L,cq as h,bR as P,t as C,cg as S,s_ as j,hK as T,tR as $,tS as E,fh as p}from"./mapviewstore-8a6f290e.js";import{D as y}from"./QueryEngineResult-555e15c4.js";import"./index-93a23f67.js";import"./WhereClause-1d488167.js";import"./executionError-fb3f283a.js";import"./utils-da1501b7.js";import"./ClassBreaksDefinition-e0623088.js";import"./projectionSupport-2ac8e0ed.js";import"./json-48e3ea08.js";import"./utils-756c69af.js";const I=1e3;function N(t,e,s){const n=x(),o=_(n);return l(o,o,t,.5),l(o,o,e,.5),n[3]=m(o,t),g(o,o,s),n}let f=class{constructor(){this._idToComponent=new Map,this._components=new b(t=>t.bounds),this._edges=new b(t=>t.bounds),this._tmpLineSegment=L(),this._tmpP1=h(),this._tmpP2=h(),this._tmpP3=h(),this.remoteClient=null}async fetchCandidates(t,e){await Promise.resolve(),P(e),await this._ensureEdgeLocations(t,e);const s=[];return this._edges.forEachNeighbor(n=>(this._addCandidates(t,n,s),s.length<I),t.bounds),{result:{candidates:s}}}async _ensureEdgeLocations(t,e){const s=[];if(this._components.forEachNeighbor(i=>{if(C(i.info)){const{id:c,uid:d}=i;s.push({id:c,uid:d})}return!0},t.bounds),!s.length)return;const n={components:s},o=await this.remoteClient.invoke("fetchAllEdgeLocations",n,S(e,{}));for(const i of o.components)this._setFetchEdgeLocations(i)}async add(t){const e=new u(t.id,t.bounds);return this._idToComponent.set(e.id,e),this._components.add([e]),{result:{}}}async remove(t){const e=this._idToComponent.get(t.id);if(e){const s=[];this._edges.forEachNeighbor(n=>(n.component===e&&s.push(n),!0),e.bounds),this._edges.remove(s),this._components.remove([e]),this._idToComponent.delete(e.id)}return{result:{}}}_setFetchEdgeLocations(t){const e=this._idToComponent.get(t.id);if(C(e)||t.uid!==e.uid)return;const s=j.createView(t.locations),n=new Array(s.count),o=h(),i=h();for(let a=0;a<s.count;a++){s.position0.getVec(a,o),s.position1.getVec(a,i);const r=N(o,i,t.origin),w=new R(e,a,r);n[a]=w}this._edges.add(n);const{objectIds:c,origin:d}=t;e.info={locations:s,objectIds:c,origin:d}}_addCandidates(t,e,s){const{info:n}=e.component,{origin:o,objectIds:i}=n,c=n.locations,d=c.position0.getVec(e.index,this._tmpP1),a=c.position1.getVec(e.index,this._tmpP2);g(d,d,o),g(a,a,o);const r=i[c.componentIndex.get(e.index)];this._addEdgeCandidate(t,r,d,a,s),this._addVertexCandidate(t,r,d,s),this._addVertexCandidate(t,r,a,s)}_addEdgeCandidate(t,e,s,n,o){if(!(t.types&y.EDGE))return;const i=_(t.bounds),c=T(s,n,this._tmpLineSegment),d=$(c,i,this._tmpP3);E(t.bounds,d)&&o.push({type:"edge",objectId:e,target:p(d),distance:m(i,d),start:p(s),end:p(n)})}_addVertexCandidate(t,e,s,n){if(!(t.types&y.VERTEX))return;const o=_(t.bounds);E(t.bounds,s)&&n.push({type:"vertex",objectId:e,target:p(s),distance:m(o,s)})}};f=V([v("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")],f);const W=f;class u{constructor(e,s){this.id=e,this.bounds=s,this.info=null,this.uid=++u.uid}}u.uid=0;class R{constructor(e,s,n){this.component=e,this.index=s,this.bounds=n}}export{W as default};
